[{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IncompetentDev"},"content":"package duke;","lastModifiedDate":"2022-02-11"},{"lineNumber":2,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":3,"author":{"gitId":"IncompetentDev"},"content":"import duke.commands.ByeCommand;","lastModifiedDate":"2022-02-17"},{"lineNumber":4,"author":{"gitId":"IncompetentDev"},"content":"import duke.commands.Command;","lastModifiedDate":"2022-02-17"},{"lineNumber":5,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":6,"author":{"gitId":"IncompetentDev"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-01-28"},{"lineNumber":7,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":9,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":10,"author":{"gitId":"IncompetentDev"},"content":"    // Fixed string output for startup and exit","lastModifiedDate":"2022-02-07"},{"lineNumber":11,"author":{"gitId":"IncompetentDev"},"content":"    public static final String LOGO \u003d","lastModifiedDate":"2022-02-07"},{"lineNumber":12,"author":{"gitId":"IncompetentDev"},"content":"            \" ____        _        \\n\"","lastModifiedDate":"2022-02-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"            + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2019-07-29"},{"lineNumber":17,"author":{"gitId":"IncompetentDev"},"content":"    public static final String WELCOME_BANNER \u003d","lastModifiedDate":"2022-02-07"},{"lineNumber":18,"author":{"gitId":"IncompetentDev"},"content":"            \"____________________________________________________________\"","lastModifiedDate":"2022-02-07"},{"lineNumber":19,"author":{"gitId":"IncompetentDev"},"content":"            + \"\\nHello! I\u0027m Dook!\"","lastModifiedDate":"2022-01-28"},{"lineNumber":20,"author":{"gitId":"IncompetentDev"},"content":"            + \"\\nWhat can I do for you?\"","lastModifiedDate":"2022-01-28"},{"lineNumber":21,"author":{"gitId":"IncompetentDev"},"content":"            + \"\\n____________________________________________________________\";","lastModifiedDate":"2022-02-07"},{"lineNumber":22,"author":{"gitId":"IncompetentDev"},"content":"    public static final String EXIT_MESSAGE \u003d","lastModifiedDate":"2022-02-07"},{"lineNumber":23,"author":{"gitId":"IncompetentDev"},"content":"            \"____________________________________________________________\"","lastModifiedDate":"2022-02-07"},{"lineNumber":24,"author":{"gitId":"IncompetentDev"},"content":"            + \"\\nBye. Hope to see you again soon!\"","lastModifiedDate":"2022-02-07"},{"lineNumber":25,"author":{"gitId":"IncompetentDev"},"content":"            + \"\\n____________________________________________________________\";","lastModifiedDate":"2022-02-07"},{"lineNumber":26,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":27,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-07"},{"lineNumber":28,"author":{"gitId":"IncompetentDev"},"content":"     * Prints introduction message","lastModifiedDate":"2022-02-07"},{"lineNumber":29,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-07"},{"lineNumber":30,"author":{"gitId":"IncompetentDev"},"content":"    public static void printIntro() {","lastModifiedDate":"2022-02-07"},{"lineNumber":31,"author":{"gitId":"IncompetentDev"},"content":"        System.out.println(\"Hello from\\n\" + LOGO);","lastModifiedDate":"2022-02-07"},{"lineNumber":32,"author":{"gitId":"IncompetentDev"},"content":"        System.out.println(WELCOME_BANNER);","lastModifiedDate":"2022-02-07"},{"lineNumber":33,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":34,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":35,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-10"},{"lineNumber":36,"author":{"gitId":"IncompetentDev"},"content":"     * Prints exit message","lastModifiedDate":"2022-02-10"},{"lineNumber":37,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-10"},{"lineNumber":38,"author":{"gitId":"IncompetentDev"},"content":"    public static void printExit() {","lastModifiedDate":"2022-02-10"},{"lineNumber":39,"author":{"gitId":"IncompetentDev"},"content":"        System.out.println(EXIT_MESSAGE);","lastModifiedDate":"2022-02-10"},{"lineNumber":40,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-10"},{"lineNumber":41,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":42,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-10"},{"lineNumber":43,"author":{"gitId":"IncompetentDev"},"content":"     * Runs function to start up application","lastModifiedDate":"2022-02-10"},{"lineNumber":44,"author":{"gitId":"IncompetentDev"},"content":"     * @param args not used","lastModifiedDate":"2022-02-10"},{"lineNumber":45,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-10"},{"lineNumber":46,"author":{"gitId":"IncompetentDev"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2022-02-10"},{"lineNumber":47,"author":{"gitId":"IncompetentDev"},"content":"        printIntro();","lastModifiedDate":"2022-02-07"},{"lineNumber":48,"author":{"gitId":"IncompetentDev"},"content":"        loopWhileInput();","lastModifiedDate":"2022-02-10"},{"lineNumber":49,"author":{"gitId":"IncompetentDev"},"content":"        printExit();","lastModifiedDate":"2022-02-10"},{"lineNumber":50,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-10"},{"lineNumber":51,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":52,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-10"},{"lineNumber":53,"author":{"gitId":"IncompetentDev"},"content":"     * Takes in input and passes input to a Parser.","lastModifiedDate":"2022-02-10"},{"lineNumber":54,"author":{"gitId":"IncompetentDev"},"content":"     * Subsequently, passes the Parser object to a Handler, which executes the commands.","lastModifiedDate":"2022-02-10"},{"lineNumber":55,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-10"},{"lineNumber":56,"author":{"gitId":"IncompetentDev"},"content":"    public static void loopWhileInput() {","lastModifiedDate":"2022-02-10"},{"lineNumber":57,"author":{"gitId":"IncompetentDev"},"content":"        boolean hasInput \u003d true;","lastModifiedDate":"2022-02-07"},{"lineNumber":58,"author":{"gitId":"IncompetentDev"},"content":"        Scanner scannerInput \u003d new Scanner(System.in);","lastModifiedDate":"2022-02-10"},{"lineNumber":59,"author":{"gitId":"IncompetentDev"},"content":"        Handler handler \u003d new Handler();","lastModifiedDate":"2022-02-10"},{"lineNumber":60,"author":{"gitId":"IncompetentDev"},"content":"        while (hasInput) {","lastModifiedDate":"2022-02-07"},{"lineNumber":61,"author":{"gitId":"IncompetentDev"},"content":"            String userInput \u003d scannerInput.nextLine();","lastModifiedDate":"2022-01-28"},{"lineNumber":62,"author":{"gitId":"IncompetentDev"},"content":"            Parser argumentParser \u003d new Parser();","lastModifiedDate":"2022-02-10"},{"lineNumber":63,"author":{"gitId":"IncompetentDev"},"content":"            Command userCommand \u003d argumentParser.parseInput(userInput);","lastModifiedDate":"2022-02-17"},{"lineNumber":64,"author":{"gitId":"IncompetentDev"},"content":"            if (userCommand instanceof ByeCommand) {","lastModifiedDate":"2022-02-17"},{"lineNumber":65,"author":{"gitId":"IncompetentDev"},"content":"                hasInput\u003dfalse;","lastModifiedDate":"2022-02-17"},{"lineNumber":66,"author":{"gitId":"IncompetentDev"},"content":"            }","lastModifiedDate":"2022-01-28"},{"lineNumber":67,"author":{"gitId":"IncompetentDev"},"content":"            if (userCommand \u003d\u003d null) {","lastModifiedDate":"2022-02-17"},{"lineNumber":68,"author":{"gitId":"IncompetentDev"},"content":"                continue;","lastModifiedDate":"2022-02-17"},{"lineNumber":69,"author":{"gitId":"IncompetentDev"},"content":"            }","lastModifiedDate":"2022-02-17"},{"lineNumber":70,"author":{"gitId":"IncompetentDev"},"content":"            handler.executeGivenCommand(userCommand);","lastModifiedDate":"2022-02-17"},{"lineNumber":71,"author":{"gitId":"IncompetentDev"},"content":"        }","lastModifiedDate":"2022-01-28"},{"lineNumber":72,"author":{"gitId":"IncompetentDev"},"content":"        scannerInput.close();","lastModifiedDate":"2022-01-28"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":74,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-10"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"IncompetentDev":68,"-":7}},{"path":"src/main/java/duke/Handler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IncompetentDev"},"content":"package duke;","lastModifiedDate":"2022-02-11"},{"lineNumber":2,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":3,"author":{"gitId":"IncompetentDev"},"content":"import duke.commands.Command;","lastModifiedDate":"2022-02-17"},{"lineNumber":4,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":5,"author":{"gitId":"IncompetentDev"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2022-02-18"},{"lineNumber":6,"author":{"gitId":"IncompetentDev"},"content":"import duke.tasks.Event;","lastModifiedDate":"2022-02-18"},{"lineNumber":7,"author":{"gitId":"IncompetentDev"},"content":"import duke.tasks.Task;","lastModifiedDate":"2022-02-11"},{"lineNumber":8,"author":{"gitId":"IncompetentDev"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2022-02-18"},{"lineNumber":9,"author":{"gitId":"IncompetentDev"},"content":"import duke.tasks.Todo;","lastModifiedDate":"2022-02-18"},{"lineNumber":10,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":11,"author":{"gitId":"IncompetentDev"},"content":"import java.io.File;","lastModifiedDate":"2022-02-18"},{"lineNumber":12,"author":{"gitId":"IncompetentDev"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2022-02-18"},{"lineNumber":13,"author":{"gitId":"IncompetentDev"},"content":"import java.io.FileWriter;","lastModifiedDate":"2022-02-18"},{"lineNumber":14,"author":{"gitId":"IncompetentDev"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-18"},{"lineNumber":15,"author":{"gitId":"IncompetentDev"},"content":"import java.util.*;","lastModifiedDate":"2022-02-18"},{"lineNumber":16,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":17,"author":{"gitId":"IncompetentDev"},"content":"public class Handler {","lastModifiedDate":"2022-02-07"},{"lineNumber":18,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":19,"author":{"gitId":"IncompetentDev"},"content":"    private TaskList\u003cTask\u003e taskList;","lastModifiedDate":"2022-02-18"},{"lineNumber":20,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":21,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-10"},{"lineNumber":22,"author":{"gitId":"IncompetentDev"},"content":"     * Initialises a Handler instance with an empty lists of task","lastModifiedDate":"2022-02-10"},{"lineNumber":23,"author":{"gitId":"IncompetentDev"},"content":"     * Functions as a singleton class (without the appropriate code), instantiate only one","lastModifiedDate":"2022-02-10"},{"lineNumber":24,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-10"},{"lineNumber":25,"author":{"gitId":"IncompetentDev"},"content":"    public Handler() {","lastModifiedDate":"2022-02-07"},{"lineNumber":26,"author":{"gitId":"IncompetentDev"},"content":"        this.taskList \u003d new TaskList\u003cTask\u003e();","lastModifiedDate":"2022-02-18"},{"lineNumber":27,"author":{"gitId":"IncompetentDev"},"content":"        loadOnStartup();","lastModifiedDate":"2022-02-18"},{"lineNumber":28,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":29,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":30,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-07"},{"lineNumber":31,"author":{"gitId":"IncompetentDev"},"content":"     * Execute a command based on user input. Passes off control to relevant functions","lastModifiedDate":"2022-02-10"},{"lineNumber":32,"author":{"gitId":"IncompetentDev"},"content":"     *","lastModifiedDate":"2022-02-07"},{"lineNumber":33,"author":{"gitId":"IncompetentDev"},"content":"     * @param userCommand the user command to run","lastModifiedDate":"2022-02-17"},{"lineNumber":34,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-10"},{"lineNumber":35,"author":{"gitId":"IncompetentDev"},"content":"    public void executeGivenCommand(Command userCommand) {","lastModifiedDate":"2022-02-17"},{"lineNumber":36,"author":{"gitId":"IncompetentDev"},"content":"        userCommand.setTaskList(this.taskList);","lastModifiedDate":"2022-02-17"},{"lineNumber":37,"author":{"gitId":"IncompetentDev"},"content":"        userCommand.execute();","lastModifiedDate":"2022-02-17"},{"lineNumber":38,"author":{"gitId":"IncompetentDev"},"content":"        if (taskList.getListHasChanged()) {","lastModifiedDate":"2022-02-18"},{"lineNumber":39,"author":{"gitId":"IncompetentDev"},"content":"            boolean successfulWrite \u003d writeListToFile();","lastModifiedDate":"2022-02-18"},{"lineNumber":40,"author":{"gitId":"IncompetentDev"},"content":"            boolean isListDifferent \u003d !successfulWrite;","lastModifiedDate":"2022-02-18"},{"lineNumber":41,"author":{"gitId":"IncompetentDev"},"content":"            taskList.setListHasChanged(isListDifferent);","lastModifiedDate":"2022-02-18"},{"lineNumber":42,"author":{"gitId":"IncompetentDev"},"content":"        }","lastModifiedDate":"2022-02-18"},{"lineNumber":43,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":44,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":45,"author":{"gitId":"IncompetentDev"},"content":"    private boolean writeListToFile() {","lastModifiedDate":"2022-02-18"},{"lineNumber":46,"author":{"gitId":"IncompetentDev"},"content":"        //Create the directory","lastModifiedDate":"2022-02-18"},{"lineNumber":47,"author":{"gitId":"IncompetentDev"},"content":"        File directory \u003d new File(\"./data\");","lastModifiedDate":"2022-02-18"},{"lineNumber":48,"author":{"gitId":"IncompetentDev"},"content":"        directory.mkdir();","lastModifiedDate":"2022-02-18"},{"lineNumber":49,"author":{"gitId":"IncompetentDev"},"content":"        File fileToWriteTo \u003d new File(\"./data/duke.txt\");","lastModifiedDate":"2022-02-18"},{"lineNumber":50,"author":{"gitId":"IncompetentDev"},"content":"        try {","lastModifiedDate":"2022-02-18"},{"lineNumber":51,"author":{"gitId":"IncompetentDev"},"content":"            fileToWriteTo.createNewFile();","lastModifiedDate":"2022-02-18"},{"lineNumber":52,"author":{"gitId":"IncompetentDev"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-18"},{"lineNumber":53,"author":{"gitId":"IncompetentDev"},"content":"            System.out.println(\"IO Error occured! No changes were made to duke.txt\");","lastModifiedDate":"2022-02-18"},{"lineNumber":54,"author":{"gitId":"IncompetentDev"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2022-02-18"},{"lineNumber":55,"author":{"gitId":"IncompetentDev"},"content":"            return false;","lastModifiedDate":"2022-02-18"},{"lineNumber":56,"author":{"gitId":"IncompetentDev"},"content":"        }","lastModifiedDate":"2022-02-18"},{"lineNumber":57,"author":{"gitId":"IncompetentDev"},"content":"        try {","lastModifiedDate":"2022-02-18"},{"lineNumber":58,"author":{"gitId":"IncompetentDev"},"content":"            //overwrite data","lastModifiedDate":"2022-02-18"},{"lineNumber":59,"author":{"gitId":"IncompetentDev"},"content":"            FileWriter writer \u003d new FileWriter(fileToWriteTo, false);","lastModifiedDate":"2022-02-18"},{"lineNumber":60,"author":{"gitId":"IncompetentDev"},"content":"            for (int i \u003d 0; i\u003cthis.taskList.size(); i++) {","lastModifiedDate":"2022-02-18"},{"lineNumber":61,"author":{"gitId":"IncompetentDev"},"content":"                Queue\u003cString\u003e infoToWrite \u003d new LinkedList\u003cString\u003e();","lastModifiedDate":"2022-02-18"},{"lineNumber":62,"author":{"gitId":"IncompetentDev"},"content":"                Task task \u003d this.taskList.get(i);","lastModifiedDate":"2022-02-18"},{"lineNumber":63,"author":{"gitId":"IncompetentDev"},"content":"                task.getFileWriterFormatString(infoToWrite);","lastModifiedDate":"2022-02-18"},{"lineNumber":64,"author":{"gitId":"IncompetentDev"},"content":"                String stringToWrite \u003d infoToWrite.poll();","lastModifiedDate":"2022-02-18"},{"lineNumber":65,"author":{"gitId":"IncompetentDev"},"content":"                // no information to write to begin with","lastModifiedDate":"2022-02-18"},{"lineNumber":66,"author":{"gitId":"IncompetentDev"},"content":"                if (stringToWrite \u003d\u003d null) {","lastModifiedDate":"2022-02-18"},{"lineNumber":67,"author":{"gitId":"IncompetentDev"},"content":"                    continue;","lastModifiedDate":"2022-02-18"},{"lineNumber":68,"author":{"gitId":"IncompetentDev"},"content":"                }","lastModifiedDate":"2022-02-18"},{"lineNumber":69,"author":{"gitId":"IncompetentDev"},"content":"                while (infoToWrite.peek() !\u003d null) {","lastModifiedDate":"2022-02-18"},{"lineNumber":70,"author":{"gitId":"IncompetentDev"},"content":"                    //delimiter","lastModifiedDate":"2022-02-18"},{"lineNumber":71,"author":{"gitId":"IncompetentDev"},"content":"                    stringToWrite +\u003d \" | \";","lastModifiedDate":"2022-02-18"},{"lineNumber":72,"author":{"gitId":"IncompetentDev"},"content":"                    String infoBit\u003d infoToWrite.poll();","lastModifiedDate":"2022-02-18"},{"lineNumber":73,"author":{"gitId":"IncompetentDev"},"content":"                    stringToWrite +\u003d infoBit;","lastModifiedDate":"2022-02-18"},{"lineNumber":74,"author":{"gitId":"IncompetentDev"},"content":"                }","lastModifiedDate":"2022-02-18"},{"lineNumber":75,"author":{"gitId":"IncompetentDev"},"content":"                writer.write(stringToWrite+\"\\n\");","lastModifiedDate":"2022-02-18"},{"lineNumber":76,"author":{"gitId":"IncompetentDev"},"content":"            }","lastModifiedDate":"2022-02-18"},{"lineNumber":77,"author":{"gitId":"IncompetentDev"},"content":"            writer.close();","lastModifiedDate":"2022-02-18"},{"lineNumber":78,"author":{"gitId":"IncompetentDev"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-18"},{"lineNumber":79,"author":{"gitId":"IncompetentDev"},"content":"            System.out.println(\"IO Error occured! Incomplete changes/no changes may have been made to duke.txt\");","lastModifiedDate":"2022-02-18"},{"lineNumber":80,"author":{"gitId":"IncompetentDev"},"content":"            return false;","lastModifiedDate":"2022-02-18"},{"lineNumber":81,"author":{"gitId":"IncompetentDev"},"content":"        }","lastModifiedDate":"2022-02-18"},{"lineNumber":82,"author":{"gitId":"IncompetentDev"},"content":"        return true;","lastModifiedDate":"2022-02-18"},{"lineNumber":83,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":84,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":85,"author":{"gitId":"IncompetentDev"},"content":"    // todo: cleanup","lastModifiedDate":"2022-02-18"},{"lineNumber":86,"author":{"gitId":"IncompetentDev"},"content":"    private void loadOnStartup() {","lastModifiedDate":"2022-02-18"},{"lineNumber":87,"author":{"gitId":"IncompetentDev"},"content":"        // load data into taskList","lastModifiedDate":"2022-02-18"},{"lineNumber":88,"author":{"gitId":"IncompetentDev"},"content":"        try {","lastModifiedDate":"2022-02-18"},{"lineNumber":89,"author":{"gitId":"IncompetentDev"},"content":"            File dataFile \u003d new File(\"./data/duke.txt\");","lastModifiedDate":"2022-02-18"},{"lineNumber":90,"author":{"gitId":"IncompetentDev"},"content":"            Scanner dataFileReader \u003d new Scanner(dataFile);","lastModifiedDate":"2022-02-18"},{"lineNumber":91,"author":{"gitId":"IncompetentDev"},"content":"            ArrayList\u003cTask\u003e bufferTaskList \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2022-02-18"},{"lineNumber":92,"author":{"gitId":"IncompetentDev"},"content":"            while (dataFileReader.hasNextLine()) {","lastModifiedDate":"2022-02-18"},{"lineNumber":93,"author":{"gitId":"IncompetentDev"},"content":"                String data \u003d dataFileReader.nextLine();","lastModifiedDate":"2022-02-18"},{"lineNumber":94,"author":{"gitId":"IncompetentDev"},"content":"                String[] splitData \u003d data.split(\" \\\\| \");","lastModifiedDate":"2022-02-18"},{"lineNumber":95,"author":{"gitId":"IncompetentDev"},"content":"                String taskType \u003d splitData[0];","lastModifiedDate":"2022-02-18"},{"lineNumber":96,"author":{"gitId":"IncompetentDev"},"content":"                Task taskToAdd;","lastModifiedDate":"2022-02-18"},{"lineNumber":97,"author":{"gitId":"IncompetentDev"},"content":"                boolean isDone \u003d splitData[1].equals(\"1\") ? true : false;","lastModifiedDate":"2022-02-18"},{"lineNumber":98,"author":{"gitId":"IncompetentDev"},"content":"                switch (taskType) {","lastModifiedDate":"2022-02-18"},{"lineNumber":99,"author":{"gitId":"IncompetentDev"},"content":"                case \"T\":","lastModifiedDate":"2022-02-18"},{"lineNumber":100,"author":{"gitId":"IncompetentDev"},"content":"                    taskToAdd \u003d new Todo(splitData[2]);","lastModifiedDate":"2022-02-18"},{"lineNumber":101,"author":{"gitId":"IncompetentDev"},"content":"                    taskToAdd.setIsDone(isDone);","lastModifiedDate":"2022-02-18"},{"lineNumber":102,"author":{"gitId":"IncompetentDev"},"content":"                    break;","lastModifiedDate":"2022-02-18"},{"lineNumber":103,"author":{"gitId":"IncompetentDev"},"content":"                case \"E\":","lastModifiedDate":"2022-02-18"},{"lineNumber":104,"author":{"gitId":"IncompetentDev"},"content":"                    taskToAdd \u003d new Event(splitData[2], splitData[3]);","lastModifiedDate":"2022-02-18"},{"lineNumber":105,"author":{"gitId":"IncompetentDev"},"content":"                    taskToAdd.setIsDone(isDone);","lastModifiedDate":"2022-02-18"},{"lineNumber":106,"author":{"gitId":"IncompetentDev"},"content":"                    break;","lastModifiedDate":"2022-02-18"},{"lineNumber":107,"author":{"gitId":"IncompetentDev"},"content":"                case \"D\":","lastModifiedDate":"2022-02-18"},{"lineNumber":108,"author":{"gitId":"IncompetentDev"},"content":"                    taskToAdd \u003d new Deadline(splitData[2], splitData[3]);","lastModifiedDate":"2022-02-18"},{"lineNumber":109,"author":{"gitId":"IncompetentDev"},"content":"                    taskToAdd.setIsDone(isDone);","lastModifiedDate":"2022-02-18"},{"lineNumber":110,"author":{"gitId":"IncompetentDev"},"content":"                    break;","lastModifiedDate":"2022-02-18"},{"lineNumber":111,"author":{"gitId":"IncompetentDev"},"content":"                default:","lastModifiedDate":"2022-02-18"},{"lineNumber":112,"author":{"gitId":"IncompetentDev"},"content":"                    taskToAdd \u003d null;","lastModifiedDate":"2022-02-18"},{"lineNumber":113,"author":{"gitId":"IncompetentDev"},"content":"                    break;","lastModifiedDate":"2022-02-18"},{"lineNumber":114,"author":{"gitId":"IncompetentDev"},"content":"                }","lastModifiedDate":"2022-02-18"},{"lineNumber":115,"author":{"gitId":"IncompetentDev"},"content":"                bufferTaskList.add(taskToAdd);","lastModifiedDate":"2022-02-18"},{"lineNumber":116,"author":{"gitId":"IncompetentDev"},"content":"            }","lastModifiedDate":"2022-02-18"},{"lineNumber":117,"author":{"gitId":"IncompetentDev"},"content":"            taskList.addAll(bufferTaskList);","lastModifiedDate":"2022-02-18"},{"lineNumber":118,"author":{"gitId":"IncompetentDev"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2022-02-18"},{"lineNumber":119,"author":{"gitId":"IncompetentDev"},"content":"            // no action needed","lastModifiedDate":"2022-02-18"},{"lineNumber":120,"author":{"gitId":"IncompetentDev"},"content":"        }","lastModifiedDate":"2022-02-18"},{"lineNumber":121,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":122,"author":{"gitId":"IncompetentDev"},"content":"}","lastModifiedDate":"2022-02-07"}],"authorContributionMap":{"IncompetentDev":122}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IncompetentDev"},"content":"package duke;","lastModifiedDate":"2022-02-11"},{"lineNumber":2,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":3,"author":{"gitId":"IncompetentDev"},"content":"import duke.commands.*;","lastModifiedDate":"2022-02-17"},{"lineNumber":4,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":5,"author":{"gitId":"IncompetentDev"},"content":"import duke.exceptions.EmptyCommandException;","lastModifiedDate":"2022-02-11"},{"lineNumber":6,"author":{"gitId":"IncompetentDev"},"content":"import duke.exceptions.InvalidCommandException;","lastModifiedDate":"2022-02-11"},{"lineNumber":7,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":8,"author":{"gitId":"IncompetentDev"},"content":"import java.util.HashMap;","lastModifiedDate":"2022-02-17"},{"lineNumber":9,"author":{"gitId":"IncompetentDev"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2022-02-07"},{"lineNumber":10,"author":{"gitId":"IncompetentDev"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2022-02-07"},{"lineNumber":11,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":12,"author":{"gitId":"IncompetentDev"},"content":"public class Parser {","lastModifiedDate":"2022-02-07"},{"lineNumber":13,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":14,"author":{"gitId":"IncompetentDev"},"content":"    // Used to extract initial command","lastModifiedDate":"2022-02-07"},{"lineNumber":15,"author":{"gitId":"IncompetentDev"},"content":"    private static final Pattern COMMAND_FORMAT \u003d Pattern.compile(\"(\\\\S+)(.*)\");","lastModifiedDate":"2022-02-17"},{"lineNumber":16,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":17,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-07"},{"lineNumber":18,"author":{"gitId":"IncompetentDev"},"content":"     * Empty Parser Constructor","lastModifiedDate":"2022-02-17"},{"lineNumber":19,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-07"},{"lineNumber":20,"author":{"gitId":"IncompetentDev"},"content":"    public Parser() {","lastModifiedDate":"2022-02-07"},{"lineNumber":21,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":22,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":23,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":24,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-07"},{"lineNumber":25,"author":{"gitId":"IncompetentDev"},"content":"     * Parses for user command and returns the proper Command object.","lastModifiedDate":"2022-02-17"},{"lineNumber":26,"author":{"gitId":"IncompetentDev"},"content":"     * @param userInput input from user","lastModifiedDate":"2022-02-11"},{"lineNumber":27,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-07"},{"lineNumber":28,"author":{"gitId":"IncompetentDev"},"content":"    public Command parseInput(String userInput)  {","lastModifiedDate":"2022-02-17"},{"lineNumber":29,"author":{"gitId":"IncompetentDev"},"content":"        try {","lastModifiedDate":"2022-02-11"},{"lineNumber":30,"author":{"gitId":"IncompetentDev"},"content":"            // Initiate search, while checking if command is empty","lastModifiedDate":"2022-02-11"},{"lineNumber":31,"author":{"gitId":"IncompetentDev"},"content":"            Matcher commandMatcher \u003d COMMAND_FORMAT.matcher(userInput);","lastModifiedDate":"2022-02-07"},{"lineNumber":32,"author":{"gitId":"IncompetentDev"},"content":"            checkForCommand(commandMatcher);","lastModifiedDate":"2022-02-17"},{"lineNumber":33,"author":{"gitId":"IncompetentDev"},"content":"            // Create the appropriate Command object. Pass in unparsed arguments, will be handled by individual Command classes.","lastModifiedDate":"2022-02-17"},{"lineNumber":34,"author":{"gitId":"IncompetentDev"},"content":"            String inputCommand \u003d commandMatcher.group(1);","lastModifiedDate":"2022-02-11"},{"lineNumber":35,"author":{"gitId":"IncompetentDev"},"content":"            String inputArguments \u003d commandMatcher.group(2).strip();","lastModifiedDate":"2022-02-17"},{"lineNumber":36,"author":{"gitId":"IncompetentDev"},"content":"            return createCommand(inputCommand, inputArguments);","lastModifiedDate":"2022-02-17"},{"lineNumber":37,"author":{"gitId":"IncompetentDev"},"content":"        } catch (EmptyCommandException e) {","lastModifiedDate":"2022-02-11"},{"lineNumber":38,"author":{"gitId":"IncompetentDev"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2022-02-11"},{"lineNumber":39,"author":{"gitId":"IncompetentDev"},"content":"        } catch (InvalidCommandException e) {","lastModifiedDate":"2022-02-11"},{"lineNumber":40,"author":{"gitId":"IncompetentDev"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2022-02-11"},{"lineNumber":41,"author":{"gitId":"IncompetentDev"},"content":"        }","lastModifiedDate":"2022-02-07"},{"lineNumber":42,"author":{"gitId":"IncompetentDev"},"content":"        return null;","lastModifiedDate":"2022-02-17"},{"lineNumber":43,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-10"},{"lineNumber":44,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":45,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-11"},{"lineNumber":46,"author":{"gitId":"IncompetentDev"},"content":"     * Checks if the userInput in CommandMatcher matches the regex command format","lastModifiedDate":"2022-02-11"},{"lineNumber":47,"author":{"gitId":"IncompetentDev"},"content":"     * @param commandMatcher the matcher object to search on","lastModifiedDate":"2022-02-11"},{"lineNumber":48,"author":{"gitId":"IncompetentDev"},"content":"     * @throws EmptyCommandException if command is empty","lastModifiedDate":"2022-02-11"},{"lineNumber":49,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-11"},{"lineNumber":50,"author":{"gitId":"IncompetentDev"},"content":"    private void checkForCommand(Matcher commandMatcher) throws EmptyCommandException {","lastModifiedDate":"2022-02-17"},{"lineNumber":51,"author":{"gitId":"IncompetentDev"},"content":"        if (!commandMatcher.matches()) {","lastModifiedDate":"2022-02-11"},{"lineNumber":52,"author":{"gitId":"IncompetentDev"},"content":"            throw new EmptyCommandException();","lastModifiedDate":"2022-02-11"},{"lineNumber":53,"author":{"gitId":"IncompetentDev"},"content":"        }","lastModifiedDate":"2022-02-11"},{"lineNumber":54,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-11"},{"lineNumber":55,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":56,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-17"},{"lineNumber":57,"author":{"gitId":"IncompetentDev"},"content":"     * Create a Command object given an inputCommand and parses inputArguments where necessary","lastModifiedDate":"2022-02-17"},{"lineNumber":58,"author":{"gitId":"IncompetentDev"},"content":"     * @param inputCommand user given command","lastModifiedDate":"2022-02-17"},{"lineNumber":59,"author":{"gitId":"IncompetentDev"},"content":"     * @param inputArguments user given arguments","lastModifiedDate":"2022-02-17"},{"lineNumber":60,"author":{"gitId":"IncompetentDev"},"content":"     * @return a Command object representing the user input command","lastModifiedDate":"2022-02-17"},{"lineNumber":61,"author":{"gitId":"IncompetentDev"},"content":"     * @throws InvalidCommandException when none of the commands are valid","lastModifiedDate":"2022-02-17"},{"lineNumber":62,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-17"},{"lineNumber":63,"author":{"gitId":"IncompetentDev"},"content":"    private Command createCommand(String inputCommand, String inputArguments) throws InvalidCommandException {","lastModifiedDate":"2022-02-17"},{"lineNumber":64,"author":{"gitId":"IncompetentDev"},"content":"        HashMap\u003cString, String\u003e parsedArguments;","lastModifiedDate":"2022-02-17"},{"lineNumber":65,"author":{"gitId":"IncompetentDev"},"content":"        switch(inputCommand) {","lastModifiedDate":"2022-02-17"},{"lineNumber":66,"author":{"gitId":"IncompetentDev"},"content":"        case \"bye\":","lastModifiedDate":"2022-02-17"},{"lineNumber":67,"author":{"gitId":"IncompetentDev"},"content":"            return new ByeCommand();","lastModifiedDate":"2022-02-17"},{"lineNumber":68,"author":{"gitId":"IncompetentDev"},"content":"        case \"list\":","lastModifiedDate":"2022-02-17"},{"lineNumber":69,"author":{"gitId":"IncompetentDev"},"content":"            return new ListCommand();","lastModifiedDate":"2022-02-17"},{"lineNumber":70,"author":{"gitId":"IncompetentDev"},"content":"        case \"mark\":","lastModifiedDate":"2022-02-17"},{"lineNumber":71,"author":{"gitId":"IncompetentDev"},"content":"            parsedArguments \u003d argumentParser(inputArguments);","lastModifiedDate":"2022-02-17"},{"lineNumber":72,"author":{"gitId":"IncompetentDev"},"content":"            return new MarkCommand(parsedArguments);","lastModifiedDate":"2022-02-17"},{"lineNumber":73,"author":{"gitId":"IncompetentDev"},"content":"        case \"unmark\":","lastModifiedDate":"2022-02-17"},{"lineNumber":74,"author":{"gitId":"IncompetentDev"},"content":"            parsedArguments \u003d argumentParser(inputArguments);","lastModifiedDate":"2022-02-17"},{"lineNumber":75,"author":{"gitId":"IncompetentDev"},"content":"            return new UnmarkCommand(parsedArguments);","lastModifiedDate":"2022-02-17"},{"lineNumber":76,"author":{"gitId":"IncompetentDev"},"content":"        case \"todo\":","lastModifiedDate":"2022-02-17"},{"lineNumber":77,"author":{"gitId":"IncompetentDev"},"content":"            parsedArguments \u003d argumentParser(inputArguments);","lastModifiedDate":"2022-02-17"},{"lineNumber":78,"author":{"gitId":"IncompetentDev"},"content":"            return new TodoCommand(parsedArguments);","lastModifiedDate":"2022-02-17"},{"lineNumber":79,"author":{"gitId":"IncompetentDev"},"content":"        case \"deadline\":","lastModifiedDate":"2022-02-17"},{"lineNumber":80,"author":{"gitId":"IncompetentDev"},"content":"            parsedArguments \u003d argumentParser(inputArguments);","lastModifiedDate":"2022-02-17"},{"lineNumber":81,"author":{"gitId":"IncompetentDev"},"content":"            return new DeadlineCommand(parsedArguments);","lastModifiedDate":"2022-02-17"},{"lineNumber":82,"author":{"gitId":"IncompetentDev"},"content":"        case \"event\":","lastModifiedDate":"2022-02-17"},{"lineNumber":83,"author":{"gitId":"IncompetentDev"},"content":"            parsedArguments \u003d argumentParser(inputArguments);","lastModifiedDate":"2022-02-17"},{"lineNumber":84,"author":{"gitId":"IncompetentDev"},"content":"            return new EventCommand(parsedArguments);","lastModifiedDate":"2022-02-17"},{"lineNumber":85,"author":{"gitId":"IncompetentDev"},"content":"        case \"delete\":","lastModifiedDate":"2022-02-17"},{"lineNumber":86,"author":{"gitId":"IncompetentDev"},"content":"            parsedArguments \u003d argumentParser(inputArguments);","lastModifiedDate":"2022-02-17"},{"lineNumber":87,"author":{"gitId":"IncompetentDev"},"content":"            return new DeleteCommand(parsedArguments);","lastModifiedDate":"2022-02-17"},{"lineNumber":88,"author":{"gitId":"IncompetentDev"},"content":"        }","lastModifiedDate":"2022-02-11"},{"lineNumber":89,"author":{"gitId":"IncompetentDev"},"content":"        throw new InvalidCommandException(inputCommand);","lastModifiedDate":"2022-02-17"},{"lineNumber":90,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-11"},{"lineNumber":91,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":92,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-17"},{"lineNumber":93,"author":{"gitId":"IncompetentDev"},"content":"     * Parses user input arguments into a dictionary form containing named parameters","lastModifiedDate":"2022-02-17"},{"lineNumber":94,"author":{"gitId":"IncompetentDev"},"content":"     * @param inputArguments the raw unparsed user input","lastModifiedDate":"2022-02-17"},{"lineNumber":95,"author":{"gitId":"IncompetentDev"},"content":"     * @return HashMap\u003cString, String\u003e mapping parameter name -\u003e parameter value","lastModifiedDate":"2022-02-17"},{"lineNumber":96,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-17"},{"lineNumber":97,"author":{"gitId":"IncompetentDev"},"content":"    private HashMap\u003cString, String\u003e argumentParser(String inputArguments) {","lastModifiedDate":"2022-02-17"},{"lineNumber":98,"author":{"gitId":"IncompetentDev"},"content":"        HashMap\u003cString, String\u003e parsedArguments \u003d new HashMap\u003cString, String\u003e();","lastModifiedDate":"2022-02-17"},{"lineNumber":99,"author":{"gitId":"IncompetentDev"},"content":"        String parameterName \u003d \"\";","lastModifiedDate":"2022-02-17"},{"lineNumber":100,"author":{"gitId":"IncompetentDev"},"content":"        String parameter \u003d \"\";","lastModifiedDate":"2022-02-17"},{"lineNumber":101,"author":{"gitId":"IncompetentDev"},"content":"        String[] argumentArray \u003d inputArguments.split(\" \", 0);","lastModifiedDate":"2022-02-17"},{"lineNumber":102,"author":{"gitId":"IncompetentDev"},"content":"        for (String argument: argumentArray) {","lastModifiedDate":"2022-02-17"},{"lineNumber":103,"author":{"gitId":"IncompetentDev"},"content":"            if (argument.matches(\"^\\\\/\\\\w+$\")) {","lastModifiedDate":"2022-02-17"},{"lineNumber":104,"author":{"gitId":"IncompetentDev"},"content":"                parameter \u003d parameter.strip();","lastModifiedDate":"2022-02-17"},{"lineNumber":105,"author":{"gitId":"IncompetentDev"},"content":"                parsedArguments.put(parameterName, parameter);","lastModifiedDate":"2022-02-17"},{"lineNumber":106,"author":{"gitId":"IncompetentDev"},"content":"                parameterName \u003d argument;","lastModifiedDate":"2022-02-17"},{"lineNumber":107,"author":{"gitId":"IncompetentDev"},"content":"                parameter \u003d \"\";","lastModifiedDate":"2022-02-17"},{"lineNumber":108,"author":{"gitId":"IncompetentDev"},"content":"                continue;","lastModifiedDate":"2022-02-17"},{"lineNumber":109,"author":{"gitId":"IncompetentDev"},"content":"            }","lastModifiedDate":"2022-02-11"},{"lineNumber":110,"author":{"gitId":"IncompetentDev"},"content":"            parameter +\u003d \" \"+argument;","lastModifiedDate":"2022-02-17"},{"lineNumber":111,"author":{"gitId":"IncompetentDev"},"content":"        }","lastModifiedDate":"2022-02-11"},{"lineNumber":112,"author":{"gitId":"IncompetentDev"},"content":"        parsedArguments.put(parameterName, parameter.strip());","lastModifiedDate":"2022-02-17"},{"lineNumber":113,"author":{"gitId":"IncompetentDev"},"content":"        return parsedArguments;","lastModifiedDate":"2022-02-17"},{"lineNumber":114,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-11"},{"lineNumber":115,"author":{"gitId":"IncompetentDev"},"content":"}","lastModifiedDate":"2022-02-07"}],"authorContributionMap":{"IncompetentDev":115}},{"path":"src/main/java/duke/commands/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IncompetentDev"},"content":"package duke.commands;","lastModifiedDate":"2022-02-17"},{"lineNumber":2,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":3,"author":{"gitId":"IncompetentDev"},"content":"/**","lastModifiedDate":"2022-02-17"},{"lineNumber":4,"author":{"gitId":"IncompetentDev"},"content":" * Returns an empty Command that does nothing","lastModifiedDate":"2022-02-17"},{"lineNumber":5,"author":{"gitId":"IncompetentDev"},"content":" */","lastModifiedDate":"2022-02-17"},{"lineNumber":6,"author":{"gitId":"IncompetentDev"},"content":"public class ByeCommand extends Command {","lastModifiedDate":"2022-02-17"},{"lineNumber":7,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":8,"author":{"gitId":"IncompetentDev"},"content":"    public void execute() {","lastModifiedDate":"2022-02-17"},{"lineNumber":9,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":10,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":11,"author":{"gitId":"IncompetentDev"},"content":"}","lastModifiedDate":"2022-02-17"}],"authorContributionMap":{"IncompetentDev":11}},{"path":"src/main/java/duke/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IncompetentDev"},"content":"package duke.commands;","lastModifiedDate":"2022-02-17"},{"lineNumber":2,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":3,"author":{"gitId":"IncompetentDev"},"content":"import duke.exceptions.InvalidArgumentException;","lastModifiedDate":"2022-02-17"},{"lineNumber":4,"author":{"gitId":"IncompetentDev"},"content":"import duke.tasks.Task;","lastModifiedDate":"2022-02-17"},{"lineNumber":5,"author":{"gitId":"IncompetentDev"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2022-02-18"},{"lineNumber":6,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":7,"author":{"gitId":"IncompetentDev"},"content":"public abstract class Command {","lastModifiedDate":"2022-02-17"},{"lineNumber":8,"author":{"gitId":"IncompetentDev"},"content":"    // The task list to act on. May or may not be used.","lastModifiedDate":"2022-02-17"},{"lineNumber":9,"author":{"gitId":"IncompetentDev"},"content":"    protected TaskList\u003cTask\u003e taskList;","lastModifiedDate":"2022-02-18"},{"lineNumber":10,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":11,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-17"},{"lineNumber":12,"author":{"gitId":"IncompetentDev"},"content":"     * Classes should override and implement this as needed, namely those that requires additional user arguments","lastModifiedDate":"2022-02-17"},{"lineNumber":13,"author":{"gitId":"IncompetentDev"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":14,"author":{"gitId":"IncompetentDev"},"content":"     * @throws InvalidArgumentException any exception that may occur while parsing","lastModifiedDate":"2022-02-17"},{"lineNumber":15,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-17"},{"lineNumber":16,"author":{"gitId":"IncompetentDev"},"content":"    protected void assertArguments() throws InvalidArgumentException {","lastModifiedDate":"2022-02-17"},{"lineNumber":17,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":18,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":19,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":20,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-17"},{"lineNumber":21,"author":{"gitId":"IncompetentDev"},"content":"     * Setter for taskList","lastModifiedDate":"2022-02-17"},{"lineNumber":22,"author":{"gitId":"IncompetentDev"},"content":"     * @param taskList to set","lastModifiedDate":"2022-02-17"},{"lineNumber":23,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-17"},{"lineNumber":24,"author":{"gitId":"IncompetentDev"},"content":"    public void setTaskList(TaskList\u003cTask\u003e taskList) {","lastModifiedDate":"2022-02-18"},{"lineNumber":25,"author":{"gitId":"IncompetentDev"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2022-02-17"},{"lineNumber":26,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":27,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":28,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-17"},{"lineNumber":29,"author":{"gitId":"IncompetentDev"},"content":"     * A command must execute an action.","lastModifiedDate":"2022-02-17"},{"lineNumber":30,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-17"},{"lineNumber":31,"author":{"gitId":"IncompetentDev"},"content":"    public abstract void execute();","lastModifiedDate":"2022-02-17"},{"lineNumber":32,"author":{"gitId":"IncompetentDev"},"content":"}","lastModifiedDate":"2022-02-17"}],"authorContributionMap":{"IncompetentDev":32}},{"path":"src/main/java/duke/commands/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IncompetentDev"},"content":"package duke.commands;","lastModifiedDate":"2022-02-17"},{"lineNumber":2,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":3,"author":{"gitId":"IncompetentDev"},"content":"import duke.exceptions.InvalidArgumentException;","lastModifiedDate":"2022-02-17"},{"lineNumber":4,"author":{"gitId":"IncompetentDev"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2022-02-17"},{"lineNumber":5,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":6,"author":{"gitId":"IncompetentDev"},"content":"import java.util.HashMap;","lastModifiedDate":"2022-02-17"},{"lineNumber":7,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":8,"author":{"gitId":"IncompetentDev"},"content":"public class DeadlineCommand extends Command {","lastModifiedDate":"2022-02-17"},{"lineNumber":9,"author":{"gitId":"IncompetentDev"},"content":"    public static final String TASK_ADDED_MESSAGE_FORMAT \u003d","lastModifiedDate":"2022-02-17"},{"lineNumber":10,"author":{"gitId":"IncompetentDev"},"content":"            \"____________________________________________________________\"","lastModifiedDate":"2022-02-17"},{"lineNumber":11,"author":{"gitId":"IncompetentDev"},"content":"            + \"\\nadded: %s\"","lastModifiedDate":"2022-02-17"},{"lineNumber":12,"author":{"gitId":"IncompetentDev"},"content":"            + \"\\n____________________________________________________________\";","lastModifiedDate":"2022-02-17"},{"lineNumber":13,"author":{"gitId":"IncompetentDev"},"content":"    private static final String COMMAND_NAME \u003d \"deadline\";","lastModifiedDate":"2022-02-17"},{"lineNumber":14,"author":{"gitId":"IncompetentDev"},"content":"    private static final String EMPTY_ARGUMENTS \u003d \"Deadline must have a description!\";","lastModifiedDate":"2022-02-17"},{"lineNumber":15,"author":{"gitId":"IncompetentDev"},"content":"    private static final String EMPTY_BYDATE \u003d \"Deadline must have a valid date for /by!\";","lastModifiedDate":"2022-02-17"},{"lineNumber":16,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":17,"author":{"gitId":"IncompetentDev"},"content":"    private HashMap\u003cString, String\u003e arguments;","lastModifiedDate":"2022-02-17"},{"lineNumber":18,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-17"},{"lineNumber":19,"author":{"gitId":"IncompetentDev"},"content":"     * Initialises the arguments input by the user for this class.","lastModifiedDate":"2022-02-17"},{"lineNumber":20,"author":{"gitId":"IncompetentDev"},"content":"     * @param parsedArguments arguments from Parser","lastModifiedDate":"2022-02-17"},{"lineNumber":21,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-17"},{"lineNumber":22,"author":{"gitId":"IncompetentDev"},"content":"    public DeadlineCommand(HashMap\u003cString, String\u003e parsedArguments) {","lastModifiedDate":"2022-02-17"},{"lineNumber":23,"author":{"gitId":"IncompetentDev"},"content":"        this.arguments \u003d parsedArguments;","lastModifiedDate":"2022-02-17"},{"lineNumber":24,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":25,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":26,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-17"},{"lineNumber":27,"author":{"gitId":"IncompetentDev"},"content":"     * Asserts user arguments are legal for Deadline by checking whether description and byDate exists. (Key \"\", \"/by\")","lastModifiedDate":"2022-02-17"},{"lineNumber":28,"author":{"gitId":"IncompetentDev"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":29,"author":{"gitId":"IncompetentDev"},"content":"     * @throws InvalidArgumentException when argument entered is not an integer","lastModifiedDate":"2022-02-17"},{"lineNumber":30,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-17"},{"lineNumber":31,"author":{"gitId":"IncompetentDev"},"content":"    @Override","lastModifiedDate":"2022-02-17"},{"lineNumber":32,"author":{"gitId":"IncompetentDev"},"content":"    protected void assertArguments() throws InvalidArgumentException {","lastModifiedDate":"2022-02-17"},{"lineNumber":33,"author":{"gitId":"IncompetentDev"},"content":"        String errorMsg \u003d \"\";","lastModifiedDate":"2022-02-17"},{"lineNumber":34,"author":{"gitId":"IncompetentDev"},"content":"        if (arguments.get(\"\")\u003d\u003dnull || arguments.get(\"\").equals(\"\")) {","lastModifiedDate":"2022-02-17"},{"lineNumber":35,"author":{"gitId":"IncompetentDev"},"content":"            errorMsg +\u003d EMPTY_ARGUMENTS+\"\\n\";","lastModifiedDate":"2022-02-17"},{"lineNumber":36,"author":{"gitId":"IncompetentDev"},"content":"        }","lastModifiedDate":"2022-02-17"},{"lineNumber":37,"author":{"gitId":"IncompetentDev"},"content":"        if (arguments.get(\"/by\")\u003d\u003dnull || arguments.get(\"\").equals(\"\")) {","lastModifiedDate":"2022-02-17"},{"lineNumber":38,"author":{"gitId":"IncompetentDev"},"content":"            errorMsg +\u003d EMPTY_BYDATE+\"\\n\";","lastModifiedDate":"2022-02-17"},{"lineNumber":39,"author":{"gitId":"IncompetentDev"},"content":"        }","lastModifiedDate":"2022-02-17"},{"lineNumber":40,"author":{"gitId":"IncompetentDev"},"content":"        if (!errorMsg.equals(\"\")) {","lastModifiedDate":"2022-02-17"},{"lineNumber":41,"author":{"gitId":"IncompetentDev"},"content":"            throw new InvalidArgumentException(COMMAND_NAME,errorMsg.trim());","lastModifiedDate":"2022-02-17"},{"lineNumber":42,"author":{"gitId":"IncompetentDev"},"content":"        }","lastModifiedDate":"2022-02-17"},{"lineNumber":43,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":44,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":45,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-17"},{"lineNumber":46,"author":{"gitId":"IncompetentDev"},"content":"     * Creates an Event task and adds it to taskList","lastModifiedDate":"2022-02-17"},{"lineNumber":47,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-17"},{"lineNumber":48,"author":{"gitId":"IncompetentDev"},"content":"    public void execute() {","lastModifiedDate":"2022-02-17"},{"lineNumber":49,"author":{"gitId":"IncompetentDev"},"content":"        try {","lastModifiedDate":"2022-02-17"},{"lineNumber":50,"author":{"gitId":"IncompetentDev"},"content":"            assertArguments();","lastModifiedDate":"2022-02-17"},{"lineNumber":51,"author":{"gitId":"IncompetentDev"},"content":"            String description \u003d arguments.get(\"\");","lastModifiedDate":"2022-02-17"},{"lineNumber":52,"author":{"gitId":"IncompetentDev"},"content":"            String byDate \u003d arguments.get(\"/by\");","lastModifiedDate":"2022-02-17"},{"lineNumber":53,"author":{"gitId":"IncompetentDev"},"content":"            Deadline deadlineTask \u003d new Deadline(description, byDate);","lastModifiedDate":"2022-02-17"},{"lineNumber":54,"author":{"gitId":"IncompetentDev"},"content":"            taskList.add(deadlineTask);","lastModifiedDate":"2022-02-17"},{"lineNumber":55,"author":{"gitId":"IncompetentDev"},"content":"            System.out.printf(TASK_ADDED_MESSAGE_FORMAT + \"%n\", deadlineTask);","lastModifiedDate":"2022-02-18"},{"lineNumber":56,"author":{"gitId":"IncompetentDev"},"content":"        } catch (InvalidArgumentException e) {","lastModifiedDate":"2022-02-17"},{"lineNumber":57,"author":{"gitId":"IncompetentDev"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2022-02-17"},{"lineNumber":58,"author":{"gitId":"IncompetentDev"},"content":"        }","lastModifiedDate":"2022-02-17"},{"lineNumber":59,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":60,"author":{"gitId":"IncompetentDev"},"content":"}","lastModifiedDate":"2022-02-17"}],"authorContributionMap":{"IncompetentDev":60}},{"path":"src/main/java/duke/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IncompetentDev"},"content":"package duke.commands;","lastModifiedDate":"2022-02-17"},{"lineNumber":2,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":3,"author":{"gitId":"IncompetentDev"},"content":"import duke.exceptions.InvalidArgumentException;","lastModifiedDate":"2022-02-17"},{"lineNumber":4,"author":{"gitId":"IncompetentDev"},"content":"import duke.tasks.Task;","lastModifiedDate":"2022-02-17"},{"lineNumber":5,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":6,"author":{"gitId":"IncompetentDev"},"content":"import java.util.HashMap;","lastModifiedDate":"2022-02-17"},{"lineNumber":7,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":8,"author":{"gitId":"IncompetentDev"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2022-02-17"},{"lineNumber":9,"author":{"gitId":"IncompetentDev"},"content":"    private static final String TASK_DELETED_MESSAGE_FORMAT \u003d","lastModifiedDate":"2022-02-17"},{"lineNumber":10,"author":{"gitId":"IncompetentDev"},"content":"            \"____________________________________________________________\"","lastModifiedDate":"2022-02-17"},{"lineNumber":11,"author":{"gitId":"IncompetentDev"},"content":"                    + \"\\nNoted. I\u0027ve removed this task:\"","lastModifiedDate":"2022-02-17"},{"lineNumber":12,"author":{"gitId":"IncompetentDev"},"content":"                    + \"\\n%s\"","lastModifiedDate":"2022-02-17"},{"lineNumber":13,"author":{"gitId":"IncompetentDev"},"content":"                    + \"\\nNow you have %d tasks in the list.\"","lastModifiedDate":"2022-02-17"},{"lineNumber":14,"author":{"gitId":"IncompetentDev"},"content":"                    + \"\\n____________________________________________________________\";","lastModifiedDate":"2022-02-17"},{"lineNumber":15,"author":{"gitId":"IncompetentDev"},"content":"    private static final String COMMAND_NAME \u003d \"mark\";","lastModifiedDate":"2022-02-17"},{"lineNumber":16,"author":{"gitId":"IncompetentDev"},"content":"    private static final String INVALID_INPUT \u003d \"The argument received is not a valid integer.\";","lastModifiedDate":"2022-02-17"},{"lineNumber":17,"author":{"gitId":"IncompetentDev"},"content":"    public static final String INVALID_TASK \u003d \"The task number given does not exist\";","lastModifiedDate":"2022-02-17"},{"lineNumber":18,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":19,"author":{"gitId":"IncompetentDev"},"content":"    private int index;","lastModifiedDate":"2022-02-17"},{"lineNumber":20,"author":{"gitId":"IncompetentDev"},"content":"    private HashMap\u003cString, String\u003e arguments;","lastModifiedDate":"2022-02-17"},{"lineNumber":21,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":22,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-17"},{"lineNumber":23,"author":{"gitId":"IncompetentDev"},"content":"     * Initialises the arguments input by the user for this class.","lastModifiedDate":"2022-02-17"},{"lineNumber":24,"author":{"gitId":"IncompetentDev"},"content":"     * @param parsedArguments arguments from Parser","lastModifiedDate":"2022-02-17"},{"lineNumber":25,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-17"},{"lineNumber":26,"author":{"gitId":"IncompetentDev"},"content":"    public DeleteCommand(HashMap\u003cString, String\u003e parsedArguments) {","lastModifiedDate":"2022-02-17"},{"lineNumber":27,"author":{"gitId":"IncompetentDev"},"content":"        this.arguments \u003d parsedArguments;","lastModifiedDate":"2022-02-17"},{"lineNumber":28,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":29,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":30,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-17"},{"lineNumber":31,"author":{"gitId":"IncompetentDev"},"content":"     * Asserts user arguments can be converted to integer","lastModifiedDate":"2022-02-17"},{"lineNumber":32,"author":{"gitId":"IncompetentDev"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":33,"author":{"gitId":"IncompetentDev"},"content":"     * @throws InvalidArgumentException when argument entered is not an integer","lastModifiedDate":"2022-02-17"},{"lineNumber":34,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-17"},{"lineNumber":35,"author":{"gitId":"IncompetentDev"},"content":"    @Override","lastModifiedDate":"2022-02-17"},{"lineNumber":36,"author":{"gitId":"IncompetentDev"},"content":"    protected void assertArguments() throws InvalidArgumentException {","lastModifiedDate":"2022-02-17"},{"lineNumber":37,"author":{"gitId":"IncompetentDev"},"content":"        try {","lastModifiedDate":"2022-02-17"},{"lineNumber":38,"author":{"gitId":"IncompetentDev"},"content":"            this.index \u003d Integer.parseInt(arguments.get(\"\"))-1;","lastModifiedDate":"2022-02-17"},{"lineNumber":39,"author":{"gitId":"IncompetentDev"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2022-02-17"},{"lineNumber":40,"author":{"gitId":"IncompetentDev"},"content":"            throw new InvalidArgumentException(COMMAND_NAME, INVALID_INPUT);","lastModifiedDate":"2022-02-17"},{"lineNumber":41,"author":{"gitId":"IncompetentDev"},"content":"        }","lastModifiedDate":"2022-02-17"},{"lineNumber":42,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":43,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":44,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-17"},{"lineNumber":45,"author":{"gitId":"IncompetentDev"},"content":"     * Deletes a task using ArrayList\u0027s built in remove.","lastModifiedDate":"2022-02-17"},{"lineNumber":46,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-17"},{"lineNumber":47,"author":{"gitId":"IncompetentDev"},"content":"    public void execute() {","lastModifiedDate":"2022-02-17"},{"lineNumber":48,"author":{"gitId":"IncompetentDev"},"content":"        try {","lastModifiedDate":"2022-02-17"},{"lineNumber":49,"author":{"gitId":"IncompetentDev"},"content":"            assertArguments();","lastModifiedDate":"2022-02-17"},{"lineNumber":50,"author":{"gitId":"IncompetentDev"},"content":"            Task taskToRemove \u003d taskList.get(index);","lastModifiedDate":"2022-02-17"},{"lineNumber":51,"author":{"gitId":"IncompetentDev"},"content":"            System.out.printf((TASK_DELETED_MESSAGE_FORMAT + \"%n\"), taskToRemove, taskList.size()-1);","lastModifiedDate":"2022-02-17"},{"lineNumber":52,"author":{"gitId":"IncompetentDev"},"content":"            taskList.remove(index);","lastModifiedDate":"2022-02-17"},{"lineNumber":53,"author":{"gitId":"IncompetentDev"},"content":"        } catch (InvalidArgumentException e) {","lastModifiedDate":"2022-02-17"},{"lineNumber":54,"author":{"gitId":"IncompetentDev"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2022-02-17"},{"lineNumber":55,"author":{"gitId":"IncompetentDev"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2022-02-17"},{"lineNumber":56,"author":{"gitId":"IncompetentDev"},"content":"            InvalidArgumentException error \u003d new InvalidArgumentException(COMMAND_NAME, INVALID_TASK);","lastModifiedDate":"2022-02-17"},{"lineNumber":57,"author":{"gitId":"IncompetentDev"},"content":"            System.out.println(error.getMessage());","lastModifiedDate":"2022-02-17"},{"lineNumber":58,"author":{"gitId":"IncompetentDev"},"content":"        }","lastModifiedDate":"2022-02-17"},{"lineNumber":59,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":60,"author":{"gitId":"IncompetentDev"},"content":"}","lastModifiedDate":"2022-02-17"}],"authorContributionMap":{"IncompetentDev":60}},{"path":"src/main/java/duke/commands/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IncompetentDev"},"content":"package duke.commands;","lastModifiedDate":"2022-02-17"},{"lineNumber":2,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":3,"author":{"gitId":"IncompetentDev"},"content":"import duke.exceptions.InvalidArgumentException;","lastModifiedDate":"2022-02-17"},{"lineNumber":4,"author":{"gitId":"IncompetentDev"},"content":"import duke.tasks.Event;","lastModifiedDate":"2022-02-17"},{"lineNumber":5,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":6,"author":{"gitId":"IncompetentDev"},"content":"import java.util.HashMap;","lastModifiedDate":"2022-02-17"},{"lineNumber":7,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":8,"author":{"gitId":"IncompetentDev"},"content":"public class EventCommand extends Command {","lastModifiedDate":"2022-02-17"},{"lineNumber":9,"author":{"gitId":"IncompetentDev"},"content":"    public static final String TASK_ADDED_MESSAGE_FORMAT \u003d","lastModifiedDate":"2022-02-17"},{"lineNumber":10,"author":{"gitId":"IncompetentDev"},"content":"            \"____________________________________________________________\"","lastModifiedDate":"2022-02-17"},{"lineNumber":11,"author":{"gitId":"IncompetentDev"},"content":"            + \"\\nadded: %s\"","lastModifiedDate":"2022-02-17"},{"lineNumber":12,"author":{"gitId":"IncompetentDev"},"content":"            + \"\\n____________________________________________________________\";","lastModifiedDate":"2022-02-17"},{"lineNumber":13,"author":{"gitId":"IncompetentDev"},"content":"    private static final String COMMAND_NAME \u003d \"deadline\";","lastModifiedDate":"2022-02-17"},{"lineNumber":14,"author":{"gitId":"IncompetentDev"},"content":"    private static final String EMPTY_ARGUMENTS \u003d \"Event must have a description!\";","lastModifiedDate":"2022-02-17"},{"lineNumber":15,"author":{"gitId":"IncompetentDev"},"content":"    private static final String EMPTY_BYDATE \u003d \"Event must have a valid date for /at!\";","lastModifiedDate":"2022-02-17"},{"lineNumber":16,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":17,"author":{"gitId":"IncompetentDev"},"content":"    private HashMap\u003cString, String\u003e arguments;","lastModifiedDate":"2022-02-17"},{"lineNumber":18,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-17"},{"lineNumber":19,"author":{"gitId":"IncompetentDev"},"content":"     * Initialises the arguments input by the user for this class.","lastModifiedDate":"2022-02-17"},{"lineNumber":20,"author":{"gitId":"IncompetentDev"},"content":"     * @param parsedArguments arguments from Parser","lastModifiedDate":"2022-02-17"},{"lineNumber":21,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-17"},{"lineNumber":22,"author":{"gitId":"IncompetentDev"},"content":"    public EventCommand(HashMap\u003cString, String\u003e parsedArguments) {","lastModifiedDate":"2022-02-17"},{"lineNumber":23,"author":{"gitId":"IncompetentDev"},"content":"        this.arguments \u003d parsedArguments;","lastModifiedDate":"2022-02-17"},{"lineNumber":24,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":25,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":26,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-17"},{"lineNumber":27,"author":{"gitId":"IncompetentDev"},"content":"     * Asserts user arguments are legal for Deadline by checking whether description and byDate exists. (Key \"\", \"/by\")","lastModifiedDate":"2022-02-17"},{"lineNumber":28,"author":{"gitId":"IncompetentDev"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":29,"author":{"gitId":"IncompetentDev"},"content":"     * @throws InvalidArgumentException when argument entered is not an integer","lastModifiedDate":"2022-02-17"},{"lineNumber":30,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-17"},{"lineNumber":31,"author":{"gitId":"IncompetentDev"},"content":"    @Override","lastModifiedDate":"2022-02-17"},{"lineNumber":32,"author":{"gitId":"IncompetentDev"},"content":"    protected void assertArguments() throws InvalidArgumentException {","lastModifiedDate":"2022-02-17"},{"lineNumber":33,"author":{"gitId":"IncompetentDev"},"content":"        String errorMsg \u003d \"\";","lastModifiedDate":"2022-02-17"},{"lineNumber":34,"author":{"gitId":"IncompetentDev"},"content":"        if (arguments.get(\"\")\u003d\u003dnull || arguments.get(\"\").equals(\"\")) {","lastModifiedDate":"2022-02-17"},{"lineNumber":35,"author":{"gitId":"IncompetentDev"},"content":"            errorMsg +\u003d EMPTY_ARGUMENTS+\"\\n\";","lastModifiedDate":"2022-02-17"},{"lineNumber":36,"author":{"gitId":"IncompetentDev"},"content":"        }","lastModifiedDate":"2022-02-17"},{"lineNumber":37,"author":{"gitId":"IncompetentDev"},"content":"        if (arguments.get(\"/at\")\u003d\u003dnull || arguments.get(\"\").equals(\"\")) {","lastModifiedDate":"2022-02-17"},{"lineNumber":38,"author":{"gitId":"IncompetentDev"},"content":"            errorMsg +\u003d EMPTY_BYDATE+\"\\n\";","lastModifiedDate":"2022-02-17"},{"lineNumber":39,"author":{"gitId":"IncompetentDev"},"content":"        }","lastModifiedDate":"2022-02-17"},{"lineNumber":40,"author":{"gitId":"IncompetentDev"},"content":"        if (!errorMsg.equals(\"\")) {","lastModifiedDate":"2022-02-17"},{"lineNumber":41,"author":{"gitId":"IncompetentDev"},"content":"            throw new InvalidArgumentException(COMMAND_NAME,errorMsg.trim());","lastModifiedDate":"2022-02-17"},{"lineNumber":42,"author":{"gitId":"IncompetentDev"},"content":"        }","lastModifiedDate":"2022-02-17"},{"lineNumber":43,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":44,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":45,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-17"},{"lineNumber":46,"author":{"gitId":"IncompetentDev"},"content":"     * Creates an Event task and adds it to taskList","lastModifiedDate":"2022-02-17"},{"lineNumber":47,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-17"},{"lineNumber":48,"author":{"gitId":"IncompetentDev"},"content":"    public void execute() {","lastModifiedDate":"2022-02-17"},{"lineNumber":49,"author":{"gitId":"IncompetentDev"},"content":"        try {","lastModifiedDate":"2022-02-17"},{"lineNumber":50,"author":{"gitId":"IncompetentDev"},"content":"            assertArguments();","lastModifiedDate":"2022-02-17"},{"lineNumber":51,"author":{"gitId":"IncompetentDev"},"content":"            String description \u003d arguments.get(\"\");","lastModifiedDate":"2022-02-17"},{"lineNumber":52,"author":{"gitId":"IncompetentDev"},"content":"            String byDate \u003d arguments.get(\"/at\");","lastModifiedDate":"2022-02-17"},{"lineNumber":53,"author":{"gitId":"IncompetentDev"},"content":"            Event eventTask \u003d new Event(description, byDate);","lastModifiedDate":"2022-02-17"},{"lineNumber":54,"author":{"gitId":"IncompetentDev"},"content":"            taskList.add(eventTask);","lastModifiedDate":"2022-02-17"},{"lineNumber":55,"author":{"gitId":"IncompetentDev"},"content":"            System.out.printf(TASK_ADDED_MESSAGE_FORMAT + \"%n\", eventTask);","lastModifiedDate":"2022-02-18"},{"lineNumber":56,"author":{"gitId":"IncompetentDev"},"content":"        } catch (InvalidArgumentException e) {","lastModifiedDate":"2022-02-17"},{"lineNumber":57,"author":{"gitId":"IncompetentDev"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2022-02-17"},{"lineNumber":58,"author":{"gitId":"IncompetentDev"},"content":"        }","lastModifiedDate":"2022-02-17"},{"lineNumber":59,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":60,"author":{"gitId":"IncompetentDev"},"content":"}","lastModifiedDate":"2022-02-17"}],"authorContributionMap":{"IncompetentDev":60}},{"path":"src/main/java/duke/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IncompetentDev"},"content":"package duke.commands;","lastModifiedDate":"2022-02-17"},{"lineNumber":2,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":3,"author":{"gitId":"IncompetentDev"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2022-02-17"},{"lineNumber":4,"author":{"gitId":"IncompetentDev"},"content":"    private static final String LIST_PRE_MESSAGE_FORMAT \u003d","lastModifiedDate":"2022-02-17"},{"lineNumber":5,"author":{"gitId":"IncompetentDev"},"content":"            \"____________________________________________________________\"","lastModifiedDate":"2022-02-17"},{"lineNumber":6,"author":{"gitId":"IncompetentDev"},"content":"            + \"\\nHere are the tasks in your list\";","lastModifiedDate":"2022-02-17"},{"lineNumber":7,"author":{"gitId":"IncompetentDev"},"content":"    private static final String LIST_MESSAGE_FORMAT \u003d","lastModifiedDate":"2022-02-17"},{"lineNumber":8,"author":{"gitId":"IncompetentDev"},"content":"            \"%d. %s\";","lastModifiedDate":"2022-02-17"},{"lineNumber":9,"author":{"gitId":"IncompetentDev"},"content":"    private static final String LIST_POST_MESSAGE_FORMAT \u003d","lastModifiedDate":"2022-02-17"},{"lineNumber":10,"author":{"gitId":"IncompetentDev"},"content":"            \"____________________________________________________________\";","lastModifiedDate":"2022-02-17"},{"lineNumber":11,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":12,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-17"},{"lineNumber":13,"author":{"gitId":"IncompetentDev"},"content":"     * Lists out all tasks and their corresponding information.","lastModifiedDate":"2022-02-17"},{"lineNumber":14,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-17"},{"lineNumber":15,"author":{"gitId":"IncompetentDev"},"content":"    public void execute() {","lastModifiedDate":"2022-02-17"},{"lineNumber":16,"author":{"gitId":"IncompetentDev"},"content":"        System.out.println(LIST_PRE_MESSAGE_FORMAT);","lastModifiedDate":"2022-02-17"},{"lineNumber":17,"author":{"gitId":"IncompetentDev"},"content":"        for (int i \u003d 0; i\u003cthis.taskList.size(); i++) {","lastModifiedDate":"2022-02-17"},{"lineNumber":18,"author":{"gitId":"IncompetentDev"},"content":"            String taskInfo \u003d this.taskList.get(i).toString();","lastModifiedDate":"2022-02-17"},{"lineNumber":19,"author":{"gitId":"IncompetentDev"},"content":"            String formattedTaskInfo \u003d String.format(LIST_MESSAGE_FORMAT, i+1, taskInfo);","lastModifiedDate":"2022-02-17"},{"lineNumber":20,"author":{"gitId":"IncompetentDev"},"content":"            System.out.println(formattedTaskInfo);","lastModifiedDate":"2022-02-17"},{"lineNumber":21,"author":{"gitId":"IncompetentDev"},"content":"        }","lastModifiedDate":"2022-02-17"},{"lineNumber":22,"author":{"gitId":"IncompetentDev"},"content":"        System.out.println(LIST_POST_MESSAGE_FORMAT);","lastModifiedDate":"2022-02-17"},{"lineNumber":23,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":24,"author":{"gitId":"IncompetentDev"},"content":"}","lastModifiedDate":"2022-02-17"}],"authorContributionMap":{"IncompetentDev":24}},{"path":"src/main/java/duke/commands/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IncompetentDev"},"content":"package duke.commands;","lastModifiedDate":"2022-02-17"},{"lineNumber":2,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":3,"author":{"gitId":"IncompetentDev"},"content":"import duke.exceptions.InvalidArgumentException;","lastModifiedDate":"2022-02-17"},{"lineNumber":4,"author":{"gitId":"IncompetentDev"},"content":"import duke.tasks.Task;","lastModifiedDate":"2022-02-17"},{"lineNumber":5,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":6,"author":{"gitId":"IncompetentDev"},"content":"import java.util.HashMap;","lastModifiedDate":"2022-02-17"},{"lineNumber":7,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":8,"author":{"gitId":"IncompetentDev"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2022-02-17"},{"lineNumber":9,"author":{"gitId":"IncompetentDev"},"content":"    private static final String TASK_MARKED_MESSAGE_FORMAT \u003d","lastModifiedDate":"2022-02-17"},{"lineNumber":10,"author":{"gitId":"IncompetentDev"},"content":"            \"____________________________________________________________\"","lastModifiedDate":"2022-02-17"},{"lineNumber":11,"author":{"gitId":"IncompetentDev"},"content":"            + \"\\nNice! I\u0027ve marked this task as done:\"","lastModifiedDate":"2022-02-17"},{"lineNumber":12,"author":{"gitId":"IncompetentDev"},"content":"            + \"\\n%s\"","lastModifiedDate":"2022-02-17"},{"lineNumber":13,"author":{"gitId":"IncompetentDev"},"content":"            + \"\\n____________________________________________________________\";","lastModifiedDate":"2022-02-17"},{"lineNumber":14,"author":{"gitId":"IncompetentDev"},"content":"    private static final String COMMAND_NAME \u003d \"mark\";","lastModifiedDate":"2022-02-17"},{"lineNumber":15,"author":{"gitId":"IncompetentDev"},"content":"    private static final String INVALID_INPUT \u003d \"The argument received is not a valid integer.\";","lastModifiedDate":"2022-02-17"},{"lineNumber":16,"author":{"gitId":"IncompetentDev"},"content":"    public static final String INVALID_TASK \u003d \"The task number given does not exist\";","lastModifiedDate":"2022-02-17"},{"lineNumber":17,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":18,"author":{"gitId":"IncompetentDev"},"content":"    private int index;","lastModifiedDate":"2022-02-17"},{"lineNumber":19,"author":{"gitId":"IncompetentDev"},"content":"    private HashMap\u003cString, String\u003e arguments;","lastModifiedDate":"2022-02-17"},{"lineNumber":20,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":21,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-17"},{"lineNumber":22,"author":{"gitId":"IncompetentDev"},"content":"     * Initialises the arguments input by the user for this class.","lastModifiedDate":"2022-02-17"},{"lineNumber":23,"author":{"gitId":"IncompetentDev"},"content":"     * @param parsedArguments arguments from Parser","lastModifiedDate":"2022-02-17"},{"lineNumber":24,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-17"},{"lineNumber":25,"author":{"gitId":"IncompetentDev"},"content":"    public MarkCommand(HashMap\u003cString, String\u003e parsedArguments) {","lastModifiedDate":"2022-02-17"},{"lineNumber":26,"author":{"gitId":"IncompetentDev"},"content":"        this.arguments \u003d parsedArguments;","lastModifiedDate":"2022-02-17"},{"lineNumber":27,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":28,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":29,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-17"},{"lineNumber":30,"author":{"gitId":"IncompetentDev"},"content":"     * Asserts user arguments can be converted to integer","lastModifiedDate":"2022-02-17"},{"lineNumber":31,"author":{"gitId":"IncompetentDev"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":32,"author":{"gitId":"IncompetentDev"},"content":"     * @throws InvalidArgumentException when argument entered is not an integer","lastModifiedDate":"2022-02-17"},{"lineNumber":33,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-17"},{"lineNumber":34,"author":{"gitId":"IncompetentDev"},"content":"    @Override","lastModifiedDate":"2022-02-17"},{"lineNumber":35,"author":{"gitId":"IncompetentDev"},"content":"    protected void assertArguments() throws InvalidArgumentException {","lastModifiedDate":"2022-02-17"},{"lineNumber":36,"author":{"gitId":"IncompetentDev"},"content":"        try {","lastModifiedDate":"2022-02-17"},{"lineNumber":37,"author":{"gitId":"IncompetentDev"},"content":"            this.index \u003d Integer.parseInt(arguments.get(\"\"))-1;","lastModifiedDate":"2022-02-17"},{"lineNumber":38,"author":{"gitId":"IncompetentDev"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2022-02-17"},{"lineNumber":39,"author":{"gitId":"IncompetentDev"},"content":"            throw new InvalidArgumentException(COMMAND_NAME, INVALID_INPUT);","lastModifiedDate":"2022-02-17"},{"lineNumber":40,"author":{"gitId":"IncompetentDev"},"content":"        }","lastModifiedDate":"2022-02-17"},{"lineNumber":41,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":42,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":43,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-17"},{"lineNumber":44,"author":{"gitId":"IncompetentDev"},"content":"     * Marks a task as done, with index specified by user.","lastModifiedDate":"2022-02-17"},{"lineNumber":45,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-17"},{"lineNumber":46,"author":{"gitId":"IncompetentDev"},"content":"    public void execute() {","lastModifiedDate":"2022-02-17"},{"lineNumber":47,"author":{"gitId":"IncompetentDev"},"content":"        try {","lastModifiedDate":"2022-02-17"},{"lineNumber":48,"author":{"gitId":"IncompetentDev"},"content":"            assertArguments();","lastModifiedDate":"2022-02-17"},{"lineNumber":49,"author":{"gitId":"IncompetentDev"},"content":"            Task taskToMark \u003d this.taskList.get(index, true);","lastModifiedDate":"2022-02-18"},{"lineNumber":50,"author":{"gitId":"IncompetentDev"},"content":"            taskToMark.setIsDone(true);","lastModifiedDate":"2022-02-17"},{"lineNumber":51,"author":{"gitId":"IncompetentDev"},"content":"            System.out.printf((TASK_MARKED_MESSAGE_FORMAT) + \"%n\", taskToMark);","lastModifiedDate":"2022-02-17"},{"lineNumber":52,"author":{"gitId":"IncompetentDev"},"content":"        } catch (InvalidArgumentException e) {","lastModifiedDate":"2022-02-17"},{"lineNumber":53,"author":{"gitId":"IncompetentDev"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2022-02-17"},{"lineNumber":54,"author":{"gitId":"IncompetentDev"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2022-02-17"},{"lineNumber":55,"author":{"gitId":"IncompetentDev"},"content":"            InvalidArgumentException error \u003d new InvalidArgumentException(COMMAND_NAME, INVALID_TASK);","lastModifiedDate":"2022-02-17"},{"lineNumber":56,"author":{"gitId":"IncompetentDev"},"content":"            System.out.println(error.getMessage());","lastModifiedDate":"2022-02-17"},{"lineNumber":57,"author":{"gitId":"IncompetentDev"},"content":"        }","lastModifiedDate":"2022-02-17"},{"lineNumber":58,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":59,"author":{"gitId":"IncompetentDev"},"content":"}","lastModifiedDate":"2022-02-17"}],"authorContributionMap":{"IncompetentDev":59}},{"path":"src/main/java/duke/commands/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IncompetentDev"},"content":"package duke.commands;","lastModifiedDate":"2022-02-17"},{"lineNumber":2,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":3,"author":{"gitId":"IncompetentDev"},"content":"import duke.exceptions.InvalidArgumentException;","lastModifiedDate":"2022-02-17"},{"lineNumber":4,"author":{"gitId":"IncompetentDev"},"content":"import duke.tasks.Todo;","lastModifiedDate":"2022-02-17"},{"lineNumber":5,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":6,"author":{"gitId":"IncompetentDev"},"content":"import java.util.HashMap;","lastModifiedDate":"2022-02-17"},{"lineNumber":7,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":8,"author":{"gitId":"IncompetentDev"},"content":"public class TodoCommand extends Command {","lastModifiedDate":"2022-02-17"},{"lineNumber":9,"author":{"gitId":"IncompetentDev"},"content":"    private static final String TASK_ADDED_MESSAGE_FORMAT \u003d","lastModifiedDate":"2022-02-17"},{"lineNumber":10,"author":{"gitId":"IncompetentDev"},"content":"            \"____________________________________________________________\"","lastModifiedDate":"2022-02-17"},{"lineNumber":11,"author":{"gitId":"IncompetentDev"},"content":"            + \"\\nadded: %s\"","lastModifiedDate":"2022-02-17"},{"lineNumber":12,"author":{"gitId":"IncompetentDev"},"content":"            + \"\\n____________________________________________________________\";","lastModifiedDate":"2022-02-17"},{"lineNumber":13,"author":{"gitId":"IncompetentDev"},"content":"    private static final String COMMAND_NAME \u003d \"todo\";","lastModifiedDate":"2022-02-17"},{"lineNumber":14,"author":{"gitId":"IncompetentDev"},"content":"    private static final String EMPTY_ARGUMENTS \u003d \"Todo must have a description!\";","lastModifiedDate":"2022-02-17"},{"lineNumber":15,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":16,"author":{"gitId":"IncompetentDev"},"content":"    private HashMap\u003cString, String\u003e arguments;","lastModifiedDate":"2022-02-17"},{"lineNumber":17,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-17"},{"lineNumber":18,"author":{"gitId":"IncompetentDev"},"content":"     * Initialises the arguments input by the user for this class.","lastModifiedDate":"2022-02-17"},{"lineNumber":19,"author":{"gitId":"IncompetentDev"},"content":"     * @param parsedArguments arguments from Parser","lastModifiedDate":"2022-02-17"},{"lineNumber":20,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-17"},{"lineNumber":21,"author":{"gitId":"IncompetentDev"},"content":"    public TodoCommand(HashMap\u003cString, String\u003e parsedArguments) {","lastModifiedDate":"2022-02-17"},{"lineNumber":22,"author":{"gitId":"IncompetentDev"},"content":"        this.arguments \u003d parsedArguments;","lastModifiedDate":"2022-02-17"},{"lineNumber":23,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":24,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":25,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-17"},{"lineNumber":26,"author":{"gitId":"IncompetentDev"},"content":"     * Asserts user arguments are legal for Todo by checking whether description and byDate exists. (Key \"\")","lastModifiedDate":"2022-02-17"},{"lineNumber":27,"author":{"gitId":"IncompetentDev"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":28,"author":{"gitId":"IncompetentDev"},"content":"     * @throws InvalidArgumentException when argument entered is not an integer","lastModifiedDate":"2022-02-17"},{"lineNumber":29,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-17"},{"lineNumber":30,"author":{"gitId":"IncompetentDev"},"content":"    @Override","lastModifiedDate":"2022-02-17"},{"lineNumber":31,"author":{"gitId":"IncompetentDev"},"content":"    protected void assertArguments() throws InvalidArgumentException {","lastModifiedDate":"2022-02-17"},{"lineNumber":32,"author":{"gitId":"IncompetentDev"},"content":"        if (arguments.get(\"\").equals(\"\")) {","lastModifiedDate":"2022-02-17"},{"lineNumber":33,"author":{"gitId":"IncompetentDev"},"content":"            throw new InvalidArgumentException(COMMAND_NAME, EMPTY_ARGUMENTS);","lastModifiedDate":"2022-02-17"},{"lineNumber":34,"author":{"gitId":"IncompetentDev"},"content":"        }","lastModifiedDate":"2022-02-17"},{"lineNumber":35,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":36,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":37,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-17"},{"lineNumber":38,"author":{"gitId":"IncompetentDev"},"content":"     * Creates a Todo task and adds it to taskList","lastModifiedDate":"2022-02-17"},{"lineNumber":39,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-17"},{"lineNumber":40,"author":{"gitId":"IncompetentDev"},"content":"    public void execute() {","lastModifiedDate":"2022-02-17"},{"lineNumber":41,"author":{"gitId":"IncompetentDev"},"content":"        try {","lastModifiedDate":"2022-02-17"},{"lineNumber":42,"author":{"gitId":"IncompetentDev"},"content":"            assertArguments();","lastModifiedDate":"2022-02-17"},{"lineNumber":43,"author":{"gitId":"IncompetentDev"},"content":"            String description \u003d arguments.get(\"\");","lastModifiedDate":"2022-02-17"},{"lineNumber":44,"author":{"gitId":"IncompetentDev"},"content":"            Todo todoTask \u003d new Todo(description);","lastModifiedDate":"2022-02-17"},{"lineNumber":45,"author":{"gitId":"IncompetentDev"},"content":"            taskList.add(todoTask);","lastModifiedDate":"2022-02-17"},{"lineNumber":46,"author":{"gitId":"IncompetentDev"},"content":"            System.out.printf(TASK_ADDED_MESSAGE_FORMAT + \"%n\", todoTask);","lastModifiedDate":"2022-02-18"},{"lineNumber":47,"author":{"gitId":"IncompetentDev"},"content":"        } catch (InvalidArgumentException e) {","lastModifiedDate":"2022-02-17"},{"lineNumber":48,"author":{"gitId":"IncompetentDev"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2022-02-17"},{"lineNumber":49,"author":{"gitId":"IncompetentDev"},"content":"        }","lastModifiedDate":"2022-02-17"},{"lineNumber":50,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":51,"author":{"gitId":"IncompetentDev"},"content":"}","lastModifiedDate":"2022-02-17"}],"authorContributionMap":{"IncompetentDev":51}},{"path":"src/main/java/duke/commands/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IncompetentDev"},"content":"package duke.commands;","lastModifiedDate":"2022-02-17"},{"lineNumber":2,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":3,"author":{"gitId":"IncompetentDev"},"content":"import duke.exceptions.InvalidArgumentException;","lastModifiedDate":"2022-02-17"},{"lineNumber":4,"author":{"gitId":"IncompetentDev"},"content":"import duke.tasks.Task;","lastModifiedDate":"2022-02-17"},{"lineNumber":5,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":6,"author":{"gitId":"IncompetentDev"},"content":"import java.util.HashMap;","lastModifiedDate":"2022-02-17"},{"lineNumber":7,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":8,"author":{"gitId":"IncompetentDev"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2022-02-17"},{"lineNumber":9,"author":{"gitId":"IncompetentDev"},"content":"    private static final String TASK_UNMARKED_MESSAGE_FORMAT \u003d","lastModifiedDate":"2022-02-17"},{"lineNumber":10,"author":{"gitId":"IncompetentDev"},"content":"            \"____________________________________________________________\"","lastModifiedDate":"2022-02-17"},{"lineNumber":11,"author":{"gitId":"IncompetentDev"},"content":"            + \"\\nOK, I\u0027ve marked this task as not done yet:\"","lastModifiedDate":"2022-02-17"},{"lineNumber":12,"author":{"gitId":"IncompetentDev"},"content":"            + \"\\n%s\"","lastModifiedDate":"2022-02-17"},{"lineNumber":13,"author":{"gitId":"IncompetentDev"},"content":"            + \"\\n____________________________________________________________\";","lastModifiedDate":"2022-02-17"},{"lineNumber":14,"author":{"gitId":"IncompetentDev"},"content":"    private static final String COMMAND_NAME \u003d \"unmark\";","lastModifiedDate":"2022-02-17"},{"lineNumber":15,"author":{"gitId":"IncompetentDev"},"content":"    private static final String INVALID_INPUT \u003d \"The argument received is not a valid integer.\";","lastModifiedDate":"2022-02-17"},{"lineNumber":16,"author":{"gitId":"IncompetentDev"},"content":"    private static final String INVALID_TASK \u003d \"The task number given does not exist\";","lastModifiedDate":"2022-02-17"},{"lineNumber":17,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":18,"author":{"gitId":"IncompetentDev"},"content":"    private int index;","lastModifiedDate":"2022-02-17"},{"lineNumber":19,"author":{"gitId":"IncompetentDev"},"content":"    private HashMap\u003cString, String\u003e arguments;","lastModifiedDate":"2022-02-17"},{"lineNumber":20,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":21,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-17"},{"lineNumber":22,"author":{"gitId":"IncompetentDev"},"content":"     * Initialises the arguments input by the user for this class.","lastModifiedDate":"2022-02-17"},{"lineNumber":23,"author":{"gitId":"IncompetentDev"},"content":"     * @param parsedArguments arguments from Parser","lastModifiedDate":"2022-02-17"},{"lineNumber":24,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-17"},{"lineNumber":25,"author":{"gitId":"IncompetentDev"},"content":"    public UnmarkCommand(HashMap\u003cString, String\u003e parsedArguments) {","lastModifiedDate":"2022-02-17"},{"lineNumber":26,"author":{"gitId":"IncompetentDev"},"content":"        this.arguments \u003d parsedArguments;","lastModifiedDate":"2022-02-17"},{"lineNumber":27,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":28,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":29,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-17"},{"lineNumber":30,"author":{"gitId":"IncompetentDev"},"content":"     * Asserts user arguments can be converted to integer","lastModifiedDate":"2022-02-17"},{"lineNumber":31,"author":{"gitId":"IncompetentDev"},"content":"     *","lastModifiedDate":"2022-02-17"},{"lineNumber":32,"author":{"gitId":"IncompetentDev"},"content":"     * @throws InvalidArgumentException when argument entered is not an integer","lastModifiedDate":"2022-02-17"},{"lineNumber":33,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-17"},{"lineNumber":34,"author":{"gitId":"IncompetentDev"},"content":"    @Override","lastModifiedDate":"2022-02-17"},{"lineNumber":35,"author":{"gitId":"IncompetentDev"},"content":"    protected void assertArguments() throws InvalidArgumentException {","lastModifiedDate":"2022-02-17"},{"lineNumber":36,"author":{"gitId":"IncompetentDev"},"content":"        try {","lastModifiedDate":"2022-02-17"},{"lineNumber":37,"author":{"gitId":"IncompetentDev"},"content":"            this.index \u003d Integer.parseInt(arguments.get(\"\"))-1;","lastModifiedDate":"2022-02-17"},{"lineNumber":38,"author":{"gitId":"IncompetentDev"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2022-02-17"},{"lineNumber":39,"author":{"gitId":"IncompetentDev"},"content":"            throw new InvalidArgumentException(COMMAND_NAME, INVALID_INPUT);","lastModifiedDate":"2022-02-17"},{"lineNumber":40,"author":{"gitId":"IncompetentDev"},"content":"        }","lastModifiedDate":"2022-02-17"},{"lineNumber":41,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":42,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":43,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-17"},{"lineNumber":44,"author":{"gitId":"IncompetentDev"},"content":"     * Marks a task as not done, with index specified by user.","lastModifiedDate":"2022-02-17"},{"lineNumber":45,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-17"},{"lineNumber":46,"author":{"gitId":"IncompetentDev"},"content":"    public void execute() {","lastModifiedDate":"2022-02-17"},{"lineNumber":47,"author":{"gitId":"IncompetentDev"},"content":"        try {","lastModifiedDate":"2022-02-17"},{"lineNumber":48,"author":{"gitId":"IncompetentDev"},"content":"            assertArguments();","lastModifiedDate":"2022-02-17"},{"lineNumber":49,"author":{"gitId":"IncompetentDev"},"content":"            Task taskToMark \u003d this.taskList.get(index, true);","lastModifiedDate":"2022-02-18"},{"lineNumber":50,"author":{"gitId":"IncompetentDev"},"content":"            taskToMark.setIsDone(false);","lastModifiedDate":"2022-02-17"},{"lineNumber":51,"author":{"gitId":"IncompetentDev"},"content":"            System.out.printf((TASK_UNMARKED_MESSAGE_FORMAT) + \"%n\", taskToMark);","lastModifiedDate":"2022-02-17"},{"lineNumber":52,"author":{"gitId":"IncompetentDev"},"content":"        } catch (InvalidArgumentException e) {","lastModifiedDate":"2022-02-17"},{"lineNumber":53,"author":{"gitId":"IncompetentDev"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2022-02-17"},{"lineNumber":54,"author":{"gitId":"IncompetentDev"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2022-02-17"},{"lineNumber":55,"author":{"gitId":"IncompetentDev"},"content":"            InvalidArgumentException error \u003d new InvalidArgumentException(COMMAND_NAME, INVALID_TASK);","lastModifiedDate":"2022-02-17"},{"lineNumber":56,"author":{"gitId":"IncompetentDev"},"content":"            System.out.println(error.getMessage());","lastModifiedDate":"2022-02-17"},{"lineNumber":57,"author":{"gitId":"IncompetentDev"},"content":"        }","lastModifiedDate":"2022-02-17"},{"lineNumber":58,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":59,"author":{"gitId":"IncompetentDev"},"content":"}","lastModifiedDate":"2022-02-17"}],"authorContributionMap":{"IncompetentDev":59}},{"path":"src/main/java/duke/exceptions/EmptyCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IncompetentDev"},"content":"package duke.exceptions;","lastModifiedDate":"2022-02-11"},{"lineNumber":2,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":3,"author":{"gitId":"IncompetentDev"},"content":"public class EmptyCommandException extends Exception{","lastModifiedDate":"2022-02-11"},{"lineNumber":4,"author":{"gitId":"IncompetentDev"},"content":"    private static final String EMPTY_COMMAND_MESSAGE \u003d","lastModifiedDate":"2022-02-11"},{"lineNumber":5,"author":{"gitId":"IncompetentDev"},"content":"            \"____________________________________________________________\"","lastModifiedDate":"2022-02-11"},{"lineNumber":6,"author":{"gitId":"IncompetentDev"},"content":"            + \"\\n☹ OOPS!!! I\u0027m sorry, but command cannot be empty!\"","lastModifiedDate":"2022-02-11"},{"lineNumber":7,"author":{"gitId":"IncompetentDev"},"content":"            + \"\\n____________________________________________________________\";","lastModifiedDate":"2022-02-11"},{"lineNumber":8,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":9,"author":{"gitId":"IncompetentDev"},"content":"    public EmptyCommandException() {","lastModifiedDate":"2022-02-11"},{"lineNumber":10,"author":{"gitId":"IncompetentDev"},"content":"        super(EMPTY_COMMAND_MESSAGE);","lastModifiedDate":"2022-02-11"},{"lineNumber":11,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-11"},{"lineNumber":12,"author":{"gitId":"IncompetentDev"},"content":"}","lastModifiedDate":"2022-02-11"}],"authorContributionMap":{"IncompetentDev":12}},{"path":"src/main/java/duke/exceptions/InvalidArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IncompetentDev"},"content":"package duke.exceptions;","lastModifiedDate":"2022-02-11"},{"lineNumber":2,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":3,"author":{"gitId":"IncompetentDev"},"content":"public class InvalidArgumentException extends Exception {","lastModifiedDate":"2022-02-11"},{"lineNumber":4,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":5,"author":{"gitId":"IncompetentDev"},"content":"    private static final String INVALID_COMMAND_MESSAGE \u003d","lastModifiedDate":"2022-02-11"},{"lineNumber":6,"author":{"gitId":"IncompetentDev"},"content":"            \"____________________________________________________________\"","lastModifiedDate":"2022-02-11"},{"lineNumber":7,"author":{"gitId":"IncompetentDev"},"content":"            + \"\\n☹ OOPS!!! The command entered for %s ran into an error. The error: \\n%s\"","lastModifiedDate":"2022-02-17"},{"lineNumber":8,"author":{"gitId":"IncompetentDev"},"content":"            + \"\\n____________________________________________________________\";","lastModifiedDate":"2022-02-11"},{"lineNumber":9,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":10,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-17"},{"lineNumber":11,"author":{"gitId":"IncompetentDev"},"content":"     * Exception to represent any parsing or run-time errors such as indexoutofbounds.","lastModifiedDate":"2022-02-17"},{"lineNumber":12,"author":{"gitId":"IncompetentDev"},"content":"     * @param inputCommand representing the user\u0027s typed command","lastModifiedDate":"2022-02-17"},{"lineNumber":13,"author":{"gitId":"IncompetentDev"},"content":"     * @param errorMessage representing the error message to show","lastModifiedDate":"2022-02-17"},{"lineNumber":14,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-17"},{"lineNumber":15,"author":{"gitId":"IncompetentDev"},"content":"    public InvalidArgumentException(String inputCommand, String errorMessage) {","lastModifiedDate":"2022-02-17"},{"lineNumber":16,"author":{"gitId":"IncompetentDev"},"content":"        super(String.format(INVALID_COMMAND_MESSAGE, inputCommand, errorMessage));","lastModifiedDate":"2022-02-17"},{"lineNumber":17,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-11"},{"lineNumber":18,"author":{"gitId":"IncompetentDev"},"content":"}","lastModifiedDate":"2022-02-11"}],"authorContributionMap":{"IncompetentDev":18}},{"path":"src/main/java/duke/exceptions/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IncompetentDev"},"content":"package duke.exceptions;","lastModifiedDate":"2022-02-11"},{"lineNumber":2,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":3,"author":{"gitId":"IncompetentDev"},"content":"public class InvalidCommandException extends Exception {","lastModifiedDate":"2022-02-11"},{"lineNumber":4,"author":{"gitId":"IncompetentDev"},"content":"    private static final String INVALID_COMMAND_MESSAGE \u003d","lastModifiedDate":"2022-02-11"},{"lineNumber":5,"author":{"gitId":"IncompetentDev"},"content":"            \"____________________________________________________________\"","lastModifiedDate":"2022-02-11"},{"lineNumber":6,"author":{"gitId":"IncompetentDev"},"content":"            + \"\\n☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what \u0027%s\u0027 means :-(\"","lastModifiedDate":"2022-02-11"},{"lineNumber":7,"author":{"gitId":"IncompetentDev"},"content":"            + \"\\n____________________________________________________________\";","lastModifiedDate":"2022-02-11"},{"lineNumber":8,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":9,"author":{"gitId":"IncompetentDev"},"content":"    public InvalidCommandException(String errorCommand) {","lastModifiedDate":"2022-02-11"},{"lineNumber":10,"author":{"gitId":"IncompetentDev"},"content":"        super(String.format(INVALID_COMMAND_MESSAGE, errorCommand));","lastModifiedDate":"2022-02-11"},{"lineNumber":11,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-11"},{"lineNumber":12,"author":{"gitId":"IncompetentDev"},"content":"}","lastModifiedDate":"2022-02-11"}],"authorContributionMap":{"IncompetentDev":12}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IncompetentDev"},"content":"package duke.tasks;","lastModifiedDate":"2022-02-11"},{"lineNumber":2,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":3,"author":{"gitId":"IncompetentDev"},"content":"import java.util.Queue;","lastModifiedDate":"2022-02-18"},{"lineNumber":4,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":5,"author":{"gitId":"IncompetentDev"},"content":"public class Deadline extends Task {","lastModifiedDate":"2022-02-07"},{"lineNumber":6,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":7,"author":{"gitId":"IncompetentDev"},"content":"    // toString format string","lastModifiedDate":"2022-02-07"},{"lineNumber":8,"author":{"gitId":"IncompetentDev"},"content":"    private static final String FORMAT_STRING \u003d \"[%c][%c] %s (by: %s)\";","lastModifiedDate":"2022-02-18"},{"lineNumber":9,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":10,"author":{"gitId":"IncompetentDev"},"content":"    protected String byDate;","lastModifiedDate":"2022-02-07"},{"lineNumber":11,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":12,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-07"},{"lineNumber":13,"author":{"gitId":"IncompetentDev"},"content":"     * Create a Deadline with isDone set to false, description of choice and byDate of choice","lastModifiedDate":"2022-02-07"},{"lineNumber":14,"author":{"gitId":"IncompetentDev"},"content":"     *","lastModifiedDate":"2022-02-07"},{"lineNumber":15,"author":{"gitId":"IncompetentDev"},"content":"     * @param description Description of the Task to be created","lastModifiedDate":"2022-02-07"},{"lineNumber":16,"author":{"gitId":"IncompetentDev"},"content":"     * @param byDate String representing deadline","lastModifiedDate":"2022-02-07"},{"lineNumber":17,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-07"},{"lineNumber":18,"author":{"gitId":"IncompetentDev"},"content":"    public Deadline(String description, String byDate) {","lastModifiedDate":"2022-02-07"},{"lineNumber":19,"author":{"gitId":"IncompetentDev"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-02-11"},{"lineNumber":20,"author":{"gitId":"IncompetentDev"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-02-11"},{"lineNumber":21,"author":{"gitId":"IncompetentDev"},"content":"        this.byDate \u003d byDate;","lastModifiedDate":"2022-02-07"},{"lineNumber":22,"author":{"gitId":"IncompetentDev"},"content":"        this.tag \u003d \u0027D\u0027;","lastModifiedDate":"2022-02-18"},{"lineNumber":23,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":24,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":25,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-07"},{"lineNumber":26,"author":{"gitId":"IncompetentDev"},"content":"     * Returns the byDate associated with deadline","lastModifiedDate":"2022-02-07"},{"lineNumber":27,"author":{"gitId":"IncompetentDev"},"content":"     *","lastModifiedDate":"2022-02-07"},{"lineNumber":28,"author":{"gitId":"IncompetentDev"},"content":"     * @return byDate","lastModifiedDate":"2022-02-07"},{"lineNumber":29,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-07"},{"lineNumber":30,"author":{"gitId":"IncompetentDev"},"content":"    public String getByDate() {","lastModifiedDate":"2022-02-07"},{"lineNumber":31,"author":{"gitId":"IncompetentDev"},"content":"        return this.byDate;","lastModifiedDate":"2022-02-11"},{"lineNumber":32,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":33,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":34,"author":{"gitId":"IncompetentDev"},"content":"    @Override","lastModifiedDate":"2022-02-07"},{"lineNumber":35,"author":{"gitId":"IncompetentDev"},"content":"    public String toString() {","lastModifiedDate":"2022-02-07"},{"lineNumber":36,"author":{"gitId":"IncompetentDev"},"content":"        return String.format(FORMAT_STRING, this.getTag(), this.getIsDone(), this.getDescription(), this.getByDate());","lastModifiedDate":"2022-02-18"},{"lineNumber":37,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":38,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":39,"author":{"gitId":"IncompetentDev"},"content":"    @Override","lastModifiedDate":"2022-02-18"},{"lineNumber":40,"author":{"gitId":"IncompetentDev"},"content":"    public void getFileWriterFormatString(Queue\u003cString\u003e infoToWrite) {","lastModifiedDate":"2022-02-18"},{"lineNumber":41,"author":{"gitId":"IncompetentDev"},"content":"        super.getFileWriterFormatString(infoToWrite);","lastModifiedDate":"2022-02-18"},{"lineNumber":42,"author":{"gitId":"IncompetentDev"},"content":"        infoToWrite.add(this.byDate);","lastModifiedDate":"2022-02-18"},{"lineNumber":43,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":44,"author":{"gitId":"IncompetentDev"},"content":"}","lastModifiedDate":"2022-02-07"}],"authorContributionMap":{"IncompetentDev":44}},{"path":"src/main/java/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IncompetentDev"},"content":"package duke.tasks;","lastModifiedDate":"2022-02-11"},{"lineNumber":2,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":3,"author":{"gitId":"IncompetentDev"},"content":"import java.util.Queue;","lastModifiedDate":"2022-02-18"},{"lineNumber":4,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":5,"author":{"gitId":"IncompetentDev"},"content":"public class Event extends Task {","lastModifiedDate":"2022-02-07"},{"lineNumber":6,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":7,"author":{"gitId":"IncompetentDev"},"content":"    private static final String FORMAT_STRING \u003d \"[%c][%c] %s (at: %s)\";","lastModifiedDate":"2022-02-18"},{"lineNumber":8,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":9,"author":{"gitId":"IncompetentDev"},"content":"    protected String atDate;","lastModifiedDate":"2022-02-07"},{"lineNumber":10,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":11,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-07"},{"lineNumber":12,"author":{"gitId":"IncompetentDev"},"content":"     * Create an Event with isDone set to false, description of choice and atDate of choice","lastModifiedDate":"2022-02-07"},{"lineNumber":13,"author":{"gitId":"IncompetentDev"},"content":"     *","lastModifiedDate":"2022-02-07"},{"lineNumber":14,"author":{"gitId":"IncompetentDev"},"content":"     * @param description Description of the Task to be created","lastModifiedDate":"2022-02-07"},{"lineNumber":15,"author":{"gitId":"IncompetentDev"},"content":"     * @param atDate String representing event time","lastModifiedDate":"2022-02-07"},{"lineNumber":16,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-07"},{"lineNumber":17,"author":{"gitId":"IncompetentDev"},"content":"    public Event(String description, String atDate) {","lastModifiedDate":"2022-02-07"},{"lineNumber":18,"author":{"gitId":"IncompetentDev"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-02-11"},{"lineNumber":19,"author":{"gitId":"IncompetentDev"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-02-11"},{"lineNumber":20,"author":{"gitId":"IncompetentDev"},"content":"        this.atDate \u003d atDate;","lastModifiedDate":"2022-02-07"},{"lineNumber":21,"author":{"gitId":"IncompetentDev"},"content":"        this.tag \u003d \u0027E\u0027;","lastModifiedDate":"2022-02-18"},{"lineNumber":22,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":23,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":24,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-07"},{"lineNumber":25,"author":{"gitId":"IncompetentDev"},"content":"     * Returns the atDate associated with event","lastModifiedDate":"2022-02-07"},{"lineNumber":26,"author":{"gitId":"IncompetentDev"},"content":"     *","lastModifiedDate":"2022-02-07"},{"lineNumber":27,"author":{"gitId":"IncompetentDev"},"content":"     * @return byDate","lastModifiedDate":"2022-02-07"},{"lineNumber":28,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-07"},{"lineNumber":29,"author":{"gitId":"IncompetentDev"},"content":"    public String getAtDate() {","lastModifiedDate":"2022-02-07"},{"lineNumber":30,"author":{"gitId":"IncompetentDev"},"content":"        return this.atDate;","lastModifiedDate":"2022-02-11"},{"lineNumber":31,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":32,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":33,"author":{"gitId":"IncompetentDev"},"content":"    @Override","lastModifiedDate":"2022-02-07"},{"lineNumber":34,"author":{"gitId":"IncompetentDev"},"content":"    public String toString() {","lastModifiedDate":"2022-02-07"},{"lineNumber":35,"author":{"gitId":"IncompetentDev"},"content":"        return String.format(FORMAT_STRING, this.getTag(), this.getIsDone(), this.getDescription(), this.getAtDate());","lastModifiedDate":"2022-02-18"},{"lineNumber":36,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":37,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":38,"author":{"gitId":"IncompetentDev"},"content":"    @Override","lastModifiedDate":"2022-02-18"},{"lineNumber":39,"author":{"gitId":"IncompetentDev"},"content":"    public void getFileWriterFormatString(Queue\u003cString\u003e infoToWrite) {","lastModifiedDate":"2022-02-18"},{"lineNumber":40,"author":{"gitId":"IncompetentDev"},"content":"        super.getFileWriterFormatString(infoToWrite);","lastModifiedDate":"2022-02-18"},{"lineNumber":41,"author":{"gitId":"IncompetentDev"},"content":"        infoToWrite.add(atDate);","lastModifiedDate":"2022-02-18"},{"lineNumber":42,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":43,"author":{"gitId":"IncompetentDev"},"content":"}","lastModifiedDate":"2022-02-07"}],"authorContributionMap":{"IncompetentDev":43}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IncompetentDev"},"content":"package duke.tasks;","lastModifiedDate":"2022-02-11"},{"lineNumber":2,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":3,"author":{"gitId":"IncompetentDev"},"content":"import java.util.Queue;","lastModifiedDate":"2022-02-18"},{"lineNumber":4,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":5,"author":{"gitId":"IncompetentDev"},"content":"public abstract class Task {","lastModifiedDate":"2022-02-11"},{"lineNumber":6,"author":{"gitId":"IncompetentDev"},"content":"    protected String description;","lastModifiedDate":"2022-01-30"},{"lineNumber":7,"author":{"gitId":"IncompetentDev"},"content":"    protected boolean isDone;","lastModifiedDate":"2022-01-30"},{"lineNumber":8,"author":{"gitId":"IncompetentDev"},"content":"    protected char tag;","lastModifiedDate":"2022-02-18"},{"lineNumber":9,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":10,"author":{"gitId":"IncompetentDev"},"content":"    // toString format string","lastModifiedDate":"2022-02-18"},{"lineNumber":11,"author":{"gitId":"IncompetentDev"},"content":"    protected static final String TOSTRING_FORMAT_STRING \u003d \"[%c][%c] %s\";","lastModifiedDate":"2022-02-18"},{"lineNumber":12,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":13,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-07"},{"lineNumber":14,"author":{"gitId":"IncompetentDev"},"content":"     * Returns a String representing the description for the Task.","lastModifiedDate":"2022-02-07"},{"lineNumber":15,"author":{"gitId":"IncompetentDev"},"content":"     *","lastModifiedDate":"2022-02-07"},{"lineNumber":16,"author":{"gitId":"IncompetentDev"},"content":"     * @return Description of Task","lastModifiedDate":"2022-02-07"},{"lineNumber":17,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-07"},{"lineNumber":18,"author":{"gitId":"IncompetentDev"},"content":"    public String getDescription() {","lastModifiedDate":"2022-01-30"},{"lineNumber":19,"author":{"gitId":"IncompetentDev"},"content":"        return this.description;","lastModifiedDate":"2022-02-11"},{"lineNumber":20,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":21,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":22,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-07"},{"lineNumber":23,"author":{"gitId":"IncompetentDev"},"content":"     * Returns a character that appropriately represents the state of Task completion","lastModifiedDate":"2022-02-07"},{"lineNumber":24,"author":{"gitId":"IncompetentDev"},"content":"     *","lastModifiedDate":"2022-02-07"},{"lineNumber":25,"author":{"gitId":"IncompetentDev"},"content":"     * @return char \u0027X\u0027 if done, \u0027 \u0027 if not done.","lastModifiedDate":"2022-02-07"},{"lineNumber":26,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-07"},{"lineNumber":27,"author":{"gitId":"IncompetentDev"},"content":"    public char getIsDone() {","lastModifiedDate":"2022-02-17"},{"lineNumber":28,"author":{"gitId":"IncompetentDev"},"content":"        return (this.isDone ? \u0027X\u0027 : \u0027 \u0027);","lastModifiedDate":"2022-02-11"},{"lineNumber":29,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":30,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":31,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-07"},{"lineNumber":32,"author":{"gitId":"IncompetentDev"},"content":"     * Sets a boolean value for isDone","lastModifiedDate":"2022-02-07"},{"lineNumber":33,"author":{"gitId":"IncompetentDev"},"content":"     *","lastModifiedDate":"2022-02-07"},{"lineNumber":34,"author":{"gitId":"IncompetentDev"},"content":"     * @param isDone boolean value representing completion of Task","lastModifiedDate":"2022-02-07"},{"lineNumber":35,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-07"},{"lineNumber":36,"author":{"gitId":"IncompetentDev"},"content":"    public void setIsDone(boolean isDone) {","lastModifiedDate":"2022-02-17"},{"lineNumber":37,"author":{"gitId":"IncompetentDev"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2022-02-07"},{"lineNumber":38,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":39,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":40,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-18"},{"lineNumber":41,"author":{"gitId":"IncompetentDev"},"content":"     * Return the tag assigned to the class.","lastModifiedDate":"2022-02-18"},{"lineNumber":42,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-18"},{"lineNumber":43,"author":{"gitId":"IncompetentDev"},"content":"    public char getTag() {","lastModifiedDate":"2022-02-18"},{"lineNumber":44,"author":{"gitId":"IncompetentDev"},"content":"        return this.tag;","lastModifiedDate":"2022-02-18"},{"lineNumber":45,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":46,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":47,"author":{"gitId":"IncompetentDev"},"content":"    @Override","lastModifiedDate":"2022-02-18"},{"lineNumber":48,"author":{"gitId":"IncompetentDev"},"content":"    public String toString() {","lastModifiedDate":"2022-02-18"},{"lineNumber":49,"author":{"gitId":"IncompetentDev"},"content":"        return String.format(Task.TOSTRING_FORMAT_STRING, this.getTag(), this.getIsDone(), this.getDescription());","lastModifiedDate":"2022-02-18"},{"lineNumber":50,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":51,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":52,"author":{"gitId":"IncompetentDev"},"content":"    public void getFileWriterFormatString(Queue\u003cString\u003e infoToWrite) {","lastModifiedDate":"2022-02-18"},{"lineNumber":53,"author":{"gitId":"IncompetentDev"},"content":"        infoToWrite.add(String.valueOf(this.getTag()));","lastModifiedDate":"2022-02-18"},{"lineNumber":54,"author":{"gitId":"IncompetentDev"},"content":"        infoToWrite.add(this.isDone ? \"1\" : \"0\");","lastModifiedDate":"2022-02-18"},{"lineNumber":55,"author":{"gitId":"IncompetentDev"},"content":"        infoToWrite.add(this.getDescription());","lastModifiedDate":"2022-02-18"},{"lineNumber":56,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":57,"author":{"gitId":"IncompetentDev"},"content":"}","lastModifiedDate":"2022-01-30"}],"authorContributionMap":{"IncompetentDev":57}},{"path":"src/main/java/duke/tasks/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IncompetentDev"},"content":"package duke.tasks;","lastModifiedDate":"2022-02-18"},{"lineNumber":2,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":3,"author":{"gitId":"IncompetentDev"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-18"},{"lineNumber":4,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":5,"author":{"gitId":"IncompetentDev"},"content":"public class TaskList\u003cE\u003e extends ArrayList\u003cE\u003e {","lastModifiedDate":"2022-02-18"},{"lineNumber":6,"author":{"gitId":"IncompetentDev"},"content":"    private boolean listHasChanged;","lastModifiedDate":"2022-02-18"},{"lineNumber":7,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":8,"author":{"gitId":"IncompetentDev"},"content":"    public TaskList() {","lastModifiedDate":"2022-02-18"},{"lineNumber":9,"author":{"gitId":"IncompetentDev"},"content":"        super();","lastModifiedDate":"2022-02-18"},{"lineNumber":10,"author":{"gitId":"IncompetentDev"},"content":"        this.listHasChanged \u003d false;","lastModifiedDate":"2022-02-18"},{"lineNumber":11,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":12,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":13,"author":{"gitId":"IncompetentDev"},"content":"    public E get(int index, boolean mark) {","lastModifiedDate":"2022-02-18"},{"lineNumber":14,"author":{"gitId":"IncompetentDev"},"content":"        setListHasChanged(mark);","lastModifiedDate":"2022-02-18"},{"lineNumber":15,"author":{"gitId":"IncompetentDev"},"content":"        return super.get(index);","lastModifiedDate":"2022-02-18"},{"lineNumber":16,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":17,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":18,"author":{"gitId":"IncompetentDev"},"content":"    @Override","lastModifiedDate":"2022-02-18"},{"lineNumber":19,"author":{"gitId":"IncompetentDev"},"content":"    public boolean add(E element) {","lastModifiedDate":"2022-02-18"},{"lineNumber":20,"author":{"gitId":"IncompetentDev"},"content":"        setListHasChanged(true);","lastModifiedDate":"2022-02-18"},{"lineNumber":21,"author":{"gitId":"IncompetentDev"},"content":"        return super.add(element);","lastModifiedDate":"2022-02-18"},{"lineNumber":22,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":23,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":24,"author":{"gitId":"IncompetentDev"},"content":"    @Override","lastModifiedDate":"2022-02-18"},{"lineNumber":25,"author":{"gitId":"IncompetentDev"},"content":"    public boolean remove(Object o) {","lastModifiedDate":"2022-02-18"},{"lineNumber":26,"author":{"gitId":"IncompetentDev"},"content":"        setListHasChanged(true);","lastModifiedDate":"2022-02-18"},{"lineNumber":27,"author":{"gitId":"IncompetentDev"},"content":"        return super.remove(o);","lastModifiedDate":"2022-02-18"},{"lineNumber":28,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":29,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":30,"author":{"gitId":"IncompetentDev"},"content":"    @Override","lastModifiedDate":"2022-02-18"},{"lineNumber":31,"author":{"gitId":"IncompetentDev"},"content":"    public E remove(int index) {","lastModifiedDate":"2022-02-18"},{"lineNumber":32,"author":{"gitId":"IncompetentDev"},"content":"        this.listHasChanged \u003d true;","lastModifiedDate":"2022-02-18"},{"lineNumber":33,"author":{"gitId":"IncompetentDev"},"content":"        return super.remove(index);","lastModifiedDate":"2022-02-18"},{"lineNumber":34,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":35,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":36,"author":{"gitId":"IncompetentDev"},"content":"    public boolean getListHasChanged() {","lastModifiedDate":"2022-02-18"},{"lineNumber":37,"author":{"gitId":"IncompetentDev"},"content":"        return this.listHasChanged;","lastModifiedDate":"2022-02-18"},{"lineNumber":38,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":39,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":40,"author":{"gitId":"IncompetentDev"},"content":"    public void setListHasChanged(boolean changed) {","lastModifiedDate":"2022-02-18"},{"lineNumber":41,"author":{"gitId":"IncompetentDev"},"content":"        this.listHasChanged \u003d changed;","lastModifiedDate":"2022-02-18"},{"lineNumber":42,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":43,"author":{"gitId":"IncompetentDev"},"content":"}","lastModifiedDate":"2022-02-18"}],"authorContributionMap":{"IncompetentDev":43}},{"path":"src/main/java/duke/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IncompetentDev"},"content":"package duke.tasks;","lastModifiedDate":"2022-02-11"},{"lineNumber":2,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":3,"author":{"gitId":"IncompetentDev"},"content":"public class Todo extends Task {","lastModifiedDate":"2022-02-07"},{"lineNumber":4,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":5,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-07"},{"lineNumber":6,"author":{"gitId":"IncompetentDev"},"content":"     * Create a Todo with isDone set to false and description of choice","lastModifiedDate":"2022-02-07"},{"lineNumber":7,"author":{"gitId":"IncompetentDev"},"content":"     *","lastModifiedDate":"2022-02-07"},{"lineNumber":8,"author":{"gitId":"IncompetentDev"},"content":"     * @param description Description of the Task to be created","lastModifiedDate":"2022-02-07"},{"lineNumber":9,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-07"},{"lineNumber":10,"author":{"gitId":"IncompetentDev"},"content":"    public Todo(String description) {","lastModifiedDate":"2022-02-07"},{"lineNumber":11,"author":{"gitId":"IncompetentDev"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-02-11"},{"lineNumber":12,"author":{"gitId":"IncompetentDev"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-02-11"},{"lineNumber":13,"author":{"gitId":"IncompetentDev"},"content":"        this.tag \u003d \u0027T\u0027;","lastModifiedDate":"2022-02-18"},{"lineNumber":14,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":15,"author":{"gitId":"IncompetentDev"},"content":"}","lastModifiedDate":"2022-02-07"}],"authorContributionMap":{"IncompetentDev":15}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"IncompetentDev"},"content":"todo asdasd","lastModifiedDate":"2022-02-07"},{"lineNumber":2,"author":{"gitId":"IncompetentDev"},"content":"deadline asdasd /by test","lastModifiedDate":"2022-02-07"},{"lineNumber":3,"author":{"gitId":"IncompetentDev"},"content":"event asdasdasd /at test","lastModifiedDate":"2022-02-07"},{"lineNumber":4,"author":{"gitId":"IncompetentDev"},"content":"list","lastModifiedDate":"2022-02-07"},{"lineNumber":5,"author":{"gitId":"IncompetentDev"},"content":"mark 3","lastModifiedDate":"2022-02-10"},{"lineNumber":6,"author":{"gitId":"IncompetentDev"},"content":"list","lastModifiedDate":"2022-02-07"},{"lineNumber":7,"author":{"gitId":"IncompetentDev"},"content":"unmark 3","lastModifiedDate":"2022-02-10"},{"lineNumber":8,"author":{"gitId":"IncompetentDev"},"content":"list","lastModifiedDate":"2022-02-07"},{"lineNumber":9,"author":{"gitId":"IncompetentDev"},"content":"mark 3","lastModifiedDate":"2022-02-10"},{"lineNumber":10,"author":{"gitId":"IncompetentDev"},"content":"list","lastModifiedDate":"2022-02-07"},{"lineNumber":11,"author":{"gitId":"IncompetentDev"},"content":"mark 2","lastModifiedDate":"2022-02-10"},{"lineNumber":12,"author":{"gitId":"IncompetentDev"},"content":"list","lastModifiedDate":"2022-02-07"},{"lineNumber":13,"author":{"gitId":"IncompetentDev"},"content":"mark 4","lastModifiedDate":"2022-02-17"},{"lineNumber":14,"author":{"gitId":"IncompetentDev"},"content":"mark","lastModifiedDate":"2022-02-17"},{"lineNumber":15,"author":{"gitId":"IncompetentDev"},"content":"invalidcommand","lastModifiedDate":"2022-02-11"},{"lineNumber":16,"author":{"gitId":"IncompetentDev"},"content":"todo","lastModifiedDate":"2022-02-11"},{"lineNumber":17,"author":{"gitId":"IncompetentDev"},"content":"todo /by asd","lastModifiedDate":"2022-02-17"},{"lineNumber":18,"author":{"gitId":"IncompetentDev"},"content":"deadline asdasd","lastModifiedDate":"2022-02-11"},{"lineNumber":19,"author":{"gitId":"IncompetentDev"},"content":"deadline asdasd /at test","lastModifiedDate":"2022-02-11"},{"lineNumber":20,"author":{"gitId":"IncompetentDev"},"content":"deadline /by test","lastModifiedDate":"2022-02-11"},{"lineNumber":21,"author":{"gitId":"IncompetentDev"},"content":"event asdads","lastModifiedDate":"2022-02-11"},{"lineNumber":22,"author":{"gitId":"IncompetentDev"},"content":"event asdasd /by test","lastModifiedDate":"2022-02-11"},{"lineNumber":23,"author":{"gitId":"IncompetentDev"},"content":"event /at test","lastModifiedDate":"2022-02-11"},{"lineNumber":24,"author":{"gitId":"IncompetentDev"},"content":"bye","lastModifiedDate":"2022-02-07"}],"authorContributionMap":{"IncompetentDev":24}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"IncompetentDev"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java ..\\src\\main\\java\\duke\\exceptions\\*.java ..\\src\\main\\java\\duke\\tasks\\*.java","lastModifiedDate":"2022-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"IncompetentDev"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2022-02-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"IncompetentDev":2,"-":19}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"IncompetentDev"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/duke/*.java ../src/main/java/duke/exceptions/*.java ../src/main/java/duke/tasks/*.java","lastModifiedDate":"2022-02-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"IncompetentDev"},"content":"java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2022-02-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"IncompetentDev":2,"-":36}}]
