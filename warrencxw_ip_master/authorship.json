[{"path":"src/main/java/duke/Display.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"warrencxw"},"content":"package duke;","lastModifiedDate":"2022-02-06"},{"lineNumber":2,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":3,"author":{"gitId":"warrencxw"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-02-21"},{"lineNumber":4,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-16"},{"lineNumber":5,"author":{"gitId":"warrencxw"},"content":"/**","lastModifiedDate":"2022-02-21"},{"lineNumber":6,"author":{"gitId":"warrencxw"},"content":" * Represents the interface between the user and the program.","lastModifiedDate":"2022-02-21"},{"lineNumber":7,"author":{"gitId":"warrencxw"},"content":" * Handles the printing of any messages from the program to the user","lastModifiedDate":"2022-02-21"},{"lineNumber":8,"author":{"gitId":"warrencxw"},"content":" * and the reading of any messages from the user to the program.","lastModifiedDate":"2022-02-21"},{"lineNumber":9,"author":{"gitId":"warrencxw"},"content":" */","lastModifiedDate":"2022-02-21"},{"lineNumber":10,"author":{"gitId":"warrencxw"},"content":"public class Display {","lastModifiedDate":"2022-02-05"},{"lineNumber":11,"author":{"gitId":"warrencxw"},"content":"    Scanner in;","lastModifiedDate":"2022-02-21"},{"lineNumber":12,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":13,"author":{"gitId":"warrencxw"},"content":"    // Types of errors","lastModifiedDate":"2022-02-05"},{"lineNumber":14,"author":{"gitId":"warrencxw"},"content":"    public enum ErrorType {","lastModifiedDate":"2022-02-05"},{"lineNumber":15,"author":{"gitId":"warrencxw"},"content":"        MISSING_TASK_NO, INVALID_TASK_NO, EMPTY_INPUT, EMPTY_TASK_NAME,","lastModifiedDate":"2022-02-05"},{"lineNumber":16,"author":{"gitId":"warrencxw"},"content":"        MISSING_EVENT_DELIMITER, MISSING_DEADLINE_DELIMITER, INVALID_DATE,","lastModifiedDate":"2022-02-21"},{"lineNumber":17,"author":{"gitId":"warrencxw"},"content":"        MISSING_SUBSTRING, EMPTY_TASK_LIST, COMMAND_NOT_RECOGNISED, CSV_DELIMITER_IN_TASK,","lastModifiedDate":"2022-02-21"},{"lineNumber":18,"author":{"gitId":"warrencxw"},"content":"        FILE_CREATION_FAILED, SAVE_LOAD_FAILED, SAVE_WRITE_FAILED","lastModifiedDate":"2022-02-16"},{"lineNumber":19,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-05"},{"lineNumber":20,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":21,"author":{"gitId":"warrencxw"},"content":"    // Error Messages","lastModifiedDate":"2022-02-05"},{"lineNumber":22,"author":{"gitId":"warrencxw"},"content":"    private static final String ERROR_MISSING_TASK_NO \u003d","lastModifiedDate":"2022-02-21"},{"lineNumber":23,"author":{"gitId":"warrencxw"},"content":"            \"Please specify a task number.\";","lastModifiedDate":"2022-02-21"},{"lineNumber":24,"author":{"gitId":"warrencxw"},"content":"    private static final String ERROR_INVALID_TASK_NO \u003d","lastModifiedDate":"2022-02-21"},{"lineNumber":25,"author":{"gitId":"warrencxw"},"content":"            \"The input task number you have entered is invalid.\";","lastModifiedDate":"2022-02-05"},{"lineNumber":26,"author":{"gitId":"warrencxw"},"content":"    private static final String ERROR_EMPTY_INPUT \u003d","lastModifiedDate":"2022-02-21"},{"lineNumber":27,"author":{"gitId":"warrencxw"},"content":"            \"Please enter either a task to do, mark/unmark \u003ctask number\u003e or list\";","lastModifiedDate":"2022-02-05"},{"lineNumber":28,"author":{"gitId":"warrencxw"},"content":"    private static final String ERROR_EMPTY_TASK_NAME \u003d","lastModifiedDate":"2022-02-21"},{"lineNumber":29,"author":{"gitId":"warrencxw"},"content":"            \"Please enter a name for your task.\\n\"","lastModifiedDate":"2022-02-05"},{"lineNumber":30,"author":{"gitId":"warrencxw"},"content":"                    + \"SYNTAX: todo \u003ctodo name\u003e\\n\"","lastModifiedDate":"2022-02-05"},{"lineNumber":31,"author":{"gitId":"warrencxw"},"content":"                    + \"        event \u003cevent name\u003e /at \u003cYYYY-MM-DD\u003e\\n\"","lastModifiedDate":"2022-02-21"},{"lineNumber":32,"author":{"gitId":"warrencxw"},"content":"                    + \"        deadline \u003cdeadline name\u003e /by \u003cYYYY-MM-DD\u003e\";","lastModifiedDate":"2022-02-21"},{"lineNumber":33,"author":{"gitId":"warrencxw"},"content":"    private static final String ERROR_MISSING_EVENT_DELIMITER \u003d","lastModifiedDate":"2022-02-21"},{"lineNumber":34,"author":{"gitId":"warrencxw"},"content":"            \"Please specify a time range for the event with the delimiter \\\"/at\\\"\\n\"","lastModifiedDate":"2022-02-05"},{"lineNumber":35,"author":{"gitId":"warrencxw"},"content":"                    + \"SYNTAX: event \u003cevent name\u003e /at \u003cYYYY-MM-DD\u003e\";","lastModifiedDate":"2022-02-21"},{"lineNumber":36,"author":{"gitId":"warrencxw"},"content":"    private static final String ERROR_MISSING_DEADLINE_DELIMITER \u003d","lastModifiedDate":"2022-02-21"},{"lineNumber":37,"author":{"gitId":"warrencxw"},"content":"            \"Please specify a deadline for the task with the delimiter \\\"/by\\\"\\n\"","lastModifiedDate":"2022-02-05"},{"lineNumber":38,"author":{"gitId":"warrencxw"},"content":"                    + \"SYNTAX: deadline \u003cdeadline name\u003e /by \u003cYYYY-MM-DD\u003e\";","lastModifiedDate":"2022-02-21"},{"lineNumber":39,"author":{"gitId":"warrencxw"},"content":"    private static final String ERROR_MISSING_SUBSTRING \u003d","lastModifiedDate":"2022-02-21"},{"lineNumber":40,"author":{"gitId":"warrencxw"},"content":"            \"Please specify a substring to search the task list with.\\n\" ","lastModifiedDate":"2022-02-21"},{"lineNumber":41,"author":{"gitId":"warrencxw"},"content":"                    + \"SYNTAX: find \u003csubstring\u003e\";","lastModifiedDate":"2022-02-21"},{"lineNumber":42,"author":{"gitId":"warrencxw"},"content":"    private static final String ERROR_INVALID_DATE \u003d","lastModifiedDate":"2022-02-21"},{"lineNumber":43,"author":{"gitId":"warrencxw"},"content":"            \"Please specify the date in a valid format as follows.\\n\"","lastModifiedDate":"2022-02-21"},{"lineNumber":44,"author":{"gitId":"warrencxw"},"content":"                    + \"SYNTAX: event \u003cevent name\u003e /at \u003cYYYY-MM-DD\u003e\\n\"","lastModifiedDate":"2022-02-21"},{"lineNumber":45,"author":{"gitId":"warrencxw"},"content":"                    + \"        deadline \u003cdeadline name\u003e /by \u003cYYYY-MM-DD\u003e\";","lastModifiedDate":"2022-02-21"},{"lineNumber":46,"author":{"gitId":"warrencxw"},"content":"    private static final String ERROR_EMPTY_TASK_LIST \u003d","lastModifiedDate":"2022-02-21"},{"lineNumber":47,"author":{"gitId":"warrencxw"},"content":"            \"The task list is empty!\";","lastModifiedDate":"2022-02-05"},{"lineNumber":48,"author":{"gitId":"warrencxw"},"content":"    private static final String ERROR_COMMAND_NOT_RECOGNISED \u003d","lastModifiedDate":"2022-02-21"},{"lineNumber":49,"author":{"gitId":"warrencxw"},"content":"            \"The input that you have entered is not recognised, enter \u0027help\u0027 to see available commands.\";","lastModifiedDate":"2022-02-05"},{"lineNumber":50,"author":{"gitId":"warrencxw"},"content":"    private static final String ERROR_CSV_DELIMITER_IN_TASK \u003d","lastModifiedDate":"2022-02-21"},{"lineNumber":51,"author":{"gitId":"warrencxw"},"content":"            \"The delimiter \u0027\" + Duke.CSV_DELIMITER + \"\u0027 is not allowed to be included in any part of the Task.\\n\"","lastModifiedDate":"2022-02-16"},{"lineNumber":52,"author":{"gitId":"warrencxw"},"content":"                    + \"Please try again after omitting it!\";","lastModifiedDate":"2022-02-16"},{"lineNumber":53,"author":{"gitId":"warrencxw"},"content":"    private static final String ERROR_FILE_CREATION_FAILED \u003d","lastModifiedDate":"2022-02-21"},{"lineNumber":54,"author":{"gitId":"warrencxw"},"content":"            \"The save system was unable to create the save file for this program. Any tasks created will not be saved.\";","lastModifiedDate":"2022-02-16"},{"lineNumber":55,"author":{"gitId":"warrencxw"},"content":"    private static final String ERROR_SAVE_LOAD_FAILED \u003d","lastModifiedDate":"2022-02-21"},{"lineNumber":56,"author":{"gitId":"warrencxw"},"content":"            \"The save system attempted to look for a save file, but encountered errors in the process of doing so.\\n\"","lastModifiedDate":"2022-02-16"},{"lineNumber":57,"author":{"gitId":"warrencxw"},"content":"                    + \"The program will proceed with running as if there was no save files.\";","lastModifiedDate":"2022-02-16"},{"lineNumber":58,"author":{"gitId":"warrencxw"},"content":"    private static final String ERROR_SAVE_WRITE_FAILED \u003d","lastModifiedDate":"2022-02-21"},{"lineNumber":59,"author":{"gitId":"warrencxw"},"content":"            \"The save system attempted to write to a save file, but encountered errors in the process of doing so.\\n\"","lastModifiedDate":"2022-02-16"},{"lineNumber":60,"author":{"gitId":"warrencxw"},"content":"                    + \"The program will proceed with running without saving.\";","lastModifiedDate":"2022-02-16"},{"lineNumber":61,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":62,"author":{"gitId":"warrencxw"},"content":"    // Text Constants","lastModifiedDate":"2022-02-05"},{"lineNumber":63,"author":{"gitId":"warrencxw"},"content":"    public static final String RABBIT_ASCII \u003d","lastModifiedDate":"2022-02-05"},{"lineNumber":64,"author":{"gitId":"warrencxw"},"content":"            \"                      /|      __\\n\"","lastModifiedDate":"2022-02-05"},{"lineNumber":65,"author":{"gitId":"warrencxw"},"content":"                    + \"*             +      / |   ,-~ /             +\\n\"","lastModifiedDate":"2022-02-05"},{"lineNumber":66,"author":{"gitId":"warrencxw"},"content":"                    + \"     .              Y :|  //  /                .         *\\n\"","lastModifiedDate":"2022-02-05"},{"lineNumber":67,"author":{"gitId":"warrencxw"},"content":"                    + \"         .          | jj /( .^     *\\n\"","lastModifiedDate":"2022-02-05"},{"lineNumber":68,"author":{"gitId":"warrencxw"},"content":"                    + \"               *    \u003e-\\\"~\\\"-v\\\"              .        *        .\\n\"","lastModifiedDate":"2022-02-05"},{"lineNumber":69,"author":{"gitId":"warrencxw"},"content":"                    + \"*                  /       Y\\n\"","lastModifiedDate":"2022-02-05"},{"lineNumber":70,"author":{"gitId":"warrencxw"},"content":"                    + \"   .     .        jo  o    |     .            +\\n\"","lastModifiedDate":"2022-02-05"},{"lineNumber":71,"author":{"gitId":"warrencxw"},"content":"                    + \"                 ( ~T~     j                     +     .\\n\"","lastModifiedDate":"2022-02-05"},{"lineNumber":72,"author":{"gitId":"warrencxw"},"content":"                    + \"      +           \u003e._-\u0027 _./         +\\n\"","lastModifiedDate":"2022-02-05"},{"lineNumber":73,"author":{"gitId":"warrencxw"},"content":"                    + \"               /| ;-\\\"~ _  l\\n\"","lastModifiedDate":"2022-02-05"},{"lineNumber":74,"author":{"gitId":"warrencxw"},"content":"                    + \"  .           / l/ ,-\\\"~    \\\\     +\\n\"","lastModifiedDate":"2022-02-05"},{"lineNumber":75,"author":{"gitId":"warrencxw"},"content":"                    + \"              \\\\//\\\\/      .- \\\\\\n\"","lastModifiedDate":"2022-02-05"},{"lineNumber":76,"author":{"gitId":"warrencxw"},"content":"                    + \"       +       Y        /    Y\\n\"","lastModifiedDate":"2022-02-05"},{"lineNumber":77,"author":{"gitId":"warrencxw"},"content":"                    + \"               l       I     !\\n\"","lastModifiedDate":"2022-02-05"},{"lineNumber":78,"author":{"gitId":"warrencxw"},"content":"                    + \"               ]\\\\      _\\\\    /\\\"\\\\\\n\"","lastModifiedDate":"2022-02-05"},{"lineNumber":79,"author":{"gitId":"warrencxw"},"content":"                    + \"              (\\\" ~----( ~   Y.  )\\n\"","lastModifiedDate":"2022-02-05"},{"lineNumber":80,"author":{"gitId":"warrencxw"},"content":"                    + \"          ~~~~~~~~~~~~~~~~~~~~~~~~~~\\n\";","lastModifiedDate":"2022-02-05"},{"lineNumber":81,"author":{"gitId":"warrencxw"},"content":"    public static final String WARREN_ASCII \u003d","lastModifiedDate":"2022-02-05"},{"lineNumber":82,"author":{"gitId":"warrencxw"},"content":"            \",--.   ,--.\\n\"","lastModifiedDate":"2022-02-05"},{"lineNumber":83,"author":{"gitId":"warrencxw"},"content":"                    + \"|  |   |  | ,--,--.,--.--.,--.--. ,---. ,--,--,\\n\"","lastModifiedDate":"2022-02-05"},{"lineNumber":84,"author":{"gitId":"warrencxw"},"content":"                    + \"|  |.\u0027.|  |\u0027 ,-.  ||  .--\u0027|  .--\u0027| .-. :|      \\\\\\n\"","lastModifiedDate":"2022-02-05"},{"lineNumber":85,"author":{"gitId":"warrencxw"},"content":"                    + \"|   ,\u0027.   |\\\\ \u0027-\u0027  ||  |   |  |   \\\\   --.|  ||  |\\n\"","lastModifiedDate":"2022-02-05"},{"lineNumber":86,"author":{"gitId":"warrencxw"},"content":"                    + \"\u0027--\u0027   \u0027--\u0027 `--`--\u0027`--\u0027   `--\u0027    `----\u0027`--\u0027\u0027--\u0027\\n\";","lastModifiedDate":"2022-02-05"},{"lineNumber":87,"author":{"gitId":"warrencxw"},"content":"    public static final String GREETING_MESSAGE \u003d","lastModifiedDate":"2022-02-05"},{"lineNumber":88,"author":{"gitId":"warrencxw"},"content":"            \"Hello,\\n\" + WARREN_ASCII","lastModifiedDate":"2022-02-05"},{"lineNumber":89,"author":{"gitId":"warrencxw"},"content":"                    + \"What can I do for you? (enter \u0027help\u0027 for available commands!)\";","lastModifiedDate":"2022-02-21"},{"lineNumber":90,"author":{"gitId":"warrencxw"},"content":"    public static final String FAREWELL_MESSAGE \u003d \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2022-02-05"},{"lineNumber":91,"author":{"gitId":"warrencxw"},"content":"    public static final String HELP_MESSAGE \u003d","lastModifiedDate":"2022-02-05"},{"lineNumber":92,"author":{"gitId":"warrencxw"},"content":"            \"| AVAILABLE COMMANDS |\\n\"","lastModifiedDate":"2022-02-05"},{"lineNumber":93,"author":{"gitId":"warrencxw"},"content":"                    + \"  1. list\\n\"","lastModifiedDate":"2022-02-05"},{"lineNumber":94,"author":{"gitId":"warrencxw"},"content":"                    + \"        Displays the full list of tasks that have been saved.\\n\"","lastModifiedDate":"2022-02-05"},{"lineNumber":95,"author":{"gitId":"warrencxw"},"content":"                    + \"  2. todo \u003ctask name\u003e\\n\"","lastModifiedDate":"2022-02-05"},{"lineNumber":96,"author":{"gitId":"warrencxw"},"content":"                    + \"        Creates a new todo list entry.\\n\"","lastModifiedDate":"2022-02-05"},{"lineNumber":97,"author":{"gitId":"warrencxw"},"content":"                    + \"  3. event \u003cevent name\u003e /at \u003cYYYY-MM-DD\u003e\\n\"","lastModifiedDate":"2022-02-21"},{"lineNumber":98,"author":{"gitId":"warrencxw"},"content":"                    + \"        Creates a new event entry with its accompanying time of occurrence.\\n\"","lastModifiedDate":"2022-02-05"},{"lineNumber":99,"author":{"gitId":"warrencxw"},"content":"                    + \"  4. deadline \u003cdeadline name\u003e /by \u003cYYYY-MM-DD\u003e\\n\"","lastModifiedDate":"2022-02-21"},{"lineNumber":100,"author":{"gitId":"warrencxw"},"content":"                    + \"        Creates a new deadline entry with its accompanying due date.\\n\"","lastModifiedDate":"2022-02-05"},{"lineNumber":101,"author":{"gitId":"warrencxw"},"content":"                    + \"  5. mark \u003ctask entry number\u003e\\n\"","lastModifiedDate":"2022-02-05"},{"lineNumber":102,"author":{"gitId":"warrencxw"},"content":"                    + \"        Marks the entry as done, see list for entry numbers.\\n\"","lastModifiedDate":"2022-02-05"},{"lineNumber":103,"author":{"gitId":"warrencxw"},"content":"                    + \"  6. unmark \u003ctask entry number\u003e\\n\"","lastModifiedDate":"2022-02-05"},{"lineNumber":104,"author":{"gitId":"warrencxw"},"content":"                    + \"        Marks the entry as incomplete, see list for entry numbers.\\n\"","lastModifiedDate":"2022-02-05"},{"lineNumber":105,"author":{"gitId":"warrencxw"},"content":"                    + \"  7. find \u003csubstring\u003e\\n\"","lastModifiedDate":"2022-02-21"},{"lineNumber":106,"author":{"gitId":"warrencxw"},"content":"                    + \"        Lists tasks that contain \u003csubstring\u003e in their name.\\n\"","lastModifiedDate":"2022-02-21"},{"lineNumber":107,"author":{"gitId":"warrencxw"},"content":"                    + \"  8. help / ?\\n\"","lastModifiedDate":"2022-02-21"},{"lineNumber":108,"author":{"gitId":"warrencxw"},"content":"                    + \"        Displays this help menu.\\n\"","lastModifiedDate":"2022-02-05"},{"lineNumber":109,"author":{"gitId":"warrencxw"},"content":"                    + \"  9. clear\\n\"","lastModifiedDate":"2022-02-21"},{"lineNumber":110,"author":{"gitId":"warrencxw"},"content":"                    + \"        Clears all tasks that have been saved thus far after a confirmation message.\\n\"","lastModifiedDate":"2022-02-21"},{"lineNumber":111,"author":{"gitId":"warrencxw"},"content":"                    + \"  10. bye / exit / quit\\n\"","lastModifiedDate":"2022-02-21"},{"lineNumber":112,"author":{"gitId":"warrencxw"},"content":"                    + \"        Displays the farewell message and closes the application.\";","lastModifiedDate":"2022-02-05"},{"lineNumber":113,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":114,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-05"},{"lineNumber":115,"author":{"gitId":"warrencxw"},"content":"     * Simply prints out a dividing line to standard output","lastModifiedDate":"2022-02-05"},{"lineNumber":116,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-05"},{"lineNumber":117,"author":{"gitId":"warrencxw"},"content":"    public void printDivider() {","lastModifiedDate":"2022-02-21"},{"lineNumber":118,"author":{"gitId":"warrencxw"},"content":"        System.out.println(\"____________________________________________________________\");","lastModifiedDate":"2022-02-05"},{"lineNumber":119,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-05"},{"lineNumber":120,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":121,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-05"},{"lineNumber":122,"author":{"gitId":"warrencxw"},"content":"     * Prints out the greeting message to standard output","lastModifiedDate":"2022-02-05"},{"lineNumber":123,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-05"},{"lineNumber":124,"author":{"gitId":"warrencxw"},"content":"    public void printGreetingMessage() {","lastModifiedDate":"2022-02-21"},{"lineNumber":125,"author":{"gitId":"warrencxw"},"content":"        printDivider();","lastModifiedDate":"2022-02-05"},{"lineNumber":126,"author":{"gitId":"warrencxw"},"content":"        System.out.println(RABBIT_ASCII);","lastModifiedDate":"2022-02-05"},{"lineNumber":127,"author":{"gitId":"warrencxw"},"content":"        printDivider();","lastModifiedDate":"2022-02-05"},{"lineNumber":128,"author":{"gitId":"warrencxw"},"content":"        System.out.println(GREETING_MESSAGE);","lastModifiedDate":"2022-02-05"},{"lineNumber":129,"author":{"gitId":"warrencxw"},"content":"        printDivider();","lastModifiedDate":"2022-02-05"},{"lineNumber":130,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-05"},{"lineNumber":131,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":132,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-05"},{"lineNumber":133,"author":{"gitId":"warrencxw"},"content":"     * Prints out the farewell message to standard output","lastModifiedDate":"2022-02-05"},{"lineNumber":134,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-05"},{"lineNumber":135,"author":{"gitId":"warrencxw"},"content":"    public void printFarewellMessage() {","lastModifiedDate":"2022-02-21"},{"lineNumber":136,"author":{"gitId":"warrencxw"},"content":"        System.out.println(FAREWELL_MESSAGE);","lastModifiedDate":"2022-02-05"},{"lineNumber":137,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-05"},{"lineNumber":138,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":139,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":140,"author":{"gitId":"warrencxw"},"content":"     * Prints out the help message to standard output","lastModifiedDate":"2022-02-21"},{"lineNumber":141,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":142,"author":{"gitId":"warrencxw"},"content":"    public void printHelpMessage() {","lastModifiedDate":"2022-02-21"},{"lineNumber":143,"author":{"gitId":"warrencxw"},"content":"        System.out.println(HELP_MESSAGE);","lastModifiedDate":"2022-02-05"},{"lineNumber":144,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-05"},{"lineNumber":145,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":146,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-05"},{"lineNumber":147,"author":{"gitId":"warrencxw"},"content":"     * Prints out error message based on what type of error has been encountered by the program","lastModifiedDate":"2022-02-05"},{"lineNumber":148,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-02-05"},{"lineNumber":149,"author":{"gitId":"warrencxw"},"content":"     * @param error The error type encountered by the program","lastModifiedDate":"2022-02-05"},{"lineNumber":150,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-05"},{"lineNumber":151,"author":{"gitId":"warrencxw"},"content":"    public void printError(ErrorType error) {","lastModifiedDate":"2022-02-21"},{"lineNumber":152,"author":{"gitId":"warrencxw"},"content":"        switch (error) {","lastModifiedDate":"2022-02-05"},{"lineNumber":153,"author":{"gitId":"warrencxw"},"content":"        case MISSING_TASK_NO:","lastModifiedDate":"2022-02-05"},{"lineNumber":154,"author":{"gitId":"warrencxw"},"content":"            System.out.println(ERROR_MISSING_TASK_NO);","lastModifiedDate":"2022-02-05"},{"lineNumber":155,"author":{"gitId":"warrencxw"},"content":"            break;","lastModifiedDate":"2022-02-05"},{"lineNumber":156,"author":{"gitId":"warrencxw"},"content":"        case INVALID_TASK_NO:","lastModifiedDate":"2022-02-05"},{"lineNumber":157,"author":{"gitId":"warrencxw"},"content":"            System.out.println(ERROR_INVALID_TASK_NO);","lastModifiedDate":"2022-02-05"},{"lineNumber":158,"author":{"gitId":"warrencxw"},"content":"            break;","lastModifiedDate":"2022-02-05"},{"lineNumber":159,"author":{"gitId":"warrencxw"},"content":"        case EMPTY_INPUT:","lastModifiedDate":"2022-02-05"},{"lineNumber":160,"author":{"gitId":"warrencxw"},"content":"            System.out.println(ERROR_EMPTY_INPUT);","lastModifiedDate":"2022-02-05"},{"lineNumber":161,"author":{"gitId":"warrencxw"},"content":"            break;","lastModifiedDate":"2022-02-05"},{"lineNumber":162,"author":{"gitId":"warrencxw"},"content":"        case EMPTY_TASK_NAME:","lastModifiedDate":"2022-02-05"},{"lineNumber":163,"author":{"gitId":"warrencxw"},"content":"            System.out.println(ERROR_EMPTY_TASK_NAME);","lastModifiedDate":"2022-02-05"},{"lineNumber":164,"author":{"gitId":"warrencxw"},"content":"            break;","lastModifiedDate":"2022-02-05"},{"lineNumber":165,"author":{"gitId":"warrencxw"},"content":"        case MISSING_EVENT_DELIMITER:","lastModifiedDate":"2022-02-05"},{"lineNumber":166,"author":{"gitId":"warrencxw"},"content":"            System.out.println(ERROR_MISSING_EVENT_DELIMITER);","lastModifiedDate":"2022-02-05"},{"lineNumber":167,"author":{"gitId":"warrencxw"},"content":"            break;","lastModifiedDate":"2022-02-05"},{"lineNumber":168,"author":{"gitId":"warrencxw"},"content":"        case MISSING_DEADLINE_DELIMITER:","lastModifiedDate":"2022-02-05"},{"lineNumber":169,"author":{"gitId":"warrencxw"},"content":"            System.out.println(ERROR_MISSING_DEADLINE_DELIMITER);","lastModifiedDate":"2022-02-05"},{"lineNumber":170,"author":{"gitId":"warrencxw"},"content":"            break;","lastModifiedDate":"2022-02-05"},{"lineNumber":171,"author":{"gitId":"warrencxw"},"content":"        case MISSING_SUBSTRING:","lastModifiedDate":"2022-02-21"},{"lineNumber":172,"author":{"gitId":"warrencxw"},"content":"            System.out.println(ERROR_MISSING_SUBSTRING);","lastModifiedDate":"2022-02-21"},{"lineNumber":173,"author":{"gitId":"warrencxw"},"content":"            break;","lastModifiedDate":"2022-02-21"},{"lineNumber":174,"author":{"gitId":"warrencxw"},"content":"        case INVALID_DATE:","lastModifiedDate":"2022-02-21"},{"lineNumber":175,"author":{"gitId":"warrencxw"},"content":"            System.out.println(ERROR_INVALID_DATE);","lastModifiedDate":"2022-02-21"},{"lineNumber":176,"author":{"gitId":"warrencxw"},"content":"            break;","lastModifiedDate":"2022-02-21"},{"lineNumber":177,"author":{"gitId":"warrencxw"},"content":"        case EMPTY_TASK_LIST:","lastModifiedDate":"2022-02-05"},{"lineNumber":178,"author":{"gitId":"warrencxw"},"content":"            System.out.println(ERROR_EMPTY_TASK_LIST);","lastModifiedDate":"2022-02-05"},{"lineNumber":179,"author":{"gitId":"warrencxw"},"content":"            break;","lastModifiedDate":"2022-02-05"},{"lineNumber":180,"author":{"gitId":"warrencxw"},"content":"        case COMMAND_NOT_RECOGNISED:","lastModifiedDate":"2022-02-05"},{"lineNumber":181,"author":{"gitId":"warrencxw"},"content":"            System.out.println(ERROR_COMMAND_NOT_RECOGNISED);","lastModifiedDate":"2022-02-05"},{"lineNumber":182,"author":{"gitId":"warrencxw"},"content":"            break;","lastModifiedDate":"2022-02-05"},{"lineNumber":183,"author":{"gitId":"warrencxw"},"content":"        case CSV_DELIMITER_IN_TASK:","lastModifiedDate":"2022-02-16"},{"lineNumber":184,"author":{"gitId":"warrencxw"},"content":"            System.out.println(ERROR_CSV_DELIMITER_IN_TASK);","lastModifiedDate":"2022-02-16"},{"lineNumber":185,"author":{"gitId":"warrencxw"},"content":"            break;","lastModifiedDate":"2022-02-16"},{"lineNumber":186,"author":{"gitId":"warrencxw"},"content":"        case FILE_CREATION_FAILED:","lastModifiedDate":"2022-02-16"},{"lineNumber":187,"author":{"gitId":"warrencxw"},"content":"            System.out.println(ERROR_FILE_CREATION_FAILED);","lastModifiedDate":"2022-02-16"},{"lineNumber":188,"author":{"gitId":"warrencxw"},"content":"            break;","lastModifiedDate":"2022-02-16"},{"lineNumber":189,"author":{"gitId":"warrencxw"},"content":"        case SAVE_LOAD_FAILED:","lastModifiedDate":"2022-02-16"},{"lineNumber":190,"author":{"gitId":"warrencxw"},"content":"            System.out.println(ERROR_SAVE_LOAD_FAILED);","lastModifiedDate":"2022-02-16"},{"lineNumber":191,"author":{"gitId":"warrencxw"},"content":"            break;","lastModifiedDate":"2022-02-16"},{"lineNumber":192,"author":{"gitId":"warrencxw"},"content":"        case SAVE_WRITE_FAILED:","lastModifiedDate":"2022-02-16"},{"lineNumber":193,"author":{"gitId":"warrencxw"},"content":"            System.out.println(ERROR_SAVE_WRITE_FAILED);","lastModifiedDate":"2022-02-16"},{"lineNumber":194,"author":{"gitId":"warrencxw"},"content":"            break;","lastModifiedDate":"2022-02-16"},{"lineNumber":195,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-02-05"},{"lineNumber":196,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-05"},{"lineNumber":197,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":198,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":199,"author":{"gitId":"warrencxw"},"content":"     * Returns the error message corresponding to the error type that may be experienced by the program","lastModifiedDate":"2022-02-21"},{"lineNumber":200,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":201,"author":{"gitId":"warrencxw"},"content":"     * @param error The error type encountered by the program","lastModifiedDate":"2022-02-21"},{"lineNumber":202,"author":{"gitId":"warrencxw"},"content":"     * @return a String object containing the error message for the specified error type","lastModifiedDate":"2022-02-21"},{"lineNumber":203,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":204,"author":{"gitId":"warrencxw"},"content":"    public static String getErrorMessage(ErrorType error) {","lastModifiedDate":"2022-02-21"},{"lineNumber":205,"author":{"gitId":"warrencxw"},"content":"        switch (error) {","lastModifiedDate":"2022-02-21"},{"lineNumber":206,"author":{"gitId":"warrencxw"},"content":"        case MISSING_TASK_NO:","lastModifiedDate":"2022-02-21"},{"lineNumber":207,"author":{"gitId":"warrencxw"},"content":"            return ERROR_MISSING_TASK_NO;","lastModifiedDate":"2022-02-21"},{"lineNumber":208,"author":{"gitId":"warrencxw"},"content":"        case INVALID_TASK_NO:","lastModifiedDate":"2022-02-21"},{"lineNumber":209,"author":{"gitId":"warrencxw"},"content":"            return ERROR_INVALID_TASK_NO;","lastModifiedDate":"2022-02-21"},{"lineNumber":210,"author":{"gitId":"warrencxw"},"content":"        case EMPTY_INPUT:","lastModifiedDate":"2022-02-21"},{"lineNumber":211,"author":{"gitId":"warrencxw"},"content":"            return ERROR_EMPTY_INPUT;","lastModifiedDate":"2022-02-21"},{"lineNumber":212,"author":{"gitId":"warrencxw"},"content":"        case EMPTY_TASK_NAME:","lastModifiedDate":"2022-02-21"},{"lineNumber":213,"author":{"gitId":"warrencxw"},"content":"            return ERROR_EMPTY_TASK_NAME;","lastModifiedDate":"2022-02-21"},{"lineNumber":214,"author":{"gitId":"warrencxw"},"content":"        case MISSING_EVENT_DELIMITER:","lastModifiedDate":"2022-02-21"},{"lineNumber":215,"author":{"gitId":"warrencxw"},"content":"            return ERROR_MISSING_EVENT_DELIMITER;","lastModifiedDate":"2022-02-21"},{"lineNumber":216,"author":{"gitId":"warrencxw"},"content":"        case MISSING_DEADLINE_DELIMITER:","lastModifiedDate":"2022-02-21"},{"lineNumber":217,"author":{"gitId":"warrencxw"},"content":"            return ERROR_MISSING_DEADLINE_DELIMITER;","lastModifiedDate":"2022-02-21"},{"lineNumber":218,"author":{"gitId":"warrencxw"},"content":"        case MISSING_SUBSTRING:","lastModifiedDate":"2022-02-21"},{"lineNumber":219,"author":{"gitId":"warrencxw"},"content":"            return ERROR_MISSING_SUBSTRING;","lastModifiedDate":"2022-02-21"},{"lineNumber":220,"author":{"gitId":"warrencxw"},"content":"        case INVALID_DATE:","lastModifiedDate":"2022-02-21"},{"lineNumber":221,"author":{"gitId":"warrencxw"},"content":"            return ERROR_INVALID_DATE;","lastModifiedDate":"2022-02-21"},{"lineNumber":222,"author":{"gitId":"warrencxw"},"content":"        case EMPTY_TASK_LIST:","lastModifiedDate":"2022-02-21"},{"lineNumber":223,"author":{"gitId":"warrencxw"},"content":"            return ERROR_EMPTY_TASK_LIST;","lastModifiedDate":"2022-02-21"},{"lineNumber":224,"author":{"gitId":"warrencxw"},"content":"        case COMMAND_NOT_RECOGNISED:","lastModifiedDate":"2022-02-21"},{"lineNumber":225,"author":{"gitId":"warrencxw"},"content":"            return ERROR_COMMAND_NOT_RECOGNISED;","lastModifiedDate":"2022-02-21"},{"lineNumber":226,"author":{"gitId":"warrencxw"},"content":"        case CSV_DELIMITER_IN_TASK:","lastModifiedDate":"2022-02-21"},{"lineNumber":227,"author":{"gitId":"warrencxw"},"content":"            return ERROR_CSV_DELIMITER_IN_TASK;","lastModifiedDate":"2022-02-21"},{"lineNumber":228,"author":{"gitId":"warrencxw"},"content":"        case FILE_CREATION_FAILED:","lastModifiedDate":"2022-02-21"},{"lineNumber":229,"author":{"gitId":"warrencxw"},"content":"            return ERROR_FILE_CREATION_FAILED;","lastModifiedDate":"2022-02-21"},{"lineNumber":230,"author":{"gitId":"warrencxw"},"content":"        case SAVE_LOAD_FAILED:","lastModifiedDate":"2022-02-21"},{"lineNumber":231,"author":{"gitId":"warrencxw"},"content":"            return ERROR_SAVE_LOAD_FAILED;","lastModifiedDate":"2022-02-21"},{"lineNumber":232,"author":{"gitId":"warrencxw"},"content":"        case SAVE_WRITE_FAILED:","lastModifiedDate":"2022-02-21"},{"lineNumber":233,"author":{"gitId":"warrencxw"},"content":"            return ERROR_SAVE_WRITE_FAILED;","lastModifiedDate":"2022-02-21"},{"lineNumber":234,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-02-21"},{"lineNumber":235,"author":{"gitId":"warrencxw"},"content":"        return \"\";","lastModifiedDate":"2022-02-21"},{"lineNumber":236,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":237,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":238,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":239,"author":{"gitId":"warrencxw"},"content":"     * Prints out a message specified to standard output without line breaks.","lastModifiedDate":"2022-02-21"},{"lineNumber":240,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":241,"author":{"gitId":"warrencxw"},"content":"     * @param message String object containing the message to be printed","lastModifiedDate":"2022-02-21"},{"lineNumber":242,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":243,"author":{"gitId":"warrencxw"},"content":"    public void printMessage(String message) {","lastModifiedDate":"2022-02-21"},{"lineNumber":244,"author":{"gitId":"warrencxw"},"content":"        System.out.print(message);","lastModifiedDate":"2022-02-21"},{"lineNumber":245,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":246,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":247,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":248,"author":{"gitId":"warrencxw"},"content":"     * Prints out the String representation of an Object to standard output without line breaks.","lastModifiedDate":"2022-02-21"},{"lineNumber":249,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":250,"author":{"gitId":"warrencxw"},"content":"     * @param message An Object of which its String representation is to be printed out","lastModifiedDate":"2022-02-21"},{"lineNumber":251,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":252,"author":{"gitId":"warrencxw"},"content":"    public void printMessage(Object message) {","lastModifiedDate":"2022-02-21"},{"lineNumber":253,"author":{"gitId":"warrencxw"},"content":"        printMessage(message.toString());","lastModifiedDate":"2022-02-21"},{"lineNumber":254,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":255,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":256,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":257,"author":{"gitId":"warrencxw"},"content":"     * Prints out a message specified to standard output with line breaks.","lastModifiedDate":"2022-02-21"},{"lineNumber":258,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":259,"author":{"gitId":"warrencxw"},"content":"     * @param message String object containing the message to be printed","lastModifiedDate":"2022-02-21"},{"lineNumber":260,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":261,"author":{"gitId":"warrencxw"},"content":"    public void printlnMessage(String message) {","lastModifiedDate":"2022-02-21"},{"lineNumber":262,"author":{"gitId":"warrencxw"},"content":"        System.out.println(message);","lastModifiedDate":"2022-02-21"},{"lineNumber":263,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":264,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":265,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":266,"author":{"gitId":"warrencxw"},"content":"     * Prints out the String representation of an Object to standard output with line breaks.","lastModifiedDate":"2022-02-21"},{"lineNumber":267,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":268,"author":{"gitId":"warrencxw"},"content":"     * @param message An Object of which its String representation is to be printed out","lastModifiedDate":"2022-02-21"},{"lineNumber":269,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":270,"author":{"gitId":"warrencxw"},"content":"    public void printlnMessage(Object message) {","lastModifiedDate":"2022-02-21"},{"lineNumber":271,"author":{"gitId":"warrencxw"},"content":"        printlnMessage(message.toString());","lastModifiedDate":"2022-02-21"},{"lineNumber":272,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":273,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":274,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":275,"author":{"gitId":"warrencxw"},"content":"     * Reads a line of input from the user from standard input (or any other input streams depending","lastModifiedDate":"2022-02-21"},{"lineNumber":276,"author":{"gitId":"warrencxw"},"content":"     * on the \u003ccode\u003eScanner in\u003c/code\u003e object initialisation in the constructor) into a String object.","lastModifiedDate":"2022-02-21"},{"lineNumber":277,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":278,"author":{"gitId":"warrencxw"},"content":"     * @return a String object containing a single line of input from standard input","lastModifiedDate":"2022-02-21"},{"lineNumber":279,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":280,"author":{"gitId":"warrencxw"},"content":"    public String getNextLine() {","lastModifiedDate":"2022-02-21"},{"lineNumber":281,"author":{"gitId":"warrencxw"},"content":"        return in.nextLine().trim();","lastModifiedDate":"2022-02-21"},{"lineNumber":282,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":283,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":284,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":285,"author":{"gitId":"warrencxw"},"content":"     * Prints out a prepending substring before reading a line of input from the user from standard input","lastModifiedDate":"2022-02-21"},{"lineNumber":286,"author":{"gitId":"warrencxw"},"content":"     * (or any other input streams depending on the \u003ccode\u003eScanner in\u003c/code\u003e object initialisation in the constructor)","lastModifiedDate":"2022-02-21"},{"lineNumber":287,"author":{"gitId":"warrencxw"},"content":"     * into a String object.","lastModifiedDate":"2022-02-21"},{"lineNumber":288,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":289,"author":{"gitId":"warrencxw"},"content":"     * @param prepend a substring to be printed out before the user\u0027s input","lastModifiedDate":"2022-02-21"},{"lineNumber":290,"author":{"gitId":"warrencxw"},"content":"     * @return a String object containing a single line of input from standard input","lastModifiedDate":"2022-02-21"},{"lineNumber":291,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":292,"author":{"gitId":"warrencxw"},"content":"    public String getNextLineWithPrepend(String prepend) {","lastModifiedDate":"2022-02-21"},{"lineNumber":293,"author":{"gitId":"warrencxw"},"content":"        printMessage(prepend);","lastModifiedDate":"2022-02-21"},{"lineNumber":294,"author":{"gitId":"warrencxw"},"content":"        return getNextLine();","lastModifiedDate":"2022-02-21"},{"lineNumber":295,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":296,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":297,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":298,"author":{"gitId":"warrencxw"},"content":"     * Creates a Display object to handle all message printing to standard output and data reading from the","lastModifiedDate":"2022-02-21"},{"lineNumber":299,"author":{"gitId":"warrencxw"},"content":"     * specified Scanner object in the parameter.","lastModifiedDate":"2022-02-21"},{"lineNumber":300,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":301,"author":{"gitId":"warrencxw"},"content":"     * @param in a Scanner object from which all messages in the application will read from","lastModifiedDate":"2022-02-21"},{"lineNumber":302,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":303,"author":{"gitId":"warrencxw"},"content":"    public Display(Scanner in) {","lastModifiedDate":"2022-02-21"},{"lineNumber":304,"author":{"gitId":"warrencxw"},"content":"        this.in \u003d in;","lastModifiedDate":"2022-02-21"},{"lineNumber":305,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":306,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":307,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":308,"author":{"gitId":"warrencxw"},"content":"     * Creates a Display object to handle all message printing to standard output and data reading from","lastModifiedDate":"2022-02-21"},{"lineNumber":309,"author":{"gitId":"warrencxw"},"content":"     * standard input.","lastModifiedDate":"2022-02-21"},{"lineNumber":310,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":311,"author":{"gitId":"warrencxw"},"content":"    public Display() {","lastModifiedDate":"2022-02-21"},{"lineNumber":312,"author":{"gitId":"warrencxw"},"content":"        in \u003d new Scanner(System.in);","lastModifiedDate":"2022-02-21"},{"lineNumber":313,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":314,"author":{"gitId":"warrencxw"},"content":"}","lastModifiedDate":"2022-02-05"}],"authorContributionMap":{"warrencxw":314}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"warrencxw"},"content":"package duke;","lastModifiedDate":"2022-02-06"},{"lineNumber":2,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":3,"author":{"gitId":"warrencxw"},"content":"import duke.command.Command;","lastModifiedDate":"2022-02-21"},{"lineNumber":4,"author":{"gitId":"warrencxw"},"content":"import duke.command.ExitCommand;","lastModifiedDate":"2022-02-21"},{"lineNumber":5,"author":{"gitId":"warrencxw"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-02-06"},{"lineNumber":6,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":7,"author":{"gitId":"warrencxw"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-01-26"},{"lineNumber":8,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":9,"author":{"gitId":"warrencxw"},"content":"/**","lastModifiedDate":"2022-02-21"},{"lineNumber":10,"author":{"gitId":"warrencxw"},"content":" * The starting point of all other processes in this application.","lastModifiedDate":"2022-02-21"},{"lineNumber":11,"author":{"gitId":"warrencxw"},"content":" * Instantiate objects of other classes so that the application can function correctly.","lastModifiedDate":"2022-02-21"},{"lineNumber":12,"author":{"gitId":"warrencxw"},"content":" */","lastModifiedDate":"2022-02-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":14,"author":{"gitId":"warrencxw"},"content":"    // Key objects","lastModifiedDate":"2022-02-21"},{"lineNumber":15,"author":{"gitId":"warrencxw"},"content":"    public TaskList tasks;","lastModifiedDate":"2022-02-21"},{"lineNumber":16,"author":{"gitId":"warrencxw"},"content":"    public Storage storage;","lastModifiedDate":"2022-02-21"},{"lineNumber":17,"author":{"gitId":"warrencxw"},"content":"    public Display ui;","lastModifiedDate":"2022-02-21"},{"lineNumber":18,"author":{"gitId":"warrencxw"},"content":"    private Scanner in;","lastModifiedDate":"2022-02-21"},{"lineNumber":19,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":20,"author":{"gitId":"warrencxw"},"content":"    // Regex patterns","lastModifiedDate":"2022-02-05"},{"lineNumber":21,"author":{"gitId":"warrencxw"},"content":"    public static final String REGEX_PATTERN_CSV_DELIMITER \u003d \"[ ]*,[ ]*\";","lastModifiedDate":"2022-02-13"},{"lineNumber":22,"author":{"gitId":"warrencxw"},"content":"    public static final String CSV_DELIMITER \u003d \",\";","lastModifiedDate":"2022-02-13"},{"lineNumber":23,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":24,"author":{"gitId":"warrencxw"},"content":"    // Misc Constants","lastModifiedDate":"2022-02-02"},{"lineNumber":25,"author":{"gitId":"warrencxw"},"content":"    public static final String INPUT_PREPEND \u003d \" \u003e \";","lastModifiedDate":"2022-02-02"},{"lineNumber":26,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":27,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-01-26"},{"lineNumber":28,"author":{"gitId":"warrencxw"},"content":"     * Reads in input from standard input and processes the input to determine what commands to carry out.","lastModifiedDate":"2022-02-21"},{"lineNumber":29,"author":{"gitId":"warrencxw"},"content":"     * Repeats process until exit/quit/bye commands are called.","lastModifiedDate":"2022-02-05"},{"lineNumber":30,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-01-26"},{"lineNumber":31,"author":{"gitId":"warrencxw"},"content":"    public void processInputLoop() {","lastModifiedDate":"2022-02-21"},{"lineNumber":32,"author":{"gitId":"warrencxw"},"content":"        String input;","lastModifiedDate":"2022-02-21"},{"lineNumber":33,"author":{"gitId":"warrencxw"},"content":"        Command command;","lastModifiedDate":"2022-02-21"},{"lineNumber":34,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":35,"author":{"gitId":"warrencxw"},"content":"        do {","lastModifiedDate":"2022-02-21"},{"lineNumber":36,"author":{"gitId":"warrencxw"},"content":"            input \u003d ui.getNextLineWithPrepend(INPUT_PREPEND);","lastModifiedDate":"2022-02-21"},{"lineNumber":37,"author":{"gitId":"warrencxw"},"content":"            ui.printDivider();","lastModifiedDate":"2022-02-21"},{"lineNumber":38,"author":{"gitId":"warrencxw"},"content":"            command \u003d Parser.getCommand(input);","lastModifiedDate":"2022-02-21"},{"lineNumber":39,"author":{"gitId":"warrencxw"},"content":"            command.run(ui, tasks, storage);","lastModifiedDate":"2022-02-21"},{"lineNumber":40,"author":{"gitId":"warrencxw"},"content":"            ui.printDivider();","lastModifiedDate":"2022-02-21"},{"lineNumber":41,"author":{"gitId":"warrencxw"},"content":"        } while (!(command instanceof ExitCommand));","lastModifiedDate":"2022-02-21"},{"lineNumber":42,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":43,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":44,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":45,"author":{"gitId":"warrencxw"},"content":"     * Instantiates a new instance of the application with a specific file name for the save file","lastModifiedDate":"2022-02-21"},{"lineNumber":46,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":47,"author":{"gitId":"warrencxw"},"content":"     * @param saveFileName file name of CSV file to which all modifications to tasks is saved into","lastModifiedDate":"2022-02-21"},{"lineNumber":48,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":49,"author":{"gitId":"warrencxw"},"content":"    public Duke(String saveFileName) {","lastModifiedDate":"2022-02-21"},{"lineNumber":50,"author":{"gitId":"warrencxw"},"content":"        in \u003d new Scanner(System.in);","lastModifiedDate":"2022-02-21"},{"lineNumber":51,"author":{"gitId":"warrencxw"},"content":"        ui \u003d new Display(in);","lastModifiedDate":"2022-02-21"},{"lineNumber":52,"author":{"gitId":"warrencxw"},"content":"        tasks \u003d new TaskList(ui);","lastModifiedDate":"2022-02-21"},{"lineNumber":53,"author":{"gitId":"warrencxw"},"content":"        storage \u003d new Storage(saveFileName, ui);","lastModifiedDate":"2022-02-21"},{"lineNumber":54,"author":{"gitId":"warrencxw"},"content":"        storage.loadSave(tasks);","lastModifiedDate":"2022-02-21"},{"lineNumber":55,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":56,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":57,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":58,"author":{"gitId":"warrencxw"},"content":"     * Begins the process loop of the program and accept inputs from the user","lastModifiedDate":"2022-02-21"},{"lineNumber":59,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":60,"author":{"gitId":"warrencxw"},"content":"    public void run() {","lastModifiedDate":"2022-02-21"},{"lineNumber":61,"author":{"gitId":"warrencxw"},"content":"        ui.printGreetingMessage();","lastModifiedDate":"2022-02-21"},{"lineNumber":62,"author":{"gitId":"warrencxw"},"content":"        processInputLoop();","lastModifiedDate":"2022-02-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":64,"author":{"gitId":"warrencxw"},"content":"    ","lastModifiedDate":"2022-02-21"},{"lineNumber":65,"author":{"gitId":"warrencxw"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2022-02-21"},{"lineNumber":66,"author":{"gitId":"warrencxw"},"content":"        new Duke(\"save.csv\").run();","lastModifiedDate":"2022-02-21"},{"lineNumber":67,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"warrencxw":65,"-":3}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"warrencxw"},"content":"package duke;","lastModifiedDate":"2022-02-06"},{"lineNumber":2,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":3,"author":{"gitId":"warrencxw"},"content":"/**","lastModifiedDate":"2022-02-21"},{"lineNumber":4,"author":{"gitId":"warrencxw"},"content":" * Represents any exceptions that may be encountered by the program.","lastModifiedDate":"2022-02-21"},{"lineNumber":5,"author":{"gitId":"warrencxw"},"content":" */","lastModifiedDate":"2022-02-21"},{"lineNumber":6,"author":{"gitId":"warrencxw"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2022-02-06"},{"lineNumber":7,"author":{"gitId":"warrencxw"},"content":"    public DukeException(String errorMessage) {","lastModifiedDate":"2022-02-06"},{"lineNumber":8,"author":{"gitId":"warrencxw"},"content":"        super(errorMessage);","lastModifiedDate":"2022-02-06"},{"lineNumber":9,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-06"},{"lineNumber":10,"author":{"gitId":"warrencxw"},"content":"}","lastModifiedDate":"2022-02-06"}],"authorContributionMap":{"warrencxw":10}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"warrencxw"},"content":"package duke;","lastModifiedDate":"2022-02-21"},{"lineNumber":2,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":3,"author":{"gitId":"warrencxw"},"content":"import duke.command.Command;","lastModifiedDate":"2022-02-21"},{"lineNumber":4,"author":{"gitId":"warrencxw"},"content":"import duke.command.ClearCommand;","lastModifiedDate":"2022-02-21"},{"lineNumber":5,"author":{"gitId":"warrencxw"},"content":"import duke.command.DeadlineCommand;","lastModifiedDate":"2022-02-21"},{"lineNumber":6,"author":{"gitId":"warrencxw"},"content":"import duke.command.DeleteCommand;","lastModifiedDate":"2022-02-21"},{"lineNumber":7,"author":{"gitId":"warrencxw"},"content":"import duke.command.EmptyCommand;","lastModifiedDate":"2022-02-21"},{"lineNumber":8,"author":{"gitId":"warrencxw"},"content":"import duke.command.EventCommand;","lastModifiedDate":"2022-02-21"},{"lineNumber":9,"author":{"gitId":"warrencxw"},"content":"import duke.command.ExitCommand;","lastModifiedDate":"2022-02-21"},{"lineNumber":10,"author":{"gitId":"warrencxw"},"content":"import duke.command.FindCommand;","lastModifiedDate":"2022-02-21"},{"lineNumber":11,"author":{"gitId":"warrencxw"},"content":"import duke.command.HelpCommand;","lastModifiedDate":"2022-02-21"},{"lineNumber":12,"author":{"gitId":"warrencxw"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2022-02-21"},{"lineNumber":13,"author":{"gitId":"warrencxw"},"content":"import duke.command.MarkTaskCommand;","lastModifiedDate":"2022-02-21"},{"lineNumber":14,"author":{"gitId":"warrencxw"},"content":"import duke.command.TodoCommand;","lastModifiedDate":"2022-02-21"},{"lineNumber":15,"author":{"gitId":"warrencxw"},"content":"import duke.command.UnrecognisedCommand;","lastModifiedDate":"2022-02-21"},{"lineNumber":16,"author":{"gitId":"warrencxw"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-02-21"},{"lineNumber":17,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":18,"author":{"gitId":"warrencxw"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-02-21"},{"lineNumber":19,"author":{"gitId":"warrencxw"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-02-21"},{"lineNumber":20,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":21,"author":{"gitId":"warrencxw"},"content":"/**","lastModifiedDate":"2022-02-21"},{"lineNumber":22,"author":{"gitId":"warrencxw"},"content":" * A static class containing methods to process and make sense of user input.","lastModifiedDate":"2022-02-21"},{"lineNumber":23,"author":{"gitId":"warrencxw"},"content":" * Connects user inputs to the right subclass of the Command class to be run.","lastModifiedDate":"2022-02-21"},{"lineNumber":24,"author":{"gitId":"warrencxw"},"content":" */","lastModifiedDate":"2022-02-21"},{"lineNumber":25,"author":{"gitId":"warrencxw"},"content":"public class Parser {","lastModifiedDate":"2022-02-21"},{"lineNumber":26,"author":{"gitId":"warrencxw"},"content":"    // Regex patterns","lastModifiedDate":"2022-02-21"},{"lineNumber":27,"author":{"gitId":"warrencxw"},"content":"    public static final String REGEX_PATTERN_WHITESPACES \u003d \"\\\\s\";","lastModifiedDate":"2022-02-21"},{"lineNumber":28,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":29,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":30,"author":{"gitId":"warrencxw"},"content":"     * Processes the input to be split into a String array of { commandString, commandArgs }, separated by spaces.","lastModifiedDate":"2022-02-21"},{"lineNumber":31,"author":{"gitId":"warrencxw"},"content":"     * commandArgs is set to \"\" if not provided, where input is only a single token and not separated by spaces.","lastModifiedDate":"2022-02-21"},{"lineNumber":32,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":33,"author":{"gitId":"warrencxw"},"content":"     * @param input input string from the command line","lastModifiedDate":"2022-02-21"},{"lineNumber":34,"author":{"gitId":"warrencxw"},"content":"     * @return String array of size 2 containing { commandString, commandArgs }","lastModifiedDate":"2022-02-21"},{"lineNumber":35,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":36,"author":{"gitId":"warrencxw"},"content":"    private static String[] getArguments(String input) {","lastModifiedDate":"2022-02-21"},{"lineNumber":37,"author":{"gitId":"warrencxw"},"content":"        String[] inputs \u003d input.split(REGEX_PATTERN_WHITESPACES, 2);","lastModifiedDate":"2022-02-21"},{"lineNumber":38,"author":{"gitId":"warrencxw"},"content":"        String[] output \u003d new String[]{inputs[0], \"\"};","lastModifiedDate":"2022-02-21"},{"lineNumber":39,"author":{"gitId":"warrencxw"},"content":"        if (inputs.length \u003c 2) {","lastModifiedDate":"2022-02-21"},{"lineNumber":40,"author":{"gitId":"warrencxw"},"content":"            return output;","lastModifiedDate":"2022-02-21"},{"lineNumber":41,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-02-21"},{"lineNumber":42,"author":{"gitId":"warrencxw"},"content":"        output[1] \u003d inputs[1];","lastModifiedDate":"2022-02-21"},{"lineNumber":43,"author":{"gitId":"warrencxw"},"content":"        return output;","lastModifiedDate":"2022-02-21"},{"lineNumber":44,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":45,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":46,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":47,"author":{"gitId":"warrencxw"},"content":"     * Reads in an input string that represents a specified date in the format YYYY-MM-DD and parses it","lastModifiedDate":"2022-02-21"},{"lineNumber":48,"author":{"gitId":"warrencxw"},"content":"     * to return a LocalDate object.","lastModifiedDate":"2022-02-21"},{"lineNumber":49,"author":{"gitId":"warrencxw"},"content":"     * ","lastModifiedDate":"2022-02-21"},{"lineNumber":50,"author":{"gitId":"warrencxw"},"content":"     * @param input a String object that represents a date","lastModifiedDate":"2022-02-21"},{"lineNumber":51,"author":{"gitId":"warrencxw"},"content":"     * @return LocalDate object corresponding to the given date string","lastModifiedDate":"2022-02-21"},{"lineNumber":52,"author":{"gitId":"warrencxw"},"content":"     * @throws DukeException if the input is not a valid date format","lastModifiedDate":"2022-02-21"},{"lineNumber":53,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":54,"author":{"gitId":"warrencxw"},"content":"    public static LocalDate parseDateFromString(String input) throws DukeException {","lastModifiedDate":"2022-02-21"},{"lineNumber":55,"author":{"gitId":"warrencxw"},"content":"        LocalDate date;","lastModifiedDate":"2022-02-21"},{"lineNumber":56,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-02-21"},{"lineNumber":57,"author":{"gitId":"warrencxw"},"content":"            date \u003d LocalDate.parse(input);","lastModifiedDate":"2022-02-21"},{"lineNumber":58,"author":{"gitId":"warrencxw"},"content":"        } catch (DateTimeParseException exception) {","lastModifiedDate":"2022-02-21"},{"lineNumber":59,"author":{"gitId":"warrencxw"},"content":"            throw new DukeException (Display.getErrorMessage(Display.ErrorType.INVALID_DATE));","lastModifiedDate":"2022-02-21"},{"lineNumber":60,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-02-21"},{"lineNumber":61,"author":{"gitId":"warrencxw"},"content":"        return date;","lastModifiedDate":"2022-02-21"},{"lineNumber":62,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":63,"author":{"gitId":"warrencxw"},"content":"    ","lastModifiedDate":"2022-02-21"},{"lineNumber":64,"author":{"gitId":"warrencxw"},"content":"   /**","lastModifiedDate":"2022-02-21"},{"lineNumber":65,"author":{"gitId":"warrencxw"},"content":"     * Reads in a String object representing the task number and parses the String object to get the numeric index.","lastModifiedDate":"2022-02-21"},{"lineNumber":66,"author":{"gitId":"warrencxw"},"content":"     * If taskNoString is a valid integer, it is further checked if it is within the array index limits of the","lastModifiedDate":"2022-02-21"},{"lineNumber":67,"author":{"gitId":"warrencxw"},"content":"     * TaskList object. Returns an integer representing the index of the task.","lastModifiedDate":"2022-02-21"},{"lineNumber":68,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":69,"author":{"gitId":"warrencxw"},"content":"     * @param input The input task number string that identifies the task in \"tasks\"","lastModifiedDate":"2022-02-21"},{"lineNumber":70,"author":{"gitId":"warrencxw"},"content":"     * @param ui    A Display object to manage printing of errors and other messages","lastModifiedDate":"2022-02-21"},{"lineNumber":71,"author":{"gitId":"warrencxw"},"content":"     * @param tasks The TaskList object of which the array index limits are checked against for the task number","lastModifiedDate":"2022-02-21"},{"lineNumber":72,"author":{"gitId":"warrencxw"},"content":"     * @return Returns an integer in [0, (tasks.getSize()-1)]","lastModifiedDate":"2022-02-21"},{"lineNumber":73,"author":{"gitId":"warrencxw"},"content":"     * @throws DukeException If taskNoString is not a valid integer, tasks is empty or","lastModifiedDate":"2022-02-21"},{"lineNumber":74,"author":{"gitId":"warrencxw"},"content":"     *                       taskNoString is not within [1, (tasks.getSize())]","lastModifiedDate":"2022-02-21"},{"lineNumber":75,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":76,"author":{"gitId":"warrencxw"},"content":"    public static int parseTaskNoFromString(String input, Display ui, TaskList tasks) throws DukeException {","lastModifiedDate":"2022-02-21"},{"lineNumber":77,"author":{"gitId":"warrencxw"},"content":"        if (input.trim().isEmpty()) {","lastModifiedDate":"2022-02-21"},{"lineNumber":78,"author":{"gitId":"warrencxw"},"content":"            throw new DukeException(Display.getErrorMessage(Display.ErrorType.MISSING_TASK_NO));","lastModifiedDate":"2022-02-21"},{"lineNumber":79,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-02-21"},{"lineNumber":80,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":81,"author":{"gitId":"warrencxw"},"content":"        int taskNo;","lastModifiedDate":"2022-02-21"},{"lineNumber":82,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-02-21"},{"lineNumber":83,"author":{"gitId":"warrencxw"},"content":"            // -1 to get task index for 0-indexing","lastModifiedDate":"2022-02-21"},{"lineNumber":84,"author":{"gitId":"warrencxw"},"content":"            taskNo \u003d Integer.parseInt(input) - 1;","lastModifiedDate":"2022-02-21"},{"lineNumber":85,"author":{"gitId":"warrencxw"},"content":"        } catch (NumberFormatException exception) {","lastModifiedDate":"2022-02-21"},{"lineNumber":86,"author":{"gitId":"warrencxw"},"content":"            ui.printError(Display.ErrorType.INVALID_TASK_NO);","lastModifiedDate":"2022-02-21"},{"lineNumber":87,"author":{"gitId":"warrencxw"},"content":"            throw new DukeException(\"Please enter a value between 1 and \" + tasks.getSize());","lastModifiedDate":"2022-02-21"},{"lineNumber":88,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-02-21"},{"lineNumber":89,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":90,"author":{"gitId":"warrencxw"},"content":"        // Check if index is within array limits","lastModifiedDate":"2022-02-21"},{"lineNumber":91,"author":{"gitId":"warrencxw"},"content":"        boolean isTaskNoOutOfRange \u003d taskNo \u003c 0 || taskNo \u003e\u003d tasks.getSize();","lastModifiedDate":"2022-02-21"},{"lineNumber":92,"author":{"gitId":"warrencxw"},"content":"        if (isTaskNoOutOfRange) {","lastModifiedDate":"2022-02-21"},{"lineNumber":93,"author":{"gitId":"warrencxw"},"content":"            ui.printError(Display.ErrorType.INVALID_TASK_NO);","lastModifiedDate":"2022-02-21"},{"lineNumber":94,"author":{"gitId":"warrencxw"},"content":"            if (tasks.getSize() \u003d\u003d 0) {","lastModifiedDate":"2022-02-21"},{"lineNumber":95,"author":{"gitId":"warrencxw"},"content":"                throw new DukeException(Display.getErrorMessage(Display.ErrorType.EMPTY_TASK_LIST));","lastModifiedDate":"2022-02-21"},{"lineNumber":96,"author":{"gitId":"warrencxw"},"content":"            } else {","lastModifiedDate":"2022-02-21"},{"lineNumber":97,"author":{"gitId":"warrencxw"},"content":"                throw new DukeException(\"Please enter a value between 1 and \" + tasks.getSize());","lastModifiedDate":"2022-02-21"},{"lineNumber":98,"author":{"gitId":"warrencxw"},"content":"            }","lastModifiedDate":"2022-02-21"},{"lineNumber":99,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-02-21"},{"lineNumber":100,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":101,"author":{"gitId":"warrencxw"},"content":"        return taskNo;","lastModifiedDate":"2022-02-21"},{"lineNumber":102,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":103,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":104,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":105,"author":{"gitId":"warrencxw"},"content":"     * Parses the input string and returns a Command object with which the correct command can be run","lastModifiedDate":"2022-02-21"},{"lineNumber":106,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":107,"author":{"gitId":"warrencxw"},"content":"     * @param input raw unprocessed line of input from the user","lastModifiedDate":"2022-02-21"},{"lineNumber":108,"author":{"gitId":"warrencxw"},"content":"     * @return an appropriate Command object to carry out instructions of the user","lastModifiedDate":"2022-02-21"},{"lineNumber":109,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":110,"author":{"gitId":"warrencxw"},"content":"    public static Command getCommand(String input) {","lastModifiedDate":"2022-02-21"},{"lineNumber":111,"author":{"gitId":"warrencxw"},"content":"        // inputs: Array of Strings { commandString, commandArguments }","lastModifiedDate":"2022-02-21"},{"lineNumber":112,"author":{"gitId":"warrencxw"},"content":"        String[] inputs \u003d getArguments(input.trim());","lastModifiedDate":"2022-02-21"},{"lineNumber":113,"author":{"gitId":"warrencxw"},"content":"        String commandString \u003d inputs[0];","lastModifiedDate":"2022-02-21"},{"lineNumber":114,"author":{"gitId":"warrencxw"},"content":"        String commandArgs \u003d inputs[1];","lastModifiedDate":"2022-02-21"},{"lineNumber":115,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":116,"author":{"gitId":"warrencxw"},"content":"        switch (commandString.toLowerCase()) {","lastModifiedDate":"2022-02-21"},{"lineNumber":117,"author":{"gitId":"warrencxw"},"content":"        // EMPTY INPUT","lastModifiedDate":"2022-02-21"},{"lineNumber":118,"author":{"gitId":"warrencxw"},"content":"        case \"\":","lastModifiedDate":"2022-02-21"},{"lineNumber":119,"author":{"gitId":"warrencxw"},"content":"            return new EmptyCommand();","lastModifiedDate":"2022-02-21"},{"lineNumber":120,"author":{"gitId":"warrencxw"},"content":"        // DISPLAY HELP MENU, FALLTHROUGH : IDENTICAL COMMAND","lastModifiedDate":"2022-02-21"},{"lineNumber":121,"author":{"gitId":"warrencxw"},"content":"        case \"?\":","lastModifiedDate":"2022-02-21"},{"lineNumber":122,"author":{"gitId":"warrencxw"},"content":"        case \"help\":","lastModifiedDate":"2022-02-21"},{"lineNumber":123,"author":{"gitId":"warrencxw"},"content":"            return new HelpCommand();","lastModifiedDate":"2022-02-21"},{"lineNumber":124,"author":{"gitId":"warrencxw"},"content":"        // LIST OUT TASK LIST","lastModifiedDate":"2022-02-21"},{"lineNumber":125,"author":{"gitId":"warrencxw"},"content":"        case \"list\":","lastModifiedDate":"2022-02-21"},{"lineNumber":126,"author":{"gitId":"warrencxw"},"content":"            return new ListCommand();","lastModifiedDate":"2022-02-21"},{"lineNumber":127,"author":{"gitId":"warrencxw"},"content":"        // MARK TASK AS DONE","lastModifiedDate":"2022-02-21"},{"lineNumber":128,"author":{"gitId":"warrencxw"},"content":"        case \"mark\":","lastModifiedDate":"2022-02-21"},{"lineNumber":129,"author":{"gitId":"warrencxw"},"content":"            return new MarkTaskCommand(commandArgs, true);","lastModifiedDate":"2022-02-21"},{"lineNumber":130,"author":{"gitId":"warrencxw"},"content":"        // MARK TASK AS NOT DONE","lastModifiedDate":"2022-02-21"},{"lineNumber":131,"author":{"gitId":"warrencxw"},"content":"        case \"unmark\":","lastModifiedDate":"2022-02-21"},{"lineNumber":132,"author":{"gitId":"warrencxw"},"content":"            return new MarkTaskCommand(commandArgs, false);","lastModifiedDate":"2022-02-21"},{"lineNumber":133,"author":{"gitId":"warrencxw"},"content":"        // CREATE NEW TODO","lastModifiedDate":"2022-02-21"},{"lineNumber":134,"author":{"gitId":"warrencxw"},"content":"        case \"todo\":","lastModifiedDate":"2022-02-21"},{"lineNumber":135,"author":{"gitId":"warrencxw"},"content":"            return new TodoCommand(commandArgs);","lastModifiedDate":"2022-02-21"},{"lineNumber":136,"author":{"gitId":"warrencxw"},"content":"        // CREATE NEW DEADLINE","lastModifiedDate":"2022-02-21"},{"lineNumber":137,"author":{"gitId":"warrencxw"},"content":"        case \"deadline\":","lastModifiedDate":"2022-02-21"},{"lineNumber":138,"author":{"gitId":"warrencxw"},"content":"            return new DeadlineCommand(commandArgs);","lastModifiedDate":"2022-02-21"},{"lineNumber":139,"author":{"gitId":"warrencxw"},"content":"        // CREATE NEW EVENT","lastModifiedDate":"2022-02-21"},{"lineNumber":140,"author":{"gitId":"warrencxw"},"content":"        case \"event\":","lastModifiedDate":"2022-02-21"},{"lineNumber":141,"author":{"gitId":"warrencxw"},"content":"            return new EventCommand(commandArgs);","lastModifiedDate":"2022-02-21"},{"lineNumber":142,"author":{"gitId":"warrencxw"},"content":"        case \"find\":","lastModifiedDate":"2022-02-21"},{"lineNumber":143,"author":{"gitId":"warrencxw"},"content":"            return new FindCommand(commandArgs);","lastModifiedDate":"2022-02-21"},{"lineNumber":144,"author":{"gitId":"warrencxw"},"content":"        // DELETE TASK, FALLTHROUGH : IDENTICAL COMMANDS","lastModifiedDate":"2022-02-21"},{"lineNumber":145,"author":{"gitId":"warrencxw"},"content":"        case \"delete\":","lastModifiedDate":"2022-02-21"},{"lineNumber":146,"author":{"gitId":"warrencxw"},"content":"        case \"remove\":","lastModifiedDate":"2022-02-21"},{"lineNumber":147,"author":{"gitId":"warrencxw"},"content":"            return new DeleteCommand(commandArgs);","lastModifiedDate":"2022-02-21"},{"lineNumber":148,"author":{"gitId":"warrencxw"},"content":"        case \"clear\":","lastModifiedDate":"2022-02-21"},{"lineNumber":149,"author":{"gitId":"warrencxw"},"content":"            return new ClearCommand();","lastModifiedDate":"2022-02-21"},{"lineNumber":150,"author":{"gitId":"warrencxw"},"content":"        // CONCLUDE SESSION, FALLTHROUGH : IDENTICAL COMMANDS","lastModifiedDate":"2022-02-21"},{"lineNumber":151,"author":{"gitId":"warrencxw"},"content":"        case \"exit\":","lastModifiedDate":"2022-02-21"},{"lineNumber":152,"author":{"gitId":"warrencxw"},"content":"        case \"quit\":","lastModifiedDate":"2022-02-21"},{"lineNumber":153,"author":{"gitId":"warrencxw"},"content":"        case \"bye\":","lastModifiedDate":"2022-02-21"},{"lineNumber":154,"author":{"gitId":"warrencxw"},"content":"            return new ExitCommand();","lastModifiedDate":"2022-02-21"},{"lineNumber":155,"author":{"gitId":"warrencxw"},"content":"        // UNRECOGNISED INPUT","lastModifiedDate":"2022-02-21"},{"lineNumber":156,"author":{"gitId":"warrencxw"},"content":"        default:","lastModifiedDate":"2022-02-21"},{"lineNumber":157,"author":{"gitId":"warrencxw"},"content":"            return new UnrecognisedCommand();","lastModifiedDate":"2022-02-21"},{"lineNumber":158,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-02-21"},{"lineNumber":159,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":160,"author":{"gitId":"warrencxw"},"content":"}","lastModifiedDate":"2022-02-21"}],"authorContributionMap":{"warrencxw":160}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"warrencxw"},"content":"package duke;","lastModifiedDate":"2022-02-16"},{"lineNumber":2,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-16"},{"lineNumber":3,"author":{"gitId":"warrencxw"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-02-16"},{"lineNumber":4,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-16"},{"lineNumber":5,"author":{"gitId":"warrencxw"},"content":"import java.io.File;","lastModifiedDate":"2022-02-16"},{"lineNumber":6,"author":{"gitId":"warrencxw"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2022-02-16"},{"lineNumber":7,"author":{"gitId":"warrencxw"},"content":"import java.io.FileWriter;","lastModifiedDate":"2022-02-16"},{"lineNumber":8,"author":{"gitId":"warrencxw"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-16"},{"lineNumber":9,"author":{"gitId":"warrencxw"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-02-21"},{"lineNumber":10,"author":{"gitId":"warrencxw"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-02-16"},{"lineNumber":11,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-16"},{"lineNumber":12,"author":{"gitId":"warrencxw"},"content":"/**","lastModifiedDate":"2022-02-21"},{"lineNumber":13,"author":{"gitId":"warrencxw"},"content":" * Represents a save file manager that saves a TaskList object or loads a TaskList object into a CSV file,","lastModifiedDate":"2022-02-21"},{"lineNumber":14,"author":{"gitId":"warrencxw"},"content":" * saved in the \u0027data\u0027 folder, with the name identified as per \u003ccode\u003esaveFileName\u003c/code\u003e when instantiated.","lastModifiedDate":"2022-02-21"},{"lineNumber":15,"author":{"gitId":"warrencxw"},"content":" */","lastModifiedDate":"2022-02-21"},{"lineNumber":16,"author":{"gitId":"warrencxw"},"content":"public class Storage {","lastModifiedDate":"2022-02-21"},{"lineNumber":17,"author":{"gitId":"warrencxw"},"content":"    // Member objects","lastModifiedDate":"2022-02-21"},{"lineNumber":18,"author":{"gitId":"warrencxw"},"content":"    private File saveFile;","lastModifiedDate":"2022-02-21"},{"lineNumber":19,"author":{"gitId":"warrencxw"},"content":"    public String saveFileName;","lastModifiedDate":"2022-02-21"},{"lineNumber":20,"author":{"gitId":"warrencxw"},"content":"    private String saveFilePath;","lastModifiedDate":"2022-02-21"},{"lineNumber":21,"author":{"gitId":"warrencxw"},"content":"    private Display ui;","lastModifiedDate":"2022-02-21"},{"lineNumber":22,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":23,"author":{"gitId":"warrencxw"},"content":"    // String Constants","lastModifiedDate":"2022-02-21"},{"lineNumber":24,"author":{"gitId":"warrencxw"},"content":"    private static final String PATH_STRING_DATA_FOLDER \u003d \"data\";","lastModifiedDate":"2022-02-16"},{"lineNumber":25,"author":{"gitId":"warrencxw"},"content":"    private static final String LINE_SEPARATOR \u003d System.getProperty(\"line.separator\");","lastModifiedDate":"2022-02-16"},{"lineNumber":26,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-16"},{"lineNumber":27,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":28,"author":{"gitId":"warrencxw"},"content":"    // TODO: CREATE A TEST FOR LOAD","lastModifiedDate":"2022-02-16"},{"lineNumber":29,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-16"},{"lineNumber":30,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-16"},{"lineNumber":31,"author":{"gitId":"warrencxw"},"content":"     * Checks if a save file already exist on the system","lastModifiedDate":"2022-02-16"},{"lineNumber":32,"author":{"gitId":"warrencxw"},"content":"     * If toCreate is true, creates the file structure and save file for saving TaskList data as it updates","lastModifiedDate":"2022-02-16"},{"lineNumber":33,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-02-16"},{"lineNumber":34,"author":{"gitId":"warrencxw"},"content":"     * @param toCreate Tells the method whether to create the files for saving or only to check if save exists","lastModifiedDate":"2022-02-16"},{"lineNumber":35,"author":{"gitId":"warrencxw"},"content":"     * @return Returns true if the save file exists, false otherwise","lastModifiedDate":"2022-02-16"},{"lineNumber":36,"author":{"gitId":"warrencxw"},"content":"     * @throws IOException If File.exists(), File.mkdir(), File.createNewFile() faces exceptions.","lastModifiedDate":"2022-02-16"},{"lineNumber":37,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-16"},{"lineNumber":38,"author":{"gitId":"warrencxw"},"content":"    private boolean saveExists(boolean toCreate) throws IOException {","lastModifiedDate":"2022-02-21"},{"lineNumber":39,"author":{"gitId":"warrencxw"},"content":"        File directory \u003d new File(PATH_STRING_DATA_FOLDER);","lastModifiedDate":"2022-02-16"},{"lineNumber":40,"author":{"gitId":"warrencxw"},"content":"        if (!directory.exists()) {","lastModifiedDate":"2022-02-16"},{"lineNumber":41,"author":{"gitId":"warrencxw"},"content":"            if (!toCreate) {","lastModifiedDate":"2022-02-16"},{"lineNumber":42,"author":{"gitId":"warrencxw"},"content":"                return false;","lastModifiedDate":"2022-02-16"},{"lineNumber":43,"author":{"gitId":"warrencxw"},"content":"            }","lastModifiedDate":"2022-02-16"},{"lineNumber":44,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-16"},{"lineNumber":45,"author":{"gitId":"warrencxw"},"content":"            boolean success \u003d directory.mkdir();","lastModifiedDate":"2022-02-16"},{"lineNumber":46,"author":{"gitId":"warrencxw"},"content":"            if (!success) {","lastModifiedDate":"2022-02-16"},{"lineNumber":47,"author":{"gitId":"warrencxw"},"content":"                ui.printError(Display.ErrorType.FILE_CREATION_FAILED);","lastModifiedDate":"2022-02-21"},{"lineNumber":48,"author":{"gitId":"warrencxw"},"content":"                return false;","lastModifiedDate":"2022-02-16"},{"lineNumber":49,"author":{"gitId":"warrencxw"},"content":"            }","lastModifiedDate":"2022-02-16"},{"lineNumber":50,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-02-16"},{"lineNumber":51,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-16"},{"lineNumber":52,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":53,"author":{"gitId":"warrencxw"},"content":"        if (!saveFile.exists()) {","lastModifiedDate":"2022-02-16"},{"lineNumber":54,"author":{"gitId":"warrencxw"},"content":"            if (!toCreate) {","lastModifiedDate":"2022-02-16"},{"lineNumber":55,"author":{"gitId":"warrencxw"},"content":"                return false;","lastModifiedDate":"2022-02-16"},{"lineNumber":56,"author":{"gitId":"warrencxw"},"content":"            }","lastModifiedDate":"2022-02-16"},{"lineNumber":57,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-16"},{"lineNumber":58,"author":{"gitId":"warrencxw"},"content":"            boolean success \u003d saveFile.createNewFile();","lastModifiedDate":"2022-02-16"},{"lineNumber":59,"author":{"gitId":"warrencxw"},"content":"            if (!success) {","lastModifiedDate":"2022-02-16"},{"lineNumber":60,"author":{"gitId":"warrencxw"},"content":"                ui.printError(Display.ErrorType.FILE_CREATION_FAILED);","lastModifiedDate":"2022-02-21"},{"lineNumber":61,"author":{"gitId":"warrencxw"},"content":"                return false;","lastModifiedDate":"2022-02-16"},{"lineNumber":62,"author":{"gitId":"warrencxw"},"content":"            }","lastModifiedDate":"2022-02-16"},{"lineNumber":63,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-02-16"},{"lineNumber":64,"author":{"gitId":"warrencxw"},"content":"        return true;","lastModifiedDate":"2022-02-16"},{"lineNumber":65,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-16"},{"lineNumber":66,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-16"},{"lineNumber":67,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-16"},{"lineNumber":68,"author":{"gitId":"warrencxw"},"content":"     * Loads from a saved CSV file at \u003ccode\u003esaveFilePath\u003c/code\u003e, all tasks that were previously saved, into ","lastModifiedDate":"2022-02-21"},{"lineNumber":69,"author":{"gitId":"warrencxw"},"content":"     * the TaskList object passed into this method. If a file does not exist, the method will terminate and ","lastModifiedDate":"2022-02-21"},{"lineNumber":70,"author":{"gitId":"warrencxw"},"content":"     * \u003ccode\u003etasks\u003c/code\u003e remains empty. A CSV file will not be created.","lastModifiedDate":"2022-02-21"},{"lineNumber":71,"author":{"gitId":"warrencxw"},"content":"     * ","lastModifiedDate":"2022-02-21"},{"lineNumber":72,"author":{"gitId":"warrencxw"},"content":"     * @param tasks the TaskList object in which the save file is loaded into","lastModifiedDate":"2022-02-21"},{"lineNumber":73,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-16"},{"lineNumber":74,"author":{"gitId":"warrencxw"},"content":"    public void loadSave(TaskList tasks) {","lastModifiedDate":"2022-02-21"},{"lineNumber":75,"author":{"gitId":"warrencxw"},"content":"        boolean saveExists \u003d false;","lastModifiedDate":"2022-02-16"},{"lineNumber":76,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-02-16"},{"lineNumber":77,"author":{"gitId":"warrencxw"},"content":"            saveExists \u003d saveExists(false);","lastModifiedDate":"2022-02-16"},{"lineNumber":78,"author":{"gitId":"warrencxw"},"content":"        } catch (IOException exception) {","lastModifiedDate":"2022-02-16"},{"lineNumber":79,"author":{"gitId":"warrencxw"},"content":"            exception.printStackTrace();","lastModifiedDate":"2022-02-16"},{"lineNumber":80,"author":{"gitId":"warrencxw"},"content":"            ui.printError(Display.ErrorType.SAVE_LOAD_FAILED);","lastModifiedDate":"2022-02-21"},{"lineNumber":81,"author":{"gitId":"warrencxw"},"content":"            return;","lastModifiedDate":"2022-02-16"},{"lineNumber":82,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-02-16"},{"lineNumber":83,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-16"},{"lineNumber":84,"author":{"gitId":"warrencxw"},"content":"        if (!saveExists) {","lastModifiedDate":"2022-02-16"},{"lineNumber":85,"author":{"gitId":"warrencxw"},"content":"            return;","lastModifiedDate":"2022-02-16"},{"lineNumber":86,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-02-16"},{"lineNumber":87,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-16"},{"lineNumber":88,"author":{"gitId":"warrencxw"},"content":"        Scanner saveIn;","lastModifiedDate":"2022-02-16"},{"lineNumber":89,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-02-16"},{"lineNumber":90,"author":{"gitId":"warrencxw"},"content":"            saveIn \u003d new Scanner(saveFile);","lastModifiedDate":"2022-02-16"},{"lineNumber":91,"author":{"gitId":"warrencxw"},"content":"        } catch (FileNotFoundException exception) {","lastModifiedDate":"2022-02-16"},{"lineNumber":92,"author":{"gitId":"warrencxw"},"content":"            exception.printStackTrace();","lastModifiedDate":"2022-02-16"},{"lineNumber":93,"author":{"gitId":"warrencxw"},"content":"            ui.printError(Display.ErrorType.SAVE_LOAD_FAILED);","lastModifiedDate":"2022-02-21"},{"lineNumber":94,"author":{"gitId":"warrencxw"},"content":"            return;","lastModifiedDate":"2022-02-16"},{"lineNumber":95,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-02-16"},{"lineNumber":96,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-16"},{"lineNumber":97,"author":{"gitId":"warrencxw"},"content":"        String inputLine;","lastModifiedDate":"2022-02-16"},{"lineNumber":98,"author":{"gitId":"warrencxw"},"content":"        while (saveIn.hasNext()) {","lastModifiedDate":"2022-02-16"},{"lineNumber":99,"author":{"gitId":"warrencxw"},"content":"            inputLine \u003d saveIn.nextLine();","lastModifiedDate":"2022-02-16"},{"lineNumber":100,"author":{"gitId":"warrencxw"},"content":"            String[] csvRecordEntries \u003d inputLine.split(Duke.REGEX_PATTERN_CSV_DELIMITER);","lastModifiedDate":"2022-02-16"},{"lineNumber":101,"author":{"gitId":"warrencxw"},"content":"            try {","lastModifiedDate":"2022-02-16"},{"lineNumber":102,"author":{"gitId":"warrencxw"},"content":"                tasks.addTaskFromCSVRecord(csvRecordEntries);","lastModifiedDate":"2022-02-21"},{"lineNumber":103,"author":{"gitId":"warrencxw"},"content":"            } catch (DukeException exception) {","lastModifiedDate":"2022-02-16"},{"lineNumber":104,"author":{"gitId":"warrencxw"},"content":"                ui.printlnMessage(exception.getMessage());","lastModifiedDate":"2022-02-21"},{"lineNumber":105,"author":{"gitId":"warrencxw"},"content":"                return;","lastModifiedDate":"2022-02-16"},{"lineNumber":106,"author":{"gitId":"warrencxw"},"content":"            } catch (DateTimeParseException exception) {","lastModifiedDate":"2022-02-21"},{"lineNumber":107,"author":{"gitId":"warrencxw"},"content":"                exception.printStackTrace();","lastModifiedDate":"2022-02-21"},{"lineNumber":108,"author":{"gitId":"warrencxw"},"content":"                return;","lastModifiedDate":"2022-02-21"},{"lineNumber":109,"author":{"gitId":"warrencxw"},"content":"            }","lastModifiedDate":"2022-02-16"},{"lineNumber":110,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-02-16"},{"lineNumber":111,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-16"},{"lineNumber":112,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-16"},{"lineNumber":113,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-16"},{"lineNumber":114,"author":{"gitId":"warrencxw"},"content":"     * Save into \u003ccode\u003esaveFilePath\u003c/code\u003e, all tasks that are currently in the given TaskList object, as a CSV file.","lastModifiedDate":"2022-02-21"},{"lineNumber":115,"author":{"gitId":"warrencxw"},"content":"     * Creates a CSV file if it does not yet exist.","lastModifiedDate":"2022-02-21"},{"lineNumber":116,"author":{"gitId":"warrencxw"},"content":"     * ","lastModifiedDate":"2022-02-21"},{"lineNumber":117,"author":{"gitId":"warrencxw"},"content":"     * @param tasks The TaskList object with which all tasks within would be saved from","lastModifiedDate":"2022-02-21"},{"lineNumber":118,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-16"},{"lineNumber":119,"author":{"gitId":"warrencxw"},"content":"    public void saveChanges(TaskList tasks) {","lastModifiedDate":"2022-02-21"},{"lineNumber":120,"author":{"gitId":"warrencxw"},"content":"        boolean saveExists;","lastModifiedDate":"2022-02-16"},{"lineNumber":121,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-02-16"},{"lineNumber":122,"author":{"gitId":"warrencxw"},"content":"            saveExists \u003d saveExists(true);","lastModifiedDate":"2022-02-16"},{"lineNumber":123,"author":{"gitId":"warrencxw"},"content":"        } catch (IOException exception) {","lastModifiedDate":"2022-02-16"},{"lineNumber":124,"author":{"gitId":"warrencxw"},"content":"            exception.printStackTrace();","lastModifiedDate":"2022-02-16"},{"lineNumber":125,"author":{"gitId":"warrencxw"},"content":"            ui.printError(Display.ErrorType.FILE_CREATION_FAILED);","lastModifiedDate":"2022-02-21"},{"lineNumber":126,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-02-16"},{"lineNumber":127,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-16"},{"lineNumber":128,"author":{"gitId":"warrencxw"},"content":"        FileWriter fw;","lastModifiedDate":"2022-02-16"},{"lineNumber":129,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-02-16"},{"lineNumber":130,"author":{"gitId":"warrencxw"},"content":"            fw \u003d new FileWriter(saveFilePath);","lastModifiedDate":"2022-02-21"},{"lineNumber":131,"author":{"gitId":"warrencxw"},"content":"        } catch (IOException exception) {","lastModifiedDate":"2022-02-16"},{"lineNumber":132,"author":{"gitId":"warrencxw"},"content":"            exception.printStackTrace();","lastModifiedDate":"2022-02-16"},{"lineNumber":133,"author":{"gitId":"warrencxw"},"content":"            ui.printError(Display.ErrorType.SAVE_WRITE_FAILED);","lastModifiedDate":"2022-02-21"},{"lineNumber":134,"author":{"gitId":"warrencxw"},"content":"            return;","lastModifiedDate":"2022-02-16"},{"lineNumber":135,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-02-16"},{"lineNumber":136,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-16"},{"lineNumber":137,"author":{"gitId":"warrencxw"},"content":"        String[] saveStrings \u003d tasks.getSavableCSVStrings();","lastModifiedDate":"2022-02-21"},{"lineNumber":138,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-02-16"},{"lineNumber":139,"author":{"gitId":"warrencxw"},"content":"            for (String saveString : saveStrings) {","lastModifiedDate":"2022-02-16"},{"lineNumber":140,"author":{"gitId":"warrencxw"},"content":"                fw.write(saveString + LINE_SEPARATOR);","lastModifiedDate":"2022-02-16"},{"lineNumber":141,"author":{"gitId":"warrencxw"},"content":"            }","lastModifiedDate":"2022-02-16"},{"lineNumber":142,"author":{"gitId":"warrencxw"},"content":"            fw.close();","lastModifiedDate":"2022-02-16"},{"lineNumber":143,"author":{"gitId":"warrencxw"},"content":"        } catch (IOException exception) {","lastModifiedDate":"2022-02-16"},{"lineNumber":144,"author":{"gitId":"warrencxw"},"content":"            exception.printStackTrace();","lastModifiedDate":"2022-02-16"},{"lineNumber":145,"author":{"gitId":"warrencxw"},"content":"            ui.printError(Display.ErrorType.SAVE_WRITE_FAILED);","lastModifiedDate":"2022-02-21"},{"lineNumber":146,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-02-21"},{"lineNumber":147,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-16"},{"lineNumber":148,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":149,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":150,"author":{"gitId":"warrencxw"},"content":"     * Default constructor, creates a Storage object that saves into and loads from a default file \"save.csv\"","lastModifiedDate":"2022-02-21"},{"lineNumber":151,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":152,"author":{"gitId":"warrencxw"},"content":"    public Storage() {","lastModifiedDate":"2022-02-21"},{"lineNumber":153,"author":{"gitId":"warrencxw"},"content":"        saveFileName \u003d \"save.csv\";","lastModifiedDate":"2022-02-21"},{"lineNumber":154,"author":{"gitId":"warrencxw"},"content":"        saveFilePath \u003d PATH_STRING_DATA_FOLDER + File.separator + saveFileName;","lastModifiedDate":"2022-02-21"},{"lineNumber":155,"author":{"gitId":"warrencxw"},"content":"        saveFile \u003d new File(saveFilePath);","lastModifiedDate":"2022-02-21"},{"lineNumber":156,"author":{"gitId":"warrencxw"},"content":"        ui \u003d new Display();","lastModifiedDate":"2022-02-21"},{"lineNumber":157,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":158,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":159,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":160,"author":{"gitId":"warrencxw"},"content":"     * Alternative constructor, creates a Storage object that saves into and loads from a file with the name identified","lastModifiedDate":"2022-02-21"},{"lineNumber":161,"author":{"gitId":"warrencxw"},"content":"     * in \u003ccode\u003esaveFileName\u003c/code\u003e. Also reads in a Display object to manage error printing.","lastModifiedDate":"2022-02-21"},{"lineNumber":162,"author":{"gitId":"warrencxw"},"content":"     * ","lastModifiedDate":"2022-02-21"},{"lineNumber":163,"author":{"gitId":"warrencxw"},"content":"     * @param saveFileName name of CSV file to be used for saving and loading TaskList objects","lastModifiedDate":"2022-02-21"},{"lineNumber":164,"author":{"gitId":"warrencxw"},"content":"     * @param ui           a Display object to manage printing of errors and other messages","lastModifiedDate":"2022-02-21"},{"lineNumber":165,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":166,"author":{"gitId":"warrencxw"},"content":"    public Storage(String saveFileName, Display ui) {","lastModifiedDate":"2022-02-21"},{"lineNumber":167,"author":{"gitId":"warrencxw"},"content":"        this.saveFileName \u003d saveFileName;","lastModifiedDate":"2022-02-21"},{"lineNumber":168,"author":{"gitId":"warrencxw"},"content":"        this.saveFilePath \u003d PATH_STRING_DATA_FOLDER + File.separator + saveFileName;","lastModifiedDate":"2022-02-21"},{"lineNumber":169,"author":{"gitId":"warrencxw"},"content":"        this.saveFile \u003d new File(saveFilePath);","lastModifiedDate":"2022-02-21"},{"lineNumber":170,"author":{"gitId":"warrencxw"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2022-02-21"},{"lineNumber":171,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-16"},{"lineNumber":172,"author":{"gitId":"warrencxw"},"content":"}","lastModifiedDate":"2022-02-16"}],"authorContributionMap":{"warrencxw":172}},{"path":"src/main/java/duke/command/ClearCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"warrencxw"},"content":"package duke.command;","lastModifiedDate":"2022-02-21"},{"lineNumber":2,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":3,"author":{"gitId":"warrencxw"},"content":"import duke.Display;","lastModifiedDate":"2022-02-21"},{"lineNumber":4,"author":{"gitId":"warrencxw"},"content":"import duke.Storage;","lastModifiedDate":"2022-02-21"},{"lineNumber":5,"author":{"gitId":"warrencxw"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-02-21"},{"lineNumber":6,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":7,"author":{"gitId":"warrencxw"},"content":"/**","lastModifiedDate":"2022-02-21"},{"lineNumber":8,"author":{"gitId":"warrencxw"},"content":" * Represents the Command to clear all Task objects in the specified TaskList object","lastModifiedDate":"2022-02-21"},{"lineNumber":9,"author":{"gitId":"warrencxw"},"content":" */","lastModifiedDate":"2022-02-21"},{"lineNumber":10,"author":{"gitId":"warrencxw"},"content":"public class ClearCommand extends Command {","lastModifiedDate":"2022-02-21"},{"lineNumber":11,"author":{"gitId":"warrencxw"},"content":"    // Warning messages","lastModifiedDate":"2022-02-21"},{"lineNumber":12,"author":{"gitId":"warrencxw"},"content":"    public static final String WARNING_DELETION \u003d","lastModifiedDate":"2022-02-21"},{"lineNumber":13,"author":{"gitId":"warrencxw"},"content":"            \"Are you really sure you want to delete all available tasks? Type \u0027Y\u0027 to confirm.\";","lastModifiedDate":"2022-02-21"},{"lineNumber":14,"author":{"gitId":"warrencxw"},"content":"    public static final String TASK_DELETION_ABORTED \u003d","lastModifiedDate":"2022-02-21"},{"lineNumber":15,"author":{"gitId":"warrencxw"},"content":"            \"Deletion has been aborted.\";","lastModifiedDate":"2022-02-21"},{"lineNumber":16,"author":{"gitId":"warrencxw"},"content":"    public static final String TASK_DELETED_CONFIRMATION \u003d","lastModifiedDate":"2022-02-21"},{"lineNumber":17,"author":{"gitId":"warrencxw"},"content":"            \"All tasks have been cleared.\";","lastModifiedDate":"2022-02-21"},{"lineNumber":18,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":19,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":20,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":21,"author":{"gitId":"warrencxw"},"content":"     * Runs the command to clear all Task objects in the specified TaskList object","lastModifiedDate":"2022-02-21"},{"lineNumber":22,"author":{"gitId":"warrencxw"},"content":"     * Warns the user and requests for a confirmation before the TaskList is completely cleared.","lastModifiedDate":"2022-02-21"},{"lineNumber":23,"author":{"gitId":"warrencxw"},"content":"     * Saves all changes after deletion.","lastModifiedDate":"2022-02-21"},{"lineNumber":24,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":25,"author":{"gitId":"warrencxw"},"content":"     * @param ui      A Display object to manage printing of errors and other messages","lastModifiedDate":"2022-02-21"},{"lineNumber":26,"author":{"gitId":"warrencxw"},"content":"     * @param tasks   A TaskList object with which the command may process or modify","lastModifiedDate":"2022-02-21"},{"lineNumber":27,"author":{"gitId":"warrencxw"},"content":"     * @param storage A Storage object to manage the save file of the specified TaskList object if necessary","lastModifiedDate":"2022-02-21"},{"lineNumber":28,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":29,"author":{"gitId":"warrencxw"},"content":"    @Override","lastModifiedDate":"2022-02-21"},{"lineNumber":30,"author":{"gitId":"warrencxw"},"content":"    public void run(Display ui, TaskList tasks, Storage storage) {","lastModifiedDate":"2022-02-21"},{"lineNumber":31,"author":{"gitId":"warrencxw"},"content":"        ui.printlnMessage(WARNING_DELETION);","lastModifiedDate":"2022-02-21"},{"lineNumber":32,"author":{"gitId":"warrencxw"},"content":"        String input \u003d ui.getNextLine();","lastModifiedDate":"2022-02-21"},{"lineNumber":33,"author":{"gitId":"warrencxw"},"content":"        if (!input.equalsIgnoreCase(\"Y\")) {","lastModifiedDate":"2022-02-21"},{"lineNumber":34,"author":{"gitId":"warrencxw"},"content":"            ui.printlnMessage(TASK_DELETION_ABORTED);","lastModifiedDate":"2022-02-21"},{"lineNumber":35,"author":{"gitId":"warrencxw"},"content":"            return;","lastModifiedDate":"2022-02-21"},{"lineNumber":36,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-02-21"},{"lineNumber":37,"author":{"gitId":"warrencxw"},"content":"        tasks.clearTasks();","lastModifiedDate":"2022-02-21"},{"lineNumber":38,"author":{"gitId":"warrencxw"},"content":"        ui.printlnMessage(TASK_DELETED_CONFIRMATION);","lastModifiedDate":"2022-02-21"},{"lineNumber":39,"author":{"gitId":"warrencxw"},"content":"        storage.saveChanges(tasks);","lastModifiedDate":"2022-02-21"},{"lineNumber":40,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":41,"author":{"gitId":"warrencxw"},"content":"}","lastModifiedDate":"2022-02-21"}],"authorContributionMap":{"warrencxw":41}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"warrencxw"},"content":"package duke.command;","lastModifiedDate":"2022-02-21"},{"lineNumber":2,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":3,"author":{"gitId":"warrencxw"},"content":"import duke.Display;","lastModifiedDate":"2022-02-21"},{"lineNumber":4,"author":{"gitId":"warrencxw"},"content":"import duke.Storage;","lastModifiedDate":"2022-02-21"},{"lineNumber":5,"author":{"gitId":"warrencxw"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-02-21"},{"lineNumber":6,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":7,"author":{"gitId":"warrencxw"},"content":"/**","lastModifiedDate":"2022-02-21"},{"lineNumber":8,"author":{"gitId":"warrencxw"},"content":" * Represents a command that the user has specified to carry out, along with its specified arguments","lastModifiedDate":"2022-02-21"},{"lineNumber":9,"author":{"gitId":"warrencxw"},"content":" */","lastModifiedDate":"2022-02-21"},{"lineNumber":10,"author":{"gitId":"warrencxw"},"content":"public abstract class Command {","lastModifiedDate":"2022-02-21"},{"lineNumber":11,"author":{"gitId":"warrencxw"},"content":"    public enum CommandType {","lastModifiedDate":"2022-02-21"},{"lineNumber":12,"author":{"gitId":"warrencxw"},"content":"        EMPTY, HELP, LIST, MARK, TODO, DEADLINE, EVENT, FIND, DELETE, CLEAR, EXIT, UNRECOGNISED","lastModifiedDate":"2022-02-21"},{"lineNumber":13,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":14,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":15,"author":{"gitId":"warrencxw"},"content":"    // Member attributes","lastModifiedDate":"2022-02-21"},{"lineNumber":16,"author":{"gitId":"warrencxw"},"content":"    protected String commandArgs;","lastModifiedDate":"2022-02-21"},{"lineNumber":17,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":18,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":19,"author":{"gitId":"warrencxw"},"content":"     * Runs the command specified by the user according to its type, along with the specified argument","lastModifiedDate":"2022-02-21"},{"lineNumber":20,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":21,"author":{"gitId":"warrencxw"},"content":"     * @param ui      A Display object to manage printing of errors and other messages","lastModifiedDate":"2022-02-21"},{"lineNumber":22,"author":{"gitId":"warrencxw"},"content":"     * @param tasks   A TaskList object with which the command may process or modify","lastModifiedDate":"2022-02-21"},{"lineNumber":23,"author":{"gitId":"warrencxw"},"content":"     * @param storage A Storage object to manage the save file of the specified TaskList object if necessary","lastModifiedDate":"2022-02-21"},{"lineNumber":24,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":25,"author":{"gitId":"warrencxw"},"content":"    public abstract void run(Display ui, TaskList tasks, Storage storage);","lastModifiedDate":"2022-02-21"},{"lineNumber":26,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":27,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":28,"author":{"gitId":"warrencxw"},"content":"     * Standard constructor, creates a Command with its accompanying arguments.","lastModifiedDate":"2022-02-21"},{"lineNumber":29,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":30,"author":{"gitId":"warrencxw"},"content":"     * @param commandArgs arguments that complement the command to function","lastModifiedDate":"2022-02-21"},{"lineNumber":31,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":32,"author":{"gitId":"warrencxw"},"content":"    public Command(String commandArgs) {","lastModifiedDate":"2022-02-21"},{"lineNumber":33,"author":{"gitId":"warrencxw"},"content":"        this.commandArgs \u003d commandArgs;","lastModifiedDate":"2022-02-21"},{"lineNumber":34,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":35,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":36,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":37,"author":{"gitId":"warrencxw"},"content":"     * Default constructor, creates a Command without any arguments.","lastModifiedDate":"2022-02-21"},{"lineNumber":38,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":39,"author":{"gitId":"warrencxw"},"content":"    public Command() {","lastModifiedDate":"2022-02-21"},{"lineNumber":40,"author":{"gitId":"warrencxw"},"content":"        this.commandArgs \u003d \"\";","lastModifiedDate":"2022-02-21"},{"lineNumber":41,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":42,"author":{"gitId":"warrencxw"},"content":"}","lastModifiedDate":"2022-02-21"}],"authorContributionMap":{"warrencxw":42}},{"path":"src/main/java/duke/command/CreateTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"warrencxw"},"content":"package duke.command;","lastModifiedDate":"2022-02-21"},{"lineNumber":2,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":3,"author":{"gitId":"warrencxw"},"content":"import duke.Display;","lastModifiedDate":"2022-02-21"},{"lineNumber":4,"author":{"gitId":"warrencxw"},"content":"import duke.DukeException;","lastModifiedDate":"2022-02-21"},{"lineNumber":5,"author":{"gitId":"warrencxw"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-02-21"},{"lineNumber":6,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":7,"author":{"gitId":"warrencxw"},"content":"/**","lastModifiedDate":"2022-02-21"},{"lineNumber":8,"author":{"gitId":"warrencxw"},"content":" * Represents a generic Command that creates a Task object to be added into the specified TaskList object","lastModifiedDate":"2022-02-21"},{"lineNumber":9,"author":{"gitId":"warrencxw"},"content":" */","lastModifiedDate":"2022-02-21"},{"lineNumber":10,"author":{"gitId":"warrencxw"},"content":"public abstract class CreateTaskCommand extends Command {","lastModifiedDate":"2022-02-21"},{"lineNumber":11,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":12,"author":{"gitId":"warrencxw"},"content":"     * Checks whether the input argument string is empty or missing a task name for Event and Deadline classes.","lastModifiedDate":"2022-02-21"},{"lineNumber":13,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":14,"author":{"gitId":"warrencxw"},"content":"     * @param taskDetailString Input string that follows the syntax [task name] [delimiter] [time specification]","lastModifiedDate":"2022-02-21"},{"lineNumber":15,"author":{"gitId":"warrencxw"},"content":"     * @param taskType         Either TaskType.EVENT or TaskType.DEADLINE","lastModifiedDate":"2022-02-21"},{"lineNumber":16,"author":{"gitId":"warrencxw"},"content":"     * @return Returns true if taskDetailString starts with the delimiter, i.e. task name is missing,","lastModifiedDate":"2022-02-21"},{"lineNumber":17,"author":{"gitId":"warrencxw"},"content":"     * returns false otherwise.","lastModifiedDate":"2022-02-21"},{"lineNumber":18,"author":{"gitId":"warrencxw"},"content":"     * @throws DukeException If taskType is NOT TaskType.EVENT or TaskType.DEADLINE","lastModifiedDate":"2022-02-21"},{"lineNumber":19,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":20,"author":{"gitId":"warrencxw"},"content":"    private boolean isDelimiterWithoutTaskName(String taskDetailString, TaskList.TaskType taskType, Display ui) ","lastModifiedDate":"2022-02-21"},{"lineNumber":21,"author":{"gitId":"warrencxw"},"content":"            throws DukeException {","lastModifiedDate":"2022-02-21"},{"lineNumber":22,"author":{"gitId":"warrencxw"},"content":"        String stringPattern \u003d TaskList.getStringPatternOfTask(taskType);","lastModifiedDate":"2022-02-21"},{"lineNumber":23,"author":{"gitId":"warrencxw"},"content":"        boolean isEmptyArgument \u003d taskDetailString.isEmpty();","lastModifiedDate":"2022-02-21"},{"lineNumber":24,"author":{"gitId":"warrencxw"},"content":"        boolean isMissingTaskName \u003d taskDetailString.indexOf(stringPattern) \u003d\u003d 0;","lastModifiedDate":"2022-02-21"},{"lineNumber":25,"author":{"gitId":"warrencxw"},"content":"        return isEmptyArgument || isMissingTaskName;","lastModifiedDate":"2022-02-21"},{"lineNumber":26,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":27,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":28,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":29,"author":{"gitId":"warrencxw"},"content":"     * Takes in an input string and returns a String array of {task name, time specification} if input syntax is valid,","lastModifiedDate":"2022-02-21"},{"lineNumber":30,"author":{"gitId":"warrencxw"},"content":"     * for Event and Deadline objects.","lastModifiedDate":"2022-02-21"},{"lineNumber":31,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":32,"author":{"gitId":"warrencxw"},"content":"     * @param taskDetailString Input string that follows the syntax [task name] [delimiter] [time specification]","lastModifiedDate":"2022-02-21"},{"lineNumber":33,"author":{"gitId":"warrencxw"},"content":"     * @param taskType         Either TaskType.EVENT or TaskType.DEADLINE","lastModifiedDate":"2022-02-21"},{"lineNumber":34,"author":{"gitId":"warrencxw"},"content":"     * @return Returns a String[] object containing the task name in the first index [0] and","lastModifiedDate":"2022-02-21"},{"lineNumber":35,"author":{"gitId":"warrencxw"},"content":"     *         the time specification in the second index [1].","lastModifiedDate":"2022-02-21"},{"lineNumber":36,"author":{"gitId":"warrencxw"},"content":"     * @throws DukeException If taskType is NOT TaskType.EVENT or TaskType.DEADLINE, ","lastModifiedDate":"2022-02-21"},{"lineNumber":37,"author":{"gitId":"warrencxw"},"content":"     *                       or if task name, delimiter or time specification is missing","lastModifiedDate":"2022-02-21"},{"lineNumber":38,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":39,"author":{"gitId":"warrencxw"},"content":"    protected String[] getTaskDetailTokens(String taskDetailString, TaskList.TaskType taskType, Display ui)","lastModifiedDate":"2022-02-21"},{"lineNumber":40,"author":{"gitId":"warrencxw"},"content":"            throws DukeException {","lastModifiedDate":"2022-02-21"},{"lineNumber":41,"author":{"gitId":"warrencxw"},"content":"        taskDetailString \u003d taskDetailString.trim();","lastModifiedDate":"2022-02-21"},{"lineNumber":42,"author":{"gitId":"warrencxw"},"content":"        // Exception is thrown here if taskType does not belong to TaskType.EVENT or TaskType.DEADLINE","lastModifiedDate":"2022-02-21"},{"lineNumber":43,"author":{"gitId":"warrencxw"},"content":"        if (isDelimiterWithoutTaskName(taskDetailString, taskType, ui)) {","lastModifiedDate":"2022-02-21"},{"lineNumber":44,"author":{"gitId":"warrencxw"},"content":"            throw new DukeException(Display.getErrorMessage(Display.ErrorType.EMPTY_TASK_NAME));","lastModifiedDate":"2022-02-21"},{"lineNumber":45,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-02-21"},{"lineNumber":46,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":47,"author":{"gitId":"warrencxw"},"content":"        String[] taskDetailTokens;","lastModifiedDate":"2022-02-21"},{"lineNumber":48,"author":{"gitId":"warrencxw"},"content":"        String regexPattern \u003d TaskList.getRegexPatternOfTask(taskType);","lastModifiedDate":"2022-02-21"},{"lineNumber":49,"author":{"gitId":"warrencxw"},"content":"        taskDetailTokens \u003d taskDetailString.split(regexPattern, 2);","lastModifiedDate":"2022-02-21"},{"lineNumber":50,"author":{"gitId":"warrencxw"},"content":"        boolean isTaskNameOnly \u003d taskDetailTokens.length \u003c 2;","lastModifiedDate":"2022-02-21"},{"lineNumber":51,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":52,"author":{"gitId":"warrencxw"},"content":"        if (isTaskNameOnly) {","lastModifiedDate":"2022-02-21"},{"lineNumber":53,"author":{"gitId":"warrencxw"},"content":"            if (taskType \u003d\u003d TaskList.TaskType.EVENT) {","lastModifiedDate":"2022-02-21"},{"lineNumber":54,"author":{"gitId":"warrencxw"},"content":"                throw new DukeException(Display.getErrorMessage(Display.ErrorType.MISSING_EVENT_DELIMITER));","lastModifiedDate":"2022-02-21"},{"lineNumber":55,"author":{"gitId":"warrencxw"},"content":"            } else {","lastModifiedDate":"2022-02-21"},{"lineNumber":56,"author":{"gitId":"warrencxw"},"content":"                throw new DukeException(Display.getErrorMessage(Display.ErrorType.MISSING_DEADLINE_DELIMITER));","lastModifiedDate":"2022-02-21"},{"lineNumber":57,"author":{"gitId":"warrencxw"},"content":"            }","lastModifiedDate":"2022-02-21"},{"lineNumber":58,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-02-21"},{"lineNumber":59,"author":{"gitId":"warrencxw"},"content":"        return taskDetailTokens;","lastModifiedDate":"2022-02-21"},{"lineNumber":60,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":61,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":62,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":63,"author":{"gitId":"warrencxw"},"content":"     * Standard constructor, creates a CreateTaskCommand object with a specified argument","lastModifiedDate":"2022-02-21"},{"lineNumber":64,"author":{"gitId":"warrencxw"},"content":"     * ","lastModifiedDate":"2022-02-21"},{"lineNumber":65,"author":{"gitId":"warrencxw"},"content":"     * @param commandArgs arguments that contain the task name and time specification (if any) of the task","lastModifiedDate":"2022-02-21"},{"lineNumber":66,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":67,"author":{"gitId":"warrencxw"},"content":"    public CreateTaskCommand(String commandArgs) {","lastModifiedDate":"2022-02-21"},{"lineNumber":68,"author":{"gitId":"warrencxw"},"content":"        super (commandArgs);","lastModifiedDate":"2022-02-21"},{"lineNumber":69,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":70,"author":{"gitId":"warrencxw"},"content":"}","lastModifiedDate":"2022-02-21"}],"authorContributionMap":{"warrencxw":70}},{"path":"src/main/java/duke/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"warrencxw"},"content":"package duke.command;","lastModifiedDate":"2022-02-21"},{"lineNumber":2,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":3,"author":{"gitId":"warrencxw"},"content":"import duke.Display;","lastModifiedDate":"2022-02-21"},{"lineNumber":4,"author":{"gitId":"warrencxw"},"content":"import duke.DukeException;","lastModifiedDate":"2022-02-21"},{"lineNumber":5,"author":{"gitId":"warrencxw"},"content":"import duke.Parser;","lastModifiedDate":"2022-02-21"},{"lineNumber":6,"author":{"gitId":"warrencxw"},"content":"import duke.Storage;","lastModifiedDate":"2022-02-21"},{"lineNumber":7,"author":{"gitId":"warrencxw"},"content":"import duke.task.Deadline;","lastModifiedDate":"2022-02-21"},{"lineNumber":8,"author":{"gitId":"warrencxw"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-02-21"},{"lineNumber":9,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":10,"author":{"gitId":"warrencxw"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-02-21"},{"lineNumber":11,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":12,"author":{"gitId":"warrencxw"},"content":"/**","lastModifiedDate":"2022-02-21"},{"lineNumber":13,"author":{"gitId":"warrencxw"},"content":" * Represents a Command that creates a Deadline object to be added into the specified TaskList object","lastModifiedDate":"2022-02-21"},{"lineNumber":14,"author":{"gitId":"warrencxw"},"content":" */","lastModifiedDate":"2022-02-21"},{"lineNumber":15,"author":{"gitId":"warrencxw"},"content":"public class DeadlineCommand extends CreateTaskCommand {","lastModifiedDate":"2022-02-21"},{"lineNumber":16,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":17,"author":{"gitId":"warrencxw"},"content":"     * Runs the command to create a Deadline object using the input arguments specified in commandArgs and","lastModifiedDate":"2022-02-21"},{"lineNumber":18,"author":{"gitId":"warrencxw"},"content":"     * add the object into the TaskList object. Saves all changes after insertion.","lastModifiedDate":"2022-02-21"},{"lineNumber":19,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":20,"author":{"gitId":"warrencxw"},"content":"     * @param ui      A Display object to manage printing of errors and other messages","lastModifiedDate":"2022-02-21"},{"lineNumber":21,"author":{"gitId":"warrencxw"},"content":"     * @param tasks   A TaskList object with which the command may process or modify","lastModifiedDate":"2022-02-21"},{"lineNumber":22,"author":{"gitId":"warrencxw"},"content":"     * @param storage A Storage object to manage the save file of the specified TaskList object if necessary","lastModifiedDate":"2022-02-21"},{"lineNumber":23,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":24,"author":{"gitId":"warrencxw"},"content":"    @Override","lastModifiedDate":"2022-02-21"},{"lineNumber":25,"author":{"gitId":"warrencxw"},"content":"    public void run(Display ui, TaskList tasks, Storage storage) {","lastModifiedDate":"2022-02-21"},{"lineNumber":26,"author":{"gitId":"warrencxw"},"content":"        String[] taskDetailsString;","lastModifiedDate":"2022-02-21"},{"lineNumber":27,"author":{"gitId":"warrencxw"},"content":"        LocalDate deadline;","lastModifiedDate":"2022-02-21"},{"lineNumber":28,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-02-21"},{"lineNumber":29,"author":{"gitId":"warrencxw"},"content":"            taskDetailsString \u003d getTaskDetailTokens(commandArgs, TaskList.TaskType.DEADLINE, ui);","lastModifiedDate":"2022-02-21"},{"lineNumber":30,"author":{"gitId":"warrencxw"},"content":"            deadline \u003d Parser.parseDateFromString(taskDetailsString[1]);","lastModifiedDate":"2022-02-21"},{"lineNumber":31,"author":{"gitId":"warrencxw"},"content":"        } catch (DukeException exception) {","lastModifiedDate":"2022-02-21"},{"lineNumber":32,"author":{"gitId":"warrencxw"},"content":"            ui.printlnMessage(exception.getMessage());","lastModifiedDate":"2022-02-21"},{"lineNumber":33,"author":{"gitId":"warrencxw"},"content":"            return;","lastModifiedDate":"2022-02-21"},{"lineNumber":34,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-02-21"},{"lineNumber":35,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":36,"author":{"gitId":"warrencxw"},"content":"        Deadline newDeadline \u003d new Deadline(taskDetailsString[0], deadline);","lastModifiedDate":"2022-02-21"},{"lineNumber":37,"author":{"gitId":"warrencxw"},"content":"        tasks.addTask(newDeadline);","lastModifiedDate":"2022-02-21"},{"lineNumber":38,"author":{"gitId":"warrencxw"},"content":"        ui.printlnMessage(newDeadline.getAddedMessage());","lastModifiedDate":"2022-02-21"},{"lineNumber":39,"author":{"gitId":"warrencxw"},"content":"        storage.saveChanges(tasks);","lastModifiedDate":"2022-02-21"},{"lineNumber":40,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":41,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":42,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":43,"author":{"gitId":"warrencxw"},"content":"     * Standard constructor, creates a DeadlineCommand object with specified command arguments","lastModifiedDate":"2022-02-21"},{"lineNumber":44,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":45,"author":{"gitId":"warrencxw"},"content":"     * @param commandArgs a String object representing the task name and the due date of the Deadline object","lastModifiedDate":"2022-02-21"},{"lineNumber":46,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":47,"author":{"gitId":"warrencxw"},"content":"    public DeadlineCommand(String commandArgs) {","lastModifiedDate":"2022-02-21"},{"lineNumber":48,"author":{"gitId":"warrencxw"},"content":"        super(commandArgs);","lastModifiedDate":"2022-02-21"},{"lineNumber":49,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":50,"author":{"gitId":"warrencxw"},"content":"}","lastModifiedDate":"2022-02-21"}],"authorContributionMap":{"warrencxw":50}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"warrencxw"},"content":"package duke.command;","lastModifiedDate":"2022-02-21"},{"lineNumber":2,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":3,"author":{"gitId":"warrencxw"},"content":"import duke.Display;","lastModifiedDate":"2022-02-21"},{"lineNumber":4,"author":{"gitId":"warrencxw"},"content":"import duke.DukeException;","lastModifiedDate":"2022-02-21"},{"lineNumber":5,"author":{"gitId":"warrencxw"},"content":"import duke.Parser;","lastModifiedDate":"2022-02-21"},{"lineNumber":6,"author":{"gitId":"warrencxw"},"content":"import duke.Storage;","lastModifiedDate":"2022-02-21"},{"lineNumber":7,"author":{"gitId":"warrencxw"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-02-21"},{"lineNumber":8,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":9,"author":{"gitId":"warrencxw"},"content":"/**","lastModifiedDate":"2022-02-21"},{"lineNumber":10,"author":{"gitId":"warrencxw"},"content":" * Represents a Command that deletes a Task object in the specified TaskList object indicated by the specified","lastModifiedDate":"2022-02-21"},{"lineNumber":11,"author":{"gitId":"warrencxw"},"content":" * task number of the task.","lastModifiedDate":"2022-02-21"},{"lineNumber":12,"author":{"gitId":"warrencxw"},"content":" */","lastModifiedDate":"2022-02-21"},{"lineNumber":13,"author":{"gitId":"warrencxw"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2022-02-21"},{"lineNumber":14,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":15,"author":{"gitId":"warrencxw"},"content":"     * Checks if there are arguments in the \u0027delete\u0027 command and if the arguments are valid (integer and within","lastModifiedDate":"2022-02-21"},{"lineNumber":16,"author":{"gitId":"warrencxw"},"content":"     * range of [1, tasks.size()]). If arguments are valid, deletes the task identified by the argument and prints","lastModifiedDate":"2022-02-21"},{"lineNumber":17,"author":{"gitId":"warrencxw"},"content":"     * a success message onto standard output. Prints an error message and does not modify tasks otherwise.","lastModifiedDate":"2022-02-21"},{"lineNumber":18,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":19,"author":{"gitId":"warrencxw"},"content":"     * @param taskNoString A String object containing the task number indicating the Task object to be deleted","lastModifiedDate":"2022-02-21"},{"lineNumber":20,"author":{"gitId":"warrencxw"},"content":"     * @param ui           A Display object to manage printing of errors and other messages","lastModifiedDate":"2022-02-21"},{"lineNumber":21,"author":{"gitId":"warrencxw"},"content":"     * @param tasks        A TaskList object in which the specified task is deleted","lastModifiedDate":"2022-02-21"},{"lineNumber":22,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":23,"author":{"gitId":"warrencxw"},"content":"    public void processInputAndDeleteTask(String taskNoString, Display ui, TaskList tasks) {","lastModifiedDate":"2022-02-21"},{"lineNumber":24,"author":{"gitId":"warrencxw"},"content":"        int taskNo;","lastModifiedDate":"2022-02-21"},{"lineNumber":25,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-02-21"},{"lineNumber":26,"author":{"gitId":"warrencxw"},"content":"            taskNo \u003d Parser.parseTaskNoFromString(taskNoString, ui, tasks);","lastModifiedDate":"2022-02-21"},{"lineNumber":27,"author":{"gitId":"warrencxw"},"content":"        } catch (DukeException exception) {","lastModifiedDate":"2022-02-21"},{"lineNumber":28,"author":{"gitId":"warrencxw"},"content":"            ui.printlnMessage(exception.getMessage());","lastModifiedDate":"2022-02-21"},{"lineNumber":29,"author":{"gitId":"warrencxw"},"content":"            return;","lastModifiedDate":"2022-02-21"},{"lineNumber":30,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-02-21"},{"lineNumber":31,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":32,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-02-21"},{"lineNumber":33,"author":{"gitId":"warrencxw"},"content":"            String successMessage \u003d","lastModifiedDate":"2022-02-21"},{"lineNumber":34,"author":{"gitId":"warrencxw"},"content":"                    \"I have removed the following task for you:\\n\"","lastModifiedDate":"2022-02-21"},{"lineNumber":35,"author":{"gitId":"warrencxw"},"content":"                            + \"\u003e \" + (taskNo + 1) + \". \" + tasks.getTask(taskNo).toString() + \"\\n\"","lastModifiedDate":"2022-02-21"},{"lineNumber":36,"author":{"gitId":"warrencxw"},"content":"                            + \"You now have \" + (tasks.getSize() - 1) + \" tasks in your list.\";","lastModifiedDate":"2022-02-21"},{"lineNumber":37,"author":{"gitId":"warrencxw"},"content":"            tasks.removeTask(taskNo);","lastModifiedDate":"2022-02-21"},{"lineNumber":38,"author":{"gitId":"warrencxw"},"content":"            ui.printlnMessage(successMessage);","lastModifiedDate":"2022-02-21"},{"lineNumber":39,"author":{"gitId":"warrencxw"},"content":"        } catch (IndexOutOfBoundsException exception) {","lastModifiedDate":"2022-02-21"},{"lineNumber":40,"author":{"gitId":"warrencxw"},"content":"            // Should never occur, Parser::parseTaskNoFromString will check for bounds","lastModifiedDate":"2022-02-21"},{"lineNumber":41,"author":{"gitId":"warrencxw"},"content":"            exception.printStackTrace();","lastModifiedDate":"2022-02-21"},{"lineNumber":42,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-02-21"},{"lineNumber":43,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":44,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":45,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":46,"author":{"gitId":"warrencxw"},"content":"     * Runs the command to delete a Task object in the specified TaskList object, specified by the","lastModifiedDate":"2022-02-21"},{"lineNumber":47,"author":{"gitId":"warrencxw"},"content":"     * task number indicated in commandArgs. Saves all changes after deletion.","lastModifiedDate":"2022-02-21"},{"lineNumber":48,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":49,"author":{"gitId":"warrencxw"},"content":"     * @param ui      A Display object to manage printing of errors and other messages","lastModifiedDate":"2022-02-21"},{"lineNumber":50,"author":{"gitId":"warrencxw"},"content":"     * @param tasks   A TaskList object with which the command may process or modify","lastModifiedDate":"2022-02-21"},{"lineNumber":51,"author":{"gitId":"warrencxw"},"content":"     * @param storage A Storage object to manage the save file of the specified TaskList object if necessary","lastModifiedDate":"2022-02-21"},{"lineNumber":52,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":53,"author":{"gitId":"warrencxw"},"content":"    @Override","lastModifiedDate":"2022-02-21"},{"lineNumber":54,"author":{"gitId":"warrencxw"},"content":"    public void run(Display ui, TaskList tasks, Storage storage) {","lastModifiedDate":"2022-02-21"},{"lineNumber":55,"author":{"gitId":"warrencxw"},"content":"        processInputAndDeleteTask(commandArgs, ui, tasks);","lastModifiedDate":"2022-02-21"},{"lineNumber":56,"author":{"gitId":"warrencxw"},"content":"        storage.saveChanges(tasks);","lastModifiedDate":"2022-02-21"},{"lineNumber":57,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":58,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":59,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":60,"author":{"gitId":"warrencxw"},"content":"     * Standard constructor, creates a DeleteCommand object with specified command arguments","lastModifiedDate":"2022-02-21"},{"lineNumber":61,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":62,"author":{"gitId":"warrencxw"},"content":"     * @param commandArgs a String object representing the task number that identifies the Task to be deleted","lastModifiedDate":"2022-02-21"},{"lineNumber":63,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":64,"author":{"gitId":"warrencxw"},"content":"    public DeleteCommand(String commandArgs) {","lastModifiedDate":"2022-02-21"},{"lineNumber":65,"author":{"gitId":"warrencxw"},"content":"        super(commandArgs);","lastModifiedDate":"2022-02-21"},{"lineNumber":66,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":67,"author":{"gitId":"warrencxw"},"content":"}","lastModifiedDate":"2022-02-21"}],"authorContributionMap":{"warrencxw":67}},{"path":"src/main/java/duke/command/EmptyCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"warrencxw"},"content":"package duke.command;","lastModifiedDate":"2022-02-21"},{"lineNumber":2,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":3,"author":{"gitId":"warrencxw"},"content":"import duke.Display;","lastModifiedDate":"2022-02-21"},{"lineNumber":4,"author":{"gitId":"warrencxw"},"content":"import duke.Storage;","lastModifiedDate":"2022-02-21"},{"lineNumber":5,"author":{"gitId":"warrencxw"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-02-21"},{"lineNumber":6,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":7,"author":{"gitId":"warrencxw"},"content":"/**","lastModifiedDate":"2022-02-21"},{"lineNumber":8,"author":{"gitId":"warrencxw"},"content":" * Represents a Command where no input has been provided whatsoever.","lastModifiedDate":"2022-02-21"},{"lineNumber":9,"author":{"gitId":"warrencxw"},"content":" */","lastModifiedDate":"2022-02-21"},{"lineNumber":10,"author":{"gitId":"warrencxw"},"content":"public class EmptyCommand extends Command {","lastModifiedDate":"2022-02-21"},{"lineNumber":11,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":12,"author":{"gitId":"warrencxw"},"content":"     * Runs the Command to print an error to indicate that the input was left empty.","lastModifiedDate":"2022-02-21"},{"lineNumber":13,"author":{"gitId":"warrencxw"},"content":"     * ","lastModifiedDate":"2022-02-21"},{"lineNumber":14,"author":{"gitId":"warrencxw"},"content":"     * @param ui      A Display object to manage printing of errors and other messages","lastModifiedDate":"2022-02-21"},{"lineNumber":15,"author":{"gitId":"warrencxw"},"content":"     * @param tasks   A TaskList object with which the command may process or modify","lastModifiedDate":"2022-02-21"},{"lineNumber":16,"author":{"gitId":"warrencxw"},"content":"     * @param storage A Storage object to manage the save file of the specified TaskList object if necessary","lastModifiedDate":"2022-02-21"},{"lineNumber":17,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":18,"author":{"gitId":"warrencxw"},"content":"    @Override","lastModifiedDate":"2022-02-21"},{"lineNumber":19,"author":{"gitId":"warrencxw"},"content":"    public void run(Display ui, TaskList tasks, Storage storage) {","lastModifiedDate":"2022-02-21"},{"lineNumber":20,"author":{"gitId":"warrencxw"},"content":"        ui.printError(Display.ErrorType.EMPTY_INPUT);","lastModifiedDate":"2022-02-21"},{"lineNumber":21,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":22,"author":{"gitId":"warrencxw"},"content":"}","lastModifiedDate":"2022-02-21"}],"authorContributionMap":{"warrencxw":22}},{"path":"src/main/java/duke/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"warrencxw"},"content":"package duke.command;","lastModifiedDate":"2022-02-21"},{"lineNumber":2,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":3,"author":{"gitId":"warrencxw"},"content":"import duke.Display;","lastModifiedDate":"2022-02-21"},{"lineNumber":4,"author":{"gitId":"warrencxw"},"content":"import duke.DukeException;","lastModifiedDate":"2022-02-21"},{"lineNumber":5,"author":{"gitId":"warrencxw"},"content":"import duke.Parser;","lastModifiedDate":"2022-02-21"},{"lineNumber":6,"author":{"gitId":"warrencxw"},"content":"import duke.Storage;","lastModifiedDate":"2022-02-21"},{"lineNumber":7,"author":{"gitId":"warrencxw"},"content":"import duke.task.Event;","lastModifiedDate":"2022-02-21"},{"lineNumber":8,"author":{"gitId":"warrencxw"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-02-21"},{"lineNumber":9,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":10,"author":{"gitId":"warrencxw"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-02-21"},{"lineNumber":11,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":12,"author":{"gitId":"warrencxw"},"content":"/**","lastModifiedDate":"2022-02-21"},{"lineNumber":13,"author":{"gitId":"warrencxw"},"content":" * Represents a Command that creates a Event object to be added into the specified TaskList object","lastModifiedDate":"2022-02-21"},{"lineNumber":14,"author":{"gitId":"warrencxw"},"content":" */","lastModifiedDate":"2022-02-21"},{"lineNumber":15,"author":{"gitId":"warrencxw"},"content":"public class EventCommand extends CreateTaskCommand {","lastModifiedDate":"2022-02-21"},{"lineNumber":16,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":17,"author":{"gitId":"warrencxw"},"content":"     * Runs the command to create a Event object using the input arguments specified in commandArgs and","lastModifiedDate":"2022-02-21"},{"lineNumber":18,"author":{"gitId":"warrencxw"},"content":"     * add the object into the TaskList object. Saves all changes after insertion.","lastModifiedDate":"2022-02-21"},{"lineNumber":19,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":20,"author":{"gitId":"warrencxw"},"content":"     * @param ui      A Display object to manage printing of errors and other messages","lastModifiedDate":"2022-02-21"},{"lineNumber":21,"author":{"gitId":"warrencxw"},"content":"     * @param tasks   A TaskList object with which the command may process or modify","lastModifiedDate":"2022-02-21"},{"lineNumber":22,"author":{"gitId":"warrencxw"},"content":"     * @param storage A Storage object to manage the save file of the specified TaskList object if necessary","lastModifiedDate":"2022-02-21"},{"lineNumber":23,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":24,"author":{"gitId":"warrencxw"},"content":"    @Override","lastModifiedDate":"2022-02-21"},{"lineNumber":25,"author":{"gitId":"warrencxw"},"content":"    public void run(Display ui, TaskList tasks, Storage storage) {","lastModifiedDate":"2022-02-21"},{"lineNumber":26,"author":{"gitId":"warrencxw"},"content":"        String[] taskDetailsString;","lastModifiedDate":"2022-02-21"},{"lineNumber":27,"author":{"gitId":"warrencxw"},"content":"        LocalDate eventTime;","lastModifiedDate":"2022-02-21"},{"lineNumber":28,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-02-21"},{"lineNumber":29,"author":{"gitId":"warrencxw"},"content":"            taskDetailsString \u003d getTaskDetailTokens(commandArgs, TaskList.TaskType.EVENT, ui);","lastModifiedDate":"2022-02-21"},{"lineNumber":30,"author":{"gitId":"warrencxw"},"content":"            eventTime \u003d Parser.parseDateFromString(taskDetailsString[1]);","lastModifiedDate":"2022-02-21"},{"lineNumber":31,"author":{"gitId":"warrencxw"},"content":"        } catch (DukeException exception) {","lastModifiedDate":"2022-02-21"},{"lineNumber":32,"author":{"gitId":"warrencxw"},"content":"            ui.printlnMessage(exception.getMessage());","lastModifiedDate":"2022-02-21"},{"lineNumber":33,"author":{"gitId":"warrencxw"},"content":"            return;","lastModifiedDate":"2022-02-21"},{"lineNumber":34,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-02-21"},{"lineNumber":35,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":36,"author":{"gitId":"warrencxw"},"content":"        Event newEvent \u003d new Event(taskDetailsString[0], eventTime);","lastModifiedDate":"2022-02-21"},{"lineNumber":37,"author":{"gitId":"warrencxw"},"content":"        tasks.addTask(newEvent);","lastModifiedDate":"2022-02-21"},{"lineNumber":38,"author":{"gitId":"warrencxw"},"content":"        ui.printlnMessage(newEvent.getAddedMessage());","lastModifiedDate":"2022-02-21"},{"lineNumber":39,"author":{"gitId":"warrencxw"},"content":"        storage.saveChanges(tasks);","lastModifiedDate":"2022-02-21"},{"lineNumber":40,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":41,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":42,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":43,"author":{"gitId":"warrencxw"},"content":"     * Standard constructor, creates a EventCommand object with specified command arguments","lastModifiedDate":"2022-02-21"},{"lineNumber":44,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":45,"author":{"gitId":"warrencxw"},"content":"     * @param commandArgs a String object representing the task name and the event date of the Event object","lastModifiedDate":"2022-02-21"},{"lineNumber":46,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":47,"author":{"gitId":"warrencxw"},"content":"    public EventCommand(String commandArgs) {","lastModifiedDate":"2022-02-21"},{"lineNumber":48,"author":{"gitId":"warrencxw"},"content":"        super(commandArgs);","lastModifiedDate":"2022-02-21"},{"lineNumber":49,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":50,"author":{"gitId":"warrencxw"},"content":"}","lastModifiedDate":"2022-02-21"}],"authorContributionMap":{"warrencxw":50}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"warrencxw"},"content":"package duke.command;","lastModifiedDate":"2022-02-21"},{"lineNumber":2,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":3,"author":{"gitId":"warrencxw"},"content":"import duke.Display;","lastModifiedDate":"2022-02-21"},{"lineNumber":4,"author":{"gitId":"warrencxw"},"content":"import duke.Storage;","lastModifiedDate":"2022-02-21"},{"lineNumber":5,"author":{"gitId":"warrencxw"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-02-21"},{"lineNumber":6,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":7,"author":{"gitId":"warrencxw"},"content":"/**","lastModifiedDate":"2022-02-21"},{"lineNumber":8,"author":{"gitId":"warrencxw"},"content":" * Represents a Command where the user has decided to quit the application","lastModifiedDate":"2022-02-21"},{"lineNumber":9,"author":{"gitId":"warrencxw"},"content":" */","lastModifiedDate":"2022-02-21"},{"lineNumber":10,"author":{"gitId":"warrencxw"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2022-02-21"},{"lineNumber":11,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":12,"author":{"gitId":"warrencxw"},"content":"     * Runs the command and prints a farewell message to the user.","lastModifiedDate":"2022-02-21"},{"lineNumber":13,"author":{"gitId":"warrencxw"},"content":"     * ","lastModifiedDate":"2022-02-21"},{"lineNumber":14,"author":{"gitId":"warrencxw"},"content":"     * @param ui      A Display object to manage printing of errors and other messages","lastModifiedDate":"2022-02-21"},{"lineNumber":15,"author":{"gitId":"warrencxw"},"content":"     * @param tasks   A TaskList object with which the command may process or modify","lastModifiedDate":"2022-02-21"},{"lineNumber":16,"author":{"gitId":"warrencxw"},"content":"     * @param storage A Storage object to manage the save file of the specified TaskList object if necessary","lastModifiedDate":"2022-02-21"},{"lineNumber":17,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":18,"author":{"gitId":"warrencxw"},"content":"    @Override","lastModifiedDate":"2022-02-21"},{"lineNumber":19,"author":{"gitId":"warrencxw"},"content":"    public void run(Display ui, TaskList tasks, Storage storage) {","lastModifiedDate":"2022-02-21"},{"lineNumber":20,"author":{"gitId":"warrencxw"},"content":"        ui.printFarewellMessage();","lastModifiedDate":"2022-02-21"},{"lineNumber":21,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":22,"author":{"gitId":"warrencxw"},"content":"}","lastModifiedDate":"2022-02-21"}],"authorContributionMap":{"warrencxw":22}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"warrencxw"},"content":"package duke.command;","lastModifiedDate":"2022-02-21"},{"lineNumber":2,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":3,"author":{"gitId":"warrencxw"},"content":"import duke.Display;","lastModifiedDate":"2022-02-21"},{"lineNumber":4,"author":{"gitId":"warrencxw"},"content":"import duke.Storage;","lastModifiedDate":"2022-02-21"},{"lineNumber":5,"author":{"gitId":"warrencxw"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-02-21"},{"lineNumber":6,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":7,"author":{"gitId":"warrencxw"},"content":"/**","lastModifiedDate":"2022-02-21"},{"lineNumber":8,"author":{"gitId":"warrencxw"},"content":" * Represents a Command that searches through all Task objects in the specified TaskList object for","lastModifiedDate":"2022-02-21"},{"lineNumber":9,"author":{"gitId":"warrencxw"},"content":" * Task objects where their taskName contains the specified substring identified in commandArgs","lastModifiedDate":"2022-02-21"},{"lineNumber":10,"author":{"gitId":"warrencxw"},"content":" */","lastModifiedDate":"2022-02-21"},{"lineNumber":11,"author":{"gitId":"warrencxw"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2022-02-21"},{"lineNumber":12,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":13,"author":{"gitId":"warrencxw"},"content":"     * Runs the command to print a list of matching tasks in the TaskList object where each of the task\u0027s name","lastModifiedDate":"2022-02-21"},{"lineNumber":14,"author":{"gitId":"warrencxw"},"content":"     * includes the specified substring as indicated in commandArgs.","lastModifiedDate":"2022-02-21"},{"lineNumber":15,"author":{"gitId":"warrencxw"},"content":"     * ","lastModifiedDate":"2022-02-21"},{"lineNumber":16,"author":{"gitId":"warrencxw"},"content":"     * @param ui      A Display object to manage printing of errors and other messages","lastModifiedDate":"2022-02-21"},{"lineNumber":17,"author":{"gitId":"warrencxw"},"content":"     * @param tasks   A TaskList object with which the command may process or modify","lastModifiedDate":"2022-02-21"},{"lineNumber":18,"author":{"gitId":"warrencxw"},"content":"     * @param storage A Storage object to manage the save file of the specified TaskList object if necessary","lastModifiedDate":"2022-02-21"},{"lineNumber":19,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":20,"author":{"gitId":"warrencxw"},"content":"    @Override","lastModifiedDate":"2022-02-21"},{"lineNumber":21,"author":{"gitId":"warrencxw"},"content":"    public void run(Display ui, TaskList tasks, Storage storage) {","lastModifiedDate":"2022-02-21"},{"lineNumber":22,"author":{"gitId":"warrencxw"},"content":"        if (commandArgs.trim().isEmpty()) {","lastModifiedDate":"2022-02-21"},{"lineNumber":23,"author":{"gitId":"warrencxw"},"content":"            ui.printError(Display.ErrorType.MISSING_SUBSTRING);","lastModifiedDate":"2022-02-21"},{"lineNumber":24,"author":{"gitId":"warrencxw"},"content":"            return;","lastModifiedDate":"2022-02-21"},{"lineNumber":25,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-02-21"},{"lineNumber":26,"author":{"gitId":"warrencxw"},"content":"        String matchList \u003d tasks.findTasksByString(commandArgs);","lastModifiedDate":"2022-02-21"},{"lineNumber":27,"author":{"gitId":"warrencxw"},"content":"        ui.printlnMessage(matchList);","lastModifiedDate":"2022-02-21"},{"lineNumber":28,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":29,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":30,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":31,"author":{"gitId":"warrencxw"},"content":"     * Standard constructor, creates a FindCommand object with specified command arguments","lastModifiedDate":"2022-02-21"},{"lineNumber":32,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":33,"author":{"gitId":"warrencxw"},"content":"     * @param commandArgs a String object representing the substring to search for within the TaskList object","lastModifiedDate":"2022-02-21"},{"lineNumber":34,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":35,"author":{"gitId":"warrencxw"},"content":"    public FindCommand(String commandArgs) {","lastModifiedDate":"2022-02-21"},{"lineNumber":36,"author":{"gitId":"warrencxw"},"content":"        super(commandArgs);","lastModifiedDate":"2022-02-21"},{"lineNumber":37,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":38,"author":{"gitId":"warrencxw"},"content":"}","lastModifiedDate":"2022-02-21"}],"authorContributionMap":{"warrencxw":38}},{"path":"src/main/java/duke/command/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"warrencxw"},"content":"package duke.command;","lastModifiedDate":"2022-02-21"},{"lineNumber":2,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":3,"author":{"gitId":"warrencxw"},"content":"import duke.Display;","lastModifiedDate":"2022-02-21"},{"lineNumber":4,"author":{"gitId":"warrencxw"},"content":"import duke.Storage;","lastModifiedDate":"2022-02-21"},{"lineNumber":5,"author":{"gitId":"warrencxw"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-02-21"},{"lineNumber":6,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":7,"author":{"gitId":"warrencxw"},"content":"/**","lastModifiedDate":"2022-02-21"},{"lineNumber":8,"author":{"gitId":"warrencxw"},"content":" * Represents a Command where the user wishes to see a full list of available commands","lastModifiedDate":"2022-02-21"},{"lineNumber":9,"author":{"gitId":"warrencxw"},"content":" */","lastModifiedDate":"2022-02-21"},{"lineNumber":10,"author":{"gitId":"warrencxw"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2022-02-21"},{"lineNumber":11,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":12,"author":{"gitId":"warrencxw"},"content":"     * Runs the command and prints a full list of available commands for the user","lastModifiedDate":"2022-02-21"},{"lineNumber":13,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":14,"author":{"gitId":"warrencxw"},"content":"     * @param ui      A Display object to manage printing of errors and other messages","lastModifiedDate":"2022-02-21"},{"lineNumber":15,"author":{"gitId":"warrencxw"},"content":"     * @param tasks   A TaskList object with which the command may process or modify","lastModifiedDate":"2022-02-21"},{"lineNumber":16,"author":{"gitId":"warrencxw"},"content":"     * @param storage A Storage object to manage the save file of the specified TaskList object if necessary","lastModifiedDate":"2022-02-21"},{"lineNumber":17,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":18,"author":{"gitId":"warrencxw"},"content":"    @Override","lastModifiedDate":"2022-02-21"},{"lineNumber":19,"author":{"gitId":"warrencxw"},"content":"    public void run(Display ui, TaskList tasks, Storage storage) {","lastModifiedDate":"2022-02-21"},{"lineNumber":20,"author":{"gitId":"warrencxw"},"content":"        ui.printHelpMessage();","lastModifiedDate":"2022-02-21"},{"lineNumber":21,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":22,"author":{"gitId":"warrencxw"},"content":"}","lastModifiedDate":"2022-02-21"}],"authorContributionMap":{"warrencxw":22}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"warrencxw"},"content":"package duke.command;","lastModifiedDate":"2022-02-21"},{"lineNumber":2,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":3,"author":{"gitId":"warrencxw"},"content":"import duke.Display;","lastModifiedDate":"2022-02-21"},{"lineNumber":4,"author":{"gitId":"warrencxw"},"content":"import duke.Storage;","lastModifiedDate":"2022-02-21"},{"lineNumber":5,"author":{"gitId":"warrencxw"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-02-21"},{"lineNumber":6,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":7,"author":{"gitId":"warrencxw"},"content":"/**","lastModifiedDate":"2022-02-21"},{"lineNumber":8,"author":{"gitId":"warrencxw"},"content":" * Represents a Command that shows the entire list of Task objects in the specified TaskList object to the user","lastModifiedDate":"2022-02-21"},{"lineNumber":9,"author":{"gitId":"warrencxw"},"content":" */","lastModifiedDate":"2022-02-21"},{"lineNumber":10,"author":{"gitId":"warrencxw"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2022-02-21"},{"lineNumber":11,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":12,"author":{"gitId":"warrencxw"},"content":"     * Runs the command to print the entire TaskList for the user.","lastModifiedDate":"2022-02-21"},{"lineNumber":13,"author":{"gitId":"warrencxw"},"content":"     * Prints an error message instead, if the TaskList object is empty.","lastModifiedDate":"2022-02-21"},{"lineNumber":14,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":15,"author":{"gitId":"warrencxw"},"content":"     * @param ui      A Display object to manage printing of errors and other messages","lastModifiedDate":"2022-02-21"},{"lineNumber":16,"author":{"gitId":"warrencxw"},"content":"     * @param tasks   A TaskList object with which the command may process or modify","lastModifiedDate":"2022-02-21"},{"lineNumber":17,"author":{"gitId":"warrencxw"},"content":"     * @param storage A Storage object to manage the save file of the specified TaskList object if necessary","lastModifiedDate":"2022-02-21"},{"lineNumber":18,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":19,"author":{"gitId":"warrencxw"},"content":"    @Override","lastModifiedDate":"2022-02-21"},{"lineNumber":20,"author":{"gitId":"warrencxw"},"content":"    public void run(Display ui, TaskList tasks, Storage storage) {","lastModifiedDate":"2022-02-21"},{"lineNumber":21,"author":{"gitId":"warrencxw"},"content":"        if (tasks.getSize() \u003d\u003d 0) {","lastModifiedDate":"2022-02-21"},{"lineNumber":22,"author":{"gitId":"warrencxw"},"content":"            ui.printError(Display.ErrorType.EMPTY_TASK_LIST);","lastModifiedDate":"2022-02-21"},{"lineNumber":23,"author":{"gitId":"warrencxw"},"content":"            return;","lastModifiedDate":"2022-02-21"},{"lineNumber":24,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-02-21"},{"lineNumber":25,"author":{"gitId":"warrencxw"},"content":"        ui.printlnMessage(tasks);","lastModifiedDate":"2022-02-21"},{"lineNumber":26,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":27,"author":{"gitId":"warrencxw"},"content":"}","lastModifiedDate":"2022-02-21"}],"authorContributionMap":{"warrencxw":27}},{"path":"src/main/java/duke/command/MarkTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"warrencxw"},"content":"package duke.command;","lastModifiedDate":"2022-02-21"},{"lineNumber":2,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":3,"author":{"gitId":"warrencxw"},"content":"import duke.Display;","lastModifiedDate":"2022-02-21"},{"lineNumber":4,"author":{"gitId":"warrencxw"},"content":"import duke.DukeException;","lastModifiedDate":"2022-02-21"},{"lineNumber":5,"author":{"gitId":"warrencxw"},"content":"import duke.Parser;","lastModifiedDate":"2022-02-21"},{"lineNumber":6,"author":{"gitId":"warrencxw"},"content":"import duke.Storage;","lastModifiedDate":"2022-02-21"},{"lineNumber":7,"author":{"gitId":"warrencxw"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-02-21"},{"lineNumber":8,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":9,"author":{"gitId":"warrencxw"},"content":"/**","lastModifiedDate":"2022-02-21"},{"lineNumber":10,"author":{"gitId":"warrencxw"},"content":" * Represents a Command that marks a Task object in the specified TaskList object indicated by the specified","lastModifiedDate":"2022-02-21"},{"lineNumber":11,"author":{"gitId":"warrencxw"},"content":" * task number of the task as either completed or not, as specified.","lastModifiedDate":"2022-02-21"},{"lineNumber":12,"author":{"gitId":"warrencxw"},"content":" */","lastModifiedDate":"2022-02-21"},{"lineNumber":13,"author":{"gitId":"warrencxw"},"content":"public class MarkTaskCommand extends Command {","lastModifiedDate":"2022-02-21"},{"lineNumber":14,"author":{"gitId":"warrencxw"},"content":"    // Member Attributes","lastModifiedDate":"2022-02-21"},{"lineNumber":15,"author":{"gitId":"warrencxw"},"content":"    boolean done;","lastModifiedDate":"2022-02-21"},{"lineNumber":16,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":17,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":18,"author":{"gitId":"warrencxw"},"content":"     * Modifies the completion of the task identified by the input task number and print out a confirmation message.","lastModifiedDate":"2022-02-21"},{"lineNumber":19,"author":{"gitId":"warrencxw"},"content":"     * Will not modify tasks if taskNoString is not an integer; an error message is printed instead","lastModifiedDate":"2022-02-21"},{"lineNumber":20,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":21,"author":{"gitId":"warrencxw"},"content":"     * @param shouldMarkTask Determines whether to set task to done or not done","lastModifiedDate":"2022-02-21"},{"lineNumber":22,"author":{"gitId":"warrencxw"},"content":"     * @param taskNoString   The input task number string that identifies the task in \"tasks\"","lastModifiedDate":"2022-02-21"},{"lineNumber":23,"author":{"gitId":"warrencxw"},"content":"     * @param ui             A Display object to manage printing of errors and other messages","lastModifiedDate":"2022-02-21"},{"lineNumber":24,"author":{"gitId":"warrencxw"},"content":"     * @param tasks          A TaskList object in which the specified task is deleted","lastModifiedDate":"2022-02-21"},{"lineNumber":25,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":26,"author":{"gitId":"warrencxw"},"content":"    private void markTask(boolean shouldMarkTask, String taskNoString, Display ui, TaskList tasks) {","lastModifiedDate":"2022-02-21"},{"lineNumber":27,"author":{"gitId":"warrencxw"},"content":"        // Check if task number is numerical","lastModifiedDate":"2022-02-21"},{"lineNumber":28,"author":{"gitId":"warrencxw"},"content":"        int taskNo;","lastModifiedDate":"2022-02-21"},{"lineNumber":29,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-02-21"},{"lineNumber":30,"author":{"gitId":"warrencxw"},"content":"            taskNo \u003d Parser.parseTaskNoFromString(taskNoString, ui, tasks);","lastModifiedDate":"2022-02-21"},{"lineNumber":31,"author":{"gitId":"warrencxw"},"content":"        } catch (DukeException exception) {","lastModifiedDate":"2022-02-21"},{"lineNumber":32,"author":{"gitId":"warrencxw"},"content":"            ui.printlnMessage(exception.getMessage());","lastModifiedDate":"2022-02-21"},{"lineNumber":33,"author":{"gitId":"warrencxw"},"content":"            return;","lastModifiedDate":"2022-02-21"},{"lineNumber":34,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-02-21"},{"lineNumber":35,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":36,"author":{"gitId":"warrencxw"},"content":"        // Check if already marked / unmarked","lastModifiedDate":"2022-02-21"},{"lineNumber":37,"author":{"gitId":"warrencxw"},"content":"        try {","lastModifiedDate":"2022-02-21"},{"lineNumber":38,"author":{"gitId":"warrencxw"},"content":"            if (tasks.getTask(taskNo).isDone() \u003d\u003d shouldMarkTask) {","lastModifiedDate":"2022-02-21"},{"lineNumber":39,"author":{"gitId":"warrencxw"},"content":"                ui.printlnMessage(\"Your task has already been marked as \" + (shouldMarkTask ? \"done!\" : \"not done!\"));","lastModifiedDate":"2022-02-21"},{"lineNumber":40,"author":{"gitId":"warrencxw"},"content":"            } else {","lastModifiedDate":"2022-02-21"},{"lineNumber":41,"author":{"gitId":"warrencxw"},"content":"                tasks.getTask(taskNo).setDone(shouldMarkTask);","lastModifiedDate":"2022-02-21"},{"lineNumber":42,"author":{"gitId":"warrencxw"},"content":"                ui.printlnMessage(\"Your task is now marked as \" + (shouldMarkTask ? \"done!\" : \"not done!\"));","lastModifiedDate":"2022-02-21"},{"lineNumber":43,"author":{"gitId":"warrencxw"},"content":"            }","lastModifiedDate":"2022-02-21"},{"lineNumber":44,"author":{"gitId":"warrencxw"},"content":"            ui.printlnMessage(\"\u003e \" + (taskNo + 1) + \". \" + tasks.getTask(taskNo).toString());","lastModifiedDate":"2022-02-21"},{"lineNumber":45,"author":{"gitId":"warrencxw"},"content":"        } catch (IndexOutOfBoundsException exception) {","lastModifiedDate":"2022-02-21"},{"lineNumber":46,"author":{"gitId":"warrencxw"},"content":"            // Should never occur, Parser::parseTaskNoFromString will check for bounds.","lastModifiedDate":"2022-02-21"},{"lineNumber":47,"author":{"gitId":"warrencxw"},"content":"            exception.printStackTrace();","lastModifiedDate":"2022-02-21"},{"lineNumber":48,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-02-21"},{"lineNumber":49,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":50,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":51,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":52,"author":{"gitId":"warrencxw"},"content":"     * Runs the command to mark the Task object in the TaskList object as indicated by the task number in the","lastModifiedDate":"2022-02-21"},{"lineNumber":53,"author":{"gitId":"warrencxw"},"content":"     * commandArgs as done or not yet done.","lastModifiedDate":"2022-02-21"},{"lineNumber":54,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":55,"author":{"gitId":"warrencxw"},"content":"     * @param ui      A Display object to manage printing of errors and other messages","lastModifiedDate":"2022-02-21"},{"lineNumber":56,"author":{"gitId":"warrencxw"},"content":"     * @param tasks   A TaskList object with which the command may process or modify","lastModifiedDate":"2022-02-21"},{"lineNumber":57,"author":{"gitId":"warrencxw"},"content":"     * @param storage A Storage object to manage the save file of the specified TaskList object if necessary","lastModifiedDate":"2022-02-21"},{"lineNumber":58,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":59,"author":{"gitId":"warrencxw"},"content":"    @Override","lastModifiedDate":"2022-02-21"},{"lineNumber":60,"author":{"gitId":"warrencxw"},"content":"    public void run(Display ui, TaskList tasks, Storage storage) {","lastModifiedDate":"2022-02-21"},{"lineNumber":61,"author":{"gitId":"warrencxw"},"content":"        markTask(done, commandArgs, ui, tasks);","lastModifiedDate":"2022-02-21"},{"lineNumber":62,"author":{"gitId":"warrencxw"},"content":"        storage.saveChanges(tasks);","lastModifiedDate":"2022-02-21"},{"lineNumber":63,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":64,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":65,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":66,"author":{"gitId":"warrencxw"},"content":"     * Standard constructor, creates a EventCommand object with specified command arguments","lastModifiedDate":"2022-02-21"},{"lineNumber":67,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":68,"author":{"gitId":"warrencxw"},"content":"     * @param commandArgs A String object representing the task name and the event date of the Event object","lastModifiedDate":"2022-02-21"},{"lineNumber":69,"author":{"gitId":"warrencxw"},"content":"     * @param done        indicates whether the Task should be marked as complete or not","lastModifiedDate":"2022-02-21"},{"lineNumber":70,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":71,"author":{"gitId":"warrencxw"},"content":"    public MarkTaskCommand(String commandArgs, boolean done) {","lastModifiedDate":"2022-02-21"},{"lineNumber":72,"author":{"gitId":"warrencxw"},"content":"        super(commandArgs);","lastModifiedDate":"2022-02-21"},{"lineNumber":73,"author":{"gitId":"warrencxw"},"content":"        this.done \u003d done;","lastModifiedDate":"2022-02-21"},{"lineNumber":74,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":75,"author":{"gitId":"warrencxw"},"content":"}","lastModifiedDate":"2022-02-21"}],"authorContributionMap":{"warrencxw":75}},{"path":"src/main/java/duke/command/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"warrencxw"},"content":"package duke.command;","lastModifiedDate":"2022-02-21"},{"lineNumber":2,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":3,"author":{"gitId":"warrencxw"},"content":"import duke.Display;","lastModifiedDate":"2022-02-21"},{"lineNumber":4,"author":{"gitId":"warrencxw"},"content":"import duke.Storage;","lastModifiedDate":"2022-02-21"},{"lineNumber":5,"author":{"gitId":"warrencxw"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-02-21"},{"lineNumber":6,"author":{"gitId":"warrencxw"},"content":"import duke.task.Todo;","lastModifiedDate":"2022-02-21"},{"lineNumber":7,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":8,"author":{"gitId":"warrencxw"},"content":"/**","lastModifiedDate":"2022-02-21"},{"lineNumber":9,"author":{"gitId":"warrencxw"},"content":" * Represents a Command that creates a Todo object to be added into the specified TaskList object","lastModifiedDate":"2022-02-21"},{"lineNumber":10,"author":{"gitId":"warrencxw"},"content":" */","lastModifiedDate":"2022-02-21"},{"lineNumber":11,"author":{"gitId":"warrencxw"},"content":"public class TodoCommand extends CreateTaskCommand {","lastModifiedDate":"2022-02-21"},{"lineNumber":12,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":13,"author":{"gitId":"warrencxw"},"content":"     * Runs the command to create a Todo object using the input arguments specified in commandArgs and","lastModifiedDate":"2022-02-21"},{"lineNumber":14,"author":{"gitId":"warrencxw"},"content":"     * add the object into the TaskList object. Saves all changes after insertion.","lastModifiedDate":"2022-02-21"},{"lineNumber":15,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":16,"author":{"gitId":"warrencxw"},"content":"     * @param ui      A Display object to manage printing of errors and other messages","lastModifiedDate":"2022-02-21"},{"lineNumber":17,"author":{"gitId":"warrencxw"},"content":"     * @param tasks   A TaskList object with which the command may process or modify","lastModifiedDate":"2022-02-21"},{"lineNumber":18,"author":{"gitId":"warrencxw"},"content":"     * @param storage A Storage object to manage the save file of the specified TaskList object if necessary","lastModifiedDate":"2022-02-21"},{"lineNumber":19,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":20,"author":{"gitId":"warrencxw"},"content":"    @Override","lastModifiedDate":"2022-02-21"},{"lineNumber":21,"author":{"gitId":"warrencxw"},"content":"    public void run(Display ui, TaskList tasks, Storage storage) {","lastModifiedDate":"2022-02-21"},{"lineNumber":22,"author":{"gitId":"warrencxw"},"content":"        if (commandArgs.trim().isEmpty()) {","lastModifiedDate":"2022-02-21"},{"lineNumber":23,"author":{"gitId":"warrencxw"},"content":"            ui.printError(Display.ErrorType.EMPTY_TASK_NAME);","lastModifiedDate":"2022-02-21"},{"lineNumber":24,"author":{"gitId":"warrencxw"},"content":"            return;","lastModifiedDate":"2022-02-21"},{"lineNumber":25,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-02-21"},{"lineNumber":26,"author":{"gitId":"warrencxw"},"content":"        Todo newTodo \u003d new Todo(commandArgs);","lastModifiedDate":"2022-02-21"},{"lineNumber":27,"author":{"gitId":"warrencxw"},"content":"        tasks.addTask(newTodo);","lastModifiedDate":"2022-02-21"},{"lineNumber":28,"author":{"gitId":"warrencxw"},"content":"        ui.printlnMessage(newTodo.getAddedMessage());","lastModifiedDate":"2022-02-21"},{"lineNumber":29,"author":{"gitId":"warrencxw"},"content":"        storage.saveChanges(tasks);","lastModifiedDate":"2022-02-21"},{"lineNumber":30,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":31,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":32,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":33,"author":{"gitId":"warrencxw"},"content":"     * Standard constructor, creates a TodoCommand object with specified command arguments","lastModifiedDate":"2022-02-21"},{"lineNumber":34,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":35,"author":{"gitId":"warrencxw"},"content":"     * @param commandArgs a String object representing the task name of the Todo object","lastModifiedDate":"2022-02-21"},{"lineNumber":36,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":37,"author":{"gitId":"warrencxw"},"content":"    public TodoCommand(String commandArgs) {","lastModifiedDate":"2022-02-21"},{"lineNumber":38,"author":{"gitId":"warrencxw"},"content":"        super(commandArgs);","lastModifiedDate":"2022-02-21"},{"lineNumber":39,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":40,"author":{"gitId":"warrencxw"},"content":"}","lastModifiedDate":"2022-02-21"}],"authorContributionMap":{"warrencxw":40}},{"path":"src/main/java/duke/command/UnrecognisedCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"warrencxw"},"content":"package duke.command;","lastModifiedDate":"2022-02-21"},{"lineNumber":2,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":3,"author":{"gitId":"warrencxw"},"content":"import duke.Display;","lastModifiedDate":"2022-02-21"},{"lineNumber":4,"author":{"gitId":"warrencxw"},"content":"import duke.Storage;","lastModifiedDate":"2022-02-21"},{"lineNumber":5,"author":{"gitId":"warrencxw"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-02-21"},{"lineNumber":6,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":7,"author":{"gitId":"warrencxw"},"content":"/**","lastModifiedDate":"2022-02-21"},{"lineNumber":8,"author":{"gitId":"warrencxw"},"content":" * Represents a Command where the input is not recognised by the parser","lastModifiedDate":"2022-02-21"},{"lineNumber":9,"author":{"gitId":"warrencxw"},"content":" */","lastModifiedDate":"2022-02-21"},{"lineNumber":10,"author":{"gitId":"warrencxw"},"content":"public class UnrecognisedCommand extends Command {","lastModifiedDate":"2022-02-21"},{"lineNumber":11,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":12,"author":{"gitId":"warrencxw"},"content":"     * Runs the Command to print an error to indicate that the input was not recognised.","lastModifiedDate":"2022-02-21"},{"lineNumber":13,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":14,"author":{"gitId":"warrencxw"},"content":"     * @param ui      A Display object to manage printing of errors and other messages","lastModifiedDate":"2022-02-21"},{"lineNumber":15,"author":{"gitId":"warrencxw"},"content":"     * @param tasks   A TaskList object with which the command may process or modify","lastModifiedDate":"2022-02-21"},{"lineNumber":16,"author":{"gitId":"warrencxw"},"content":"     * @param storage A Storage object to manage the save file of the specified TaskList object if necessary","lastModifiedDate":"2022-02-21"},{"lineNumber":17,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":18,"author":{"gitId":"warrencxw"},"content":"    @Override","lastModifiedDate":"2022-02-21"},{"lineNumber":19,"author":{"gitId":"warrencxw"},"content":"    public void run(Display ui, TaskList tasks, Storage storage) {","lastModifiedDate":"2022-02-21"},{"lineNumber":20,"author":{"gitId":"warrencxw"},"content":"        ui.printError(Display.ErrorType.COMMAND_NOT_RECOGNISED);","lastModifiedDate":"2022-02-21"},{"lineNumber":21,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":22,"author":{"gitId":"warrencxw"},"content":"}","lastModifiedDate":"2022-02-21"}],"authorContributionMap":{"warrencxw":22}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"warrencxw"},"content":"package duke.task;","lastModifiedDate":"2022-02-06"},{"lineNumber":2,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":3,"author":{"gitId":"warrencxw"},"content":"import duke.Duke;","lastModifiedDate":"2022-02-13"},{"lineNumber":4,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-13"},{"lineNumber":5,"author":{"gitId":"warrencxw"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-02-21"},{"lineNumber":6,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":7,"author":{"gitId":"warrencxw"},"content":"/**","lastModifiedDate":"2022-02-21"},{"lineNumber":8,"author":{"gitId":"warrencxw"},"content":" * Represents a task with a deadline that may or may not have passed.","lastModifiedDate":"2022-02-21"},{"lineNumber":9,"author":{"gitId":"warrencxw"},"content":" */","lastModifiedDate":"2022-02-21"},{"lineNumber":10,"author":{"gitId":"warrencxw"},"content":"public class Deadline extends Task {","lastModifiedDate":"2022-02-02"},{"lineNumber":11,"author":{"gitId":"warrencxw"},"content":"    protected LocalDate dueDate;","lastModifiedDate":"2022-02-21"},{"lineNumber":12,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":13,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":14,"author":{"gitId":"warrencxw"},"content":"     * Default constructor, sets taskName to an empty String object and marks isDone to false.","lastModifiedDate":"2022-02-21"},{"lineNumber":15,"author":{"gitId":"warrencxw"},"content":"     * Additionally, sets dueDate to an empty String object","lastModifiedDate":"2022-02-21"},{"lineNumber":16,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":17,"author":{"gitId":"warrencxw"},"content":"    public Deadline() {","lastModifiedDate":"2022-02-02"},{"lineNumber":18,"author":{"gitId":"warrencxw"},"content":"        super();","lastModifiedDate":"2022-02-02"},{"lineNumber":19,"author":{"gitId":"warrencxw"},"content":"        this.dueDate \u003d LocalDate.now();","lastModifiedDate":"2022-02-21"},{"lineNumber":20,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":21,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":22,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":23,"author":{"gitId":"warrencxw"},"content":"     * Alternative constructor, sets taskName to a specified taskName and marks isDone to false.","lastModifiedDate":"2022-02-21"},{"lineNumber":24,"author":{"gitId":"warrencxw"},"content":"     * Additionally, specifies the dueDate of the Deadline object according to the dueDate specified.","lastModifiedDate":"2022-02-21"},{"lineNumber":25,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":26,"author":{"gitId":"warrencxw"},"content":"     * @param taskName a String object that specifies the name of the task","lastModifiedDate":"2022-02-21"},{"lineNumber":27,"author":{"gitId":"warrencxw"},"content":"     * @param dueDate  the time by which the task is due","lastModifiedDate":"2022-02-21"},{"lineNumber":28,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":29,"author":{"gitId":"warrencxw"},"content":"    public Deadline(String taskName, LocalDate dueDate) {","lastModifiedDate":"2022-02-21"},{"lineNumber":30,"author":{"gitId":"warrencxw"},"content":"        super(taskName);","lastModifiedDate":"2022-02-02"},{"lineNumber":31,"author":{"gitId":"warrencxw"},"content":"        this.dueDate \u003d dueDate;","lastModifiedDate":"2022-02-02"},{"lineNumber":32,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":33,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":34,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":35,"author":{"gitId":"warrencxw"},"content":"     * Custom constructor, sets taskName to a specified taskName and marks isDone as specified.","lastModifiedDate":"2022-02-21"},{"lineNumber":36,"author":{"gitId":"warrencxw"},"content":"     * Additionally, specifies the dueDate of the Deadline object according to the dueDate specified.","lastModifiedDate":"2022-02-21"},{"lineNumber":37,"author":{"gitId":"warrencxw"},"content":"     * Used when loading tasks.","lastModifiedDate":"2022-02-21"},{"lineNumber":38,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":39,"author":{"gitId":"warrencxw"},"content":"     * @param taskName a String object that specifies the name of the task","lastModifiedDate":"2022-02-21"},{"lineNumber":40,"author":{"gitId":"warrencxw"},"content":"     * @param isDone   the completion status of the Task","lastModifiedDate":"2022-02-21"},{"lineNumber":41,"author":{"gitId":"warrencxw"},"content":"     * @param dueDate  the time by which the task is due","lastModifiedDate":"2022-02-21"},{"lineNumber":42,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":43,"author":{"gitId":"warrencxw"},"content":"    public Deadline(String taskName, Boolean isDone, LocalDate dueDate) {","lastModifiedDate":"2022-02-21"},{"lineNumber":44,"author":{"gitId":"warrencxw"},"content":"        super(taskName, isDone);","lastModifiedDate":"2022-02-13"},{"lineNumber":45,"author":{"gitId":"warrencxw"},"content":"        this.dueDate \u003d dueDate;","lastModifiedDate":"2022-02-13"},{"lineNumber":46,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-13"},{"lineNumber":47,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-13"},{"lineNumber":48,"author":{"gitId":"warrencxw"},"content":"    @Override","lastModifiedDate":"2022-02-02"},{"lineNumber":49,"author":{"gitId":"warrencxw"},"content":"    public String toString() {","lastModifiedDate":"2022-02-02"},{"lineNumber":50,"author":{"gitId":"warrencxw"},"content":"        return \"[D]\" + super.toString() + \" (due: \" + ","lastModifiedDate":"2022-02-21"},{"lineNumber":51,"author":{"gitId":"warrencxw"},"content":"                dueDate.getDayOfMonth() + \" \" + dueDate.getMonth() + \" \" + dueDate.getYear() + \")\";","lastModifiedDate":"2022-02-21"},{"lineNumber":52,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":53,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":54,"author":{"gitId":"warrencxw"},"content":"    @Override","lastModifiedDate":"2022-02-02"},{"lineNumber":55,"author":{"gitId":"warrencxw"},"content":"    public String getAddedMessage() {","lastModifiedDate":"2022-02-21"},{"lineNumber":56,"author":{"gitId":"warrencxw"},"content":"        return \"Deadline \\\"\" + taskName + \"\\\" has been added.\\n\"","lastModifiedDate":"2022-02-21"},{"lineNumber":57,"author":{"gitId":"warrencxw"},"content":"                + \" \u003e \" + toString();","lastModifiedDate":"2022-02-21"},{"lineNumber":58,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":59,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-13"},{"lineNumber":60,"author":{"gitId":"warrencxw"},"content":"    @Override","lastModifiedDate":"2022-02-13"},{"lineNumber":61,"author":{"gitId":"warrencxw"},"content":"    public String getSavableCSVString() {","lastModifiedDate":"2022-02-13"},{"lineNumber":62,"author":{"gitId":"warrencxw"},"content":"        return \"D\" + Duke.CSV_DELIMITER","lastModifiedDate":"2022-02-13"},{"lineNumber":63,"author":{"gitId":"warrencxw"},"content":"                + (isDone ? \"Y\" : \"N\") + Duke.CSV_DELIMITER","lastModifiedDate":"2022-02-13"},{"lineNumber":64,"author":{"gitId":"warrencxw"},"content":"                + taskName + Duke.CSV_DELIMITER","lastModifiedDate":"2022-02-13"},{"lineNumber":65,"author":{"gitId":"warrencxw"},"content":"                + dueDate;","lastModifiedDate":"2022-02-13"},{"lineNumber":66,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-13"},{"lineNumber":67,"author":{"gitId":"warrencxw"},"content":"}","lastModifiedDate":"2022-02-02"}],"authorContributionMap":{"warrencxw":67}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"warrencxw"},"content":"package duke.task;","lastModifiedDate":"2022-02-06"},{"lineNumber":2,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":3,"author":{"gitId":"warrencxw"},"content":"import duke.Duke;","lastModifiedDate":"2022-02-13"},{"lineNumber":4,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-13"},{"lineNumber":5,"author":{"gitId":"warrencxw"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-02-21"},{"lineNumber":6,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":7,"author":{"gitId":"warrencxw"},"content":"/**","lastModifiedDate":"2022-02-21"},{"lineNumber":8,"author":{"gitId":"warrencxw"},"content":" * Represents an event or an activity that happened or will happen at a specific time.","lastModifiedDate":"2022-02-21"},{"lineNumber":9,"author":{"gitId":"warrencxw"},"content":" */","lastModifiedDate":"2022-02-21"},{"lineNumber":10,"author":{"gitId":"warrencxw"},"content":"public class Event extends Task {","lastModifiedDate":"2022-02-02"},{"lineNumber":11,"author":{"gitId":"warrencxw"},"content":"    protected LocalDate eventTime;","lastModifiedDate":"2022-02-21"},{"lineNumber":12,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":13,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":14,"author":{"gitId":"warrencxw"},"content":"     * Default constructor, sets taskName to an empty String object and marks isDone to false.","lastModifiedDate":"2022-02-21"},{"lineNumber":15,"author":{"gitId":"warrencxw"},"content":"     * Additionally, sets eventTime to an empty String object","lastModifiedDate":"2022-02-21"},{"lineNumber":16,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":17,"author":{"gitId":"warrencxw"},"content":"    public Event() {","lastModifiedDate":"2022-02-02"},{"lineNumber":18,"author":{"gitId":"warrencxw"},"content":"        super();","lastModifiedDate":"2022-02-02"},{"lineNumber":19,"author":{"gitId":"warrencxw"},"content":"        this.eventTime \u003d LocalDate.now();","lastModifiedDate":"2022-02-21"},{"lineNumber":20,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":21,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":22,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":23,"author":{"gitId":"warrencxw"},"content":"     * Alternative constructor, sets taskName to a specified taskName and marks isDone to false.","lastModifiedDate":"2022-02-21"},{"lineNumber":24,"author":{"gitId":"warrencxw"},"content":"     * Additionally, specifies the eventTime of the Event object according to the eventTime specified.","lastModifiedDate":"2022-02-21"},{"lineNumber":25,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":26,"author":{"gitId":"warrencxw"},"content":"     * @param taskName  a String object that specifies the name of the task","lastModifiedDate":"2022-02-21"},{"lineNumber":27,"author":{"gitId":"warrencxw"},"content":"     * @param eventTime the time at which the event occurs","lastModifiedDate":"2022-02-21"},{"lineNumber":28,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":29,"author":{"gitId":"warrencxw"},"content":"    public Event(String taskName, LocalDate eventTime) {","lastModifiedDate":"2022-02-21"},{"lineNumber":30,"author":{"gitId":"warrencxw"},"content":"        super(taskName);","lastModifiedDate":"2022-02-02"},{"lineNumber":31,"author":{"gitId":"warrencxw"},"content":"        this.eventTime \u003d eventTime;","lastModifiedDate":"2022-02-02"},{"lineNumber":32,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":33,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":34,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":35,"author":{"gitId":"warrencxw"},"content":"     * Custom constructor, sets taskName to a specified taskName and marks isDone as specified.","lastModifiedDate":"2022-02-21"},{"lineNumber":36,"author":{"gitId":"warrencxw"},"content":"     * Additionally, specifies the eventTime of the Event object according to the eventTime specified.","lastModifiedDate":"2022-02-21"},{"lineNumber":37,"author":{"gitId":"warrencxw"},"content":"     * Used when loading tasks.","lastModifiedDate":"2022-02-21"},{"lineNumber":38,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":39,"author":{"gitId":"warrencxw"},"content":"     * @param taskName  a String object that specifies the name of the task","lastModifiedDate":"2022-02-21"},{"lineNumber":40,"author":{"gitId":"warrencxw"},"content":"     * @param isDone    the completion status of the Task","lastModifiedDate":"2022-02-21"},{"lineNumber":41,"author":{"gitId":"warrencxw"},"content":"     * @param eventTime the time at which the event occurs","lastModifiedDate":"2022-02-21"},{"lineNumber":42,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":43,"author":{"gitId":"warrencxw"},"content":"    public Event(String taskName, Boolean isDone, LocalDate eventTime) {","lastModifiedDate":"2022-02-21"},{"lineNumber":44,"author":{"gitId":"warrencxw"},"content":"        super(taskName, isDone);","lastModifiedDate":"2022-02-13"},{"lineNumber":45,"author":{"gitId":"warrencxw"},"content":"        this.eventTime \u003d eventTime;","lastModifiedDate":"2022-02-13"},{"lineNumber":46,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-13"},{"lineNumber":47,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-13"},{"lineNumber":48,"author":{"gitId":"warrencxw"},"content":"    @Override","lastModifiedDate":"2022-02-02"},{"lineNumber":49,"author":{"gitId":"warrencxw"},"content":"    public String toString() {","lastModifiedDate":"2022-02-02"},{"lineNumber":50,"author":{"gitId":"warrencxw"},"content":"        return \"[E]\" + super.toString() + \" (happening at: \" ","lastModifiedDate":"2022-02-21"},{"lineNumber":51,"author":{"gitId":"warrencxw"},"content":"                + eventTime.getDayOfMonth() + \" \" + eventTime.getMonth() + \" \" + eventTime.getYear() + \")\";","lastModifiedDate":"2022-02-21"},{"lineNumber":52,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":53,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":54,"author":{"gitId":"warrencxw"},"content":"    @Override","lastModifiedDate":"2022-02-02"},{"lineNumber":55,"author":{"gitId":"warrencxw"},"content":"    public String getAddedMessage() {","lastModifiedDate":"2022-02-21"},{"lineNumber":56,"author":{"gitId":"warrencxw"},"content":"        return \"Event \\\"\" + taskName + \"\\\" has been added.\\n\"","lastModifiedDate":"2022-02-21"},{"lineNumber":57,"author":{"gitId":"warrencxw"},"content":"                + \" \u003e \" + toString();","lastModifiedDate":"2022-02-21"},{"lineNumber":58,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":59,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-13"},{"lineNumber":60,"author":{"gitId":"warrencxw"},"content":"    @Override","lastModifiedDate":"2022-02-13"},{"lineNumber":61,"author":{"gitId":"warrencxw"},"content":"    public String getSavableCSVString() {","lastModifiedDate":"2022-02-13"},{"lineNumber":62,"author":{"gitId":"warrencxw"},"content":"        return \"E\" + Duke.CSV_DELIMITER","lastModifiedDate":"2022-02-13"},{"lineNumber":63,"author":{"gitId":"warrencxw"},"content":"                + (isDone ? \"Y\" : \"N\") + Duke.CSV_DELIMITER","lastModifiedDate":"2022-02-13"},{"lineNumber":64,"author":{"gitId":"warrencxw"},"content":"                + taskName + Duke.CSV_DELIMITER","lastModifiedDate":"2022-02-13"},{"lineNumber":65,"author":{"gitId":"warrencxw"},"content":"                + eventTime;","lastModifiedDate":"2022-02-13"},{"lineNumber":66,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-13"},{"lineNumber":67,"author":{"gitId":"warrencxw"},"content":"}","lastModifiedDate":"2022-02-02"}],"authorContributionMap":{"warrencxw":67}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"warrencxw"},"content":"package duke.task;","lastModifiedDate":"2022-02-06"},{"lineNumber":2,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":3,"author":{"gitId":"warrencxw"},"content":"/**","lastModifiedDate":"2022-02-21"},{"lineNumber":4,"author":{"gitId":"warrencxw"},"content":" * Represents a generic task that possesses a name and a completion status","lastModifiedDate":"2022-02-21"},{"lineNumber":5,"author":{"gitId":"warrencxw"},"content":" */","lastModifiedDate":"2022-02-21"},{"lineNumber":6,"author":{"gitId":"warrencxw"},"content":"public abstract class Task {","lastModifiedDate":"2022-02-06"},{"lineNumber":7,"author":{"gitId":"warrencxw"},"content":"    // Member Variables","lastModifiedDate":"2022-02-02"},{"lineNumber":8,"author":{"gitId":"warrencxw"},"content":"    protected String taskName;","lastModifiedDate":"2022-02-02"},{"lineNumber":9,"author":{"gitId":"warrencxw"},"content":"    protected boolean isDone;","lastModifiedDate":"2022-02-02"},{"lineNumber":10,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":11,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":12,"author":{"gitId":"warrencxw"},"content":"     * Default constructor, sets taskName to an empty String object and marks isDone to false.","lastModifiedDate":"2022-02-21"},{"lineNumber":13,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":14,"author":{"gitId":"warrencxw"},"content":"    public Task() {","lastModifiedDate":"2022-01-26"},{"lineNumber":15,"author":{"gitId":"warrencxw"},"content":"        this(\"\");","lastModifiedDate":"2022-01-26"},{"lineNumber":16,"author":{"gitId":"warrencxw"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-02-02"},{"lineNumber":17,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":18,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":19,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":20,"author":{"gitId":"warrencxw"},"content":"     * Alternative constructor, sets taskName to a specified taskName and marks isDone to false.","lastModifiedDate":"2022-02-21"},{"lineNumber":21,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":22,"author":{"gitId":"warrencxw"},"content":"     * @param taskName a String object that specifies the name of the task","lastModifiedDate":"2022-02-21"},{"lineNumber":23,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":24,"author":{"gitId":"warrencxw"},"content":"    public Task(String taskName) {","lastModifiedDate":"2022-01-26"},{"lineNumber":25,"author":{"gitId":"warrencxw"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2022-01-26"},{"lineNumber":26,"author":{"gitId":"warrencxw"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-01-26"},{"lineNumber":27,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":28,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":29,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":30,"author":{"gitId":"warrencxw"},"content":"     * Custom constructor, sets taskName to a specified taskName and marks isDone as specified.","lastModifiedDate":"2022-02-21"},{"lineNumber":31,"author":{"gitId":"warrencxw"},"content":"     * Used when loading tasks.","lastModifiedDate":"2022-02-21"},{"lineNumber":32,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":33,"author":{"gitId":"warrencxw"},"content":"     * @param taskName a String object that specifies the name of the task","lastModifiedDate":"2022-02-21"},{"lineNumber":34,"author":{"gitId":"warrencxw"},"content":"     * @param isDone   the completion status of the Task","lastModifiedDate":"2022-02-21"},{"lineNumber":35,"author":{"gitId":"warrencxw"},"content":"     * @see duke.Storage","lastModifiedDate":"2022-02-21"},{"lineNumber":36,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":37,"author":{"gitId":"warrencxw"},"content":"    public Task(String taskName, Boolean isDone) {","lastModifiedDate":"2022-02-13"},{"lineNumber":38,"author":{"gitId":"warrencxw"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2022-02-13"},{"lineNumber":39,"author":{"gitId":"warrencxw"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2022-02-13"},{"lineNumber":40,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-13"},{"lineNumber":41,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-13"},{"lineNumber":42,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":43,"author":{"gitId":"warrencxw"},"content":"     * Returns the name of the task","lastModifiedDate":"2022-02-21"},{"lineNumber":44,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":45,"author":{"gitId":"warrencxw"},"content":"     * @return String object containing name of task","lastModifiedDate":"2022-02-21"},{"lineNumber":46,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":47,"author":{"gitId":"warrencxw"},"content":"    public String getTaskName() {","lastModifiedDate":"2022-01-26"},{"lineNumber":48,"author":{"gitId":"warrencxw"},"content":"        return taskName;","lastModifiedDate":"2022-01-26"},{"lineNumber":49,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":50,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":51,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":52,"author":{"gitId":"warrencxw"},"content":"     * Marks the completion status of the task according to whether the task is done or not","lastModifiedDate":"2022-02-21"},{"lineNumber":53,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":54,"author":{"gitId":"warrencxw"},"content":"     * @param done the completion status to which the task is changed to","lastModifiedDate":"2022-02-21"},{"lineNumber":55,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":56,"author":{"gitId":"warrencxw"},"content":"    public void setDone(boolean done) {","lastModifiedDate":"2022-02-02"},{"lineNumber":57,"author":{"gitId":"warrencxw"},"content":"        isDone \u003d done;","lastModifiedDate":"2022-02-02"},{"lineNumber":58,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":59,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":60,"author":{"gitId":"warrencxw"},"content":"    public boolean isDone() {","lastModifiedDate":"2022-01-26"},{"lineNumber":61,"author":{"gitId":"warrencxw"},"content":"        return isDone;","lastModifiedDate":"2022-01-26"},{"lineNumber":62,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":63,"author":{"gitId":"warrencxw"},"content":"    ","lastModifiedDate":"2022-01-26"},{"lineNumber":64,"author":{"gitId":"warrencxw"},"content":"    public boolean containsString(String substring) {","lastModifiedDate":"2022-02-21"},{"lineNumber":65,"author":{"gitId":"warrencxw"},"content":"        return taskName.contains(substring);","lastModifiedDate":"2022-02-21"},{"lineNumber":66,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":67,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":68,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-16"},{"lineNumber":69,"author":{"gitId":"warrencxw"},"content":"     * Prints a message to indicate that the task has been successfully added.","lastModifiedDate":"2022-02-16"},{"lineNumber":70,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":71,"author":{"gitId":"warrencxw"},"content":"     * @return a String object containing the success message","lastModifiedDate":"2022-02-21"},{"lineNumber":72,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-16"},{"lineNumber":73,"author":{"gitId":"warrencxw"},"content":"    public abstract String getAddedMessage();","lastModifiedDate":"2022-02-21"},{"lineNumber":74,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":75,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-16"},{"lineNumber":76,"author":{"gitId":"warrencxw"},"content":"     * Convert Task object information into a savable CSV format","lastModifiedDate":"2022-02-16"},{"lineNumber":77,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-02-16"},{"lineNumber":78,"author":{"gitId":"warrencxw"},"content":"     * @return a String object containing the CSV record representing the Task to be saved.","lastModifiedDate":"2022-02-21"},{"lineNumber":79,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-16"},{"lineNumber":80,"author":{"gitId":"warrencxw"},"content":"    public abstract String getSavableCSVString();","lastModifiedDate":"2022-02-13"},{"lineNumber":81,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-13"},{"lineNumber":82,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":83,"author":{"gitId":"warrencxw"},"content":"     * Returns a String object containing all information of the task in a presentable format.","lastModifiedDate":"2022-02-21"},{"lineNumber":84,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":85,"author":{"gitId":"warrencxw"},"content":"     * @return a String object containing a readable representation of the task","lastModifiedDate":"2022-02-21"},{"lineNumber":86,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":87,"author":{"gitId":"warrencxw"},"content":"    @Override","lastModifiedDate":"2022-02-02"},{"lineNumber":88,"author":{"gitId":"warrencxw"},"content":"    public String toString() {","lastModifiedDate":"2022-02-02"},{"lineNumber":89,"author":{"gitId":"warrencxw"},"content":"        if (isDone) {","lastModifiedDate":"2022-01-26"},{"lineNumber":90,"author":{"gitId":"warrencxw"},"content":"            return \"[X] \" + taskName;","lastModifiedDate":"2022-01-26"},{"lineNumber":91,"author":{"gitId":"warrencxw"},"content":"        } else {","lastModifiedDate":"2022-02-02"},{"lineNumber":92,"author":{"gitId":"warrencxw"},"content":"            return \"[ ] \" + taskName;","lastModifiedDate":"2022-01-26"},{"lineNumber":93,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":94,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":95,"author":{"gitId":"warrencxw"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"warrencxw":95}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"warrencxw"},"content":"package duke.task;","lastModifiedDate":"2022-02-06"},{"lineNumber":2,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":3,"author":{"gitId":"warrencxw"},"content":"import duke.Display;","lastModifiedDate":"2022-02-06"},{"lineNumber":4,"author":{"gitId":"warrencxw"},"content":"import duke.DukeException;","lastModifiedDate":"2022-02-06"},{"lineNumber":5,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":6,"author":{"gitId":"warrencxw"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-02-21"},{"lineNumber":7,"author":{"gitId":"warrencxw"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-02-21"},{"lineNumber":8,"author":{"gitId":"warrencxw"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-13"},{"lineNumber":9,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-13"},{"lineNumber":10,"author":{"gitId":"warrencxw"},"content":"/**","lastModifiedDate":"2022-02-21"},{"lineNumber":11,"author":{"gitId":"warrencxw"},"content":" * Represents a collection of Tasks, its relevant management tools and information.","lastModifiedDate":"2022-02-21"},{"lineNumber":12,"author":{"gitId":"warrencxw"},"content":" */","lastModifiedDate":"2022-02-21"},{"lineNumber":13,"author":{"gitId":"warrencxw"},"content":"public class TaskList {","lastModifiedDate":"2022-02-05"},{"lineNumber":14,"author":{"gitId":"warrencxw"},"content":"    // Member attributes","lastModifiedDate":"2022-02-05"},{"lineNumber":15,"author":{"gitId":"warrencxw"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2022-02-21"},{"lineNumber":16,"author":{"gitId":"warrencxw"},"content":"    private Display ui;","lastModifiedDate":"2022-02-21"},{"lineNumber":17,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":18,"author":{"gitId":"warrencxw"},"content":"    // Regex patterns","lastModifiedDate":"2022-02-05"},{"lineNumber":19,"author":{"gitId":"warrencxw"},"content":"    public static final String REGEX_PATTERN_AT \u003d \"\\\\s/at\\\\s\";","lastModifiedDate":"2022-02-05"},{"lineNumber":20,"author":{"gitId":"warrencxw"},"content":"    public static final String REGEX_PATTERN_BY \u003d \"\\\\s/by\\\\s\";","lastModifiedDate":"2022-02-05"},{"lineNumber":21,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":22,"author":{"gitId":"warrencxw"},"content":"    // String patterns","lastModifiedDate":"2022-02-06"},{"lineNumber":23,"author":{"gitId":"warrencxw"},"content":"    public static final String STRING_PATTERN_AT \u003d \"/at\";","lastModifiedDate":"2022-02-06"},{"lineNumber":24,"author":{"gitId":"warrencxw"},"content":"    public static final String STRING_PATTERN_BY \u003d \"/by\";","lastModifiedDate":"2022-02-06"},{"lineNumber":25,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":26,"author":{"gitId":"warrencxw"},"content":"    // Exception messages","lastModifiedDate":"2022-02-06"},{"lineNumber":27,"author":{"gitId":"warrencxw"},"content":"    public static final String EXCEPTION_MESSAGE_REGEX_PATTERN_TODO_REQUESTED \u003d","lastModifiedDate":"2022-02-06"},{"lineNumber":28,"author":{"gitId":"warrencxw"},"content":"            \"TaskType TODO does not have a Regex pattern\";","lastModifiedDate":"2022-02-06"},{"lineNumber":29,"author":{"gitId":"warrencxw"},"content":"    public static final String EXCEPTION_MESSAGE_INVALID_TASKTYPE \u003d","lastModifiedDate":"2022-02-06"},{"lineNumber":30,"author":{"gitId":"warrencxw"},"content":"            \"Invalid TaskType argument provided to method.\";","lastModifiedDate":"2022-02-06"},{"lineNumber":31,"author":{"gitId":"warrencxw"},"content":"    public static final String EXCEPTION_MESSAGE_STRING_PATTERN_TODO_REQUESTED \u003d","lastModifiedDate":"2022-02-06"},{"lineNumber":32,"author":{"gitId":"warrencxw"},"content":"            \"TaskType TODO does not have a String pattern.\";","lastModifiedDate":"2022-02-06"},{"lineNumber":33,"author":{"gitId":"warrencxw"},"content":"    public static final String EXCEPTION_MALFORMED_CSV_RECORD \u003d","lastModifiedDate":"2022-02-16"},{"lineNumber":34,"author":{"gitId":"warrencxw"},"content":"            \"The save file contains one or more malformed CSV records.\\n\"","lastModifiedDate":"2022-02-21"},{"lineNumber":35,"author":{"gitId":"warrencxw"},"content":"                    + \"The loading process will be halted. Please quit immediately and rectify any errors\\n\"","lastModifiedDate":"2022-02-16"},{"lineNumber":36,"author":{"gitId":"warrencxw"},"content":"                    + \"in the file to prevent the save file from being overwritten.\";","lastModifiedDate":"2022-02-16"},{"lineNumber":37,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":38,"author":{"gitId":"warrencxw"},"content":"    // Subclasses","lastModifiedDate":"2022-02-05"},{"lineNumber":39,"author":{"gitId":"warrencxw"},"content":"    public enum TaskType {","lastModifiedDate":"2022-02-05"},{"lineNumber":40,"author":{"gitId":"warrencxw"},"content":"        TODO, DEADLINE, EVENT","lastModifiedDate":"2022-02-05"},{"lineNumber":41,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-05"},{"lineNumber":42,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":43,"author":{"gitId":"warrencxw"},"content":"    // Subclass Constants","lastModifiedDate":"2022-02-16"},{"lineNumber":44,"author":{"gitId":"warrencxw"},"content":"    private static final int TODO_RECORD_LENGTH \u003d 3;","lastModifiedDate":"2022-02-16"},{"lineNumber":45,"author":{"gitId":"warrencxw"},"content":"    private static final int DEADLINE_EVENT_RECORD_LENGTH \u003d 4;","lastModifiedDate":"2022-02-16"},{"lineNumber":46,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-16"},{"lineNumber":47,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-06"},{"lineNumber":48,"author":{"gitId":"warrencxw"},"content":"     * Returns the String pattern that identifies the additional parameters of the","lastModifiedDate":"2022-02-21"},{"lineNumber":49,"author":{"gitId":"warrencxw"},"content":"     * type of task specified in the argument.","lastModifiedDate":"2022-02-21"},{"lineNumber":50,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-02-06"},{"lineNumber":51,"author":{"gitId":"warrencxw"},"content":"     * @param taskType Either TaskType.EVENT or TaskType.DEADLINE","lastModifiedDate":"2022-02-06"},{"lineNumber":52,"author":{"gitId":"warrencxw"},"content":"     * @return String pattern of task given","lastModifiedDate":"2022-02-06"},{"lineNumber":53,"author":{"gitId":"warrencxw"},"content":"     * @throws DukeException If taskType is NOT TaskType.EVENT or TaskType.DEADLINE","lastModifiedDate":"2022-02-06"},{"lineNumber":54,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-06"},{"lineNumber":55,"author":{"gitId":"warrencxw"},"content":"    public static String getStringPatternOfTask(TaskType taskType) throws DukeException {","lastModifiedDate":"2022-02-21"},{"lineNumber":56,"author":{"gitId":"warrencxw"},"content":"        String stringPattern;","lastModifiedDate":"2022-02-06"},{"lineNumber":57,"author":{"gitId":"warrencxw"},"content":"        switch (taskType) {","lastModifiedDate":"2022-02-06"},{"lineNumber":58,"author":{"gitId":"warrencxw"},"content":"        case TODO:","lastModifiedDate":"2022-02-06"},{"lineNumber":59,"author":{"gitId":"warrencxw"},"content":"            throw new DukeException(EXCEPTION_MESSAGE_STRING_PATTERN_TODO_REQUESTED);","lastModifiedDate":"2022-02-06"},{"lineNumber":60,"author":{"gitId":"warrencxw"},"content":"        case EVENT:","lastModifiedDate":"2022-02-06"},{"lineNumber":61,"author":{"gitId":"warrencxw"},"content":"            stringPattern \u003d STRING_PATTERN_AT;","lastModifiedDate":"2022-02-06"},{"lineNumber":62,"author":{"gitId":"warrencxw"},"content":"            break;","lastModifiedDate":"2022-02-06"},{"lineNumber":63,"author":{"gitId":"warrencxw"},"content":"        case DEADLINE:","lastModifiedDate":"2022-02-06"},{"lineNumber":64,"author":{"gitId":"warrencxw"},"content":"            stringPattern \u003d STRING_PATTERN_BY;","lastModifiedDate":"2022-02-06"},{"lineNumber":65,"author":{"gitId":"warrencxw"},"content":"            break;","lastModifiedDate":"2022-02-05"},{"lineNumber":66,"author":{"gitId":"warrencxw"},"content":"        default:","lastModifiedDate":"2022-02-05"},{"lineNumber":67,"author":{"gitId":"warrencxw"},"content":"            throw new DukeException(EXCEPTION_MESSAGE_INVALID_TASKTYPE);","lastModifiedDate":"2022-02-06"},{"lineNumber":68,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-02-06"},{"lineNumber":69,"author":{"gitId":"warrencxw"},"content":"        return stringPattern;","lastModifiedDate":"2022-02-06"},{"lineNumber":70,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-06"},{"lineNumber":71,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":72,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-06"},{"lineNumber":73,"author":{"gitId":"warrencxw"},"content":"     * Returns Regex pattern that identifies the additional parameters of the","lastModifiedDate":"2022-02-21"},{"lineNumber":74,"author":{"gitId":"warrencxw"},"content":"     * type of task specified in the argument","lastModifiedDate":"2022-02-21"},{"lineNumber":75,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-02-06"},{"lineNumber":76,"author":{"gitId":"warrencxw"},"content":"     * @param taskType Either TaskType.EVENT or TaskType.DEADLINE","lastModifiedDate":"2022-02-06"},{"lineNumber":77,"author":{"gitId":"warrencxw"},"content":"     * @return Regex pattern of task given","lastModifiedDate":"2022-02-06"},{"lineNumber":78,"author":{"gitId":"warrencxw"},"content":"     * @throws DukeException If taskType is NOT TaskType.EVENT or TaskType.DEADLINE","lastModifiedDate":"2022-02-06"},{"lineNumber":79,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-06"},{"lineNumber":80,"author":{"gitId":"warrencxw"},"content":"    public static String getRegexPatternOfTask(TaskType taskType) throws DukeException {","lastModifiedDate":"2022-02-21"},{"lineNumber":81,"author":{"gitId":"warrencxw"},"content":"        String regexPattern;","lastModifiedDate":"2022-02-06"},{"lineNumber":82,"author":{"gitId":"warrencxw"},"content":"        switch (taskType) {","lastModifiedDate":"2022-02-06"},{"lineNumber":83,"author":{"gitId":"warrencxw"},"content":"        case TODO:","lastModifiedDate":"2022-02-06"},{"lineNumber":84,"author":{"gitId":"warrencxw"},"content":"            throw new DukeException(EXCEPTION_MESSAGE_REGEX_PATTERN_TODO_REQUESTED);","lastModifiedDate":"2022-02-06"},{"lineNumber":85,"author":{"gitId":"warrencxw"},"content":"        case EVENT:","lastModifiedDate":"2022-02-06"},{"lineNumber":86,"author":{"gitId":"warrencxw"},"content":"            regexPattern \u003d REGEX_PATTERN_AT;","lastModifiedDate":"2022-02-06"},{"lineNumber":87,"author":{"gitId":"warrencxw"},"content":"            break;","lastModifiedDate":"2022-02-06"},{"lineNumber":88,"author":{"gitId":"warrencxw"},"content":"        case DEADLINE:","lastModifiedDate":"2022-02-06"},{"lineNumber":89,"author":{"gitId":"warrencxw"},"content":"            regexPattern \u003d REGEX_PATTERN_BY;","lastModifiedDate":"2022-02-06"},{"lineNumber":90,"author":{"gitId":"warrencxw"},"content":"            break;","lastModifiedDate":"2022-02-05"},{"lineNumber":91,"author":{"gitId":"warrencxw"},"content":"        default:","lastModifiedDate":"2022-02-06"},{"lineNumber":92,"author":{"gitId":"warrencxw"},"content":"            throw new DukeException(EXCEPTION_MESSAGE_INVALID_TASKTYPE);","lastModifiedDate":"2022-02-06"},{"lineNumber":93,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-02-05"},{"lineNumber":94,"author":{"gitId":"warrencxw"},"content":"        return regexPattern;","lastModifiedDate":"2022-02-06"},{"lineNumber":95,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-06"},{"lineNumber":96,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":97,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-05"},{"lineNumber":98,"author":{"gitId":"warrencxw"},"content":"     * Returns a String object containing the full list of tasks that are stored in the TaskList object","lastModifiedDate":"2022-02-21"},{"lineNumber":99,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":100,"author":{"gitId":"warrencxw"},"content":"     * @return a String object containing a readable representation of the TaskList","lastModifiedDate":"2022-02-21"},{"lineNumber":101,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-05"},{"lineNumber":102,"author":{"gitId":"warrencxw"},"content":"    @Override","lastModifiedDate":"2022-02-21"},{"lineNumber":103,"author":{"gitId":"warrencxw"},"content":"    public String toString() {","lastModifiedDate":"2022-02-21"},{"lineNumber":104,"author":{"gitId":"warrencxw"},"content":"        StringBuilder taskListString \u003d new StringBuilder(\"| Task List |\");","lastModifiedDate":"2022-02-21"},{"lineNumber":105,"author":{"gitId":"warrencxw"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2022-02-13"},{"lineNumber":106,"author":{"gitId":"warrencxw"},"content":"            taskListString.append(\"\\n\" + (i + 1) + \". \" + tasks.get(i).toString());","lastModifiedDate":"2022-02-21"},{"lineNumber":107,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-02-13"},{"lineNumber":108,"author":{"gitId":"warrencxw"},"content":"        return taskListString.toString();","lastModifiedDate":"2022-02-21"},{"lineNumber":109,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-13"},{"lineNumber":110,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-13"},{"lineNumber":111,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-16"},{"lineNumber":112,"author":{"gitId":"warrencxw"},"content":"     * Reads through every single Task in the TaskList and returns an array of Strings, each String containing","lastModifiedDate":"2022-02-16"},{"lineNumber":113,"author":{"gitId":"warrencxw"},"content":"     * a CSV record for each Task in the TaskList.","lastModifiedDate":"2022-02-16"},{"lineNumber":114,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-02-16"},{"lineNumber":115,"author":{"gitId":"warrencxw"},"content":"     * @return a String array of CSV records representing the entire TaskList to be saved.","lastModifiedDate":"2022-02-21"},{"lineNumber":116,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-16"},{"lineNumber":117,"author":{"gitId":"warrencxw"},"content":"    public String[] getSavableCSVStrings() {","lastModifiedDate":"2022-02-21"},{"lineNumber":118,"author":{"gitId":"warrencxw"},"content":"        String[] csvStrings \u003d new String[tasks.size()];","lastModifiedDate":"2022-02-13"},{"lineNumber":119,"author":{"gitId":"warrencxw"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2022-02-13"},{"lineNumber":120,"author":{"gitId":"warrencxw"},"content":"            csvStrings[i] \u003d tasks.get(i).getSavableCSVString();","lastModifiedDate":"2022-02-13"},{"lineNumber":121,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-02-13"},{"lineNumber":122,"author":{"gitId":"warrencxw"},"content":"        return csvStrings;","lastModifiedDate":"2022-02-13"},{"lineNumber":123,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-13"},{"lineNumber":124,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-13"},{"lineNumber":125,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-16"},{"lineNumber":126,"author":{"gitId":"warrencxw"},"content":"     * Reads through a single CSV record and checks if it is valid and can be loaded into the TaskList as a task.","lastModifiedDate":"2022-02-16"},{"lineNumber":127,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-02-16"},{"lineNumber":128,"author":{"gitId":"warrencxw"},"content":"     * @param record An array of Strings each representing a value within the CSV record","lastModifiedDate":"2022-02-16"},{"lineNumber":129,"author":{"gitId":"warrencxw"},"content":"     * @return Returns true if the CSV record is valid and can be loaded as a Task, false otherwise.","lastModifiedDate":"2022-02-16"},{"lineNumber":130,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-16"},{"lineNumber":131,"author":{"gitId":"warrencxw"},"content":"    public boolean isValidCSVRecord(String[] record) {","lastModifiedDate":"2022-02-21"},{"lineNumber":132,"author":{"gitId":"warrencxw"},"content":"        boolean isInvalidRecordLength \u003d","lastModifiedDate":"2022-02-16"},{"lineNumber":133,"author":{"gitId":"warrencxw"},"content":"                record.length \u003c TODO_RECORD_LENGTH || record.length \u003e DEADLINE_EVENT_RECORD_LENGTH;","lastModifiedDate":"2022-02-16"},{"lineNumber":134,"author":{"gitId":"warrencxw"},"content":"        if (isInvalidRecordLength) {","lastModifiedDate":"2022-02-13"},{"lineNumber":135,"author":{"gitId":"warrencxw"},"content":"            return false;","lastModifiedDate":"2022-02-13"},{"lineNumber":136,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-02-13"},{"lineNumber":137,"author":{"gitId":"warrencxw"},"content":"        boolean isValidTask \u003d","lastModifiedDate":"2022-02-13"},{"lineNumber":138,"author":{"gitId":"warrencxw"},"content":"                (record.length \u003d\u003d TODO_RECORD_LENGTH \u0026\u0026 record[0].equalsIgnoreCase(\"T\"))","lastModifiedDate":"2022-02-16"},{"lineNumber":139,"author":{"gitId":"warrencxw"},"content":"                        || (record.length \u003d\u003d DEADLINE_EVENT_RECORD_LENGTH","lastModifiedDate":"2022-02-16"},{"lineNumber":140,"author":{"gitId":"warrencxw"},"content":"                        \u0026\u0026 (record[0].equalsIgnoreCase(\"D\") || record[0].equalsIgnoreCase(\"E\")));","lastModifiedDate":"2022-02-16"},{"lineNumber":141,"author":{"gitId":"warrencxw"},"content":"        boolean isValidMarking \u003d","lastModifiedDate":"2022-02-13"},{"lineNumber":142,"author":{"gitId":"warrencxw"},"content":"                record[1].equalsIgnoreCase(\"Y\") || record[1].equalsIgnoreCase(\"N\");","lastModifiedDate":"2022-02-13"},{"lineNumber":143,"author":{"gitId":"warrencxw"},"content":"        return isValidTask \u0026\u0026 isValidMarking;","lastModifiedDate":"2022-02-13"},{"lineNumber":144,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-13"},{"lineNumber":145,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-13"},{"lineNumber":146,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-16"},{"lineNumber":147,"author":{"gitId":"warrencxw"},"content":"     * Reads through a single CSV record, and if valid, create a relevant Task subclass object into tasks.","lastModifiedDate":"2022-02-16"},{"lineNumber":148,"author":{"gitId":"warrencxw"},"content":"     * Otherwise, throw an exception containing the error message for a malformed CSV record.","lastModifiedDate":"2022-02-16"},{"lineNumber":149,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-02-16"},{"lineNumber":150,"author":{"gitId":"warrencxw"},"content":"     * @param record An array of Strings each representing a value within the CSV record","lastModifiedDate":"2022-02-16"},{"lineNumber":151,"author":{"gitId":"warrencxw"},"content":"     * @throws DukeException If record is a CSV record that does not follow the saving conventions as per any of","lastModifiedDate":"2022-02-16"},{"lineNumber":152,"author":{"gitId":"warrencxw"},"content":"     *                       each Task subclass\u0027 getSavableCSVString() method.","lastModifiedDate":"2022-02-16"},{"lineNumber":153,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-16"},{"lineNumber":154,"author":{"gitId":"warrencxw"},"content":"    public void addTaskFromCSVRecord(String[] record) throws DukeException, DateTimeParseException {","lastModifiedDate":"2022-02-21"},{"lineNumber":155,"author":{"gitId":"warrencxw"},"content":"        if (!isValidCSVRecord(record)) {","lastModifiedDate":"2022-02-13"},{"lineNumber":156,"author":{"gitId":"warrencxw"},"content":"            throw new DukeException(EXCEPTION_MALFORMED_CSV_RECORD);","lastModifiedDate":"2022-02-16"},{"lineNumber":157,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-02-13"},{"lineNumber":158,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-13"},{"lineNumber":159,"author":{"gitId":"warrencxw"},"content":"        // REFERENCE: record \u003d { taskType {T,E,D}, marked {Y,N}, name, dueDate/eventTime(if D/E)}","lastModifiedDate":"2022-02-21"},{"lineNumber":160,"author":{"gitId":"warrencxw"},"content":"        boolean marked \u003d record[1].equalsIgnoreCase(\"Y\");","lastModifiedDate":"2022-02-13"},{"lineNumber":161,"author":{"gitId":"warrencxw"},"content":"        LocalDate date;","lastModifiedDate":"2022-02-21"},{"lineNumber":162,"author":{"gitId":"warrencxw"},"content":"        switch (record[0]) {","lastModifiedDate":"2022-02-13"},{"lineNumber":163,"author":{"gitId":"warrencxw"},"content":"        case \"T\":","lastModifiedDate":"2022-02-13"},{"lineNumber":164,"author":{"gitId":"warrencxw"},"content":"            tasks.add(new Todo(record[2], marked));","lastModifiedDate":"2022-02-13"},{"lineNumber":165,"author":{"gitId":"warrencxw"},"content":"            break;","lastModifiedDate":"2022-02-13"},{"lineNumber":166,"author":{"gitId":"warrencxw"},"content":"        case \"E\":","lastModifiedDate":"2022-02-13"},{"lineNumber":167,"author":{"gitId":"warrencxw"},"content":"            date \u003d LocalDate.parse(record[3]);","lastModifiedDate":"2022-02-21"},{"lineNumber":168,"author":{"gitId":"warrencxw"},"content":"            tasks.add(new Event(record[2], marked, date));","lastModifiedDate":"2022-02-21"},{"lineNumber":169,"author":{"gitId":"warrencxw"},"content":"            break;","lastModifiedDate":"2022-02-13"},{"lineNumber":170,"author":{"gitId":"warrencxw"},"content":"        case \"D\":","lastModifiedDate":"2022-02-13"},{"lineNumber":171,"author":{"gitId":"warrencxw"},"content":"            date \u003d LocalDate.parse(record[3]);","lastModifiedDate":"2022-02-21"},{"lineNumber":172,"author":{"gitId":"warrencxw"},"content":"            tasks.add(new Deadline(record[2], marked, date));","lastModifiedDate":"2022-02-21"},{"lineNumber":173,"author":{"gitId":"warrencxw"},"content":"            break;","lastModifiedDate":"2022-02-13"},{"lineNumber":174,"author":{"gitId":"warrencxw"},"content":"        default:","lastModifiedDate":"2022-02-13"},{"lineNumber":175,"author":{"gitId":"warrencxw"},"content":"            throw new DukeException(EXCEPTION_MALFORMED_CSV_RECORD);","lastModifiedDate":"2022-02-16"},{"lineNumber":176,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-02-13"},{"lineNumber":177,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-13"},{"lineNumber":178,"author":{"gitId":"warrencxw"},"content":"    ","lastModifiedDate":"2022-02-16"},{"lineNumber":179,"author":{"gitId":"warrencxw"},"content":"    public String findTasksByString(String substring) {","lastModifiedDate":"2022-02-21"},{"lineNumber":180,"author":{"gitId":"warrencxw"},"content":"        StringBuilder resultString \u003d new StringBuilder(\"| Matching Tasks |\");","lastModifiedDate":"2022-02-21"},{"lineNumber":181,"author":{"gitId":"warrencxw"},"content":"        int totalCount \u003d 0;","lastModifiedDate":"2022-02-21"},{"lineNumber":182,"author":{"gitId":"warrencxw"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2022-02-21"},{"lineNumber":183,"author":{"gitId":"warrencxw"},"content":"            if (tasks.get(i).containsString(substring)) {","lastModifiedDate":"2022-02-21"},{"lineNumber":184,"author":{"gitId":"warrencxw"},"content":"                resultString.append(\"\\n\" + (i + 1) + \". \" + tasks.get(i).toString());","lastModifiedDate":"2022-02-21"},{"lineNumber":185,"author":{"gitId":"warrencxw"},"content":"                totalCount +\u003d 1;","lastModifiedDate":"2022-02-21"},{"lineNumber":186,"author":{"gitId":"warrencxw"},"content":"            }","lastModifiedDate":"2022-02-21"},{"lineNumber":187,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-02-21"},{"lineNumber":188,"author":{"gitId":"warrencxw"},"content":"        resultString.append(\"\\nThere are \" + totalCount + \" matches.\");","lastModifiedDate":"2022-02-21"},{"lineNumber":189,"author":{"gitId":"warrencxw"},"content":"        return resultString.toString();","lastModifiedDate":"2022-02-21"},{"lineNumber":190,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":191,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":192,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":193,"author":{"gitId":"warrencxw"},"content":"     * Clears all the tasks that are in the TaskList object","lastModifiedDate":"2022-02-21"},{"lineNumber":194,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":195,"author":{"gitId":"warrencxw"},"content":"    public void clearTasks() {","lastModifiedDate":"2022-02-21"},{"lineNumber":196,"author":{"gitId":"warrencxw"},"content":"        tasks.clear();","lastModifiedDate":"2022-02-16"},{"lineNumber":197,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":198,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":199,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":200,"author":{"gitId":"warrencxw"},"content":"     * Add a specified task into the TaskList","lastModifiedDate":"2022-02-21"},{"lineNumber":201,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":202,"author":{"gitId":"warrencxw"},"content":"     * @param task a Task object to be added into the TaskList","lastModifiedDate":"2022-02-21"},{"lineNumber":203,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":204,"author":{"gitId":"warrencxw"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2022-02-21"},{"lineNumber":205,"author":{"gitId":"warrencxw"},"content":"        if (task !\u003d null) {","lastModifiedDate":"2022-02-21"},{"lineNumber":206,"author":{"gitId":"warrencxw"},"content":"            tasks.add(task);","lastModifiedDate":"2022-02-21"},{"lineNumber":207,"author":{"gitId":"warrencxw"},"content":"        }","lastModifiedDate":"2022-02-21"},{"lineNumber":208,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":209,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":210,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":211,"author":{"gitId":"warrencxw"},"content":"     * Removes a task from the TaskList specified by its task number as shown when listed out using","lastModifiedDate":"2022-02-21"},{"lineNumber":212,"author":{"gitId":"warrencxw"},"content":"     * \u003ccode\u003etoString()\u003c/code\u003e","lastModifiedDate":"2022-02-21"},{"lineNumber":213,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":214,"author":{"gitId":"warrencxw"},"content":"     * @param taskNo an integer in [0, getSize() - 1], representing the index of a Task in the TaskList","lastModifiedDate":"2022-02-21"},{"lineNumber":215,"author":{"gitId":"warrencxw"},"content":"     * @throws IndexOutOfBoundsException if taskNo is not within [0, getSize() - 1]","lastModifiedDate":"2022-02-21"},{"lineNumber":216,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":217,"author":{"gitId":"warrencxw"},"content":"    public void removeTask(int taskNo) throws IndexOutOfBoundsException {","lastModifiedDate":"2022-02-21"},{"lineNumber":218,"author":{"gitId":"warrencxw"},"content":"        tasks.remove(taskNo);","lastModifiedDate":"2022-02-21"},{"lineNumber":219,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":220,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":221,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":222,"author":{"gitId":"warrencxw"},"content":"     * Returns a reference to a Task in the TaskList specified by its task number as shown when listed out using","lastModifiedDate":"2022-02-21"},{"lineNumber":223,"author":{"gitId":"warrencxw"},"content":"     * \u003ccode\u003etoString()\u003c/code\u003e","lastModifiedDate":"2022-02-21"},{"lineNumber":224,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":225,"author":{"gitId":"warrencxw"},"content":"     * @param taskNo an integer in [0, getSize() - 1], representing the index of a Task in the TaskList","lastModifiedDate":"2022-02-21"},{"lineNumber":226,"author":{"gitId":"warrencxw"},"content":"     * @throws IndexOutOfBoundsException if taskNo is not within [0, getSize() - 1]","lastModifiedDate":"2022-02-21"},{"lineNumber":227,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":228,"author":{"gitId":"warrencxw"},"content":"    public Task getTask(int taskNo) throws IndexOutOfBoundsException {","lastModifiedDate":"2022-02-21"},{"lineNumber":229,"author":{"gitId":"warrencxw"},"content":"        return tasks.get(taskNo);","lastModifiedDate":"2022-02-21"},{"lineNumber":230,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":231,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":232,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":233,"author":{"gitId":"warrencxw"},"content":"     * Returns the number of Task objects currently in the TaskList object","lastModifiedDate":"2022-02-21"},{"lineNumber":234,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":235,"author":{"gitId":"warrencxw"},"content":"     * @return an integer indicating the number of Task objects in tasks","lastModifiedDate":"2022-02-21"},{"lineNumber":236,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":237,"author":{"gitId":"warrencxw"},"content":"    public int getSize() {","lastModifiedDate":"2022-02-21"},{"lineNumber":238,"author":{"gitId":"warrencxw"},"content":"        return tasks.size();","lastModifiedDate":"2022-02-21"},{"lineNumber":239,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":240,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":241,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":242,"author":{"gitId":"warrencxw"},"content":"     * Default constructor, instantiates an empty ArrayList of tasks and a default Display object with which","lastModifiedDate":"2022-02-21"},{"lineNumber":243,"author":{"gitId":"warrencxw"},"content":"     * all error and output messages are printed using.","lastModifiedDate":"2022-02-21"},{"lineNumber":244,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":245,"author":{"gitId":"warrencxw"},"content":"    public TaskList() {","lastModifiedDate":"2022-02-21"},{"lineNumber":246,"author":{"gitId":"warrencxw"},"content":"        tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-02-21"},{"lineNumber":247,"author":{"gitId":"warrencxw"},"content":"        ui \u003d new Display();","lastModifiedDate":"2022-02-21"},{"lineNumber":248,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":249,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":250,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":251,"author":{"gitId":"warrencxw"},"content":"     * Standard constructor, instantiates an empty ArrayList of tasks and uses a specified Display object with which","lastModifiedDate":"2022-02-21"},{"lineNumber":252,"author":{"gitId":"warrencxw"},"content":"     * all error and output messages are printed using.","lastModifiedDate":"2022-02-21"},{"lineNumber":253,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":254,"author":{"gitId":"warrencxw"},"content":"    public TaskList(Display ui) {","lastModifiedDate":"2022-02-21"},{"lineNumber":255,"author":{"gitId":"warrencxw"},"content":"        tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-02-21"},{"lineNumber":256,"author":{"gitId":"warrencxw"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2022-02-21"},{"lineNumber":257,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-16"},{"lineNumber":258,"author":{"gitId":"warrencxw"},"content":"}","lastModifiedDate":"2022-02-05"}],"authorContributionMap":{"warrencxw":258}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"warrencxw"},"content":"package duke.task;","lastModifiedDate":"2022-02-06"},{"lineNumber":2,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":3,"author":{"gitId":"warrencxw"},"content":"import duke.Duke;","lastModifiedDate":"2022-02-13"},{"lineNumber":4,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-13"},{"lineNumber":5,"author":{"gitId":"warrencxw"},"content":"/**","lastModifiedDate":"2022-02-21"},{"lineNumber":6,"author":{"gitId":"warrencxw"},"content":" * Represents a generic task that has to be done, regardless of time","lastModifiedDate":"2022-02-21"},{"lineNumber":7,"author":{"gitId":"warrencxw"},"content":" */","lastModifiedDate":"2022-02-21"},{"lineNumber":8,"author":{"gitId":"warrencxw"},"content":"public class Todo extends Task {","lastModifiedDate":"2022-02-02"},{"lineNumber":9,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":10,"author":{"gitId":"warrencxw"},"content":"     * Default constructor, sets taskName to an empty String object and marks isDone to false.","lastModifiedDate":"2022-02-21"},{"lineNumber":11,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":12,"author":{"gitId":"warrencxw"},"content":"    public Todo() {","lastModifiedDate":"2022-02-02"},{"lineNumber":13,"author":{"gitId":"warrencxw"},"content":"        super();","lastModifiedDate":"2022-02-02"},{"lineNumber":14,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":15,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":16,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":17,"author":{"gitId":"warrencxw"},"content":"     * Alternative constructor, sets taskName to a specified taskName and marks isDone to false.","lastModifiedDate":"2022-02-21"},{"lineNumber":18,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":19,"author":{"gitId":"warrencxw"},"content":"     * @param taskName a String object that specifies the name of the task","lastModifiedDate":"2022-02-21"},{"lineNumber":20,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":21,"author":{"gitId":"warrencxw"},"content":"    public Todo(String taskName) {","lastModifiedDate":"2022-02-02"},{"lineNumber":22,"author":{"gitId":"warrencxw"},"content":"        super(taskName);","lastModifiedDate":"2022-02-02"},{"lineNumber":23,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":24,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":25,"author":{"gitId":"warrencxw"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":26,"author":{"gitId":"warrencxw"},"content":"     * Custom constructor, sets taskName to a specified taskName and marks isDone as specified.","lastModifiedDate":"2022-02-21"},{"lineNumber":27,"author":{"gitId":"warrencxw"},"content":"     * Used when loading tasks.","lastModifiedDate":"2022-02-21"},{"lineNumber":28,"author":{"gitId":"warrencxw"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":29,"author":{"gitId":"warrencxw"},"content":"     * @param taskName a String object that specifies the name of the task","lastModifiedDate":"2022-02-21"},{"lineNumber":30,"author":{"gitId":"warrencxw"},"content":"     * @param isDone   the completion status of the Task","lastModifiedDate":"2022-02-21"},{"lineNumber":31,"author":{"gitId":"warrencxw"},"content":"     * @see duke.Storage","lastModifiedDate":"2022-02-21"},{"lineNumber":32,"author":{"gitId":"warrencxw"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":33,"author":{"gitId":"warrencxw"},"content":"    public Todo(String taskName, Boolean isDone) {","lastModifiedDate":"2022-02-13"},{"lineNumber":34,"author":{"gitId":"warrencxw"},"content":"        super(taskName, isDone);","lastModifiedDate":"2022-02-13"},{"lineNumber":35,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-13"},{"lineNumber":36,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-13"},{"lineNumber":37,"author":{"gitId":"warrencxw"},"content":"    @Override","lastModifiedDate":"2022-02-02"},{"lineNumber":38,"author":{"gitId":"warrencxw"},"content":"    public String toString() {","lastModifiedDate":"2022-02-02"},{"lineNumber":39,"author":{"gitId":"warrencxw"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2022-02-02"},{"lineNumber":40,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":41,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":42,"author":{"gitId":"warrencxw"},"content":"    @Override","lastModifiedDate":"2022-02-02"},{"lineNumber":43,"author":{"gitId":"warrencxw"},"content":"    public String getAddedMessage() {","lastModifiedDate":"2022-02-21"},{"lineNumber":44,"author":{"gitId":"warrencxw"},"content":"        return \"Todo \\\"\" + taskName + \"\\\" has been added.\\n\"","lastModifiedDate":"2022-02-21"},{"lineNumber":45,"author":{"gitId":"warrencxw"},"content":"                + \" \u003e \" + toString();","lastModifiedDate":"2022-02-21"},{"lineNumber":46,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":47,"author":{"gitId":"warrencxw"},"content":"","lastModifiedDate":"2022-02-13"},{"lineNumber":48,"author":{"gitId":"warrencxw"},"content":"    @Override","lastModifiedDate":"2022-02-13"},{"lineNumber":49,"author":{"gitId":"warrencxw"},"content":"    public String getSavableCSVString() {","lastModifiedDate":"2022-02-13"},{"lineNumber":50,"author":{"gitId":"warrencxw"},"content":"        return \"T\" + Duke.CSV_DELIMITER","lastModifiedDate":"2022-02-13"},{"lineNumber":51,"author":{"gitId":"warrencxw"},"content":"                + (isDone ? \"Y\" : \"N\") + Duke.CSV_DELIMITER","lastModifiedDate":"2022-02-13"},{"lineNumber":52,"author":{"gitId":"warrencxw"},"content":"                + taskName;","lastModifiedDate":"2022-02-13"},{"lineNumber":53,"author":{"gitId":"warrencxw"},"content":"    }","lastModifiedDate":"2022-02-13"},{"lineNumber":54,"author":{"gitId":"warrencxw"},"content":"}","lastModifiedDate":"2022-02-02"}],"authorContributionMap":{"warrencxw":54}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"warrencxw"},"content":"clear","lastModifiedDate":"2022-02-16"},{"lineNumber":2,"author":{"gitId":"warrencxw"},"content":"apple","lastModifiedDate":"2022-02-21"},{"lineNumber":3,"author":{"gitId":"warrencxw"},"content":"clear","lastModifiedDate":"2022-02-21"},{"lineNumber":4,"author":{"gitId":"warrencxw"},"content":"Y","lastModifiedDate":"2022-02-16"},{"lineNumber":5,"author":{"gitId":"warrencxw"},"content":"mark 1","lastModifiedDate":"2022-02-06"},{"lineNumber":6,"author":{"gitId":"warrencxw"},"content":"unmark 1","lastModifiedDate":"2022-02-06"},{"lineNumber":7,"author":{"gitId":"warrencxw"},"content":"delete 3","lastModifiedDate":"2022-02-13"},{"lineNumber":8,"author":{"gitId":"warrencxw"},"content":"todo test1","lastModifiedDate":"2022-02-02"},{"lineNumber":9,"author":{"gitId":"warrencxw"},"content":"todo test1 test2","lastModifiedDate":"2022-02-02"},{"lineNumber":10,"author":{"gitId":"warrencxw"},"content":"list","lastModifiedDate":"2022-02-02"},{"lineNumber":11,"author":{"gitId":"warrencxw"},"content":"mark","lastModifiedDate":"2022-02-06"},{"lineNumber":12,"author":{"gitId":"warrencxw"},"content":"unmark","lastModifiedDate":"2022-02-06"},{"lineNumber":13,"author":{"gitId":"warrencxw"},"content":"event ","lastModifiedDate":"2022-02-06"},{"lineNumber":14,"author":{"gitId":"warrencxw"},"content":"event  ","lastModifiedDate":"2022-02-06"},{"lineNumber":15,"author":{"gitId":"warrencxw"},"content":"event /at","lastModifiedDate":"2022-02-06"},{"lineNumber":16,"author":{"gitId":"warrencxw"},"content":"event /at test3","lastModifiedDate":"2022-02-06"},{"lineNumber":17,"author":{"gitId":"warrencxw"},"content":"event at test3","lastModifiedDate":"2022-02-06"},{"lineNumber":18,"author":{"gitId":"warrencxw"},"content":"event test3 test4","lastModifiedDate":"2022-02-02"},{"lineNumber":19,"author":{"gitId":"warrencxw"},"content":"event test3 test4 /at test5 test6","lastModifiedDate":"2022-02-02"},{"lineNumber":20,"author":{"gitId":"warrencxw"},"content":"list","lastModifiedDate":"2022-02-02"},{"lineNumber":21,"author":{"gitId":"warrencxw"},"content":"mark 3","lastModifiedDate":"2022-02-02"},{"lineNumber":22,"author":{"gitId":"warrencxw"},"content":"mark 4","lastModifiedDate":"2022-02-02"},{"lineNumber":23,"author":{"gitId":"warrencxw"},"content":"mark 0","lastModifiedDate":"2022-02-02"},{"lineNumber":24,"author":{"gitId":"warrencxw"},"content":"event test3 /at test4 test5","lastModifiedDate":"2022-02-02"},{"lineNumber":25,"author":{"gitId":"warrencxw"},"content":"list","lastModifiedDate":"2022-02-02"},{"lineNumber":26,"author":{"gitId":"warrencxw"},"content":"mark 4","lastModifiedDate":"2022-02-02"},{"lineNumber":27,"author":{"gitId":"warrencxw"},"content":"mark apple","lastModifiedDate":"2022-02-02"},{"lineNumber":28,"author":{"gitId":"warrencxw"},"content":"event test7 /by test8","lastModifiedDate":"2022-02-02"},{"lineNumber":29,"author":{"gitId":"warrencxw"},"content":"list","lastModifiedDate":"2022-02-02"},{"lineNumber":30,"author":{"gitId":"warrencxw"},"content":"unmark 4","lastModifiedDate":"2022-02-02"},{"lineNumber":31,"author":{"gitId":"warrencxw"},"content":"unmark 0","lastModifiedDate":"2022-02-02"},{"lineNumber":32,"author":{"gitId":"warrencxw"},"content":"unmark apple","lastModifiedDate":"2022-02-02"},{"lineNumber":33,"author":{"gitId":"warrencxw"},"content":"list","lastModifiedDate":"2022-02-02"},{"lineNumber":34,"author":{"gitId":"warrencxw"},"content":"deadline test9 test10 /at test11","lastModifiedDate":"2022-02-02"},{"lineNumber":35,"author":{"gitId":"warrencxw"},"content":"deadline test9","lastModifiedDate":"2022-02-02"},{"lineNumber":36,"author":{"gitId":"warrencxw"},"content":"deadline test9 test10 /by test11 test12","lastModifiedDate":"2022-02-02"},{"lineNumber":37,"author":{"gitId":"warrencxw"},"content":"deadline test9 test10","lastModifiedDate":"2022-02-02"},{"lineNumber":38,"author":{"gitId":"warrencxw"},"content":"deadline test9 test10 /by test11","lastModifiedDate":"2022-02-02"},{"lineNumber":39,"author":{"gitId":"warrencxw"},"content":"deadline ","lastModifiedDate":"2022-02-06"},{"lineNumber":40,"author":{"gitId":"warrencxw"},"content":"deadline  ","lastModifiedDate":"2022-02-06"},{"lineNumber":41,"author":{"gitId":"warrencxw"},"content":"deadline /by","lastModifiedDate":"2022-02-06"},{"lineNumber":42,"author":{"gitId":"warrencxw"},"content":"deadline /by test12 test13","lastModifiedDate":"2022-02-06"},{"lineNumber":43,"author":{"gitId":"warrencxw"},"content":"deadline test12 by test13","lastModifiedDate":"2022-02-06"},{"lineNumber":44,"author":{"gitId":"warrencxw"},"content":"deadline test12 /by test13 /by test14","lastModifiedDate":"2022-02-06"},{"lineNumber":45,"author":{"gitId":"warrencxw"},"content":"list","lastModifiedDate":"2022-02-02"},{"lineNumber":46,"author":{"gitId":"warrencxw"},"content":"help","lastModifiedDate":"2022-02-02"},{"lineNumber":47,"author":{"gitId":"warrencxw"},"content":"? apple","lastModifiedDate":"2022-02-02"},{"lineNumber":48,"author":{"gitId":"warrencxw"},"content":"help test","lastModifiedDate":"2022-02-02"},{"lineNumber":49,"author":{"gitId":"warrencxw"},"content":"delete ","lastModifiedDate":"2022-02-21"},{"lineNumber":50,"author":{"gitId":"warrencxw"},"content":"delete 0","lastModifiedDate":"2022-02-13"},{"lineNumber":51,"author":{"gitId":"warrencxw"},"content":"delete 8","lastModifiedDate":"2022-02-13"},{"lineNumber":52,"author":{"gitId":"warrencxw"},"content":"delete apple","lastModifiedDate":"2022-02-13"},{"lineNumber":53,"author":{"gitId":"warrencxw"},"content":"delete 7","lastModifiedDate":"2022-02-13"},{"lineNumber":54,"author":{"gitId":"warrencxw"},"content":"list","lastModifiedDate":"2022-02-13"},{"lineNumber":55,"author":{"gitId":"warrencxw"},"content":"delete 3","lastModifiedDate":"2022-02-13"},{"lineNumber":56,"author":{"gitId":"warrencxw"},"content":"list","lastModifiedDate":"2022-02-13"},{"lineNumber":57,"author":{"gitId":"warrencxw"},"content":"mark 2","lastModifiedDate":"2022-02-16"},{"lineNumber":58,"author":{"gitId":"warrencxw"},"content":"list","lastModifiedDate":"2022-02-16"},{"lineNumber":59,"author":{"gitId":"warrencxw"},"content":"bye","lastModifiedDate":"2022-02-02"}],"authorContributionMap":{"warrencxw":59}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"warrencxw"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java ..\\src\\main\\java\\duke\\task\\*.java","lastModifiedDate":"2022-02-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"warrencxw"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2022-02-06"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"warrencxw"},"content":"FC data\\save.csv EXPECTED_SAVE.CSV","lastModifiedDate":"2022-02-16"}],"authorContributionMap":{"warrencxw":3,"-":19}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"warrencxw"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/duke/*.java ../src/main/java/duke/task/*.java","lastModifiedDate":"2022-02-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"warrencxw"},"content":"java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2022-02-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"warrencxw":2,"-":36}}]
