[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"glendonnotglen"},"content":"# Project Jarvis","lastModifiedDate":"2022-03-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"glendonnotglen"},"content":"Jarvis is a Personal Assistant Chat bot that helps manage tasks. User guide [here](https://glendonnotglen.github.io/ip/)","lastModifiedDate":"2022-03-03"},{"lineNumber":4,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":5,"author":{"gitId":"glendonnotglen"},"content":"This project was done as part of CS2113T Individual Project.","lastModifiedDate":"2022-03-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":14,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":18,"author":{"gitId":"glendonnotglen"},"content":"3. After that, locate the `src/main/java/jarvis/Jarvis.java` file, right-click it, and choose `Run Jarvis.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2022-03-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"glendonnotglen"},"content":"    _    _      _                          ","lastModifiedDate":"2022-03-03"},{"lineNumber":21,"author":{"gitId":"glendonnotglen"},"content":"   | |  | |    | |                         ","lastModifiedDate":"2022-03-03"},{"lineNumber":22,"author":{"gitId":"glendonnotglen"},"content":"   | |  | | ___| | ___ ___  _ __ ___   ___","lastModifiedDate":"2022-03-03"},{"lineNumber":23,"author":{"gitId":"glendonnotglen"},"content":"   | |/\\| |/ _ \\ |/ __/ _ \\| \u0027_ ` _ \\ / _ \\","lastModifiedDate":"2022-03-03"},{"lineNumber":24,"author":{"gitId":"glendonnotglen"},"content":"   \\  /\\  /  __/ | (_| (_) | | | | | |  __/","lastModifiedDate":"2022-03-03"},{"lineNumber":25,"author":{"gitId":"glendonnotglen"},"content":"   \\/  \\/ \\___|_|\\___\\___/|_| |_| |_|\\___","lastModifiedDate":"2022-03-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    _            ___                  _     ","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"glendonnotglen"},"content":"   | |          |_  |                (_)    ","lastModifiedDate":"2022-03-03"},{"lineNumber":28,"author":{"gitId":"glendonnotglen"},"content":"   | |_ ___       | | __ _ _ ____   ___ ___","lastModifiedDate":"2022-03-03"},{"lineNumber":29,"author":{"gitId":"glendonnotglen"},"content":"   | __/ _ \\      | |/ _` | \u0027__\\ \\ / / / __|","lastModifiedDate":"2022-03-03"},{"lineNumber":30,"author":{"gitId":"glendonnotglen"},"content":"   | || (_) | /\\__/ / (_| | |   \\ V /| \\__ \\","lastModifiedDate":"2022-03-03"},{"lineNumber":31,"author":{"gitId":"glendonnotglen"},"content":"   \\__\\___/  \\____/ \\__,_|_|    \\_/ |_|___/","lastModifiedDate":"2022-03-03"},{"lineNumber":32,"author":{"gitId":"glendonnotglen"},"content":"   ","lastModifiedDate":"2022-03-03"},{"lineNumber":33,"author":{"gitId":"glendonnotglen"},"content":"   \u003e ","lastModifiedDate":"2022-03-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"glendonnotglen":18,"-":16}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"glendonnotglen"},"content":"Jarvis is a Command-Line application for managing tasks, built for CS2113T Individual Project","lastModifiedDate":"2022-03-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"glendonnotglen"},"content":"## Quick Start","lastModifiedDate":"2022-03-03"},{"lineNumber":6,"author":{"gitId":"glendonnotglen"},"content":"1. Ensure you have `Java11` or above installed in your computer.","lastModifiedDate":"2022-03-03"},{"lineNumber":7,"author":{"gitId":"glendonnotglen"},"content":"2. Download the latest `Jarvis.jar` from [here](https://github.com/GlendonNotGlen/ip/releases/tag/A-UserGuide)","lastModifiedDate":"2022-03-03"},{"lineNumber":8,"author":{"gitId":"glendonnotglen"},"content":"3. Move the downloaded file to a folder of your choice","lastModifiedDate":"2022-03-03"},{"lineNumber":9,"author":{"gitId":"glendonnotglen"},"content":"4. Navigate a command-line application to the folder you have chosen","lastModifiedDate":"2022-03-03"},{"lineNumber":10,"author":{"gitId":"glendonnotglen"},"content":"5. Type `java -jar Jarvis.jar` to run the program. If successful, you should see the following message:","lastModifiedDate":"2022-03-03"},{"lineNumber":11,"author":{"gitId":"glendonnotglen"},"content":"![Welcome Message](./images/welcome.PNG)","lastModifiedDate":"2022-03-03"},{"lineNumber":12,"author":{"gitId":"glendonnotglen"},"content":"6. Enter commands on the command-line for the program to start managing your tasks!","lastModifiedDate":"2022-03-03"},{"lineNumber":13,"author":{"gitId":"glendonnotglen"},"content":"7. Refer to `Features` below for more information on each command","lastModifiedDate":"2022-03-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":15,"author":{"gitId":"glendonnotglen"},"content":"## Commands Summary","lastModifiedDate":"2022-03-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":17,"author":{"gitId":"glendonnotglen"},"content":"| Command  | Format, examples                                                                            |","lastModifiedDate":"2022-03-03"},{"lineNumber":18,"author":{"gitId":"glendonnotglen"},"content":"|----------|---------------------------------------------------------------------------------------------|","lastModifiedDate":"2022-03-03"},{"lineNumber":19,"author":{"gitId":"glendonnotglen"},"content":"| todo     | `todo \u003cdescription`\u003cbr/\u003e e.g todo submit assignment                                         |","lastModifiedDate":"2022-03-03"},{"lineNumber":20,"author":{"gitId":"glendonnotglen"},"content":"| event    | `event \u003cdescription\u003e /at DD/MM/YYYY HHMM`\u003cbr/\u003ee.g event attend lecture /at 04/03/2022 1600  |","lastModifiedDate":"2022-03-03"},{"lineNumber":21,"author":{"gitId":"glendonnotglen"},"content":"| deadline | `deadline \u003cdescription\u003e /by DD/MM/YYYY HHMM`\u003cbr/\u003ee.g deadline push code /by 03/03/2022 0000 |","lastModifiedDate":"2022-03-03"},{"lineNumber":22,"author":{"gitId":"glendonnotglen"},"content":"| list     | `list`                                                                                      | ","lastModifiedDate":"2022-03-03"},{"lineNumber":23,"author":{"gitId":"glendonnotglen"},"content":"| delete   | `delete \u003ctask index\u003e`\u003cbr/\u003ee.g delete 2\u003cbr/\u003eto remove second task on your list               |","lastModifiedDate":"2022-03-03"},{"lineNumber":24,"author":{"gitId":"glendonnotglen"},"content":"| mark     | `mark \u003ctask index\u003e`\u003cbr/\u003ee.g mark 1\u003cbr/\u003eto mark the first task on your list as done          |","lastModifiedDate":"2022-03-03"},{"lineNumber":25,"author":{"gitId":"glendonnotglen"},"content":"| unmark   | `unmark \u003ctask index\u003e`\u003cbr/\u003ee.g unmark 4\u003cbr/\u003eto unmark the fourth task on your list           |","lastModifiedDate":"2022-03-03"},{"lineNumber":26,"author":{"gitId":"glendonnotglen"},"content":"| find     | `find \u003ckeyword(s)\u003e`\u003cbr/\u003ee.g find lecture                                                    |","lastModifiedDate":"2022-03-03"},{"lineNumber":27,"author":{"gitId":"glendonnotglen"},"content":"| bye      | `bye`                                                                                       |","lastModifiedDate":"2022-03-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":" ","lastModifiedDate":"2021-07-17"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":30,"author":{"gitId":"glendonnotglen"},"content":"## Features \u003cbr\u003e","lastModifiedDate":"2022-03-03"},{"lineNumber":31,"author":{"gitId":"glendonnotglen"},"content":"The following are features of the Jarvis bot. Please ensure that the number and format of arguments given is accurate\u003cbr\u003e","lastModifiedDate":"2022-03-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":33,"author":{"gitId":"glendonnotglen"},"content":"### Add a Task to your list:`todo`\u003cbr\u003e","lastModifiedDate":"2022-03-03"},{"lineNumber":34,"author":{"gitId":"glendonnotglen"},"content":"Adds a task to your personal list. **One** task can only be added per command.\u003cbr\u003e","lastModifiedDate":"2022-03-03"},{"lineNumber":35,"author":{"gitId":"glendonnotglen"},"content":"Format:`todo \u003ctask\u003e` \u003cbr\u003e","lastModifiedDate":"2022-03-03"},{"lineNumber":36,"author":{"gitId":"glendonnotglen"},"content":"Example:`todo submit assignment`\u003cbr\u003e","lastModifiedDate":"2022-03-03"},{"lineNumber":37,"author":{"gitId":"glendonnotglen"},"content":"![todo screenshot](./images/todo.PNG)","lastModifiedDate":"2022-03-03"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":39,"author":{"gitId":"glendonnotglen"},"content":"### Add an Event to your list:`event` \u003cbr\u003e","lastModifiedDate":"2022-03-03"},{"lineNumber":40,"author":{"gitId":"glendonnotglen"},"content":"Adds an Event to your personal list. **One** event can only be added per command\u003cbr\u003e","lastModifiedDate":"2022-03-03"},{"lineNumber":41,"author":{"gitId":"glendonnotglen"},"content":"Note that the format of date and time has to follow as `DD/MM/YYYY` and `HHMM` exactly.\u003cbr\u003e","lastModifiedDate":"2022-03-03"},{"lineNumber":42,"author":{"gitId":"glendonnotglen"},"content":"The use of `/at` has to be included as well to separate your event\u0027s description from the date/time \u003cbr\u003e","lastModifiedDate":"2022-03-03"},{"lineNumber":43,"author":{"gitId":"glendonnotglen"},"content":"Format:`event \u003cevent description\u003e /at DD/MM/YYYY HHMM`\u003cbr\u003e","lastModifiedDate":"2022-03-03"},{"lineNumber":44,"author":{"gitId":"glendonnotglen"},"content":"For example: `event attend lecture /at 04/03/2022 1600`\u003cbr\u003e","lastModifiedDate":"2022-03-03"},{"lineNumber":45,"author":{"gitId":"glendonnotglen"},"content":"![event screenshot](./images/event.PNG)\u003cbr\u003e","lastModifiedDate":"2022-03-03"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":47,"author":{"gitId":"glendonnotglen"},"content":"### Add a Deadline to your list:`deadline` \u003cbr\u003e","lastModifiedDate":"2022-03-03"},{"lineNumber":48,"author":{"gitId":"glendonnotglen"},"content":"Adds a Deadline to your personal list. **One** deadline can only be added per command\u003cbr\u003e","lastModifiedDate":"2022-03-03"},{"lineNumber":49,"author":{"gitId":"glendonnotglen"},"content":"Note that the format of date and time has to follow as `DD/MM/YYYY` and `HHMM` exactly.\u003cbr\u003e","lastModifiedDate":"2022-03-03"},{"lineNumber":50,"author":{"gitId":"glendonnotglen"},"content":"The use of `/by` has to be included as well to separate your deadline\u0027s description from the date/time\u003cbr\u003e","lastModifiedDate":"2022-03-03"},{"lineNumber":51,"author":{"gitId":"glendonnotglen"},"content":"Format:`deadline \u003cdeadline description\u003e /by DD/MM/YYYY HHMM`\u003cbr\u003e","lastModifiedDate":"2022-03-03"},{"lineNumber":52,"author":{"gitId":"glendonnotglen"},"content":"For example: `deadline push code /by 03/03/2022 0000`\u003cbr\u003e","lastModifiedDate":"2022-03-03"},{"lineNumber":53,"author":{"gitId":"glendonnotglen"},"content":"![deadline screenshot](./images/deadline.PNG)\u003cbr\u003e","lastModifiedDate":"2022-03-03"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":55,"author":{"gitId":"glendonnotglen"},"content":"### Printing all current tasks/events/deadlines:`list`\u003cbr\u003e","lastModifiedDate":"2022-03-03"},{"lineNumber":56,"author":{"gitId":"glendonnotglen"},"content":"Shows a list of all current tasks, events and deadlines in your list.\u003cbr\u003e","lastModifiedDate":"2022-03-03"},{"lineNumber":57,"author":{"gitId":"glendonnotglen"},"content":"Format:`list`\u003cbr\u003e","lastModifiedDate":"2022-03-03"},{"lineNumber":58,"author":{"gitId":"glendonnotglen"},"content":"![list screenshot](./images/list.PNG)\u003cbr\u003e","lastModifiedDate":"2022-03-03"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":60,"author":{"gitId":"glendonnotglen"},"content":"### Delete a task/event/deadline from your list:`delete`\u003cbr\u003e","lastModifiedDate":"2022-03-03"},{"lineNumber":61,"author":{"gitId":"glendonnotglen"},"content":"Delete a specified task/event/deadline from your list using its index.\u003cbr\u003e","lastModifiedDate":"2022-03-03"},{"lineNumber":62,"author":{"gitId":"glendonnotglen"},"content":"Use the `list` command to display the indices of your list.\u003cbr\u003e","lastModifiedDate":"2022-03-03"},{"lineNumber":63,"author":{"gitId":"glendonnotglen"},"content":"Format:`delete \u003cindex\u003e`\u003cbr\u003e","lastModifiedDate":"2022-03-03"},{"lineNumber":64,"author":{"gitId":"glendonnotglen"},"content":"![delete screenshot](./images/delete.PNG)\u003cbr\u003e","lastModifiedDate":"2022-03-03"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":66,"author":{"gitId":"glendonnotglen"},"content":"### Mark a task/event/deadline:`mark`\u003cbr\u003e","lastModifiedDate":"2022-03-03"},{"lineNumber":67,"author":{"gitId":"glendonnotglen"},"content":"Mark a task/event/deadline in your list as completed. You can only mark unmarked tasks, or a warning message will appear.\u003cbr\u003e","lastModifiedDate":"2022-03-03"},{"lineNumber":68,"author":{"gitId":"glendonnotglen"},"content":"Use the `list` command to display the indices of your list.\u003cbr\u003e","lastModifiedDate":"2022-03-03"},{"lineNumber":69,"author":{"gitId":"glendonnotglen"},"content":"Format:`mark \u003cindex\u003e`\u003cbr\u003e","lastModifiedDate":"2022-03-03"},{"lineNumber":70,"author":{"gitId":"glendonnotglen"},"content":"![mark screenshot](./images/mark.PNG)\u003cbr\u003e","lastModifiedDate":"2022-03-03"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":72,"author":{"gitId":"glendonnotglen"},"content":"### Unmark a task/event/deadline:`unmark`\u003cbr\u003e","lastModifiedDate":"2022-03-03"},{"lineNumber":73,"author":{"gitId":"glendonnotglen"},"content":"Unmark a task/event/deadline in your list. You can only unmark marked tasks, or a warning message will appear.\u003cbr\u003e","lastModifiedDate":"2022-03-03"},{"lineNumber":74,"author":{"gitId":"glendonnotglen"},"content":"Use the `list` command to display the indices of your list.\u003cbr\u003e","lastModifiedDate":"2022-03-03"},{"lineNumber":75,"author":{"gitId":"glendonnotglen"},"content":"Format:`unmark \u003cindex\u003e`\u003cbr\u003e","lastModifiedDate":"2022-03-03"},{"lineNumber":76,"author":{"gitId":"glendonnotglen"},"content":"![unmark screenshot](./images/unmark.PNG)\u003cbr\u003e","lastModifiedDate":"2022-03-03"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":78,"author":{"gitId":"glendonnotglen"},"content":"### Finding a task:`find`\u003cbr\u003e","lastModifiedDate":"2022-03-03"},{"lineNumber":79,"author":{"gitId":"glendonnotglen"},"content":"Finds a task/event/deadline description using the keyword(s) provided.\u003cbr\u003e","lastModifiedDate":"2022-03-03"},{"lineNumber":80,"author":{"gitId":"glendonnotglen"},"content":"Format:`find \u003ckeyword\u003e`\u003cbr\u003e","lastModifiedDate":"2022-03-03"},{"lineNumber":81,"author":{"gitId":"glendonnotglen"},"content":"Example:`find code`\u003cbr\u003e","lastModifiedDate":"2022-03-03"},{"lineNumber":82,"author":{"gitId":"glendonnotglen"},"content":"![find screenshot](./images/find.PNG)\u003cbr\u003e","lastModifiedDate":"2022-03-03"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":84,"author":{"gitId":"glendonnotglen"},"content":"### Saving your data\u003cbr\u003e","lastModifiedDate":"2022-03-03"},{"lineNumber":85,"author":{"gitId":"glendonnotglen"},"content":"Saving your current list is automated only at the end when you use the `bye` command.\u003cbr\u003e","lastModifiedDate":"2022-03-03"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":87,"author":{"gitId":"glendonnotglen"},"content":"### Exiting the program:`bye`\u003cbr\u003e","lastModifiedDate":"2022-03-03"},{"lineNumber":88,"author":{"gitId":"glendonnotglen"},"content":"Saves your current list data inside a data folder and terminates the program.\u003cbr\u003e","lastModifiedDate":"2022-03-03"},{"lineNumber":89,"author":{"gitId":"glendonnotglen"},"content":"Format:`bye`\u003cbr\u003e","lastModifiedDate":"2022-03-03"},{"lineNumber":90,"author":{"gitId":"glendonnotglen"},"content":"![bye screenshot](./images/bye.PNG)\u003cbr\u003e","lastModifiedDate":"2022-03-03"}],"authorContributionMap":{"glendonnotglen":73,"-":17}},{"path":"src/main/java/jarvis/Jarvis.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glendonnotglen"},"content":"package jarvis;","lastModifiedDate":"2022-02-09"},{"lineNumber":2,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":3,"author":{"gitId":"glendonnotglen"},"content":"import jarvis.display.Ui;","lastModifiedDate":"2022-03-02"},{"lineNumber":4,"author":{"gitId":"glendonnotglen"},"content":"import jarvis.load.Storage;","lastModifiedDate":"2022-03-01"},{"lineNumber":5,"author":{"gitId":"glendonnotglen"},"content":"import jarvis.exceptions.JarvisNoSavedData;","lastModifiedDate":"2022-03-01"},{"lineNumber":6,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":7,"author":{"gitId":"glendonnotglen"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-01-28"},{"lineNumber":8,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":9,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":10,"author":{"gitId":"glendonnotglen"},"content":"public class Jarvis {","lastModifiedDate":"2022-02-04"},{"lineNumber":11,"author":{"gitId":"glendonnotglen"},"content":"    private static Storage storage;","lastModifiedDate":"2022-03-01"},{"lineNumber":12,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":13,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":14,"author":{"gitId":"glendonnotglen"},"content":"     * Main driver function of the Jarvis bot","lastModifiedDate":"2022-03-02"},{"lineNumber":15,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":16,"author":{"gitId":"glendonnotglen"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2022-01-28"},{"lineNumber":17,"author":{"gitId":"glendonnotglen"},"content":"        Ui.startingMessage();","lastModifiedDate":"2022-03-02"},{"lineNumber":18,"author":{"gitId":"glendonnotglen"},"content":"        storage \u003d new Storage();","lastModifiedDate":"2022-03-01"},{"lineNumber":19,"author":{"gitId":"glendonnotglen"},"content":"        try {","lastModifiedDate":"2022-03-01"},{"lineNumber":20,"author":{"gitId":"glendonnotglen"},"content":"            storage.load();","lastModifiedDate":"2022-03-01"},{"lineNumber":21,"author":{"gitId":"glendonnotglen"},"content":"        } catch (JarvisNoSavedData e) {","lastModifiedDate":"2022-03-01"},{"lineNumber":22,"author":{"gitId":"glendonnotglen"},"content":"            Ui.noFileDetected();","lastModifiedDate":"2022-03-02"},{"lineNumber":23,"author":{"gitId":"glendonnotglen"},"content":"        } finally {","lastModifiedDate":"2022-03-01"},{"lineNumber":24,"author":{"gitId":"glendonnotglen"},"content":"            Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2022-02-04"},{"lineNumber":25,"author":{"gitId":"glendonnotglen"},"content":"            while (true) {","lastModifiedDate":"2022-01-28"},{"lineNumber":26,"author":{"gitId":"glendonnotglen"},"content":"                Parser.inputHandler(in);","lastModifiedDate":"2022-03-02"},{"lineNumber":27,"author":{"gitId":"glendonnotglen"},"content":"            }","lastModifiedDate":"2022-01-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2019-07-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":30,"author":{"gitId":"glendonnotglen"},"content":"}","lastModifiedDate":"2022-03-01"}],"authorContributionMap":{"glendonnotglen":28,"-":2}},{"path":"src/main/java/jarvis/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glendonnotglen"},"content":"package jarvis;","lastModifiedDate":"2022-02-09"},{"lineNumber":2,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":3,"author":{"gitId":"glendonnotglen"},"content":"import jarvis.commands.Deadline;","lastModifiedDate":"2022-02-09"},{"lineNumber":4,"author":{"gitId":"glendonnotglen"},"content":"import jarvis.commands.Event;","lastModifiedDate":"2022-02-09"},{"lineNumber":5,"author":{"gitId":"glendonnotglen"},"content":"import jarvis.commands.Task;","lastModifiedDate":"2022-02-09"},{"lineNumber":6,"author":{"gitId":"glendonnotglen"},"content":"import jarvis.commands.TaskList;","lastModifiedDate":"2022-03-02"},{"lineNumber":7,"author":{"gitId":"glendonnotglen"},"content":"import jarvis.display.Ui;","lastModifiedDate":"2022-03-02"},{"lineNumber":8,"author":{"gitId":"glendonnotglen"},"content":"import jarvis.exceptions.JarvisInvalidInput;","lastModifiedDate":"2022-03-01"},{"lineNumber":9,"author":{"gitId":"glendonnotglen"},"content":"import jarvis.exceptions.JarvisOutOfBounds;","lastModifiedDate":"2022-03-01"},{"lineNumber":10,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":11,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":12,"author":{"gitId":"glendonnotglen"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-03-02"},{"lineNumber":13,"author":{"gitId":"glendonnotglen"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-02-01"},{"lineNumber":14,"author":{"gitId":"glendonnotglen"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-02-01"},{"lineNumber":15,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":16,"author":{"gitId":"glendonnotglen"},"content":"public class Parser {","lastModifiedDate":"2022-03-02"},{"lineNumber":17,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":18,"author":{"gitId":"glendonnotglen"},"content":"     *  This function selects a range of elements in the given inputLine argument, and returns the element joined in","lastModifiedDate":"2022-03-02"},{"lineNumber":19,"author":{"gitId":"glendonnotglen"},"content":"     *  a single String. This is used for handling user inputs","lastModifiedDate":"2022-03-02"},{"lineNumber":20,"author":{"gitId":"glendonnotglen"},"content":"     *","lastModifiedDate":"2022-03-02"},{"lineNumber":21,"author":{"gitId":"glendonnotglen"},"content":"     * @param inputLine String array of given input by user","lastModifiedDate":"2022-03-02"},{"lineNumber":22,"author":{"gitId":"glendonnotglen"},"content":"     * @param startIndex The starting index of which element(s) to include, inclusive of","lastModifiedDate":"2022-03-02"},{"lineNumber":23,"author":{"gitId":"glendonnotglen"},"content":"     * @param endIndex The terminating index of which element to include, not inclusive of","lastModifiedDate":"2022-03-02"},{"lineNumber":24,"author":{"gitId":"glendonnotglen"},"content":"     * @return Specified Elements of inputLine[], combined into a String","lastModifiedDate":"2022-03-02"},{"lineNumber":25,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":26,"author":{"gitId":"glendonnotglen"},"content":"    public static String parseUserInput(String[] inputLine, int startIndex, int endIndex) {","lastModifiedDate":"2022-02-01"},{"lineNumber":27,"author":{"gitId":"glendonnotglen"},"content":"        String[] updatedArray \u003d Arrays.copyOfRange(inputLine, startIndex, endIndex);","lastModifiedDate":"2022-02-01"},{"lineNumber":28,"author":{"gitId":"glendonnotglen"},"content":"        return String.join(\" \", updatedArray);","lastModifiedDate":"2022-02-01"},{"lineNumber":29,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":30,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":31,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":32,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":33,"author":{"gitId":"glendonnotglen"},"content":"     * This function searches a keyword in the user given command and returns the index of the keyword.","lastModifiedDate":"2022-03-02"},{"lineNumber":34,"author":{"gitId":"glendonnotglen"},"content":"     * Used to find \u0027/at\u0027 and \u0027/by\u0027 for Events and Deadlines.","lastModifiedDate":"2022-03-02"},{"lineNumber":35,"author":{"gitId":"glendonnotglen"},"content":"     *","lastModifiedDate":"2022-03-02"},{"lineNumber":36,"author":{"gitId":"glendonnotglen"},"content":"     * @param userInput String array of user input","lastModifiedDate":"2022-03-02"},{"lineNumber":37,"author":{"gitId":"glendonnotglen"},"content":"     * @param toFind Keyword to find, either \u0027/at\u0027 or \u0027/by\u0027","lastModifiedDate":"2022-03-02"},{"lineNumber":38,"author":{"gitId":"glendonnotglen"},"content":"     * @return an integer representing the index of the keyword. Returns -1 if not present.","lastModifiedDate":"2022-03-02"},{"lineNumber":39,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":40,"author":{"gitId":"glendonnotglen"},"content":"    public static int indexOf(String[] userInput, String toFind) {","lastModifiedDate":"2022-02-01"},{"lineNumber":41,"author":{"gitId":"glendonnotglen"},"content":"        if (userInput \u003d\u003d null) {","lastModifiedDate":"2022-02-01"},{"lineNumber":42,"author":{"gitId":"glendonnotglen"},"content":"            return -1;","lastModifiedDate":"2022-02-01"},{"lineNumber":43,"author":{"gitId":"glendonnotglen"},"content":"        }","lastModifiedDate":"2022-02-01"},{"lineNumber":44,"author":{"gitId":"glendonnotglen"},"content":"        for (int i \u003d 0; i \u003c userInput.length; i++) {","lastModifiedDate":"2022-02-01"},{"lineNumber":45,"author":{"gitId":"glendonnotglen"},"content":"            if (userInput[i].equals(toFind)) {","lastModifiedDate":"2022-02-01"},{"lineNumber":46,"author":{"gitId":"glendonnotglen"},"content":"                return i;","lastModifiedDate":"2022-02-01"},{"lineNumber":47,"author":{"gitId":"glendonnotglen"},"content":"            }","lastModifiedDate":"2022-02-01"},{"lineNumber":48,"author":{"gitId":"glendonnotglen"},"content":"        }","lastModifiedDate":"2022-02-01"},{"lineNumber":49,"author":{"gitId":"glendonnotglen"},"content":"        return -1;","lastModifiedDate":"2022-02-01"},{"lineNumber":50,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":51,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":52,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-02-04"},{"lineNumber":53,"author":{"gitId":"glendonnotglen"},"content":"     * Returns index of task specified by user.","lastModifiedDate":"2022-03-02"},{"lineNumber":54,"author":{"gitId":"glendonnotglen"},"content":"     * Returns -1 if the index is invalid or out of range.","lastModifiedDate":"2022-03-02"},{"lineNumber":55,"author":{"gitId":"glendonnotglen"},"content":"     * Function is used for \u0027mark\u0027 and \u0027unmark\u0027 commands","lastModifiedDate":"2022-03-02"},{"lineNumber":56,"author":{"gitId":"glendonnotglen"},"content":"     *","lastModifiedDate":"2022-02-04"},{"lineNumber":57,"author":{"gitId":"glendonnotglen"},"content":"     * @param userCommand String array of userCommand","lastModifiedDate":"2022-02-04"},{"lineNumber":58,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-02-04"},{"lineNumber":59,"author":{"gitId":"glendonnotglen"},"content":"    public static int getTaskIndex(String[] userCommand) {","lastModifiedDate":"2022-02-04"},{"lineNumber":60,"author":{"gitId":"glendonnotglen"},"content":"        int taskIndex \u003d Integer.parseInt(userCommand[1]) - 1;","lastModifiedDate":"2022-02-04"},{"lineNumber":61,"author":{"gitId":"glendonnotglen"},"content":"        if (taskIndex \u003e\u003d TaskList.getListSize()) {","lastModifiedDate":"2022-03-02"},{"lineNumber":62,"author":{"gitId":"glendonnotglen"},"content":"            return -1;","lastModifiedDate":"2022-02-04"},{"lineNumber":63,"author":{"gitId":"glendonnotglen"},"content":"        }","lastModifiedDate":"2022-02-04"},{"lineNumber":64,"author":{"gitId":"glendonnotglen"},"content":"        return taskIndex;","lastModifiedDate":"2022-02-04"},{"lineNumber":65,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-02-04"},{"lineNumber":66,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":67,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":68,"author":{"gitId":"glendonnotglen"},"content":"     * Function to implement SLAP methodology, checks if index is valid and returns True if it is. False otherwise.","lastModifiedDate":"2022-03-02"},{"lineNumber":69,"author":{"gitId":"glendonnotglen"},"content":"     *","lastModifiedDate":"2022-03-02"},{"lineNumber":70,"author":{"gitId":"glendonnotglen"},"content":"     * @param index index to be checked","lastModifiedDate":"2022-03-02"},{"lineNumber":71,"author":{"gitId":"glendonnotglen"},"content":"     * @return A boolean to indicate if index is valid","lastModifiedDate":"2022-03-02"},{"lineNumber":72,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":73,"author":{"gitId":"glendonnotglen"},"content":"    protected static boolean isValidIndex(int index) {","lastModifiedDate":"2022-02-09"},{"lineNumber":74,"author":{"gitId":"glendonnotglen"},"content":"        return index !\u003d -1;","lastModifiedDate":"2022-02-04"},{"lineNumber":75,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-02-04"},{"lineNumber":76,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":77,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":78,"author":{"gitId":"glendonnotglen"},"content":"     * Function to implement SLAP methodology, checks if numOfArgs is valid and returns True if it is. False otherwise.","lastModifiedDate":"2022-03-02"},{"lineNumber":79,"author":{"gitId":"glendonnotglen"},"content":"     *","lastModifiedDate":"2022-03-02"},{"lineNumber":80,"author":{"gitId":"glendonnotglen"},"content":"     * @param numOfArgs number of arguments to be checked","lastModifiedDate":"2022-03-02"},{"lineNumber":81,"author":{"gitId":"glendonnotglen"},"content":"     * @return A boolean to indicate if the number of arguments is valid","lastModifiedDate":"2022-03-02"},{"lineNumber":82,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":83,"author":{"gitId":"glendonnotglen"},"content":"    protected static boolean isValidCommand(int numOfArgs) {","lastModifiedDate":"2022-02-09"},{"lineNumber":84,"author":{"gitId":"glendonnotglen"},"content":"        return numOfArgs \u003e 1;","lastModifiedDate":"2022-02-09"},{"lineNumber":85,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-02-09"},{"lineNumber":86,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":87,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":88,"author":{"gitId":"glendonnotglen"},"content":"     * Function is the main driver for the \u0027mark\u0027 command. Retrieves index specified by user and marks it through","lastModifiedDate":"2022-03-02"},{"lineNumber":89,"author":{"gitId":"glendonnotglen"},"content":"     * the UserList.markTask(...) method.","lastModifiedDate":"2022-03-02"},{"lineNumber":90,"author":{"gitId":"glendonnotglen"},"content":"     *","lastModifiedDate":"2022-03-02"},{"lineNumber":91,"author":{"gitId":"glendonnotglen"},"content":"     * @param userCommand String array of the line of user input","lastModifiedDate":"2022-03-02"},{"lineNumber":92,"author":{"gitId":"glendonnotglen"},"content":"     * @throws JarvisOutOfBounds an exception the index specified is not valid given the user\u0027s current list","lastModifiedDate":"2022-03-02"},{"lineNumber":93,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":94,"author":{"gitId":"glendonnotglen"},"content":"    protected static void markCommand(String[] userCommand) throws JarvisOutOfBounds {","lastModifiedDate":"2022-03-01"},{"lineNumber":95,"author":{"gitId":"glendonnotglen"},"content":"        int taskIndex \u003d getTaskIndex(userCommand);","lastModifiedDate":"2022-02-09"},{"lineNumber":96,"author":{"gitId":"glendonnotglen"},"content":"        if (isValidIndex(taskIndex)) {","lastModifiedDate":"2022-02-09"},{"lineNumber":97,"author":{"gitId":"glendonnotglen"},"content":"            TaskList.markTask(taskIndex, true);","lastModifiedDate":"2022-03-02"},{"lineNumber":98,"author":{"gitId":"glendonnotglen"},"content":"        } else {","lastModifiedDate":"2022-02-09"},{"lineNumber":99,"author":{"gitId":"glendonnotglen"},"content":"            throw new JarvisOutOfBounds();","lastModifiedDate":"2022-03-01"},{"lineNumber":100,"author":{"gitId":"glendonnotglen"},"content":"        }","lastModifiedDate":"2022-02-09"},{"lineNumber":101,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-02-09"},{"lineNumber":102,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":103,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":104,"author":{"gitId":"glendonnotglen"},"content":"     * Function is the main driver for the \u0027unmark\u0027 command. Retrieves index specified by user and marks it through","lastModifiedDate":"2022-03-02"},{"lineNumber":105,"author":{"gitId":"glendonnotglen"},"content":"     * the UserList.unmarkTask(...) method.","lastModifiedDate":"2022-03-02"},{"lineNumber":106,"author":{"gitId":"glendonnotglen"},"content":"     *","lastModifiedDate":"2022-03-02"},{"lineNumber":107,"author":{"gitId":"glendonnotglen"},"content":"     * @param userCommand String array of the line of user input","lastModifiedDate":"2022-03-02"},{"lineNumber":108,"author":{"gitId":"glendonnotglen"},"content":"     * @throws JarvisOutOfBounds an exception the index specified is not valid given the user\u0027s current list","lastModifiedDate":"2022-03-02"},{"lineNumber":109,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":110,"author":{"gitId":"glendonnotglen"},"content":"    protected static void unmarkCommand(String[] userCommand) throws JarvisOutOfBounds {","lastModifiedDate":"2022-03-01"},{"lineNumber":111,"author":{"gitId":"glendonnotglen"},"content":"        int taskIndex \u003d getTaskIndex(userCommand);","lastModifiedDate":"2022-02-09"},{"lineNumber":112,"author":{"gitId":"glendonnotglen"},"content":"        if (isValidIndex(taskIndex)) {","lastModifiedDate":"2022-02-09"},{"lineNumber":113,"author":{"gitId":"glendonnotglen"},"content":"            TaskList.unmarkTask(taskIndex);","lastModifiedDate":"2022-03-02"},{"lineNumber":114,"author":{"gitId":"glendonnotglen"},"content":"        } else {","lastModifiedDate":"2022-02-09"},{"lineNumber":115,"author":{"gitId":"glendonnotglen"},"content":"            throw new JarvisOutOfBounds();","lastModifiedDate":"2022-03-01"},{"lineNumber":116,"author":{"gitId":"glendonnotglen"},"content":"        }","lastModifiedDate":"2022-02-09"},{"lineNumber":117,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-02-09"},{"lineNumber":118,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":119,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":120,"author":{"gitId":"glendonnotglen"},"content":"     * Main driver function for adding a Task to the user\u0027s list. Throws an exception if the user given input is not","lastModifiedDate":"2022-03-02"},{"lineNumber":121,"author":{"gitId":"glendonnotglen"},"content":"     * valid.","lastModifiedDate":"2022-03-02"},{"lineNumber":122,"author":{"gitId":"glendonnotglen"},"content":"     *","lastModifiedDate":"2022-03-02"},{"lineNumber":123,"author":{"gitId":"glendonnotglen"},"content":"     * @param userCommand String array of the line of user input","lastModifiedDate":"2022-03-02"},{"lineNumber":124,"author":{"gitId":"glendonnotglen"},"content":"     * @throws JarvisInvalidInput exception to indicate that user\u0027s given input is not valid","lastModifiedDate":"2022-03-02"},{"lineNumber":125,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":126,"author":{"gitId":"glendonnotglen"},"content":"    protected static void todoCommand(String[] userCommand) throws JarvisInvalidInput {","lastModifiedDate":"2022-03-01"},{"lineNumber":127,"author":{"gitId":"glendonnotglen"},"content":"        int numOfArgs \u003d userCommand.length;","lastModifiedDate":"2022-02-09"},{"lineNumber":128,"author":{"gitId":"glendonnotglen"},"content":"        if (isValidCommand(numOfArgs)) {","lastModifiedDate":"2022-02-09"},{"lineNumber":129,"author":{"gitId":"glendonnotglen"},"content":"            String taskDescription \u003d parseUserInput(userCommand, 1, numOfArgs);","lastModifiedDate":"2022-02-09"},{"lineNumber":130,"author":{"gitId":"glendonnotglen"},"content":"            Task newTask \u003d new Task(taskDescription);","lastModifiedDate":"2022-02-09"},{"lineNumber":131,"author":{"gitId":"glendonnotglen"},"content":"            TaskList.insertTask(newTask);","lastModifiedDate":"2022-03-02"},{"lineNumber":132,"author":{"gitId":"glendonnotglen"},"content":"        } else {","lastModifiedDate":"2022-02-09"},{"lineNumber":133,"author":{"gitId":"glendonnotglen"},"content":"           throw new JarvisInvalidInput();","lastModifiedDate":"2022-03-01"},{"lineNumber":134,"author":{"gitId":"glendonnotglen"},"content":"        }","lastModifiedDate":"2022-02-09"},{"lineNumber":135,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-02-09"},{"lineNumber":136,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":137,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":138,"author":{"gitId":"glendonnotglen"},"content":"     * Main driver function for adding a Deadline to the user\u0027s list. Throws an exception if the user given input is not","lastModifiedDate":"2022-03-02"},{"lineNumber":139,"author":{"gitId":"glendonnotglen"},"content":"     * valid.","lastModifiedDate":"2022-03-02"},{"lineNumber":140,"author":{"gitId":"glendonnotglen"},"content":"     *","lastModifiedDate":"2022-03-02"},{"lineNumber":141,"author":{"gitId":"glendonnotglen"},"content":"     * @param userCommand String array of the line of user input","lastModifiedDate":"2022-03-02"},{"lineNumber":142,"author":{"gitId":"glendonnotglen"},"content":"     * @throws JarvisInvalidInput exception to indicate that user\u0027s given input is not valid","lastModifiedDate":"2022-03-02"},{"lineNumber":143,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":144,"author":{"gitId":"glendonnotglen"},"content":"    protected static void deadlineCommand(String[] userCommand) throws JarvisInvalidInput {","lastModifiedDate":"2022-03-01"},{"lineNumber":145,"author":{"gitId":"glendonnotglen"},"content":"        int indexOfBy \u003d indexOf(userCommand, \"/by\");","lastModifiedDate":"2022-02-09"},{"lineNumber":146,"author":{"gitId":"glendonnotglen"},"content":"        int numOfArgs \u003d userCommand.length;","lastModifiedDate":"2022-02-09"},{"lineNumber":147,"author":{"gitId":"glendonnotglen"},"content":"        boolean isValidIndex \u003d indexOfBy \u003e 1;","lastModifiedDate":"2022-02-09"},{"lineNumber":148,"author":{"gitId":"glendonnotglen"},"content":"        boolean hasSufficientArgs \u003d numOfArgs \u003e\u003d 4;","lastModifiedDate":"2022-02-09"},{"lineNumber":149,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":150,"author":{"gitId":"glendonnotglen"},"content":"        if (isValidIndex \u0026\u0026 hasSufficientArgs) {","lastModifiedDate":"2022-02-09"},{"lineNumber":151,"author":{"gitId":"glendonnotglen"},"content":"            String deadlineDescription \u003d parseUserInput(userCommand, 1, indexOfBy);","lastModifiedDate":"2022-02-09"},{"lineNumber":152,"author":{"gitId":"glendonnotglen"},"content":"            String deadlineDate \u003d userCommand[indexOfBy + 1];","lastModifiedDate":"2022-03-02"},{"lineNumber":153,"author":{"gitId":"glendonnotglen"},"content":"            String deadlineTime \u003d userCommand[indexOfBy + 2];","lastModifiedDate":"2022-03-02"},{"lineNumber":154,"author":{"gitId":"glendonnotglen"},"content":"            Deadline newDeadline \u003d new Deadline(deadlineDescription, deadlineDate, deadlineTime);","lastModifiedDate":"2022-03-02"},{"lineNumber":155,"author":{"gitId":"glendonnotglen"},"content":"            if (newDeadline.getDeadlineDate() !\u003d \"\") {","lastModifiedDate":"2022-03-02"},{"lineNumber":156,"author":{"gitId":"glendonnotglen"},"content":"                TaskList.insertTask(newDeadline);","lastModifiedDate":"2022-03-02"},{"lineNumber":157,"author":{"gitId":"glendonnotglen"},"content":"            }","lastModifiedDate":"2022-03-02"},{"lineNumber":158,"author":{"gitId":"glendonnotglen"},"content":"        } else {","lastModifiedDate":"2022-02-09"},{"lineNumber":159,"author":{"gitId":"glendonnotglen"},"content":"            throw new JarvisInvalidInput();","lastModifiedDate":"2022-03-01"},{"lineNumber":160,"author":{"gitId":"glendonnotglen"},"content":"        }","lastModifiedDate":"2022-02-09"},{"lineNumber":161,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-02-09"},{"lineNumber":162,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":163,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":164,"author":{"gitId":"glendonnotglen"},"content":"     * Main driver function for adding an Event to the user\u0027s list. Throws an exception if the user given input is not","lastModifiedDate":"2022-03-02"},{"lineNumber":165,"author":{"gitId":"glendonnotglen"},"content":"     * valid","lastModifiedDate":"2022-03-02"},{"lineNumber":166,"author":{"gitId":"glendonnotglen"},"content":"     *","lastModifiedDate":"2022-03-02"},{"lineNumber":167,"author":{"gitId":"glendonnotglen"},"content":"     * @param userCommand String array of the line of user input","lastModifiedDate":"2022-03-02"},{"lineNumber":168,"author":{"gitId":"glendonnotglen"},"content":"     * @throws JarvisInvalidInput exception to indicate that user\u0027s given input is not valid","lastModifiedDate":"2022-03-02"},{"lineNumber":169,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":170,"author":{"gitId":"glendonnotglen"},"content":"    protected static void eventCommand(String[] userCommand) throws JarvisInvalidInput {","lastModifiedDate":"2022-03-01"},{"lineNumber":171,"author":{"gitId":"glendonnotglen"},"content":"        int indexOfAt \u003d indexOf(userCommand, \"/at\");","lastModifiedDate":"2022-02-09"},{"lineNumber":172,"author":{"gitId":"glendonnotglen"},"content":"        int numOfArgs \u003d userCommand.length;","lastModifiedDate":"2022-02-09"},{"lineNumber":173,"author":{"gitId":"glendonnotglen"},"content":"        boolean isValidIndex \u003d indexOfAt \u003e 1;","lastModifiedDate":"2022-02-09"},{"lineNumber":174,"author":{"gitId":"glendonnotglen"},"content":"        boolean hasSufficientArgs \u003d numOfArgs \u003e\u003d 5;","lastModifiedDate":"2022-03-02"},{"lineNumber":175,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":176,"author":{"gitId":"glendonnotglen"},"content":"        if (isValidIndex \u0026\u0026 hasSufficientArgs) {","lastModifiedDate":"2022-02-09"},{"lineNumber":177,"author":{"gitId":"glendonnotglen"},"content":"            String eventDescription \u003d parseUserInput(userCommand, 1, indexOfAt);","lastModifiedDate":"2022-02-09"},{"lineNumber":178,"author":{"gitId":"glendonnotglen"},"content":"            String eventDay \u003d userCommand[indexOfAt + 1];","lastModifiedDate":"2022-03-02"},{"lineNumber":179,"author":{"gitId":"glendonnotglen"},"content":"            String eventTime \u003d userCommand[indexOfAt + 2];","lastModifiedDate":"2022-03-02"},{"lineNumber":180,"author":{"gitId":"glendonnotglen"},"content":"            Event newEvent \u003d new Event(eventDescription, eventDay, eventTime);","lastModifiedDate":"2022-03-02"},{"lineNumber":181,"author":{"gitId":"glendonnotglen"},"content":"            if (newEvent.getEventDate() !\u003d \"\") {","lastModifiedDate":"2022-03-02"},{"lineNumber":182,"author":{"gitId":"glendonnotglen"},"content":"                TaskList.insertTask(newEvent);","lastModifiedDate":"2022-03-02"},{"lineNumber":183,"author":{"gitId":"glendonnotglen"},"content":"            }","lastModifiedDate":"2022-03-02"},{"lineNumber":184,"author":{"gitId":"glendonnotglen"},"content":"        } else {","lastModifiedDate":"2022-02-09"},{"lineNumber":185,"author":{"gitId":"glendonnotglen"},"content":"            throw new JarvisInvalidInput();","lastModifiedDate":"2022-03-01"},{"lineNumber":186,"author":{"gitId":"glendonnotglen"},"content":"        }","lastModifiedDate":"2022-02-09"},{"lineNumber":187,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-02-09"},{"lineNumber":188,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":189,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":190,"author":{"gitId":"glendonnotglen"},"content":"     * Main driver function for removing a Task from user\u0027s list. Throws an exception if the user specified index is not","lastModifiedDate":"2022-03-02"},{"lineNumber":191,"author":{"gitId":"glendonnotglen"},"content":"     * valid","lastModifiedDate":"2022-03-02"},{"lineNumber":192,"author":{"gitId":"glendonnotglen"},"content":"     *","lastModifiedDate":"2022-03-02"},{"lineNumber":193,"author":{"gitId":"glendonnotglen"},"content":"     * @param userCommand String array of the line of user input","lastModifiedDate":"2022-03-02"},{"lineNumber":194,"author":{"gitId":"glendonnotglen"},"content":"     * @throws JarvisOutOfBounds exception to indicate that user\u0027s given input is not valid","lastModifiedDate":"2022-03-02"},{"lineNumber":195,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":196,"author":{"gitId":"glendonnotglen"},"content":"    protected static void deleteCommand(String[] userCommand) throws JarvisOutOfBounds {","lastModifiedDate":"2022-03-01"},{"lineNumber":197,"author":{"gitId":"glendonnotglen"},"content":"        try {","lastModifiedDate":"2022-02-17"},{"lineNumber":198,"author":{"gitId":"glendonnotglen"},"content":"            Integer taskIndex \u003d Integer.parseInt(userCommand[1]);","lastModifiedDate":"2022-02-17"},{"lineNumber":199,"author":{"gitId":"glendonnotglen"},"content":"            TaskList.removeTask(taskIndex - 1, true);","lastModifiedDate":"2022-03-02"},{"lineNumber":200,"author":{"gitId":"glendonnotglen"},"content":"        } catch (NumberFormatException | IndexOutOfBoundsException er){","lastModifiedDate":"2022-03-01"},{"lineNumber":201,"author":{"gitId":"glendonnotglen"},"content":"            throw new JarvisOutOfBounds();","lastModifiedDate":"2022-03-01"},{"lineNumber":202,"author":{"gitId":"glendonnotglen"},"content":"        }","lastModifiedDate":"2022-02-17"},{"lineNumber":203,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":204,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":205,"author":{"gitId":"glendonnotglen"},"content":"    private static void printList(ArrayList\u003cTask\u003e list) {","lastModifiedDate":"2022-03-02"},{"lineNumber":206,"author":{"gitId":"glendonnotglen"},"content":"        Ui.horizontalLine();","lastModifiedDate":"2022-03-02"},{"lineNumber":207,"author":{"gitId":"glendonnotglen"},"content":"        System.out.println(\"Here are the matching tasks in your list:\\n\");","lastModifiedDate":"2022-03-02"},{"lineNumber":208,"author":{"gitId":"glendonnotglen"},"content":"        Integer index \u003d 1;","lastModifiedDate":"2022-03-02"},{"lineNumber":209,"author":{"gitId":"glendonnotglen"},"content":"        for (Task t : list) {","lastModifiedDate":"2022-03-02"},{"lineNumber":210,"author":{"gitId":"glendonnotglen"},"content":"            System.out.println(index.toString() + \". \" + t.getFullTask());","lastModifiedDate":"2022-03-02"},{"lineNumber":211,"author":{"gitId":"glendonnotglen"},"content":"            index++;","lastModifiedDate":"2022-03-02"},{"lineNumber":212,"author":{"gitId":"glendonnotglen"},"content":"        }","lastModifiedDate":"2022-03-02"},{"lineNumber":213,"author":{"gitId":"glendonnotglen"},"content":"        Ui.horizontalLine();","lastModifiedDate":"2022-03-02"},{"lineNumber":214,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-03-02"},{"lineNumber":215,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":216,"author":{"gitId":"glendonnotglen"},"content":"    protected static void findCommand(String[] userCommand) throws JarvisInvalidInput {","lastModifiedDate":"2022-03-02"},{"lineNumber":217,"author":{"gitId":"glendonnotglen"},"content":"        if (userCommand.length \u003c 2) {","lastModifiedDate":"2022-03-02"},{"lineNumber":218,"author":{"gitId":"glendonnotglen"},"content":"            throw new JarvisInvalidInput();","lastModifiedDate":"2022-03-02"},{"lineNumber":219,"author":{"gitId":"glendonnotglen"},"content":"        } else {","lastModifiedDate":"2022-03-02"},{"lineNumber":220,"author":{"gitId":"glendonnotglen"},"content":"            String keyword \u003d parseUserInput(userCommand, 1, userCommand.length);","lastModifiedDate":"2022-03-02"},{"lineNumber":221,"author":{"gitId":"glendonnotglen"},"content":"            ArrayList\u003cTask\u003e resultList \u003d TaskList.getSearchResult(keyword);","lastModifiedDate":"2022-03-02"},{"lineNumber":222,"author":{"gitId":"glendonnotglen"},"content":"            if (resultList.isEmpty()) {","lastModifiedDate":"2022-03-02"},{"lineNumber":223,"author":{"gitId":"glendonnotglen"},"content":"                Ui.emptySearchResult();","lastModifiedDate":"2022-03-02"},{"lineNumber":224,"author":{"gitId":"glendonnotglen"},"content":"            } else {","lastModifiedDate":"2022-03-02"},{"lineNumber":225,"author":{"gitId":"glendonnotglen"},"content":"                printList(resultList);","lastModifiedDate":"2022-03-02"},{"lineNumber":226,"author":{"gitId":"glendonnotglen"},"content":"            }","lastModifiedDate":"2022-03-02"},{"lineNumber":227,"author":{"gitId":"glendonnotglen"},"content":"        }","lastModifiedDate":"2022-03-02"},{"lineNumber":228,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-03-02"},{"lineNumber":229,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":230,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":231,"author":{"gitId":"glendonnotglen"},"content":"     * This function handles user input and is constantly looped by main driver function in the Jarvis","lastModifiedDate":"2022-03-02"},{"lineNumber":232,"author":{"gitId":"glendonnotglen"},"content":"     * file. Calls other command main driver function after parsing user input as String array. Includes error-handling","lastModifiedDate":"2022-03-02"},{"lineNumber":233,"author":{"gitId":"glendonnotglen"},"content":"     * for invalid input through catching of exceptions","lastModifiedDate":"2022-03-02"},{"lineNumber":234,"author":{"gitId":"glendonnotglen"},"content":"     *","lastModifiedDate":"2022-03-02"},{"lineNumber":235,"author":{"gitId":"glendonnotglen"},"content":"     * @param in Scanner argument to read next line of user input","lastModifiedDate":"2022-03-02"},{"lineNumber":236,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":237,"author":{"gitId":"glendonnotglen"},"content":"    public static void inputHandler(Scanner in) {","lastModifiedDate":"2022-02-04"},{"lineNumber":238,"author":{"gitId":"glendonnotglen"},"content":"        String inputLine \u003d in.nextLine();","lastModifiedDate":"2022-02-01"},{"lineNumber":239,"author":{"gitId":"glendonnotglen"},"content":"        String[] userCommand \u003d inputLine.split(\" \");","lastModifiedDate":"2022-02-01"},{"lineNumber":240,"author":{"gitId":"glendonnotglen"},"content":"        try {","lastModifiedDate":"2022-03-01"},{"lineNumber":241,"author":{"gitId":"glendonnotglen"},"content":"            switch (userCommand[0]) {","lastModifiedDate":"2022-02-01"},{"lineNumber":242,"author":{"gitId":"glendonnotglen"},"content":"            case \"bye\":","lastModifiedDate":"2022-03-01"},{"lineNumber":243,"author":{"gitId":"glendonnotglen"},"content":"                Ui.savingData();","lastModifiedDate":"2022-03-02"},{"lineNumber":244,"author":{"gitId":"glendonnotglen"},"content":"                TaskList.saveData();","lastModifiedDate":"2022-03-02"},{"lineNumber":245,"author":{"gitId":"glendonnotglen"},"content":"                Ui.closingMessage();","lastModifiedDate":"2022-03-02"},{"lineNumber":246,"author":{"gitId":"glendonnotglen"},"content":"                System.exit(0);","lastModifiedDate":"2022-02-01"},{"lineNumber":247,"author":{"gitId":"glendonnotglen"},"content":"                break;","lastModifiedDate":"2022-02-01"},{"lineNumber":248,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":249,"author":{"gitId":"glendonnotglen"},"content":"            case \"list\":","lastModifiedDate":"2022-02-01"},{"lineNumber":250,"author":{"gitId":"glendonnotglen"},"content":"                TaskList.printList();","lastModifiedDate":"2022-03-02"},{"lineNumber":251,"author":{"gitId":"glendonnotglen"},"content":"                break;","lastModifiedDate":"2022-02-01"},{"lineNumber":252,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":253,"author":{"gitId":"glendonnotglen"},"content":"            case \"mark\":","lastModifiedDate":"2022-02-01"},{"lineNumber":254,"author":{"gitId":"glendonnotglen"},"content":"                markCommand(userCommand);","lastModifiedDate":"2022-02-09"},{"lineNumber":255,"author":{"gitId":"glendonnotglen"},"content":"                break;","lastModifiedDate":"2022-02-01"},{"lineNumber":256,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":257,"author":{"gitId":"glendonnotglen"},"content":"            case \"unmark\":","lastModifiedDate":"2022-02-01"},{"lineNumber":258,"author":{"gitId":"glendonnotglen"},"content":"                unmarkCommand(userCommand);","lastModifiedDate":"2022-02-09"},{"lineNumber":259,"author":{"gitId":"glendonnotglen"},"content":"                break;","lastModifiedDate":"2022-02-01"},{"lineNumber":260,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":261,"author":{"gitId":"glendonnotglen"},"content":"            case \"todo\":","lastModifiedDate":"2022-02-01"},{"lineNumber":262,"author":{"gitId":"glendonnotglen"},"content":"                todoCommand(userCommand);","lastModifiedDate":"2022-02-09"},{"lineNumber":263,"author":{"gitId":"glendonnotglen"},"content":"                break;","lastModifiedDate":"2022-02-01"},{"lineNumber":264,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":265,"author":{"gitId":"glendonnotglen"},"content":"            case \"deadline\":","lastModifiedDate":"2022-02-01"},{"lineNumber":266,"author":{"gitId":"glendonnotglen"},"content":"                deadlineCommand(userCommand);","lastModifiedDate":"2022-02-09"},{"lineNumber":267,"author":{"gitId":"glendonnotglen"},"content":"                break;","lastModifiedDate":"2022-02-01"},{"lineNumber":268,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":269,"author":{"gitId":"glendonnotglen"},"content":"            case \"event\":","lastModifiedDate":"2022-02-01"},{"lineNumber":270,"author":{"gitId":"glendonnotglen"},"content":"                eventCommand(userCommand);","lastModifiedDate":"2022-02-09"},{"lineNumber":271,"author":{"gitId":"glendonnotglen"},"content":"                break;","lastModifiedDate":"2022-02-01"},{"lineNumber":272,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":273,"author":{"gitId":"glendonnotglen"},"content":"            case \"delete\":","lastModifiedDate":"2022-02-17"},{"lineNumber":274,"author":{"gitId":"glendonnotglen"},"content":"                deleteCommand(userCommand);","lastModifiedDate":"2022-02-17"},{"lineNumber":275,"author":{"gitId":"glendonnotglen"},"content":"                break;","lastModifiedDate":"2022-02-17"},{"lineNumber":276,"author":{"gitId":"glendonnotglen"},"content":"            case \"find\":","lastModifiedDate":"2022-03-02"},{"lineNumber":277,"author":{"gitId":"glendonnotglen"},"content":"                findCommand(userCommand);","lastModifiedDate":"2022-03-02"},{"lineNumber":278,"author":{"gitId":"glendonnotglen"},"content":"                break;","lastModifiedDate":"2022-03-02"},{"lineNumber":279,"author":{"gitId":"glendonnotglen"},"content":"            default:","lastModifiedDate":"2022-02-01"},{"lineNumber":280,"author":{"gitId":"glendonnotglen"},"content":"                Ui.invalidInput();","lastModifiedDate":"2022-03-02"},{"lineNumber":281,"author":{"gitId":"glendonnotglen"},"content":"            }","lastModifiedDate":"2022-02-01"},{"lineNumber":282,"author":{"gitId":"glendonnotglen"},"content":"        } catch (JarvisInvalidInput e) {","lastModifiedDate":"2022-03-01"},{"lineNumber":283,"author":{"gitId":"glendonnotglen"},"content":"            Ui.invalidInput();","lastModifiedDate":"2022-03-02"},{"lineNumber":284,"author":{"gitId":"glendonnotglen"},"content":"        } catch (JarvisOutOfBounds e) {","lastModifiedDate":"2022-03-01"},{"lineNumber":285,"author":{"gitId":"glendonnotglen"},"content":"            Ui.outOfBounds();","lastModifiedDate":"2022-03-02"},{"lineNumber":286,"author":{"gitId":"glendonnotglen"},"content":"        }","lastModifiedDate":"2022-03-01"},{"lineNumber":287,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":288,"author":{"gitId":"glendonnotglen"},"content":"}","lastModifiedDate":"2022-02-01"}],"authorContributionMap":{"glendonnotglen":288}},{"path":"src/main/java/jarvis/commands/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glendonnotglen"},"content":"package jarvis.commands;","lastModifiedDate":"2022-02-09"},{"lineNumber":2,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":3,"author":{"gitId":"glendonnotglen"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-03-02"},{"lineNumber":4,"author":{"gitId":"glendonnotglen"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-03-02"},{"lineNumber":5,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":6,"author":{"gitId":"glendonnotglen"},"content":"public class Deadline extends Task{","lastModifiedDate":"2022-02-01"},{"lineNumber":7,"author":{"gitId":"glendonnotglen"},"content":"    private LocalDateTime deadlineDate;","lastModifiedDate":"2022-03-02"},{"lineNumber":8,"author":{"gitId":"glendonnotglen"},"content":"    private static final String DEADLINE_ICON \u003d \"D\";","lastModifiedDate":"2022-03-02"},{"lineNumber":9,"author":{"gitId":"glendonnotglen"},"content":"    private static final DateTimeFormatter STORING_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");","lastModifiedDate":"2022-03-02"},{"lineNumber":10,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":11,"author":{"gitId":"glendonnotglen"},"content":"    public Deadline(String taskDescription, String deadlineDate, String deadlineTime) {","lastModifiedDate":"2022-03-02"},{"lineNumber":12,"author":{"gitId":"glendonnotglen"},"content":"        super(taskDescription);","lastModifiedDate":"2022-02-01"},{"lineNumber":13,"author":{"gitId":"glendonnotglen"},"content":"        this.deadlineDate \u003d super.parseDate(deadlineDate, deadlineTime);","lastModifiedDate":"2022-03-02"},{"lineNumber":14,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":15,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":16,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":17,"author":{"gitId":"glendonnotglen"},"content":"     * Override getter function to retrieve Deadline\u0027s icon","lastModifiedDate":"2022-03-02"},{"lineNumber":18,"author":{"gitId":"glendonnotglen"},"content":"     * @return An icon in String data type to represent a Deadline","lastModifiedDate":"2022-03-02"},{"lineNumber":19,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":20,"author":{"gitId":"glendonnotglen"},"content":"    public String getTypeIcon() {","lastModifiedDate":"2022-03-02"},{"lineNumber":21,"author":{"gitId":"glendonnotglen"},"content":"        return DEADLINE_ICON;","lastModifiedDate":"2022-03-02"},{"lineNumber":22,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":23,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":24,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":25,"author":{"gitId":"glendonnotglen"},"content":"     * Override Getter function to retrieve Deadline\u0027s date","lastModifiedDate":"2022-03-02"},{"lineNumber":26,"author":{"gitId":"glendonnotglen"},"content":"     * @return A String to specify the Deadline\u0027s date","lastModifiedDate":"2022-03-02"},{"lineNumber":27,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":28,"author":{"gitId":"glendonnotglen"},"content":"    public String getDeadlineDate() {","lastModifiedDate":"2022-02-04"},{"lineNumber":29,"author":{"gitId":"glendonnotglen"},"content":"        if (deadlineDate !\u003d null) {","lastModifiedDate":"2022-03-02"},{"lineNumber":30,"author":{"gitId":"glendonnotglen"},"content":"            return super.dateToString(this.deadlineDate);","lastModifiedDate":"2022-03-02"},{"lineNumber":31,"author":{"gitId":"glendonnotglen"},"content":"        }","lastModifiedDate":"2022-03-02"},{"lineNumber":32,"author":{"gitId":"glendonnotglen"},"content":"        return \"\";","lastModifiedDate":"2022-03-02"},{"lineNumber":33,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-02-04"},{"lineNumber":34,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":35,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":36,"author":{"gitId":"glendonnotglen"},"content":"     * Override getter function to retrieve Deadline\u0027s description","lastModifiedDate":"2022-03-02"},{"lineNumber":37,"author":{"gitId":"glendonnotglen"},"content":"     *","lastModifiedDate":"2022-03-02"},{"lineNumber":38,"author":{"gitId":"glendonnotglen"},"content":"     * @return A String of Deadline\u0027s description","lastModifiedDate":"2022-03-02"},{"lineNumber":39,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":40,"author":{"gitId":"glendonnotglen"},"content":"    public String getDescription() {","lastModifiedDate":"2022-02-01"},{"lineNumber":41,"author":{"gitId":"glendonnotglen"},"content":"        String message \u003d super.getDescription() + \" (by: \" + getDeadlineDate() + \")\";","lastModifiedDate":"2022-02-01"},{"lineNumber":42,"author":{"gitId":"glendonnotglen"},"content":"        return message;","lastModifiedDate":"2022-02-01"},{"lineNumber":43,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":44,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":45,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":46,"author":{"gitId":"glendonnotglen"},"content":"     * Override function to export Deadline\u0027s data to be saved in a data file for when Jarvis is shutting down.","lastModifiedDate":"2022-03-02"},{"lineNumber":47,"author":{"gitId":"glendonnotglen"},"content":"     *","lastModifiedDate":"2022-03-02"},{"lineNumber":48,"author":{"gitId":"glendonnotglen"},"content":"     * @return String of formatted data of Deadline with icon, status, description and date.","lastModifiedDate":"2022-03-02"},{"lineNumber":49,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":50,"author":{"gitId":"glendonnotglen"},"content":"    public String exportData() {","lastModifiedDate":"2022-02-18"},{"lineNumber":51,"author":{"gitId":"glendonnotglen"},"content":"        String status \u003d isDone ? \"YES\" : \"NO\";","lastModifiedDate":"2022-02-18"},{"lineNumber":52,"author":{"gitId":"glendonnotglen"},"content":"        return getTypeIcon() + \" \" + status + \" \" + super.getDescription() + \" | \" + this.exportDate();","lastModifiedDate":"2022-03-02"},{"lineNumber":53,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-03-02"},{"lineNumber":54,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":55,"author":{"gitId":"glendonnotglen"},"content":"    private String exportDate() {","lastModifiedDate":"2022-03-02"},{"lineNumber":56,"author":{"gitId":"glendonnotglen"},"content":"        return deadlineDate.format(STORING_FORMAT);","lastModifiedDate":"2022-03-02"},{"lineNumber":57,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":58,"author":{"gitId":"glendonnotglen"},"content":"}","lastModifiedDate":"2022-02-01"}],"authorContributionMap":{"glendonnotglen":58}},{"path":"src/main/java/jarvis/commands/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glendonnotglen"},"content":"package jarvis.commands;","lastModifiedDate":"2022-02-09"},{"lineNumber":2,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":3,"author":{"gitId":"glendonnotglen"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-03-02"},{"lineNumber":4,"author":{"gitId":"glendonnotglen"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-03-02"},{"lineNumber":5,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":6,"author":{"gitId":"glendonnotglen"},"content":"public class Event extends Task {","lastModifiedDate":"2022-02-01"},{"lineNumber":7,"author":{"gitId":"glendonnotglen"},"content":"    private LocalDateTime eventDate;","lastModifiedDate":"2022-03-02"},{"lineNumber":8,"author":{"gitId":"glendonnotglen"},"content":"    private static final String EVENT_ICON \u003d \"E\";","lastModifiedDate":"2022-03-02"},{"lineNumber":9,"author":{"gitId":"glendonnotglen"},"content":"    private static final DateTimeFormatter STORING_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");","lastModifiedDate":"2022-03-02"},{"lineNumber":10,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":11,"author":{"gitId":"glendonnotglen"},"content":"    public Event(String eventDescription, String eventDay, String eventTime) {","lastModifiedDate":"2022-03-02"},{"lineNumber":12,"author":{"gitId":"glendonnotglen"},"content":"        super(eventDescription);","lastModifiedDate":"2022-02-01"},{"lineNumber":13,"author":{"gitId":"glendonnotglen"},"content":"        this.eventDate \u003d super.parseDate(eventDay, eventTime);","lastModifiedDate":"2022-03-02"},{"lineNumber":14,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":15,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":16,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":17,"author":{"gitId":"glendonnotglen"},"content":"     * Override getter function for retrieving Event\u0027s icon","lastModifiedDate":"2022-03-02"},{"lineNumber":18,"author":{"gitId":"glendonnotglen"},"content":"     *","lastModifiedDate":"2022-03-02"},{"lineNumber":19,"author":{"gitId":"glendonnotglen"},"content":"     * @return Icon in String data type to represent an Event","lastModifiedDate":"2022-03-02"},{"lineNumber":20,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":21,"author":{"gitId":"glendonnotglen"},"content":"    public String getTypeIcon() {","lastModifiedDate":"2022-03-02"},{"lineNumber":22,"author":{"gitId":"glendonnotglen"},"content":"        return EVENT_ICON;","lastModifiedDate":"2022-03-02"},{"lineNumber":23,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":24,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":25,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":26,"author":{"gitId":"glendonnotglen"},"content":"     * Getter function to retrieve Event\u0027s date.","lastModifiedDate":"2022-03-02"},{"lineNumber":27,"author":{"gitId":"glendonnotglen"},"content":"     *","lastModifiedDate":"2022-03-02"},{"lineNumber":28,"author":{"gitId":"glendonnotglen"},"content":"     * @return Date of the Event as a String","lastModifiedDate":"2022-03-02"},{"lineNumber":29,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":30,"author":{"gitId":"glendonnotglen"},"content":"    public String getEventDate() {","lastModifiedDate":"2022-02-04"},{"lineNumber":31,"author":{"gitId":"glendonnotglen"},"content":"        if (eventDate !\u003d null) {","lastModifiedDate":"2022-03-02"},{"lineNumber":32,"author":{"gitId":"glendonnotglen"},"content":"            return super.dateToString(this.eventDate);","lastModifiedDate":"2022-03-02"},{"lineNumber":33,"author":{"gitId":"glendonnotglen"},"content":"        }","lastModifiedDate":"2022-03-02"},{"lineNumber":34,"author":{"gitId":"glendonnotglen"},"content":"        return \"\";","lastModifiedDate":"2022-03-02"},{"lineNumber":35,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-02-04"},{"lineNumber":36,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":37,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":38,"author":{"gitId":"glendonnotglen"},"content":"     * Override getter function to retrieve Event\u0027s description","lastModifiedDate":"2022-03-02"},{"lineNumber":39,"author":{"gitId":"glendonnotglen"},"content":"     * @return String of Event\u0027s description","lastModifiedDate":"2022-03-02"},{"lineNumber":40,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":41,"author":{"gitId":"glendonnotglen"},"content":"    public String getDescription() {","lastModifiedDate":"2022-02-01"},{"lineNumber":42,"author":{"gitId":"glendonnotglen"},"content":"        String message \u003d super.getDescription() + \" (at: \" + getEventDate() + \")\";","lastModifiedDate":"2022-02-01"},{"lineNumber":43,"author":{"gitId":"glendonnotglen"},"content":"        return message;","lastModifiedDate":"2022-02-01"},{"lineNumber":44,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":45,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":46,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":47,"author":{"gitId":"glendonnotglen"},"content":"     * Override function to export data of Event to be used to store inside user\u0027s saved data file for when Jarvis is","lastModifiedDate":"2022-03-02"},{"lineNumber":48,"author":{"gitId":"glendonnotglen"},"content":"     * shutting down.","lastModifiedDate":"2022-03-02"},{"lineNumber":49,"author":{"gitId":"glendonnotglen"},"content":"     *","lastModifiedDate":"2022-03-02"},{"lineNumber":50,"author":{"gitId":"glendonnotglen"},"content":"     * @return String of Event\u0027s data formatted.","lastModifiedDate":"2022-03-02"},{"lineNumber":51,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":52,"author":{"gitId":"glendonnotglen"},"content":"    public String exportData() {","lastModifiedDate":"2022-02-18"},{"lineNumber":53,"author":{"gitId":"glendonnotglen"},"content":"        String status \u003d isDone ? \"YES\" : \"NO\";","lastModifiedDate":"2022-02-18"},{"lineNumber":54,"author":{"gitId":"glendonnotglen"},"content":"        return getTypeIcon() + \" \" + status + \" \" + super.getDescription() + \" | \" + this.exportDateTime();","lastModifiedDate":"2022-03-02"},{"lineNumber":55,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-03-02"},{"lineNumber":56,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":57,"author":{"gitId":"glendonnotglen"},"content":"    private String exportDateTime() {","lastModifiedDate":"2022-03-02"},{"lineNumber":58,"author":{"gitId":"glendonnotglen"},"content":"        return eventDate.format(STORING_FORMAT);","lastModifiedDate":"2022-03-02"},{"lineNumber":59,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":60,"author":{"gitId":"glendonnotglen"},"content":"}","lastModifiedDate":"2022-02-01"}],"authorContributionMap":{"glendonnotglen":60}},{"path":"src/main/java/jarvis/commands/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glendonnotglen"},"content":"package jarvis.commands;","lastModifiedDate":"2022-02-09"},{"lineNumber":2,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":3,"author":{"gitId":"glendonnotglen"},"content":"import jarvis.display.Ui;","lastModifiedDate":"2022-03-02"},{"lineNumber":4,"author":{"gitId":"glendonnotglen"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-03-02"},{"lineNumber":5,"author":{"gitId":"glendonnotglen"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-03-02"},{"lineNumber":6,"author":{"gitId":"glendonnotglen"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-03-02"},{"lineNumber":7,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":8,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":9,"author":{"gitId":"glendonnotglen"},"content":"public class Task {","lastModifiedDate":"2022-01-28"},{"lineNumber":10,"author":{"gitId":"glendonnotglen"},"content":"    protected String description;","lastModifiedDate":"2022-01-28"},{"lineNumber":11,"author":{"gitId":"glendonnotglen"},"content":"    protected boolean isDone;","lastModifiedDate":"2022-01-28"},{"lineNumber":12,"author":{"gitId":"glendonnotglen"},"content":"    private static final DateTimeFormatter STORE_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");","lastModifiedDate":"2022-03-02"},{"lineNumber":13,"author":{"gitId":"glendonnotglen"},"content":"    private static final DateTimeFormatter PRINT_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy HHmm\");","lastModifiedDate":"2022-03-02"},{"lineNumber":14,"author":{"gitId":"glendonnotglen"},"content":"    private static final String TASK_ICON \u003d \"T\";","lastModifiedDate":"2022-03-02"},{"lineNumber":15,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":16,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":17,"author":{"gitId":"glendonnotglen"},"content":"     * Constructor for Task. Marks task as not done by default.","lastModifiedDate":"2022-03-02"},{"lineNumber":18,"author":{"gitId":"glendonnotglen"},"content":"     * @param description Description of the task to be stored.","lastModifiedDate":"2022-03-02"},{"lineNumber":19,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":20,"author":{"gitId":"glendonnotglen"},"content":"    public Task(String description) {","lastModifiedDate":"2022-01-28"},{"lineNumber":21,"author":{"gitId":"glendonnotglen"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-01-28"},{"lineNumber":22,"author":{"gitId":"glendonnotglen"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-01-28"},{"lineNumber":23,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":24,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":25,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":26,"author":{"gitId":"glendonnotglen"},"content":"     * Getter function for retrieving the task\u0027s status icon. Marked by an X if it is done. A blank space otherwise.","lastModifiedDate":"2022-03-02"},{"lineNumber":27,"author":{"gitId":"glendonnotglen"},"content":"     * @return","lastModifiedDate":"2022-03-02"},{"lineNumber":28,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":29,"author":{"gitId":"glendonnotglen"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2022-01-28"},{"lineNumber":30,"author":{"gitId":"glendonnotglen"},"content":"        return (isDone ? \"X\" : \" \");","lastModifiedDate":"2022-02-04"},{"lineNumber":31,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":32,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":33,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":34,"author":{"gitId":"glendonnotglen"},"content":"     * Getter function for retrieving task\u0027s description","lastModifiedDate":"2022-03-02"},{"lineNumber":35,"author":{"gitId":"glendonnotglen"},"content":"     * @return A String of the task\u0027s description","lastModifiedDate":"2022-03-02"},{"lineNumber":36,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":37,"author":{"gitId":"glendonnotglen"},"content":"    public String getDescription() {","lastModifiedDate":"2022-02-17"},{"lineNumber":38,"author":{"gitId":"glendonnotglen"},"content":"        return description;","lastModifiedDate":"2022-02-17"},{"lineNumber":39,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":40,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":41,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":42,"author":{"gitId":"glendonnotglen"},"content":"     * Getter function for retrieving an icon for the task\u0027s type.","lastModifiedDate":"2022-03-02"},{"lineNumber":43,"author":{"gitId":"glendonnotglen"},"content":"     *","lastModifiedDate":"2022-03-02"},{"lineNumber":44,"author":{"gitId":"glendonnotglen"},"content":"     * @return An icon in String data type to represent Task.","lastModifiedDate":"2022-03-02"},{"lineNumber":45,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":46,"author":{"gitId":"glendonnotglen"},"content":"    public String getTypeIcon() {","lastModifiedDate":"2022-03-01"},{"lineNumber":47,"author":{"gitId":"glendonnotglen"},"content":"        return TASK_ICON;","lastModifiedDate":"2022-03-02"},{"lineNumber":48,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-03-01"},{"lineNumber":49,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":50,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":51,"author":{"gitId":"glendonnotglen"},"content":"     * Function to mark a task as done, if it is not already marked. Calls default message for when task is already","lastModifiedDate":"2022-03-02"},{"lineNumber":52,"author":{"gitId":"glendonnotglen"},"content":"     * marked.","lastModifiedDate":"2022-03-02"},{"lineNumber":53,"author":{"gitId":"glendonnotglen"},"content":"     *","lastModifiedDate":"2022-03-02"},{"lineNumber":54,"author":{"gitId":"glendonnotglen"},"content":"     * @return True if task is successfully marked as done. False otherwise.","lastModifiedDate":"2022-03-02"},{"lineNumber":55,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":56,"author":{"gitId":"glendonnotglen"},"content":"    public boolean markAsDone() {","lastModifiedDate":"2022-01-28"},{"lineNumber":57,"author":{"gitId":"glendonnotglen"},"content":"        boolean isTaskDone \u003d this.isDone \u003d\u003d true;","lastModifiedDate":"2022-01-31"},{"lineNumber":58,"author":{"gitId":"glendonnotglen"},"content":"        if (isTaskDone) {","lastModifiedDate":"2022-01-31"},{"lineNumber":59,"author":{"gitId":"glendonnotglen"},"content":"            Ui.unmarkError();","lastModifiedDate":"2022-03-02"},{"lineNumber":60,"author":{"gitId":"glendonnotglen"},"content":"            Ui.horizontalLine();","lastModifiedDate":"2022-03-02"},{"lineNumber":61,"author":{"gitId":"glendonnotglen"},"content":"            return false;","lastModifiedDate":"2022-01-28"},{"lineNumber":62,"author":{"gitId":"glendonnotglen"},"content":"        }","lastModifiedDate":"2022-01-28"},{"lineNumber":63,"author":{"gitId":"glendonnotglen"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2022-01-28"},{"lineNumber":64,"author":{"gitId":"glendonnotglen"},"content":"        return true;","lastModifiedDate":"2022-01-28"},{"lineNumber":65,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":66,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":67,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":68,"author":{"gitId":"glendonnotglen"},"content":"     * Function to unmark a task, if it is not already unmarked. Calls default message for when task is already","lastModifiedDate":"2022-03-02"},{"lineNumber":69,"author":{"gitId":"glendonnotglen"},"content":"     * unmarked.","lastModifiedDate":"2022-03-02"},{"lineNumber":70,"author":{"gitId":"glendonnotglen"},"content":"     *","lastModifiedDate":"2022-03-02"},{"lineNumber":71,"author":{"gitId":"glendonnotglen"},"content":"     * @return True if task is successfully unmarked. False otherwise.","lastModifiedDate":"2022-03-02"},{"lineNumber":72,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":73,"author":{"gitId":"glendonnotglen"},"content":"    public boolean markAsUndone() {","lastModifiedDate":"2022-01-28"},{"lineNumber":74,"author":{"gitId":"glendonnotglen"},"content":"        boolean isTaskUndone \u003d !this.isDone;","lastModifiedDate":"2022-03-02"},{"lineNumber":75,"author":{"gitId":"glendonnotglen"},"content":"        if (isTaskUndone) {","lastModifiedDate":"2022-01-31"},{"lineNumber":76,"author":{"gitId":"glendonnotglen"},"content":"            Ui.markError();","lastModifiedDate":"2022-03-02"},{"lineNumber":77,"author":{"gitId":"glendonnotglen"},"content":"            return false;","lastModifiedDate":"2022-01-28"},{"lineNumber":78,"author":{"gitId":"glendonnotglen"},"content":"        }","lastModifiedDate":"2022-01-28"},{"lineNumber":79,"author":{"gitId":"glendonnotglen"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-01-28"},{"lineNumber":80,"author":{"gitId":"glendonnotglen"},"content":"        return true;","lastModifiedDate":"2022-01-28"},{"lineNumber":81,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":82,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":83,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":84,"author":{"gitId":"glendonnotglen"},"content":"     * Function to retrieve Task\u0027s icon, status and description in a single String. Used for printing the entire task.","lastModifiedDate":"2022-03-02"},{"lineNumber":85,"author":{"gitId":"glendonnotglen"},"content":"     * e.g. [T][ ] Read book","lastModifiedDate":"2022-03-02"},{"lineNumber":86,"author":{"gitId":"glendonnotglen"},"content":"     *","lastModifiedDate":"2022-03-02"},{"lineNumber":87,"author":{"gitId":"glendonnotglen"},"content":"     * @return A String of icon, status and description formatted.","lastModifiedDate":"2022-03-02"},{"lineNumber":88,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":89,"author":{"gitId":"glendonnotglen"},"content":"    public String getFullTask() {","lastModifiedDate":"2022-02-17"},{"lineNumber":90,"author":{"gitId":"glendonnotglen"},"content":"        return \"[\" + getTypeIcon() + \"]\" + \"[\" + getStatusIcon() + \"] \" + getDescription();","lastModifiedDate":"2022-02-17"},{"lineNumber":91,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":92,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":93,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":94,"author":{"gitId":"glendonnotglen"},"content":"     * Function to export data of the Task. This is called when saving data when Jarvis is shutting down.","lastModifiedDate":"2022-03-02"},{"lineNumber":95,"author":{"gitId":"glendonnotglen"},"content":"     *","lastModifiedDate":"2022-03-02"},{"lineNumber":96,"author":{"gitId":"glendonnotglen"},"content":"     * @return String of task\u0027s icon, status and description to be placed inside data file for next boot\u0027s usage.","lastModifiedDate":"2022-03-02"},{"lineNumber":97,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":98,"author":{"gitId":"glendonnotglen"},"content":"    public String exportData() {","lastModifiedDate":"2022-02-18"},{"lineNumber":99,"author":{"gitId":"glendonnotglen"},"content":"        String status \u003d isDone ? \"YES\" : \"NO\";","lastModifiedDate":"2022-02-18"},{"lineNumber":100,"author":{"gitId":"glendonnotglen"},"content":"        String temp \u003d getTypeIcon() + \" \" + status + \" \" + getDescription();","lastModifiedDate":"2022-02-18"},{"lineNumber":101,"author":{"gitId":"glendonnotglen"},"content":"        return temp;","lastModifiedDate":"2022-02-18"},{"lineNumber":102,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":103,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":104,"author":{"gitId":"glendonnotglen"},"content":"    public static LocalDateTime parseDate(String date, String time) {","lastModifiedDate":"2022-03-02"},{"lineNumber":105,"author":{"gitId":"glendonnotglen"},"content":"        LocalDateTime taskDate \u003d null;","lastModifiedDate":"2022-03-02"},{"lineNumber":106,"author":{"gitId":"glendonnotglen"},"content":"        try {","lastModifiedDate":"2022-03-02"},{"lineNumber":107,"author":{"gitId":"glendonnotglen"},"content":"            taskDate \u003d LocalDateTime.parse(date + \" \" + time, STORE_FORMAT);","lastModifiedDate":"2022-03-02"},{"lineNumber":108,"author":{"gitId":"glendonnotglen"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2022-03-02"},{"lineNumber":109,"author":{"gitId":"glendonnotglen"},"content":"            Ui.invalidDateTime();","lastModifiedDate":"2022-03-02"},{"lineNumber":110,"author":{"gitId":"glendonnotglen"},"content":"        }","lastModifiedDate":"2022-03-02"},{"lineNumber":111,"author":{"gitId":"glendonnotglen"},"content":"        return taskDate;","lastModifiedDate":"2022-03-02"},{"lineNumber":112,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-03-02"},{"lineNumber":113,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":114,"author":{"gitId":"glendonnotglen"},"content":"    public static String dateToString(LocalDateTime date) {","lastModifiedDate":"2022-03-02"},{"lineNumber":115,"author":{"gitId":"glendonnotglen"},"content":"        return date.format(PRINT_FORMAT);","lastModifiedDate":"2022-03-02"},{"lineNumber":116,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-03-02"},{"lineNumber":117,"author":{"gitId":"glendonnotglen"},"content":"}","lastModifiedDate":"2022-01-28"}],"authorContributionMap":{"glendonnotglen":117}},{"path":"src/main/java/jarvis/commands/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glendonnotglen"},"content":"package jarvis.commands;","lastModifiedDate":"2022-02-09"},{"lineNumber":2,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":3,"author":{"gitId":"glendonnotglen"},"content":"import jarvis.Parser;","lastModifiedDate":"2022-03-02"},{"lineNumber":4,"author":{"gitId":"glendonnotglen"},"content":"import jarvis.display.Ui;","lastModifiedDate":"2022-03-02"},{"lineNumber":5,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":6,"author":{"gitId":"glendonnotglen"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-17"},{"lineNumber":7,"author":{"gitId":"glendonnotglen"},"content":"import java.io.File;","lastModifiedDate":"2022-02-18"},{"lineNumber":8,"author":{"gitId":"glendonnotglen"},"content":"import java.io.FileWriter;","lastModifiedDate":"2022-02-18"},{"lineNumber":9,"author":{"gitId":"glendonnotglen"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-18"},{"lineNumber":10,"author":{"gitId":"glendonnotglen"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-02-18"},{"lineNumber":11,"author":{"gitId":"glendonnotglen"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2022-02-18"},{"lineNumber":12,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":13,"author":{"gitId":"glendonnotglen"},"content":"public class TaskList extends Task {","lastModifiedDate":"2022-03-02"},{"lineNumber":14,"author":{"gitId":"glendonnotglen"},"content":"    private static ArrayList\u003cTask\u003e userTaskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-03-01"},{"lineNumber":15,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":16,"author":{"gitId":"glendonnotglen"},"content":"    private static final String TASK_ICON \u003d \"T\";","lastModifiedDate":"2022-03-01"},{"lineNumber":17,"author":{"gitId":"glendonnotglen"},"content":"    private static final String EVENT_ICON \u003d \"E\";","lastModifiedDate":"2022-03-01"},{"lineNumber":18,"author":{"gitId":"glendonnotglen"},"content":"    private static final String DEADLINE_ICON \u003d \"D\";","lastModifiedDate":"2022-03-01"},{"lineNumber":19,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":20,"author":{"gitId":"glendonnotglen"},"content":"    public TaskList(String description) {","lastModifiedDate":"2022-03-02"},{"lineNumber":21,"author":{"gitId":"glendonnotglen"},"content":"        super(description);","lastModifiedDate":"2022-02-01"},{"lineNumber":22,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":23,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":24,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":25,"author":{"gitId":"glendonnotglen"},"content":"     * Getter function for retrieving size of user\u0027s list.","lastModifiedDate":"2022-03-02"},{"lineNumber":26,"author":{"gitId":"glendonnotglen"},"content":"     *","lastModifiedDate":"2022-03-02"},{"lineNumber":27,"author":{"gitId":"glendonnotglen"},"content":"     * @return size of list as an int","lastModifiedDate":"2022-03-02"},{"lineNumber":28,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":29,"author":{"gitId":"glendonnotglen"},"content":"    public static int getListSize() {","lastModifiedDate":"2022-02-01"},{"lineNumber":30,"author":{"gitId":"glendonnotglen"},"content":"        return userTaskList.size();","lastModifiedDate":"2022-03-01"},{"lineNumber":31,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":32,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":33,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":34,"author":{"gitId":"glendonnotglen"},"content":"     * Function to insert a Task into the back of the user\u0027s list.","lastModifiedDate":"2022-03-02"},{"lineNumber":35,"author":{"gitId":"glendonnotglen"},"content":"     *","lastModifiedDate":"2022-03-02"},{"lineNumber":36,"author":{"gitId":"glendonnotglen"},"content":"     * @param newTask Task argument to be added to user\u0027s list.","lastModifiedDate":"2022-03-02"},{"lineNumber":37,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":38,"author":{"gitId":"glendonnotglen"},"content":"    public static void insertTask(Task newTask) {","lastModifiedDate":"2022-02-01"},{"lineNumber":39,"author":{"gitId":"glendonnotglen"},"content":"            userTaskList.add(newTask);","lastModifiedDate":"2022-03-01"},{"lineNumber":40,"author":{"gitId":"glendonnotglen"},"content":"            Ui.taskAdded(newTask.getDescription());","lastModifiedDate":"2022-03-02"},{"lineNumber":41,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":42,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":43,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":44,"author":{"gitId":"glendonnotglen"},"content":"     * Function to print the user\u0027s list of tasks, with the index being printed before the Task\u0027s icon, status and","lastModifiedDate":"2022-03-02"},{"lineNumber":45,"author":{"gitId":"glendonnotglen"},"content":"     * description. Includes a check for when user\u0027s list is empty.","lastModifiedDate":"2022-03-02"},{"lineNumber":46,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":47,"author":{"gitId":"glendonnotglen"},"content":"    public static void printList() {","lastModifiedDate":"2022-03-01"},{"lineNumber":48,"author":{"gitId":"glendonnotglen"},"content":"        if (!userTaskList.isEmpty()) {","lastModifiedDate":"2022-03-01"},{"lineNumber":49,"author":{"gitId":"glendonnotglen"},"content":"            Ui.horizontalLine();","lastModifiedDate":"2022-03-02"},{"lineNumber":50,"author":{"gitId":"glendonnotglen"},"content":"            for (int i \u003d 0; i \u003c userTaskList.size(); i++) {","lastModifiedDate":"2022-03-01"},{"lineNumber":51,"author":{"gitId":"glendonnotglen"},"content":"                String taskIndex \u003d Integer.toString(i+1) + \".\";","lastModifiedDate":"2022-02-01"},{"lineNumber":52,"author":{"gitId":"glendonnotglen"},"content":"                System.out.println(taskIndex.toString() + userTaskList.get(i).getFullTask());","lastModifiedDate":"2022-03-01"},{"lineNumber":53,"author":{"gitId":"glendonnotglen"},"content":"            }","lastModifiedDate":"2022-02-01"},{"lineNumber":54,"author":{"gitId":"glendonnotglen"},"content":"            Ui.horizontalLine();","lastModifiedDate":"2022-03-02"},{"lineNumber":55,"author":{"gitId":"glendonnotglen"},"content":"        } else {","lastModifiedDate":"2022-02-01"},{"lineNumber":56,"author":{"gitId":"glendonnotglen"},"content":"            Ui.emptyList();","lastModifiedDate":"2022-03-02"},{"lineNumber":57,"author":{"gitId":"glendonnotglen"},"content":"        }","lastModifiedDate":"2022-02-01"},{"lineNumber":58,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":59,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":60,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":61,"author":{"gitId":"glendonnotglen"},"content":"     * Getter function for retrieving the status icon of a task","lastModifiedDate":"2022-03-02"},{"lineNumber":62,"author":{"gitId":"glendonnotglen"},"content":"     *","lastModifiedDate":"2022-03-02"},{"lineNumber":63,"author":{"gitId":"glendonnotglen"},"content":"     * @param index Index of element to be checked","lastModifiedDate":"2022-03-02"},{"lineNumber":64,"author":{"gitId":"glendonnotglen"},"content":"     * @return a String to represent Task type","lastModifiedDate":"2022-03-02"},{"lineNumber":65,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":66,"author":{"gitId":"glendonnotglen"},"content":"    public static String getStatusIcon(int index){","lastModifiedDate":"2022-02-01"},{"lineNumber":67,"author":{"gitId":"glendonnotglen"},"content":"        return userTaskList.get(index).getStatusIcon();","lastModifiedDate":"2022-03-01"},{"lineNumber":68,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":69,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":70,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":71,"author":{"gitId":"glendonnotglen"},"content":"     * Getter function for retrieving the description of a task","lastModifiedDate":"2022-03-02"},{"lineNumber":72,"author":{"gitId":"glendonnotglen"},"content":"     *","lastModifiedDate":"2022-03-02"},{"lineNumber":73,"author":{"gitId":"glendonnotglen"},"content":"     * @param index Index of element to be retrieved","lastModifiedDate":"2022-03-02"},{"lineNumber":74,"author":{"gitId":"glendonnotglen"},"content":"     * @return a String to represent the Task\u0027s description","lastModifiedDate":"2022-03-02"},{"lineNumber":75,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":76,"author":{"gitId":"glendonnotglen"},"content":"    public static String getTask(int index) {","lastModifiedDate":"2022-02-01"},{"lineNumber":77,"author":{"gitId":"glendonnotglen"},"content":"        return userTaskList.get(index).getDescription();","lastModifiedDate":"2022-03-01"},{"lineNumber":78,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":79,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":80,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":81,"author":{"gitId":"glendonnotglen"},"content":"     * Driver function to mark a task. Function is reused for when loading user\u0027s saved data so a flag is","lastModifiedDate":"2022-03-02"},{"lineNumber":82,"author":{"gitId":"glendonnotglen"},"content":"     * included to prevent printing default marked task message when loading user\u0027s data.","lastModifiedDate":"2022-03-02"},{"lineNumber":83,"author":{"gitId":"glendonnotglen"},"content":"     *","lastModifiedDate":"2022-03-02"},{"lineNumber":84,"author":{"gitId":"glendonnotglen"},"content":"     * @param index Index of the task to be marked","lastModifiedDate":"2022-03-02"},{"lineNumber":85,"author":{"gitId":"glendonnotglen"},"content":"     * @param toPrintMessage a flag to indicate if default messages should be called","lastModifiedDate":"2022-03-02"},{"lineNumber":86,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":87,"author":{"gitId":"glendonnotglen"},"content":"    public static void markTask(int index, boolean toPrintMessage) {","lastModifiedDate":"2022-02-18"},{"lineNumber":88,"author":{"gitId":"glendonnotglen"},"content":"        Task targetTask \u003d userTaskList.get(index);","lastModifiedDate":"2022-03-01"},{"lineNumber":89,"author":{"gitId":"glendonnotglen"},"content":"        Ui.horizontalLine();","lastModifiedDate":"2022-03-02"},{"lineNumber":90,"author":{"gitId":"glendonnotglen"},"content":"        boolean isSuccessfullyMarked \u003d targetTask.markAsDone();","lastModifiedDate":"2022-02-01"},{"lineNumber":91,"author":{"gitId":"glendonnotglen"},"content":"        if (isSuccessfullyMarked \u0026\u0026 toPrintMessage) {","lastModifiedDate":"2022-02-18"},{"lineNumber":92,"author":{"gitId":"glendonnotglen"},"content":"            Ui.printTaskMarked(targetTask);","lastModifiedDate":"2022-03-02"},{"lineNumber":93,"author":{"gitId":"glendonnotglen"},"content":"            Ui.horizontalLine();","lastModifiedDate":"2022-03-02"},{"lineNumber":94,"author":{"gitId":"glendonnotglen"},"content":"        }","lastModifiedDate":"2022-02-01"},{"lineNumber":95,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":96,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":97,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":98,"author":{"gitId":"glendonnotglen"},"content":"     * Driver function to unmark a task. Includes call to print default message when task is successfully processed,","lastModifiedDate":"2022-03-02"},{"lineNumber":99,"author":{"gitId":"glendonnotglen"},"content":"     * regardless if task is unmarked, or already unmarked.","lastModifiedDate":"2022-03-02"},{"lineNumber":100,"author":{"gitId":"glendonnotglen"},"content":"     *","lastModifiedDate":"2022-03-02"},{"lineNumber":101,"author":{"gitId":"glendonnotglen"},"content":"     * @param taskIndex Index of the task to be unmarked","lastModifiedDate":"2022-03-02"},{"lineNumber":102,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":103,"author":{"gitId":"glendonnotglen"},"content":"    public static void unmarkTask(int taskIndex) {","lastModifiedDate":"2022-02-01"},{"lineNumber":104,"author":{"gitId":"glendonnotglen"},"content":"        Task targetTask \u003d userTaskList.get(taskIndex);","lastModifiedDate":"2022-03-01"},{"lineNumber":105,"author":{"gitId":"glendonnotglen"},"content":"        Ui.horizontalLine();","lastModifiedDate":"2022-03-02"},{"lineNumber":106,"author":{"gitId":"glendonnotglen"},"content":"        boolean isSuccessfullyUnmarked \u003d targetTask.markAsUndone();","lastModifiedDate":"2022-02-01"},{"lineNumber":107,"author":{"gitId":"glendonnotglen"},"content":"        if (isSuccessfullyUnmarked) {","lastModifiedDate":"2022-02-01"},{"lineNumber":108,"author":{"gitId":"glendonnotglen"},"content":"            Ui.printTaskUnmarked(targetTask);","lastModifiedDate":"2022-03-02"},{"lineNumber":109,"author":{"gitId":"glendonnotglen"},"content":"        }","lastModifiedDate":"2022-02-01"},{"lineNumber":110,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":111,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":112,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":113,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":114,"author":{"gitId":"glendonnotglen"},"content":"     * Function to remove a Task from the user\u0027s list of tasks.","lastModifiedDate":"2022-03-02"},{"lineNumber":115,"author":{"gitId":"glendonnotglen"},"content":"     *","lastModifiedDate":"2022-03-02"},{"lineNumber":116,"author":{"gitId":"glendonnotglen"},"content":"     * @param taskIndex Index of task to be removed from list","lastModifiedDate":"2022-03-02"},{"lineNumber":117,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":118,"author":{"gitId":"glendonnotglen"},"content":"    public static void removeTask(int taskIndex, boolean toPrintMessage) {","lastModifiedDate":"2022-03-02"},{"lineNumber":119,"author":{"gitId":"glendonnotglen"},"content":"        Task taskRemoved \u003d userTaskList.get(taskIndex);","lastModifiedDate":"2022-03-01"},{"lineNumber":120,"author":{"gitId":"glendonnotglen"},"content":"        userTaskList.remove(taskIndex);","lastModifiedDate":"2022-03-01"},{"lineNumber":121,"author":{"gitId":"glendonnotglen"},"content":"        if (toPrintMessage) {","lastModifiedDate":"2022-03-02"},{"lineNumber":122,"author":{"gitId":"glendonnotglen"},"content":"            Ui.taskDeleted(taskRemoved, userTaskList.size());","lastModifiedDate":"2022-03-02"},{"lineNumber":123,"author":{"gitId":"glendonnotglen"},"content":"        }","lastModifiedDate":"2022-02-01"},{"lineNumber":124,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-03-02"},{"lineNumber":125,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":126,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":127,"author":{"gitId":"glendonnotglen"},"content":"     * Function for when Jarvis is booting up to process saved file\u0027s data. Takes in 1 line of saved data at a","lastModifiedDate":"2022-03-02"},{"lineNumber":128,"author":{"gitId":"glendonnotglen"},"content":"     * time through the data argument. Includes parsing of data and calling functions to add tasks to list. This assumes","lastModifiedDate":"2022-03-02"},{"lineNumber":129,"author":{"gitId":"glendonnotglen"},"content":"     * that the saved data file is perfectly formatted and uncorrupted/untempered.","lastModifiedDate":"2022-03-02"},{"lineNumber":130,"author":{"gitId":"glendonnotglen"},"content":"     *","lastModifiedDate":"2022-03-02"},{"lineNumber":131,"author":{"gitId":"glendonnotglen"},"content":"     * @param data Next line of data in the user\u0027s stored data file","lastModifiedDate":"2022-03-02"},{"lineNumber":132,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":133,"author":{"gitId":"glendonnotglen"},"content":"    protected static void parseSavedData(String data) {","lastModifiedDate":"2022-02-18"},{"lineNumber":134,"author":{"gitId":"glendonnotglen"},"content":"        String[] dataArray \u003d data.split(\" \");","lastModifiedDate":"2022-02-18"},{"lineNumber":135,"author":{"gitId":"glendonnotglen"},"content":"        String taskType \u003d dataArray[0];","lastModifiedDate":"2022-02-18"},{"lineNumber":136,"author":{"gitId":"glendonnotglen"},"content":"        int separatorIndex \u003d Parser.indexOf(dataArray, \"|\");","lastModifiedDate":"2022-03-02"},{"lineNumber":137,"author":{"gitId":"glendonnotglen"},"content":"        String description \u003d \"\";","lastModifiedDate":"2022-02-18"},{"lineNumber":138,"author":{"gitId":"glendonnotglen"},"content":"        String day \u003d \"\";","lastModifiedDate":"2022-03-02"},{"lineNumber":139,"author":{"gitId":"glendonnotglen"},"content":"        String time \u003d \"\";","lastModifiedDate":"2022-03-02"},{"lineNumber":140,"author":{"gitId":"glendonnotglen"},"content":"        boolean taskIsDone \u003d dataArray[1].equals(\"YES\");","lastModifiedDate":"2022-03-02"},{"lineNumber":141,"author":{"gitId":"glendonnotglen"},"content":"        if (separatorIndex \u003d\u003d -1) {","lastModifiedDate":"2022-02-18"},{"lineNumber":142,"author":{"gitId":"glendonnotglen"},"content":"            description \u003d Parser.parseUserInput(dataArray, 2, dataArray.length);","lastModifiedDate":"2022-03-02"},{"lineNumber":143,"author":{"gitId":"glendonnotglen"},"content":"        } else {","lastModifiedDate":"2022-02-18"},{"lineNumber":144,"author":{"gitId":"glendonnotglen"},"content":"            //saved Task is either an event or deadline","lastModifiedDate":"2022-02-18"},{"lineNumber":145,"author":{"gitId":"glendonnotglen"},"content":"            description \u003d Parser.parseUserInput(dataArray, 2, separatorIndex);","lastModifiedDate":"2022-03-02"},{"lineNumber":146,"author":{"gitId":"glendonnotglen"},"content":"            day \u003d dataArray[separatorIndex+1];","lastModifiedDate":"2022-03-02"},{"lineNumber":147,"author":{"gitId":"glendonnotglen"},"content":"            time \u003d dataArray[separatorIndex+2];","lastModifiedDate":"2022-03-02"},{"lineNumber":148,"author":{"gitId":"glendonnotglen"},"content":"        }","lastModifiedDate":"2022-02-18"},{"lineNumber":149,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":150,"author":{"gitId":"glendonnotglen"},"content":"        switch (taskType) {","lastModifiedDate":"2022-02-18"},{"lineNumber":151,"author":{"gitId":"glendonnotglen"},"content":"        case TASK_ICON:","lastModifiedDate":"2022-03-01"},{"lineNumber":152,"author":{"gitId":"glendonnotglen"},"content":"            userTaskList.add(new Task(description));","lastModifiedDate":"2022-03-01"},{"lineNumber":153,"author":{"gitId":"glendonnotglen"},"content":"            break;","lastModifiedDate":"2022-02-18"},{"lineNumber":154,"author":{"gitId":"glendonnotglen"},"content":"        case DEADLINE_ICON:","lastModifiedDate":"2022-03-01"},{"lineNumber":155,"author":{"gitId":"glendonnotglen"},"content":"            userTaskList.add(new Deadline(description, day, time));","lastModifiedDate":"2022-03-02"},{"lineNumber":156,"author":{"gitId":"glendonnotglen"},"content":"            break;","lastModifiedDate":"2022-02-18"},{"lineNumber":157,"author":{"gitId":"glendonnotglen"},"content":"        case EVENT_ICON:","lastModifiedDate":"2022-03-01"},{"lineNumber":158,"author":{"gitId":"glendonnotglen"},"content":"            userTaskList.add(new Event(description, day, time));","lastModifiedDate":"2022-03-02"},{"lineNumber":159,"author":{"gitId":"glendonnotglen"},"content":"            break;","lastModifiedDate":"2022-02-18"},{"lineNumber":160,"author":{"gitId":"glendonnotglen"},"content":"        default:","lastModifiedDate":"2022-02-18"},{"lineNumber":161,"author":{"gitId":"glendonnotglen"},"content":"            break;","lastModifiedDate":"2022-02-18"},{"lineNumber":162,"author":{"gitId":"glendonnotglen"},"content":"        }","lastModifiedDate":"2022-02-18"},{"lineNumber":163,"author":{"gitId":"glendonnotglen"},"content":"        if (taskIsDone) {","lastModifiedDate":"2022-02-18"},{"lineNumber":164,"author":{"gitId":"glendonnotglen"},"content":"            markTask(userTaskList.size()-1, false);","lastModifiedDate":"2022-03-01"},{"lineNumber":165,"author":{"gitId":"glendonnotglen"},"content":"        }","lastModifiedDate":"2022-02-18"},{"lineNumber":166,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":167,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":168,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":169,"author":{"gitId":"glendonnotglen"},"content":"     * Driver function to call when Jarvis is booting up to load any saved user\u0027s data file from previous","lastModifiedDate":"2022-03-02"},{"lineNumber":170,"author":{"gitId":"glendonnotglen"},"content":"     * session of usage. File checking is done before this command is called by the main Jarvis function so this","lastModifiedDate":"2022-03-02"},{"lineNumber":171,"author":{"gitId":"glendonnotglen"},"content":"     * function assumes that the file pointed to by the argument exists.","lastModifiedDate":"2022-03-02"},{"lineNumber":172,"author":{"gitId":"glendonnotglen"},"content":"     *","lastModifiedDate":"2022-03-02"},{"lineNumber":173,"author":{"gitId":"glendonnotglen"},"content":"     * @param savedFile File argument that points to the user\u0027s saved data file","lastModifiedDate":"2022-03-02"},{"lineNumber":174,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":175,"author":{"gitId":"glendonnotglen"},"content":"    public static void loadFile(File savedFile) {","lastModifiedDate":"2022-02-18"},{"lineNumber":176,"author":{"gitId":"glendonnotglen"},"content":"        try {","lastModifiedDate":"2022-02-18"},{"lineNumber":177,"author":{"gitId":"glendonnotglen"},"content":"            Scanner fileReader \u003d new Scanner(savedFile);","lastModifiedDate":"2022-02-18"},{"lineNumber":178,"author":{"gitId":"glendonnotglen"},"content":"            while (fileReader.hasNextLine()) {","lastModifiedDate":"2022-02-18"},{"lineNumber":179,"author":{"gitId":"glendonnotglen"},"content":"                String data \u003d fileReader.nextLine();","lastModifiedDate":"2022-02-18"},{"lineNumber":180,"author":{"gitId":"glendonnotglen"},"content":"                parseSavedData(data);","lastModifiedDate":"2022-02-18"},{"lineNumber":181,"author":{"gitId":"glendonnotglen"},"content":"            }","lastModifiedDate":"2022-02-18"},{"lineNumber":182,"author":{"gitId":"glendonnotglen"},"content":"            fileReader.close();","lastModifiedDate":"2022-02-18"},{"lineNumber":183,"author":{"gitId":"glendonnotglen"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2022-02-18"},{"lineNumber":184,"author":{"gitId":"glendonnotglen"},"content":"            Ui.loadError();","lastModifiedDate":"2022-03-02"},{"lineNumber":185,"author":{"gitId":"glendonnotglen"},"content":"        }","lastModifiedDate":"2022-02-18"},{"lineNumber":186,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":187,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":188,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":189,"author":{"gitId":"glendonnotglen"},"content":"     * Function that is called when Jarvis is exiting to extract all current tasks in User\u0027s list. Uses a StringBuffer","lastModifiedDate":"2022-03-02"},{"lineNumber":190,"author":{"gitId":"glendonnotglen"},"content":"     * to store the extracted data up till then before converting to a String to return","lastModifiedDate":"2022-03-02"},{"lineNumber":191,"author":{"gitId":"glendonnotglen"},"content":"     *","lastModifiedDate":"2022-03-02"},{"lineNumber":192,"author":{"gitId":"glendonnotglen"},"content":"     * @return Formatted data of user\u0027s current list to be stored on the user\u0027s list.","lastModifiedDate":"2022-03-02"},{"lineNumber":193,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":194,"author":{"gitId":"glendonnotglen"},"content":"    protected static String getData() {","lastModifiedDate":"2022-02-18"},{"lineNumber":195,"author":{"gitId":"glendonnotglen"},"content":"        StringBuffer data \u003d new StringBuffer();","lastModifiedDate":"2022-02-18"},{"lineNumber":196,"author":{"gitId":"glendonnotglen"},"content":"        for (Task t : userTaskList) {","lastModifiedDate":"2022-03-01"},{"lineNumber":197,"author":{"gitId":"glendonnotglen"},"content":"            String taskData \u003d t.exportData() + \"\\n\";","lastModifiedDate":"2022-03-01"},{"lineNumber":198,"author":{"gitId":"glendonnotglen"},"content":"            data.append(taskData);","lastModifiedDate":"2022-03-01"},{"lineNumber":199,"author":{"gitId":"glendonnotglen"},"content":"        }","lastModifiedDate":"2022-02-18"},{"lineNumber":200,"author":{"gitId":"glendonnotglen"},"content":"        return data.toString();","lastModifiedDate":"2022-02-18"},{"lineNumber":201,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":202,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":203,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":204,"author":{"gitId":"glendonnotglen"},"content":"     * Driver function for when Jarvis exits and calls other functions to extract current user\u0027s list of Tasks and data.","lastModifiedDate":"2022-03-02"},{"lineNumber":205,"author":{"gitId":"glendonnotglen"},"content":"     * Creates new saved data file if it does not exist yet.","lastModifiedDate":"2022-03-02"},{"lineNumber":206,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":207,"author":{"gitId":"glendonnotglen"},"content":"    public static void saveData() {","lastModifiedDate":"2022-02-18"},{"lineNumber":208,"author":{"gitId":"glendonnotglen"},"content":"        File filename \u003d new File(\"data/Jarvis.txt\");","lastModifiedDate":"2022-02-18"},{"lineNumber":209,"author":{"gitId":"glendonnotglen"},"content":"        try {","lastModifiedDate":"2022-02-18"},{"lineNumber":210,"author":{"gitId":"glendonnotglen"},"content":"            filename.getParentFile().mkdirs();","lastModifiedDate":"2022-02-18"},{"lineNumber":211,"author":{"gitId":"glendonnotglen"},"content":"            filename.createNewFile();","lastModifiedDate":"2022-02-18"},{"lineNumber":212,"author":{"gitId":"glendonnotglen"},"content":"            FileWriter fileUpdater \u003d new FileWriter(filename);","lastModifiedDate":"2022-02-18"},{"lineNumber":213,"author":{"gitId":"glendonnotglen"},"content":"            String data \u003d getData();","lastModifiedDate":"2022-02-18"},{"lineNumber":214,"author":{"gitId":"glendonnotglen"},"content":"            fileUpdater.write(data);","lastModifiedDate":"2022-02-18"},{"lineNumber":215,"author":{"gitId":"glendonnotglen"},"content":"            fileUpdater.close();","lastModifiedDate":"2022-02-18"},{"lineNumber":216,"author":{"gitId":"glendonnotglen"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-18"},{"lineNumber":217,"author":{"gitId":"glendonnotglen"},"content":"            Ui.saveError();","lastModifiedDate":"2022-03-02"},{"lineNumber":218,"author":{"gitId":"glendonnotglen"},"content":"        }","lastModifiedDate":"2022-02-18"},{"lineNumber":219,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":220,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":221,"author":{"gitId":"glendonnotglen"},"content":"    public static ArrayList\u003cTask\u003e getSearchResult(String keyword) {","lastModifiedDate":"2022-03-02"},{"lineNumber":222,"author":{"gitId":"glendonnotglen"},"content":"        ArrayList\u003cTask\u003e resultList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-03-02"},{"lineNumber":223,"author":{"gitId":"glendonnotglen"},"content":"        for (Task t : userTaskList) {","lastModifiedDate":"2022-03-02"},{"lineNumber":224,"author":{"gitId":"glendonnotglen"},"content":"            String taskDescription \u003d t.getDescription();","lastModifiedDate":"2022-03-02"},{"lineNumber":225,"author":{"gitId":"glendonnotglen"},"content":"            if (taskDescription.contains(keyword)) {","lastModifiedDate":"2022-03-02"},{"lineNumber":226,"author":{"gitId":"glendonnotglen"},"content":"                resultList.add(t);","lastModifiedDate":"2022-03-02"},{"lineNumber":227,"author":{"gitId":"glendonnotglen"},"content":"            }","lastModifiedDate":"2022-03-02"},{"lineNumber":228,"author":{"gitId":"glendonnotglen"},"content":"        }","lastModifiedDate":"2022-03-02"},{"lineNumber":229,"author":{"gitId":"glendonnotglen"},"content":"        return resultList;","lastModifiedDate":"2022-03-02"},{"lineNumber":230,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-03-02"},{"lineNumber":231,"author":{"gitId":"glendonnotglen"},"content":"}","lastModifiedDate":"2022-02-01"}],"authorContributionMap":{"glendonnotglen":231}},{"path":"src/main/java/jarvis/display/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glendonnotglen"},"content":"package jarvis.display;","lastModifiedDate":"2022-02-09"},{"lineNumber":2,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":3,"author":{"gitId":"glendonnotglen"},"content":"import jarvis.commands.Task;","lastModifiedDate":"2022-02-09"},{"lineNumber":4,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":5,"author":{"gitId":"glendonnotglen"},"content":"public class Ui {","lastModifiedDate":"2022-03-02"},{"lineNumber":6,"author":{"gitId":"glendonnotglen"},"content":"    final static String HORIZONTAL_LINE \u003d \"____________________________________________________________\\n\";","lastModifiedDate":"2022-02-01"},{"lineNumber":7,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":8,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":9,"author":{"gitId":"glendonnotglen"},"content":"     * Function for other classes print a horizontal line when needed.","lastModifiedDate":"2022-03-02"},{"lineNumber":10,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":11,"author":{"gitId":"glendonnotglen"},"content":"    public static void horizontalLine() {","lastModifiedDate":"2022-02-01"},{"lineNumber":12,"author":{"gitId":"glendonnotglen"},"content":"        System.out.print(HORIZONTAL_LINE);","lastModifiedDate":"2022-02-01"},{"lineNumber":13,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":14,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":15,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":16,"author":{"gitId":"glendonnotglen"},"content":"     * Function prints default message for when an invalid index is given by user.","lastModifiedDate":"2022-03-02"},{"lineNumber":17,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":18,"author":{"gitId":"glendonnotglen"},"content":"    public static void outOfBounds() {","lastModifiedDate":"2022-02-01"},{"lineNumber":19,"author":{"gitId":"glendonnotglen"},"content":"        System.out.println(HORIZONTAL_LINE","lastModifiedDate":"2022-02-01"},{"lineNumber":20,"author":{"gitId":"glendonnotglen"},"content":"                + \"No such task exists. Add more tasks first!\\n\"","lastModifiedDate":"2022-02-01"},{"lineNumber":21,"author":{"gitId":"glendonnotglen"},"content":"                + HORIZONTAL_LINE);","lastModifiedDate":"2022-02-01"},{"lineNumber":22,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":23,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":24,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":25,"author":{"gitId":"glendonnotglen"},"content":"     * Prints default message for when a task is marked.","lastModifiedDate":"2022-03-02"},{"lineNumber":26,"author":{"gitId":"glendonnotglen"},"content":"     *","lastModifiedDate":"2022-03-02"},{"lineNumber":27,"author":{"gitId":"glendonnotglen"},"content":"     * @param task Task that was marked. Used to access task.getFullTask() method to get task description,","lastModifiedDate":"2022-03-02"},{"lineNumber":28,"author":{"gitId":"glendonnotglen"},"content":"     *             status and icon.","lastModifiedDate":"2022-03-02"},{"lineNumber":29,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":30,"author":{"gitId":"glendonnotglen"},"content":"    public static void printTaskMarked(Task task) {","lastModifiedDate":"2022-02-01"},{"lineNumber":31,"author":{"gitId":"glendonnotglen"},"content":"        System.out.print(HORIZONTAL_LINE);","lastModifiedDate":"2022-02-17"},{"lineNumber":32,"author":{"gitId":"glendonnotglen"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\\n\" + task.getFullTask());","lastModifiedDate":"2022-02-17"},{"lineNumber":33,"author":{"gitId":"glendonnotglen"},"content":"        System.out.print(HORIZONTAL_LINE);","lastModifiedDate":"2022-02-17"},{"lineNumber":34,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":35,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":36,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":37,"author":{"gitId":"glendonnotglen"},"content":"     * Prints default message for when a task is unmarked.","lastModifiedDate":"2022-03-02"},{"lineNumber":38,"author":{"gitId":"glendonnotglen"},"content":"     *","lastModifiedDate":"2022-03-02"},{"lineNumber":39,"author":{"gitId":"glendonnotglen"},"content":"     * @param task Task that was unmarked. Used to access task.getFullTask() method to get task description,","lastModifiedDate":"2022-03-02"},{"lineNumber":40,"author":{"gitId":"glendonnotglen"},"content":"     *             status and icon.","lastModifiedDate":"2022-03-02"},{"lineNumber":41,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":42,"author":{"gitId":"glendonnotglen"},"content":"    public static void printTaskUnmarked(Task task) {","lastModifiedDate":"2022-02-01"},{"lineNumber":43,"author":{"gitId":"glendonnotglen"},"content":"        System.out.print(HORIZONTAL_LINE);","lastModifiedDate":"2022-02-17"},{"lineNumber":44,"author":{"gitId":"glendonnotglen"},"content":"        System.out.println(\"OK, I\u0027ve marked this task as not done yet:\\n\" + task.getFullTask());","lastModifiedDate":"2022-02-17"},{"lineNumber":45,"author":{"gitId":"glendonnotglen"},"content":"        System.out.print(HORIZONTAL_LINE);","lastModifiedDate":"2022-02-17"},{"lineNumber":46,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":47,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":48,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":49,"author":{"gitId":"glendonnotglen"},"content":"     * Default message for when Jarvis first boots up. Prints out \"Welcome To Jarvis\" in fancy characters on screen.","lastModifiedDate":"2022-03-02"},{"lineNumber":50,"author":{"gitId":"glendonnotglen"},"content":"     * Access http://www.network-science.de/ascii/ to print custom messages.","lastModifiedDate":"2022-03-02"},{"lineNumber":51,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":52,"author":{"gitId":"glendonnotglen"},"content":"    public static void startingMessage() {","lastModifiedDate":"2022-02-01"},{"lineNumber":53,"author":{"gitId":"glendonnotglen"},"content":"        String message \u003d","lastModifiedDate":"2022-02-04"},{"lineNumber":54,"author":{"gitId":"glendonnotglen"},"content":"                \" _    _      _                          \\n\"","lastModifiedDate":"2022-02-04"},{"lineNumber":55,"author":{"gitId":"glendonnotglen"},"content":"                        + \"| |  | |    | |                         \\n\"","lastModifiedDate":"2022-02-04"},{"lineNumber":56,"author":{"gitId":"glendonnotglen"},"content":"                        + \"| |  | | ___| | ___ ___  _ __ ___   ___ \\n\"","lastModifiedDate":"2022-02-04"},{"lineNumber":57,"author":{"gitId":"glendonnotglen"},"content":"                        + \"| |/\\\\| |/ _ \\\\ |/ __/ _ \\\\| \u0027_ ` _ \\\\ / _ \\\\\\n\"","lastModifiedDate":"2022-02-04"},{"lineNumber":58,"author":{"gitId":"glendonnotglen"},"content":"                        + \"\\\\  /\\\\  /  __/ | (_| (_) | | | | | |  __/\\n\"","lastModifiedDate":"2022-02-04"},{"lineNumber":59,"author":{"gitId":"glendonnotglen"},"content":"                        + \" \\\\/  \\\\/ \\\\___|_|\\\\___\\\\___/|_| |_| |_|\\\\___\\n\"","lastModifiedDate":"2022-02-04"},{"lineNumber":60,"author":{"gitId":"glendonnotglen"},"content":"                        + \" _            ___                  _     \\n\"","lastModifiedDate":"2022-02-04"},{"lineNumber":61,"author":{"gitId":"glendonnotglen"},"content":"                        + \"| |          |_  |                (_)    \\n\"","lastModifiedDate":"2022-02-04"},{"lineNumber":62,"author":{"gitId":"glendonnotglen"},"content":"                        + \"| |_ ___       | | __ _ _ ____   ___ ___ \\n\"","lastModifiedDate":"2022-02-04"},{"lineNumber":63,"author":{"gitId":"glendonnotglen"},"content":"                        + \"| __/ _ \\\\      | |/ _` | \u0027__\\\\ \\\\ / / / __|\\n\"","lastModifiedDate":"2022-02-04"},{"lineNumber":64,"author":{"gitId":"glendonnotglen"},"content":"                        + \"| || (_) | /\\\\__/ / (_| | |   \\\\ V /| \\\\__ \\\\\\n\"","lastModifiedDate":"2022-02-04"},{"lineNumber":65,"author":{"gitId":"glendonnotglen"},"content":"                        + \" \\\\__\\\\___/  \\\\____/ \\\\__,_|_|    \\\\_/ |_|___/\\n\";","lastModifiedDate":"2022-02-18"},{"lineNumber":66,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":67,"author":{"gitId":"glendonnotglen"},"content":"        System.out.println(message);","lastModifiedDate":"2022-02-01"},{"lineNumber":68,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":69,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":70,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":71,"author":{"gitId":"glendonnotglen"},"content":"     * Default message to print to screen when Jarvis shuts down. Will print \"Bye! Powering down...\"","lastModifiedDate":"2022-03-02"},{"lineNumber":72,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":73,"author":{"gitId":"glendonnotglen"},"content":"    public static void closingMessage() {","lastModifiedDate":"2022-02-01"},{"lineNumber":74,"author":{"gitId":"glendonnotglen"},"content":"        String message \u003d HORIZONTAL_LINE","lastModifiedDate":"2022-02-04"},{"lineNumber":75,"author":{"gitId":"glendonnotglen"},"content":"                + \"______            _ \\n\"","lastModifiedDate":"2022-02-04"},{"lineNumber":76,"author":{"gitId":"glendonnotglen"},"content":"                + \"| ___ \\\\          | |\\n\"","lastModifiedDate":"2022-02-04"},{"lineNumber":77,"author":{"gitId":"glendonnotglen"},"content":"                + \"| |_/ /_   _  ___| |\\n\"","lastModifiedDate":"2022-02-04"},{"lineNumber":78,"author":{"gitId":"glendonnotglen"},"content":"                + \"| ___ \\\\ | | |/ _ \\\\ |\\n\"","lastModifiedDate":"2022-02-04"},{"lineNumber":79,"author":{"gitId":"glendonnotglen"},"content":"                + \"| |_/ / |_| |  __/_|\\n\"","lastModifiedDate":"2022-02-04"},{"lineNumber":80,"author":{"gitId":"glendonnotglen"},"content":"                + \"\\\\____/ \\\\__, |\\\\___(_)\\n\"","lastModifiedDate":"2022-02-04"},{"lineNumber":81,"author":{"gitId":"glendonnotglen"},"content":"                + \"        __/ |       \\n\"","lastModifiedDate":"2022-02-04"},{"lineNumber":82,"author":{"gitId":"glendonnotglen"},"content":"                + \"       |___/        \\n\"","lastModifiedDate":"2022-02-04"},{"lineNumber":83,"author":{"gitId":"glendonnotglen"},"content":"                + \"______                      _                   _                           \\n\"","lastModifiedDate":"2022-02-04"},{"lineNumber":84,"author":{"gitId":"glendonnotglen"},"content":"                + \"| ___ \\\\                    (_)                 | |                          \\n\"","lastModifiedDate":"2022-02-04"},{"lineNumber":85,"author":{"gitId":"glendonnotglen"},"content":"                + \"| |_/ /____      _____ _ __ _ _ __   __ _    __| | _____      ___ __        \\n\"","lastModifiedDate":"2022-02-04"},{"lineNumber":86,"author":{"gitId":"glendonnotglen"},"content":"                + \"|  __/ _ \\\\ \\\\ /\\\\ / / _ \\\\ \u0027__| | \u0027_ \\\\ / _` |  / _` |/ _ \\\\ \\\\ /\\\\ / / \u0027_ \\\\       \\n\"","lastModifiedDate":"2022-02-04"},{"lineNumber":87,"author":{"gitId":"glendonnotglen"},"content":"                + \"| | | (_) \\\\ V  V /  __/ |  | | | | | (_| | | (_| | (_) \\\\ V  V /| | | |_ _ _ \\n\"","lastModifiedDate":"2022-02-04"},{"lineNumber":88,"author":{"gitId":"glendonnotglen"},"content":"                + \"\\\\_|  \\\\___/ \\\\_/\\\\_/ \\\\___|_|  |_|_| |_|\\\\__, |  \\\\__,_|\\\\___/ \\\\_/\\\\_/ |_| |_(_|_|_)\\n\"","lastModifiedDate":"2022-02-04"},{"lineNumber":89,"author":{"gitId":"glendonnotglen"},"content":"                + \"                                     __/ |                                  \\n\"","lastModifiedDate":"2022-02-04"},{"lineNumber":90,"author":{"gitId":"glendonnotglen"},"content":"                + \"                                    |___/                                   \\n\"","lastModifiedDate":"2022-02-04"},{"lineNumber":91,"author":{"gitId":"glendonnotglen"},"content":"                + HORIZONTAL_LINE;","lastModifiedDate":"2022-02-01"},{"lineNumber":92,"author":{"gitId":"glendonnotglen"},"content":"        System.out.println(message);","lastModifiedDate":"2022-02-01"},{"lineNumber":93,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":94,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":95,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":96,"author":{"gitId":"glendonnotglen"},"content":"     * Default message for when an empty list is accessed.","lastModifiedDate":"2022-03-02"},{"lineNumber":97,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":98,"author":{"gitId":"glendonnotglen"},"content":"    public static void emptyList() {","lastModifiedDate":"2022-02-01"},{"lineNumber":99,"author":{"gitId":"glendonnotglen"},"content":"        String message \u003d HORIZONTAL_LINE","lastModifiedDate":"2022-02-01"},{"lineNumber":100,"author":{"gitId":"glendonnotglen"},"content":"                + \"Your list is currently empty. Try adding some items to your list first.\\n\"","lastModifiedDate":"2022-02-04"},{"lineNumber":101,"author":{"gitId":"glendonnotglen"},"content":"                + HORIZONTAL_LINE;","lastModifiedDate":"2022-02-01"},{"lineNumber":102,"author":{"gitId":"glendonnotglen"},"content":"        System.out.println(message);","lastModifiedDate":"2022-02-01"},{"lineNumber":103,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":104,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":105,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":106,"author":{"gitId":"glendonnotglen"},"content":"     * Default message for when a task is added to user\u0027s list.","lastModifiedDate":"2022-03-02"},{"lineNumber":107,"author":{"gitId":"glendonnotglen"},"content":"     *","lastModifiedDate":"2022-03-02"},{"lineNumber":108,"author":{"gitId":"glendonnotglen"},"content":"     * @param taskDescription Takes in an argument of the task\u0027s description to print to screen as well","lastModifiedDate":"2022-03-02"},{"lineNumber":109,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":110,"author":{"gitId":"glendonnotglen"},"content":"    public static void taskAdded(String taskDescription) {","lastModifiedDate":"2022-02-01"},{"lineNumber":111,"author":{"gitId":"glendonnotglen"},"content":"        String message \u003d HORIZONTAL_LINE","lastModifiedDate":"2022-02-01"},{"lineNumber":112,"author":{"gitId":"glendonnotglen"},"content":"                + \"added: \" + taskDescription + \"\\n\"","lastModifiedDate":"2022-02-01"},{"lineNumber":113,"author":{"gitId":"glendonnotglen"},"content":"                + HORIZONTAL_LINE;","lastModifiedDate":"2022-02-01"},{"lineNumber":114,"author":{"gitId":"glendonnotglen"},"content":"        System.out.println(message);","lastModifiedDate":"2022-02-01"},{"lineNumber":115,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":116,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":117,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":118,"author":{"gitId":"glendonnotglen"},"content":"     * Default message to print when a marked task is requested to be marked again.","lastModifiedDate":"2022-03-02"},{"lineNumber":119,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":120,"author":{"gitId":"glendonnotglen"},"content":"    public static void markError() {","lastModifiedDate":"2022-02-01"},{"lineNumber":121,"author":{"gitId":"glendonnotglen"},"content":"        System.out.print(HORIZONTAL_LINE);","lastModifiedDate":"2022-02-17"},{"lineNumber":122,"author":{"gitId":"glendonnotglen"},"content":"        System.out.println(\"This task is already marked as not done! Did you mean to mark it?\");","lastModifiedDate":"2022-02-01"},{"lineNumber":123,"author":{"gitId":"glendonnotglen"},"content":"        System.out.print(HORIZONTAL_LINE);","lastModifiedDate":"2022-02-17"},{"lineNumber":124,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":125,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":126,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":127,"author":{"gitId":"glendonnotglen"},"content":"     * Default message to print when an unmarked task is requested to be unmarked again.","lastModifiedDate":"2022-03-02"},{"lineNumber":128,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":129,"author":{"gitId":"glendonnotglen"},"content":"    public static void unmarkError() {","lastModifiedDate":"2022-02-01"},{"lineNumber":130,"author":{"gitId":"glendonnotglen"},"content":"        System.out.print(HORIZONTAL_LINE);","lastModifiedDate":"2022-02-17"},{"lineNumber":131,"author":{"gitId":"glendonnotglen"},"content":"        System.out.println(\"This task is already marked as done! Did to mean to unmark it?\");","lastModifiedDate":"2022-02-01"},{"lineNumber":132,"author":{"gitId":"glendonnotglen"},"content":"        System.out.print(HORIZONTAL_LINE);","lastModifiedDate":"2022-02-17"},{"lineNumber":133,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":134,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":135,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":136,"author":{"gitId":"glendonnotglen"},"content":"     * Default message for when user supplies an invalid command.","lastModifiedDate":"2022-03-02"},{"lineNumber":137,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":138,"author":{"gitId":"glendonnotglen"},"content":"    public static void invalidInput() {","lastModifiedDate":"2022-02-01"},{"lineNumber":139,"author":{"gitId":"glendonnotglen"},"content":"        System.out.println(HORIZONTAL_LINE","lastModifiedDate":"2022-02-01"},{"lineNumber":140,"author":{"gitId":"glendonnotglen"},"content":"                + \"You have entered an invalid command. Please try again\\n\"","lastModifiedDate":"2022-02-01"},{"lineNumber":141,"author":{"gitId":"glendonnotglen"},"content":"                + HORIZONTAL_LINE);","lastModifiedDate":"2022-02-01"},{"lineNumber":142,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":143,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":144,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":145,"author":{"gitId":"glendonnotglen"},"content":"     * Default message for when a user successfully removes a task from their list.","lastModifiedDate":"2022-03-02"},{"lineNumber":146,"author":{"gitId":"glendonnotglen"},"content":"     *","lastModifiedDate":"2022-03-02"},{"lineNumber":147,"author":{"gitId":"glendonnotglen"},"content":"     * @param taskRemoved Task that is removed, to reference and call .getFullTask() method to retrieve task icon,","lastModifiedDate":"2022-03-02"},{"lineNumber":148,"author":{"gitId":"glendonnotglen"},"content":"     *                    status and description","lastModifiedDate":"2022-03-02"},{"lineNumber":149,"author":{"gitId":"glendonnotglen"},"content":"     * @param listSize Size of user\u0027s list after removing task.","lastModifiedDate":"2022-03-02"},{"lineNumber":150,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":151,"author":{"gitId":"glendonnotglen"},"content":"    public static void taskDeleted(Task taskRemoved, Integer listSize) {","lastModifiedDate":"2022-02-17"},{"lineNumber":152,"author":{"gitId":"glendonnotglen"},"content":"        System.out.print(HORIZONTAL_LINE + \"I have removed this task for you:\\n\" + taskRemoved.getFullTask() + \"\\n\"","lastModifiedDate":"2022-02-17"},{"lineNumber":153,"author":{"gitId":"glendonnotglen"},"content":"                + \"You have \" + listSize.toString() + \" tasks left.\\n\" +","lastModifiedDate":"2022-02-17"},{"lineNumber":154,"author":{"gitId":"glendonnotglen"},"content":"                HORIZONTAL_LINE);","lastModifiedDate":"2022-02-17"},{"lineNumber":155,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":156,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":157,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":158,"author":{"gitId":"glendonnotglen"},"content":"     * Default message for when a saved file is detected.","lastModifiedDate":"2022-03-02"},{"lineNumber":159,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":160,"author":{"gitId":"glendonnotglen"},"content":"    public static void savedFileDetected() {","lastModifiedDate":"2022-02-18"},{"lineNumber":161,"author":{"gitId":"glendonnotglen"},"content":"        System.out.println(\"It seems there is a saved file detected. Loading file...\");","lastModifiedDate":"2022-02-18"},{"lineNumber":162,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":163,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":164,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":165,"author":{"gitId":"glendonnotglen"},"content":"     * Default message for when a saved file has been successfully loaded","lastModifiedDate":"2022-03-02"},{"lineNumber":166,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":167,"author":{"gitId":"glendonnotglen"},"content":"    public static void fileLoaded() {","lastModifiedDate":"2022-02-18"},{"lineNumber":168,"author":{"gitId":"glendonnotglen"},"content":"        System.out.println(\"Your file has been successfully loaded!\");","lastModifiedDate":"2022-02-18"},{"lineNumber":169,"author":{"gitId":"glendonnotglen"},"content":"        horizontalLine();","lastModifiedDate":"2022-02-18"},{"lineNumber":170,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":171,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":172,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":173,"author":{"gitId":"glendonnotglen"},"content":"     * Default message for when no saved data is detected for the user.","lastModifiedDate":"2022-03-02"},{"lineNumber":174,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":175,"author":{"gitId":"glendonnotglen"},"content":"    public static void noFileDetected() {","lastModifiedDate":"2022-02-18"},{"lineNumber":176,"author":{"gitId":"glendonnotglen"},"content":"        System.out.println(\"There does not seem to be any saved data. How can I help you today?\\n\" + HORIZONTAL_LINE);","lastModifiedDate":"2022-02-18"},{"lineNumber":177,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":178,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":179,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":180,"author":{"gitId":"glendonnotglen"},"content":"     * Default message to let user know that their data is being saved.","lastModifiedDate":"2022-03-02"},{"lineNumber":181,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":182,"author":{"gitId":"glendonnotglen"},"content":"    public static void savingData() {","lastModifiedDate":"2022-02-18"},{"lineNumber":183,"author":{"gitId":"glendonnotglen"},"content":"        System.out.println(\"Please hang on while we save your data...\");","lastModifiedDate":"2022-02-18"},{"lineNumber":184,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":185,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":186,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":187,"author":{"gitId":"glendonnotglen"},"content":"     * Default message for when an error has occurred while saving their data.","lastModifiedDate":"2022-03-02"},{"lineNumber":188,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":189,"author":{"gitId":"glendonnotglen"},"content":"    public static void saveError(){","lastModifiedDate":"2022-02-18"},{"lineNumber":190,"author":{"gitId":"glendonnotglen"},"content":"        System.out.println(\"There seems to be an error saving your data. Please contact Glendon.\");","lastModifiedDate":"2022-02-18"},{"lineNumber":191,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":192,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":193,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":194,"author":{"gitId":"glendonnotglen"},"content":"     * Default message for when an error has occurred while loading their data.","lastModifiedDate":"2022-03-02"},{"lineNumber":195,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":196,"author":{"gitId":"glendonnotglen"},"content":"    public static void loadError() {","lastModifiedDate":"2022-02-18"},{"lineNumber":197,"author":{"gitId":"glendonnotglen"},"content":"        System.out.println(\"There seems to be an error loading your data. Please contact Glendon.\");","lastModifiedDate":"2022-02-18"},{"lineNumber":198,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-03-02"},{"lineNumber":199,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":200,"author":{"gitId":"glendonnotglen"},"content":"    public static void emptySearchResult() {","lastModifiedDate":"2022-03-02"},{"lineNumber":201,"author":{"gitId":"glendonnotglen"},"content":"        System.out.println(HORIZONTAL_LINE);","lastModifiedDate":"2022-03-02"},{"lineNumber":202,"author":{"gitId":"glendonnotglen"},"content":"        System.out.println(\"Your search returned nothing. Try using another keyword.\");","lastModifiedDate":"2022-03-02"},{"lineNumber":203,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":204,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":205,"author":{"gitId":"glendonnotglen"},"content":"    public static void invalidDateTime() {","lastModifiedDate":"2022-03-02"},{"lineNumber":206,"author":{"gitId":"glendonnotglen"},"content":"        System.out.println(HORIZONTAL_LINE);","lastModifiedDate":"2022-03-02"},{"lineNumber":207,"author":{"gitId":"glendonnotglen"},"content":"        System.out.println(\"You have entered an invalid date/time format. Please ensure that your input date and time is of format: \\n\" +","lastModifiedDate":"2022-03-02"},{"lineNumber":208,"author":{"gitId":"glendonnotglen"},"content":"                \"DD/MM/YYYY HHMM\");","lastModifiedDate":"2022-03-02"},{"lineNumber":209,"author":{"gitId":"glendonnotglen"},"content":"        System.out.println(HORIZONTAL_LINE);","lastModifiedDate":"2022-03-02"},{"lineNumber":210,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":211,"author":{"gitId":"glendonnotglen"},"content":"}","lastModifiedDate":"2022-02-01"}],"authorContributionMap":{"glendonnotglen":211}},{"path":"src/main/java/jarvis/exceptions/JarvisInvalidInput.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glendonnotglen"},"content":"package jarvis.exceptions;","lastModifiedDate":"2022-03-01"},{"lineNumber":2,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":3,"author":{"gitId":"glendonnotglen"},"content":"public class JarvisInvalidInput extends Exception {","lastModifiedDate":"2022-03-01"},{"lineNumber":4,"author":{"gitId":"glendonnotglen"},"content":"    public JarvisInvalidInput(){","lastModifiedDate":"2022-03-01"},{"lineNumber":5,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-03-01"},{"lineNumber":6,"author":{"gitId":"glendonnotglen"},"content":"}","lastModifiedDate":"2022-03-01"}],"authorContributionMap":{"glendonnotglen":6}},{"path":"src/main/java/jarvis/exceptions/JarvisNoSavedData.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glendonnotglen"},"content":"package jarvis.exceptions;","lastModifiedDate":"2022-03-01"},{"lineNumber":2,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":3,"author":{"gitId":"glendonnotglen"},"content":"public class JarvisNoSavedData extends Exception {","lastModifiedDate":"2022-03-01"},{"lineNumber":4,"author":{"gitId":"glendonnotglen"},"content":"    public JarvisNoSavedData(){","lastModifiedDate":"2022-03-01"},{"lineNumber":5,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-03-01"},{"lineNumber":6,"author":{"gitId":"glendonnotglen"},"content":"}","lastModifiedDate":"2022-03-01"}],"authorContributionMap":{"glendonnotglen":6}},{"path":"src/main/java/jarvis/exceptions/JarvisOutOfBounds.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glendonnotglen"},"content":"package jarvis.exceptions;","lastModifiedDate":"2022-03-01"},{"lineNumber":2,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":3,"author":{"gitId":"glendonnotglen"},"content":"public class JarvisOutOfBounds extends Exception {","lastModifiedDate":"2022-03-01"},{"lineNumber":4,"author":{"gitId":"glendonnotglen"},"content":"    public JarvisOutOfBounds(){","lastModifiedDate":"2022-03-01"},{"lineNumber":5,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-03-01"},{"lineNumber":6,"author":{"gitId":"glendonnotglen"},"content":"}","lastModifiedDate":"2022-03-01"}],"authorContributionMap":{"glendonnotglen":6}},{"path":"src/main/java/jarvis/load/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"glendonnotglen"},"content":"package jarvis.load;","lastModifiedDate":"2022-03-01"},{"lineNumber":2,"author":{"gitId":"glendonnotglen"},"content":"import jarvis.commands.TaskList;","lastModifiedDate":"2022-03-02"},{"lineNumber":3,"author":{"gitId":"glendonnotglen"},"content":"import jarvis.display.Ui;","lastModifiedDate":"2022-03-02"},{"lineNumber":4,"author":{"gitId":"glendonnotglen"},"content":"import jarvis.exceptions.JarvisNoSavedData;","lastModifiedDate":"2022-03-01"},{"lineNumber":5,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":6,"author":{"gitId":"glendonnotglen"},"content":"import java.io.File;","lastModifiedDate":"2022-03-01"},{"lineNumber":7,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":8,"author":{"gitId":"glendonnotglen"},"content":"public class Storage {","lastModifiedDate":"2022-03-02"},{"lineNumber":9,"author":{"gitId":"glendonnotglen"},"content":"    private static File savedFile;","lastModifiedDate":"2022-03-01"},{"lineNumber":10,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":11,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":12,"author":{"gitId":"glendonnotglen"},"content":"     * Constructor for the Storage class.","lastModifiedDate":"2022-03-02"},{"lineNumber":13,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":14,"author":{"gitId":"glendonnotglen"},"content":"    public Storage() {","lastModifiedDate":"2022-03-01"},{"lineNumber":15,"author":{"gitId":"glendonnotglen"},"content":"        savedFile \u003d new File(\"data/Jarvis.txt\");","lastModifiedDate":"2022-03-01"},{"lineNumber":16,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-03-01"},{"lineNumber":17,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":18,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":19,"author":{"gitId":"glendonnotglen"},"content":"     * Function to load any saved file by the user.","lastModifiedDate":"2022-03-02"},{"lineNumber":20,"author":{"gitId":"glendonnotglen"},"content":"     *","lastModifiedDate":"2022-03-02"},{"lineNumber":21,"author":{"gitId":"glendonnotglen"},"content":"     * @throws JarvisNoSavedData exception to signal that the user does not have any saved file.","lastModifiedDate":"2022-03-02"},{"lineNumber":22,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":23,"author":{"gitId":"glendonnotglen"},"content":"    public static void load() throws JarvisNoSavedData {","lastModifiedDate":"2022-03-01"},{"lineNumber":24,"author":{"gitId":"glendonnotglen"},"content":"        if (hasLoadedFile(savedFile)) {","lastModifiedDate":"2022-03-01"},{"lineNumber":25,"author":{"gitId":"glendonnotglen"},"content":"            Ui.savedFileDetected();","lastModifiedDate":"2022-03-02"},{"lineNumber":26,"author":{"gitId":"glendonnotglen"},"content":"            TaskList.loadFile(savedFile);","lastModifiedDate":"2022-03-02"},{"lineNumber":27,"author":{"gitId":"glendonnotglen"},"content":"            Ui.fileLoaded();","lastModifiedDate":"2022-03-02"},{"lineNumber":28,"author":{"gitId":"glendonnotglen"},"content":"        } else {","lastModifiedDate":"2022-03-01"},{"lineNumber":29,"author":{"gitId":"glendonnotglen"},"content":"            throw new JarvisNoSavedData();","lastModifiedDate":"2022-03-01"},{"lineNumber":30,"author":{"gitId":"glendonnotglen"},"content":"        }","lastModifiedDate":"2022-03-01"},{"lineNumber":31,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-03-01"},{"lineNumber":32,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":33,"author":{"gitId":"glendonnotglen"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":34,"author":{"gitId":"glendonnotglen"},"content":"     * Function checks if the file exists and returns a boolean to indicate the existence.","lastModifiedDate":"2022-03-02"},{"lineNumber":35,"author":{"gitId":"glendonnotglen"},"content":"     *","lastModifiedDate":"2022-03-02"},{"lineNumber":36,"author":{"gitId":"glendonnotglen"},"content":"     * @param savedFile File argument to check for existence","lastModifiedDate":"2022-03-02"},{"lineNumber":37,"author":{"gitId":"glendonnotglen"},"content":"     * @return True if file does exist. False otherwise","lastModifiedDate":"2022-03-02"},{"lineNumber":38,"author":{"gitId":"glendonnotglen"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":39,"author":{"gitId":"glendonnotglen"},"content":"    protected static boolean hasLoadedFile(File savedFile) {","lastModifiedDate":"2022-03-01"},{"lineNumber":40,"author":{"gitId":"glendonnotglen"},"content":"        return savedFile.exists();","lastModifiedDate":"2022-03-01"},{"lineNumber":41,"author":{"gitId":"glendonnotglen"},"content":"    }","lastModifiedDate":"2022-03-01"},{"lineNumber":42,"author":{"gitId":"glendonnotglen"},"content":"}","lastModifiedDate":"2022-03-01"}],"authorContributionMap":{"glendonnotglen":42}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"glendonnotglen"},"content":"list","lastModifiedDate":"2022-02-04"},{"lineNumber":2,"author":{"gitId":"glendonnotglen"},"content":"todo read book","lastModifiedDate":"2022-02-04"},{"lineNumber":3,"author":{"gitId":"glendonnotglen"},"content":"deadline return book /by June 6th","lastModifiedDate":"2022-02-04"},{"lineNumber":4,"author":{"gitId":"glendonnotglen"},"content":"event project meeting /at Aug 6th 2-4pm","lastModifiedDate":"2022-02-04"},{"lineNumber":5,"author":{"gitId":"glendonnotglen"},"content":"todo join sports club","lastModifiedDate":"2022-02-04"},{"lineNumber":6,"author":{"gitId":"glendonnotglen"},"content":"mark 1","lastModifiedDate":"2022-02-04"},{"lineNumber":7,"author":{"gitId":"glendonnotglen"},"content":"mark 2","lastModifiedDate":"2022-02-04"},{"lineNumber":8,"author":{"gitId":"glendonnotglen"},"content":"mark 2","lastModifiedDate":"2022-02-04"},{"lineNumber":9,"author":{"gitId":"glendonnotglen"},"content":"unmark 2","lastModifiedDate":"2022-02-04"},{"lineNumber":10,"author":{"gitId":"glendonnotglen"},"content":"unmark 2","lastModifiedDate":"2022-02-04"},{"lineNumber":11,"author":{"gitId":"glendonnotglen"},"content":"mark 4","lastModifiedDate":"2022-02-04"},{"lineNumber":12,"author":{"gitId":"glendonnotglen"},"content":"todo borrow book","lastModifiedDate":"2022-02-04"},{"lineNumber":13,"author":{"gitId":"glendonnotglen"},"content":"list","lastModifiedDate":"2022-02-04"},{"lineNumber":14,"author":{"gitId":"glendonnotglen"},"content":"deadline return book /by Sunday","lastModifiedDate":"2022-02-04"},{"lineNumber":15,"author":{"gitId":"glendonnotglen"},"content":"event project meeting /at Mon 2-4pm","lastModifiedDate":"2022-02-04"},{"lineNumber":16,"author":{"gitId":"glendonnotglen"},"content":"delete 2","lastModifiedDate":"2022-02-17"},{"lineNumber":17,"author":{"gitId":"glendonnotglen"},"content":"delete 6","lastModifiedDate":"2022-02-17"},{"lineNumber":18,"author":{"gitId":"glendonnotglen"},"content":"delete 10","lastModifiedDate":"2022-02-17"},{"lineNumber":19,"author":{"gitId":"glendonnotglen"},"content":"bye","lastModifiedDate":"2022-02-04"}],"authorContributionMap":{"glendonnotglen":19}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"glendonnotglen"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\jarvis\\*.java ..\\src\\main\\java\\jarvis\\commands\\*.java ..\\src\\main\\java\\jarvis\\display\\*.java ..\\src\\main\\java\\jarvis\\exceptions\\*.java","lastModifiedDate":"2022-02-17"},{"lineNumber":11,"author":{"gitId":"glendonnotglen"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"glendonnotglen"},"content":"java -classpath ..\\bin jarvis.Jarvis \u003c input.txt \u003e output.TXT","lastModifiedDate":"2022-02-17"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"glendonnotglen"},"content":"FC output.TXT EXPECTED.TXT","lastModifiedDate":"2022-02-17"}],"authorContributionMap":{"glendonnotglen":4,"-":18}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"glendonnotglen"},"content":"java -classpath ../bin Jarvis \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2022-02-04"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"glendonnotglen":1,"-":37}}]
