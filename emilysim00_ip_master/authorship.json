[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"emilysim00"},"content":"# Hi, this is EM! Please chat with me!","lastModifiedDate":"2022-02-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"emilysim00"},"content":"I am your personal task manager. I am able to keep track of all the tasks you created. ","lastModifiedDate":"2022-02-28"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":5,"author":{"gitId":"emilysim00"},"content":"Gven below is a brief summary of what I can do. ","lastModifiedDate":"2022-02-28"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"emilysim00"},"content":"## Summary of what EM is capable of","lastModifiedDate":"2022-02-28"},{"lineNumber":8,"author":{"gitId":"emilysim00"},"content":"- Able to create three type of tasks:","lastModifiedDate":"2022-02-28"},{"lineNumber":9,"author":{"gitId":"emilysim00"},"content":"   1. Todo: Things you plan to complete, no time constraint given.","lastModifiedDate":"2022-02-28"},{"lineNumber":10,"author":{"gitId":"emilysim00"},"content":"   2. Event: An occasion to attend such as project meetings, social gatherings or an upcoming exam/midterms. ","lastModifiedDate":"2022-02-28"},{"lineNumber":11,"author":{"gitId":"emilysim00"},"content":"   3. Deadline: Tasks that have a deadline for you to meet.","lastModifiedDate":"2022-02-28"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"emilysim00"},"content":"- Able to keep track of whether the task is completed, by marking the task as completed/not completed.","lastModifiedDate":"2022-02-28"},{"lineNumber":14,"author":{"gitId":"emilysim00"},"content":"   - \u0027[X]\u0027 Task Completed","lastModifiedDate":"2022-02-28"},{"lineNumber":15,"author":{"gitId":"emilysim00"},"content":"   - \u0027[ ]\u0027 Task Not Completed","lastModifiedDate":"2022-02-28"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"emilysim00"},"content":"## User Guide","lastModifiedDate":"2022-02-28"},{"lineNumber":18,"author":{"gitId":"emilysim00"},"content":"To find out more details on how to interact with EM, please refer to *[User Guide](https://github.com/emilysim00/ip/tree/master/docs)*.","lastModifiedDate":"2022-02-28"}],"authorContributionMap":{"emilysim00":13,"-":5}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"emilysim00"},"content":"# User Guide for EM","lastModifiedDate":"2022-03-03"},{"lineNumber":2,"author":{"gitId":"emilysim00"},"content":"Em is a program that helps to keep track of all tasks created by the user via a Command Line Interface (CLI).","lastModifiedDate":"2022-03-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"emilysim00"},"content":"### Create a New Task","lastModifiedDate":"2022-03-03"},{"lineNumber":6,"author":{"gitId":"emilysim00"},"content":"Create a new task that is either a deadline, an event, or a todo, and add it ","lastModifiedDate":"2022-03-03"},{"lineNumber":7,"author":{"gitId":"emilysim00"},"content":"to EM\u0027s list. Em\u0027s list keep track of all other tasks that you have previously created.","lastModifiedDate":"2022-03-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":9,"author":{"gitId":"emilysim00"},"content":"### Mark Tasks as Complete/Incomplete","lastModifiedDate":"2022-03-03"},{"lineNumber":10,"author":{"gitId":"emilysim00"},"content":"EM is able to update your task completion status in EM\u0027s list accordingly to what you have told her. ","lastModifiedDate":"2022-03-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":12,"author":{"gitId":"emilysim00"},"content":"### Display Tasks ","lastModifiedDate":"2022-03-03"},{"lineNumber":13,"author":{"gitId":"emilysim00"},"content":"Display all the tasks that you have created and saved in EM\u0027s list. ","lastModifiedDate":"2022-03-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":15,"author":{"gitId":"emilysim00"},"content":"### Delete an Existing Task ","lastModifiedDate":"2022-03-03"},{"lineNumber":16,"author":{"gitId":"emilysim00"},"content":"Remove a task that you no longer wish to see in EM\u0027s list. ","lastModifiedDate":"2022-03-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":18,"author":{"gitId":"emilysim00"},"content":"### Search for an Existing Task","lastModifiedDate":"2022-03-03"},{"lineNumber":19,"author":{"gitId":"emilysim00"},"content":"Enter a keyword search and EM will show you all the tasks that matches your keyword search. ","lastModifiedDate":"2022-03-03"},{"lineNumber":20,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":21,"author":{"gitId":"emilysim00"},"content":"### Automatic Saving of Task Data to Local em.Storage","lastModifiedDate":"2022-03-03"},{"lineNumber":22,"author":{"gitId":"emilysim00"},"content":"Whenever you create, update or delete a task, EM will automatically save these changes into a file that is stored","lastModifiedDate":"2022-03-03"},{"lineNumber":23,"author":{"gitId":"emilysim00"},"content":"locally on your system. The file can be found in \"../database/database.txt\".","lastModifiedDate":"2022-03-03"},{"lineNumber":24,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":25,"author":{"gitId":"emilysim00"},"content":"---","lastModifiedDate":"2022-03-03"},{"lineNumber":26,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":27,"author":{"gitId":"emilysim00"},"content":"## Quick Start","lastModifiedDate":"2022-03-03"},{"lineNumber":28,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":29,"author":{"gitId":"emilysim00"},"content":"1. Ensure that you have installed Java 11 or above in your computer.","lastModifiedDate":"2022-03-03"},{"lineNumber":30,"author":{"gitId":"emilysim00"},"content":"2. Download the JAR file for EM from *[here](https://github.com/emilysim00/ip/releases/latest)*.","lastModifiedDate":"2022-03-03"},{"lineNumber":31,"author":{"gitId":"emilysim00"},"content":"3. Create a new folder in your computer and copy `ip.jar` file into it.","lastModifiedDate":"2022-03-03"},{"lineNumber":32,"author":{"gitId":"emilysim00"},"content":"4. Open your terminal/command prompt and set the path of the new folder as your working directory.","lastModifiedDate":"2022-03-03"},{"lineNumber":33,"author":{"gitId":"emilysim00"},"content":"5. Start EM with `java -jar ip.jar` in the terminal/command prompt.","lastModifiedDate":"2022-03-03"},{"lineNumber":34,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":35,"author":{"gitId":"emilysim00"},"content":"---","lastModifiedDate":"2022-03-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":37,"author":{"gitId":"-"},"content":"## Usage","lastModifiedDate":"2019-07-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":39,"author":{"gitId":"emilysim00"},"content":"### `todo` - Create a Todo task","lastModifiedDate":"2022-03-03"},{"lineNumber":40,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":41,"author":{"gitId":"emilysim00"},"content":"Creates a new Todo task. A Todo task only requires task description and does not have a deadline or time. ","lastModifiedDate":"2022-03-03"},{"lineNumber":42,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":43,"author":{"gitId":"emilysim00"},"content":"Syntax: `todo \u003ctask description\u003e`","lastModifiedDate":"2022-03-03"},{"lineNumber":44,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":45,"author":{"gitId":"emilysim00"},"content":"| Parameters           | Description                      |","lastModifiedDate":"2022-03-03"},{"lineNumber":46,"author":{"gitId":"emilysim00"},"content":"|----------------------|----------------------------------|","lastModifiedDate":"2022-03-03"},{"lineNumber":47,"author":{"gitId":"emilysim00"},"content":"| `\u003ctask description\u003e` | Information about the Todo task. |","lastModifiedDate":"2022-03-03"},{"lineNumber":48,"author":{"gitId":"emilysim00"},"content":"**Example**","lastModifiedDate":"2022-03-03"},{"lineNumber":49,"author":{"gitId":"emilysim00"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":50,"author":{"gitId":"emilysim00"},"content":"\u003e todo read a book","lastModifiedDate":"2022-03-03"},{"lineNumber":51,"author":{"gitId":"emilysim00"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":52,"author":{"gitId":"emilysim00"},"content":"**Expected Outcome**","lastModifiedDate":"2022-03-03"},{"lineNumber":53,"author":{"gitId":"emilysim00"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":54,"author":{"gitId":"emilysim00"},"content":"------------------------------------------------------------","lastModifiedDate":"2022-03-03"},{"lineNumber":55,"author":{"gitId":"emilysim00"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2022-03-03"},{"lineNumber":56,"author":{"gitId":"emilysim00"},"content":"[T][ ] read a book","lastModifiedDate":"2022-03-03"},{"lineNumber":57,"author":{"gitId":"emilysim00"},"content":"Now you have 1 tasks in the list.","lastModifiedDate":"2022-03-03"},{"lineNumber":58,"author":{"gitId":"emilysim00"},"content":"------------------------------------------------------------","lastModifiedDate":"2022-03-03"},{"lineNumber":59,"author":{"gitId":"emilysim00"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":60,"author":{"gitId":"emilysim00"},"content":"A new todo task \"read a book\" has been successfully created and added to EM\u0027s list.","lastModifiedDate":"2022-03-03"},{"lineNumber":61,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":62,"author":{"gitId":"emilysim00"},"content":"### `event` - Create an Event task","lastModifiedDate":"2022-03-03"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":64,"author":{"gitId":"emilysim00"},"content":"Creates a new Event task. An Event task requires both task description and a date and time.","lastModifiedDate":"2022-03-03"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":67,"author":{"gitId":"emilysim00"},"content":"Syntax: `event \u003ctask description\u003e /at \u003cdate time\u003e`","lastModifiedDate":"2022-03-03"},{"lineNumber":68,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":69,"author":{"gitId":"emilysim00"},"content":"| Parameter            | Description                                                                                       |","lastModifiedDate":"2022-03-03"},{"lineNumber":70,"author":{"gitId":"emilysim00"},"content":"|----------------------|---------------------------------------------------------------------------------------------------|","lastModifiedDate":"2022-03-03"},{"lineNumber":71,"author":{"gitId":"emilysim00"},"content":"| `\u003ctask description\u003e` | Information about the Event task.                                                                 |","lastModifiedDate":"2022-03-03"},{"lineNumber":72,"author":{"gitId":"emilysim00"},"content":"| `\u003cdate time\u003e`        | When the event is set to occur. Format: YYYY-MM-DD HHmm, where HHmm is the time in 24-hour format. |","lastModifiedDate":"2022-03-03"},{"lineNumber":73,"author":{"gitId":"emilysim00"},"content":"**Example**","lastModifiedDate":"2022-03-03"},{"lineNumber":74,"author":{"gitId":"emilysim00"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":75,"author":{"gitId":"emilysim00"},"content":"\u003e event meet kelly @ finefoods /at 2021-04-11 1400","lastModifiedDate":"2022-03-03"},{"lineNumber":76,"author":{"gitId":"emilysim00"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":77,"author":{"gitId":"emilysim00"},"content":"**Expected Outcome**","lastModifiedDate":"2022-03-03"},{"lineNumber":78,"author":{"gitId":"emilysim00"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":79,"author":{"gitId":"emilysim00"},"content":"------------------------------------------------------------","lastModifiedDate":"2022-03-03"},{"lineNumber":80,"author":{"gitId":"emilysim00"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2022-03-03"},{"lineNumber":81,"author":{"gitId":"emilysim00"},"content":"[E][ ] meet kelly @ finefoods  (at: Apr-11-2021 2:00PM)","lastModifiedDate":"2022-03-03"},{"lineNumber":82,"author":{"gitId":"emilysim00"},"content":"Now you have 2 tasks in the list.","lastModifiedDate":"2022-03-03"},{"lineNumber":83,"author":{"gitId":"emilysim00"},"content":"------------------------------------------------------------","lastModifiedDate":"2022-03-03"},{"lineNumber":84,"author":{"gitId":"emilysim00"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":85,"author":{"gitId":"emilysim00"},"content":"A new event task \"meet kelly @ finefoods\" has been successfully created and added to EM\u0027s list.The 24-hour format is being converted to 12-hour format. ","lastModifiedDate":"2022-03-03"},{"lineNumber":86,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":87,"author":{"gitId":"emilysim00"},"content":"### `deadline` - Create a Deadline task","lastModifiedDate":"2022-03-03"},{"lineNumber":88,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":89,"author":{"gitId":"emilysim00"},"content":"Creates a new deadline task. A Deadline task requires task description and a deadline. The deadline consists of both date and time. ","lastModifiedDate":"2022-03-03"},{"lineNumber":90,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":91,"author":{"gitId":"emilysim00"},"content":"Syntax: `deadline \u003ctask description\u003e /by \u003cdate time\u003e`","lastModifiedDate":"2022-03-03"},{"lineNumber":92,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":93,"author":{"gitId":"emilysim00"},"content":"| Parameter             | Description                                                                                          |","lastModifiedDate":"2022-03-03"},{"lineNumber":94,"author":{"gitId":"emilysim00"},"content":"|-----------------------|------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2022-03-03"},{"lineNumber":95,"author":{"gitId":"emilysim00"},"content":"| `\u003ctask description\u003e`  | Information about the Deadline task.                                                                 |","lastModifiedDate":"2022-03-03"},{"lineNumber":96,"author":{"gitId":"emilysim00"},"content":"| `\u003cdate time\u003e` | When the deadline is set. Format: YYYY-MM-DD HHmm, where HHmm is the time in 24-hour format. |","lastModifiedDate":"2022-03-03"},{"lineNumber":97,"author":{"gitId":"emilysim00"},"content":"**Example**","lastModifiedDate":"2022-03-03"},{"lineNumber":98,"author":{"gitId":"emilysim00"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":99,"author":{"gitId":"emilysim00"},"content":"\u003e deadline assignment 3 /by 2022-01-02 1330","lastModifiedDate":"2022-03-03"},{"lineNumber":100,"author":{"gitId":"emilysim00"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":101,"author":{"gitId":"emilysim00"},"content":"**Expected Outcome**","lastModifiedDate":"2022-03-03"},{"lineNumber":102,"author":{"gitId":"emilysim00"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":103,"author":{"gitId":"emilysim00"},"content":"------------------------------------------------------------","lastModifiedDate":"2022-03-03"},{"lineNumber":104,"author":{"gitId":"emilysim00"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2022-03-03"},{"lineNumber":105,"author":{"gitId":"emilysim00"},"content":"[D][ ] assignment 3  (by: Jan-2-2022 1:30PM)","lastModifiedDate":"2022-03-03"},{"lineNumber":106,"author":{"gitId":"emilysim00"},"content":"Now you have 3 tasks in the list.","lastModifiedDate":"2022-03-03"},{"lineNumber":107,"author":{"gitId":"emilysim00"},"content":"------------------------------------------------------------","lastModifiedDate":"2022-03-03"},{"lineNumber":108,"author":{"gitId":"emilysim00"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":109,"author":{"gitId":"emilysim00"},"content":"A new deadline task \"assignment 3\" with a deadline on \"Jan-2-2022 1:30PM\" has been successfully ","lastModifiedDate":"2022-03-03"},{"lineNumber":110,"author":{"gitId":"emilysim00"},"content":"created and added to EM\u0027s list.The 24-hour format is being converted to 12-hour format. ","lastModifiedDate":"2022-03-03"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":112,"author":{"gitId":"emilysim00"},"content":"### `mark` - Mark a task as completed","lastModifiedDate":"2022-03-03"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":114,"author":{"gitId":"emilysim00"},"content":"Mark a task in EM\u0027s list as completed.","lastModifiedDate":"2022-03-03"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":116,"author":{"gitId":"emilysim00"},"content":"Syntax: `mark \u003ctask number\u003e`","lastModifiedDate":"2022-03-03"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":119,"author":{"gitId":"emilysim00"},"content":"| Parameter      | Description                                                                       |","lastModifiedDate":"2022-03-03"},{"lineNumber":120,"author":{"gitId":"emilysim00"},"content":"|----------------|-----------------------------------------------------------------------------------|","lastModifiedDate":"2022-03-03"},{"lineNumber":121,"author":{"gitId":"emilysim00"},"content":"| `\u003ctask number\u003e` | The numbering of the task stored in EM\u0027s list that you want to mark as completed. |","lastModifiedDate":"2022-03-03"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":123,"author":{"gitId":"emilysim00"},"content":"**Example**","lastModifiedDate":"2022-03-03"},{"lineNumber":124,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":125,"author":{"gitId":"emilysim00"},"content":"Assume, your task list contains the following tasks (obtain from `list` command):","lastModifiedDate":"2022-03-03"},{"lineNumber":126,"author":{"gitId":"emilysim00"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":127,"author":{"gitId":"emilysim00"},"content":"------------------------------------------------------------","lastModifiedDate":"2022-03-03"},{"lineNumber":128,"author":{"gitId":"emilysim00"},"content":"Here are the tasks in your list:","lastModifiedDate":"2022-03-03"},{"lineNumber":129,"author":{"gitId":"emilysim00"},"content":"1. [T][ ] read a book","lastModifiedDate":"2022-03-03"},{"lineNumber":130,"author":{"gitId":"emilysim00"},"content":"2. [E][ ] meet kelly @ finefoods  (at: Apr-11-2021 2:00PM)","lastModifiedDate":"2022-03-03"},{"lineNumber":131,"author":{"gitId":"emilysim00"},"content":"3. [D][ ] assignment 3  (by: Jan-2-2022 1:30PM)","lastModifiedDate":"2022-03-03"},{"lineNumber":132,"author":{"gitId":"emilysim00"},"content":"------------------------------------------------------------","lastModifiedDate":"2022-03-03"},{"lineNumber":133,"author":{"gitId":"emilysim00"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":134,"author":{"gitId":"emilysim00"},"content":"To mark the second task as completed, enter the following command:","lastModifiedDate":"2022-03-03"},{"lineNumber":135,"author":{"gitId":"emilysim00"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":136,"author":{"gitId":"emilysim00"},"content":"\u003e mark 2","lastModifiedDate":"2022-03-03"},{"lineNumber":137,"author":{"gitId":"emilysim00"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":138,"author":{"gitId":"emilysim00"},"content":"**Expected Outcome**","lastModifiedDate":"2022-03-03"},{"lineNumber":139,"author":{"gitId":"emilysim00"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":140,"author":{"gitId":"emilysim00"},"content":"------------------------------------------------------------","lastModifiedDate":"2022-03-03"},{"lineNumber":141,"author":{"gitId":"emilysim00"},"content":"OK, I\u0027ve marked this task as done:","lastModifiedDate":"2022-03-03"},{"lineNumber":142,"author":{"gitId":"emilysim00"},"content":"[E][X] meet kelly @ finefoods  (at: Apr-11-2021 2:00PM)","lastModifiedDate":"2022-03-03"},{"lineNumber":143,"author":{"gitId":"emilysim00"},"content":"------------------------------------------------------------","lastModifiedDate":"2022-03-03"},{"lineNumber":144,"author":{"gitId":"emilysim00"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":145,"author":{"gitId":"emilysim00"},"content":"If you run `list` command again, you will observe that the marked task (second task) is being ","lastModifiedDate":"2022-03-03"},{"lineNumber":146,"author":{"gitId":"emilysim00"},"content":"updated from `[ ]` to `[X]`, indicating the task as being completed.","lastModifiedDate":"2022-03-03"},{"lineNumber":147,"author":{"gitId":"emilysim00"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":148,"author":{"gitId":"emilysim00"},"content":"------------------------------------------------------------","lastModifiedDate":"2022-03-03"},{"lineNumber":149,"author":{"gitId":"emilysim00"},"content":"Here are the tasks in your list:","lastModifiedDate":"2022-03-03"},{"lineNumber":150,"author":{"gitId":"emilysim00"},"content":"1. [T][ ] read a book","lastModifiedDate":"2022-03-03"},{"lineNumber":151,"author":{"gitId":"emilysim00"},"content":"2. [E][X] meet kelly @ finefoods  (at: Apr-11-2021 2:00PM)","lastModifiedDate":"2022-03-03"},{"lineNumber":152,"author":{"gitId":"emilysim00"},"content":"3. [D][ ] assignment 3  (by: Jan-2-2022 1:30PM)","lastModifiedDate":"2022-03-03"},{"lineNumber":153,"author":{"gitId":"emilysim00"},"content":"------------------------------------------------------------","lastModifiedDate":"2022-03-03"},{"lineNumber":154,"author":{"gitId":"emilysim00"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":155,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":156,"author":{"gitId":"emilysim00"},"content":"### `unmark` - Unmarked a task as incomplete","lastModifiedDate":"2022-03-03"},{"lineNumber":157,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":158,"author":{"gitId":"emilysim00"},"content":"Mark a task in EM\u0027s list as incomplete.","lastModifiedDate":"2022-03-03"},{"lineNumber":159,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":160,"author":{"gitId":"emilysim00"},"content":"Syntax: `unmark \u003ctask number\u003e`","lastModifiedDate":"2022-03-03"},{"lineNumber":161,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":162,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":163,"author":{"gitId":"emilysim00"},"content":"| Parameter      | Description                                                                          |","lastModifiedDate":"2022-03-03"},{"lineNumber":164,"author":{"gitId":"emilysim00"},"content":"|----------------|--------------------------------------------------------------------------------------|","lastModifiedDate":"2022-03-03"},{"lineNumber":165,"author":{"gitId":"emilysim00"},"content":"| `\u003ctask number\u003e` | The numbering of the task stored in EM\u0027s list that you want to unmark as incomplete. |","lastModifiedDate":"2022-03-03"},{"lineNumber":166,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":167,"author":{"gitId":"emilysim00"},"content":"**Example**","lastModifiedDate":"2022-03-03"},{"lineNumber":168,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":169,"author":{"gitId":"emilysim00"},"content":"Initially, your task list contains the following tasks (obtain from `list` command):","lastModifiedDate":"2022-03-03"},{"lineNumber":170,"author":{"gitId":"emilysim00"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":171,"author":{"gitId":"emilysim00"},"content":"------------------------------------------------------------","lastModifiedDate":"2022-03-03"},{"lineNumber":172,"author":{"gitId":"emilysim00"},"content":"Here are the tasks in your list:","lastModifiedDate":"2022-03-03"},{"lineNumber":173,"author":{"gitId":"emilysim00"},"content":"1. [T][ ] read a book","lastModifiedDate":"2022-03-03"},{"lineNumber":174,"author":{"gitId":"emilysim00"},"content":"2. [E][X] meet kelly @ finefoods  (at: Apr-11-2021 2:00PM)","lastModifiedDate":"2022-03-03"},{"lineNumber":175,"author":{"gitId":"emilysim00"},"content":"3. [D][ ] assignment 3  (by: Jan-2-2022 1:30PM)","lastModifiedDate":"2022-03-03"},{"lineNumber":176,"author":{"gitId":"emilysim00"},"content":"------------------------------------------------------------","lastModifiedDate":"2022-03-03"},{"lineNumber":177,"author":{"gitId":"emilysim00"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":178,"author":{"gitId":"emilysim00"},"content":"To mark the second task as incomplete, enter the following command:","lastModifiedDate":"2022-03-03"},{"lineNumber":179,"author":{"gitId":"emilysim00"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":180,"author":{"gitId":"emilysim00"},"content":"\u003e unmark 2","lastModifiedDate":"2022-03-03"},{"lineNumber":181,"author":{"gitId":"emilysim00"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":182,"author":{"gitId":"emilysim00"},"content":"**Expected Outcome**","lastModifiedDate":"2022-03-03"},{"lineNumber":183,"author":{"gitId":"emilysim00"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":184,"author":{"gitId":"emilysim00"},"content":"------------------------------------------------------------","lastModifiedDate":"2022-03-03"},{"lineNumber":185,"author":{"gitId":"emilysim00"},"content":"OK, I\u0027ve marked this task as not done yet:","lastModifiedDate":"2022-03-03"},{"lineNumber":186,"author":{"gitId":"emilysim00"},"content":"[E][ ] meet kelly @ finefoods  (at: Apr-11-2021 2:00PM)","lastModifiedDate":"2022-03-03"},{"lineNumber":187,"author":{"gitId":"emilysim00"},"content":"------------------------------------------------------------","lastModifiedDate":"2022-03-03"},{"lineNumber":188,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":189,"author":{"gitId":"emilysim00"},"content":"If you run `list` command again, you will observe that the previously marked task (second task) is being","lastModifiedDate":"2022-03-03"},{"lineNumber":190,"author":{"gitId":"emilysim00"},"content":"updated from `[X]` to `[ ]`, indicating the task as being incomplete.","lastModifiedDate":"2022-03-03"},{"lineNumber":191,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":192,"author":{"gitId":"emilysim00"},"content":"------------------------------------------------------------","lastModifiedDate":"2022-03-03"},{"lineNumber":193,"author":{"gitId":"emilysim00"},"content":"Here are the tasks in your list:","lastModifiedDate":"2022-03-03"},{"lineNumber":194,"author":{"gitId":"emilysim00"},"content":"1. [T][ ] read a book","lastModifiedDate":"2022-03-03"},{"lineNumber":195,"author":{"gitId":"emilysim00"},"content":"2. [E][ ] meet kelly @ finefoods  (at: Apr-11-2021 2:00PM)","lastModifiedDate":"2022-03-03"},{"lineNumber":196,"author":{"gitId":"emilysim00"},"content":"3. [D][ ] assignment 3  (by: Jan-2-2022 1:30PM)","lastModifiedDate":"2022-03-03"},{"lineNumber":197,"author":{"gitId":"emilysim00"},"content":"------------------------------------------------------------","lastModifiedDate":"2022-03-03"},{"lineNumber":198,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":199,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":200,"author":{"gitId":"emilysim00"},"content":"### `list` - Show all tasks","lastModifiedDate":"2022-03-03"},{"lineNumber":201,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":202,"author":{"gitId":"emilysim00"},"content":"List down all the tasks that have been created and stored in EM\u0027s list.","lastModifiedDate":"2022-03-03"},{"lineNumber":203,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":204,"author":{"gitId":"emilysim00"},"content":"Syntax: `list`","lastModifiedDate":"2022-03-03"},{"lineNumber":205,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":206,"author":{"gitId":"emilysim00"},"content":"**Example**","lastModifiedDate":"2022-03-03"},{"lineNumber":207,"author":{"gitId":"emilysim00"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":208,"author":{"gitId":"emilysim00"},"content":"\u003e list","lastModifiedDate":"2022-03-03"},{"lineNumber":209,"author":{"gitId":"emilysim00"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":210,"author":{"gitId":"emilysim00"},"content":"**Expected Outcome**","lastModifiedDate":"2022-03-03"},{"lineNumber":211,"author":{"gitId":"emilysim00"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":212,"author":{"gitId":"emilysim00"},"content":"------------------------------------------------------------","lastModifiedDate":"2022-03-03"},{"lineNumber":213,"author":{"gitId":"emilysim00"},"content":"Here are the tasks in your list:","lastModifiedDate":"2022-03-03"},{"lineNumber":214,"author":{"gitId":"emilysim00"},"content":"1. [T][ ] read a book","lastModifiedDate":"2022-03-03"},{"lineNumber":215,"author":{"gitId":"emilysim00"},"content":"2. [E][ ] meet kelly @ finefoods  (at: Apr-11-2021 2:00PM)","lastModifiedDate":"2022-03-03"},{"lineNumber":216,"author":{"gitId":"emilysim00"},"content":"3. [D][ ] assignment 3  (by: Jan-2-2022 1:30PM)","lastModifiedDate":"2022-03-03"},{"lineNumber":217,"author":{"gitId":"emilysim00"},"content":"------------------------------------------------------------","lastModifiedDate":"2022-03-03"},{"lineNumber":218,"author":{"gitId":"emilysim00"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":219,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":220,"author":{"gitId":"emilysim00"},"content":"### `delete` - Delete a task ","lastModifiedDate":"2022-03-03"},{"lineNumber":221,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":222,"author":{"gitId":"emilysim00"},"content":"Delete a task stored in EM\u0027s list.","lastModifiedDate":"2022-03-03"},{"lineNumber":223,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":224,"author":{"gitId":"emilysim00"},"content":"Syntax: `delete \u003ctask number\u003e`","lastModifiedDate":"2022-03-03"},{"lineNumber":225,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":226,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":227,"author":{"gitId":"emilysim00"},"content":"| Parameter      | Description                                                            |","lastModifiedDate":"2022-03-03"},{"lineNumber":228,"author":{"gitId":"emilysim00"},"content":"|----------------|------------------------------------------------------------------------|","lastModifiedDate":"2022-03-03"},{"lineNumber":229,"author":{"gitId":"emilysim00"},"content":"| `\u003ctask number\u003e` | The numbering of the task stored in EM\u0027s list that you want to delete. |","lastModifiedDate":"2022-03-03"},{"lineNumber":230,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":231,"author":{"gitId":"emilysim00"},"content":"**Example**","lastModifiedDate":"2022-03-03"},{"lineNumber":232,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":233,"author":{"gitId":"emilysim00"},"content":"Assume your current task list contains the following tasks (obtain from `list` command):","lastModifiedDate":"2022-03-03"},{"lineNumber":234,"author":{"gitId":"emilysim00"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":235,"author":{"gitId":"emilysim00"},"content":"------------------------------------------------------------","lastModifiedDate":"2022-03-03"},{"lineNumber":236,"author":{"gitId":"emilysim00"},"content":"Here are the tasks in your list:","lastModifiedDate":"2022-03-03"},{"lineNumber":237,"author":{"gitId":"emilysim00"},"content":"1. [T][ ] read a book","lastModifiedDate":"2022-03-03"},{"lineNumber":238,"author":{"gitId":"emilysim00"},"content":"2. [E][ ] meet kelly @ finefoods  (at: Apr-11-2021 2:00PM)","lastModifiedDate":"2022-03-03"},{"lineNumber":239,"author":{"gitId":"emilysim00"},"content":"3. [D][ ] assignment 3  (by: Jan-2-2022 1:30PM)","lastModifiedDate":"2022-03-03"},{"lineNumber":240,"author":{"gitId":"emilysim00"},"content":"------------------------------------------------------------","lastModifiedDate":"2022-03-03"},{"lineNumber":241,"author":{"gitId":"emilysim00"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":242,"author":{"gitId":"emilysim00"},"content":"To delete the second task, you can enter the following command:","lastModifiedDate":"2022-03-03"},{"lineNumber":243,"author":{"gitId":"emilysim00"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":244,"author":{"gitId":"emilysim00"},"content":"\u003e delete 2","lastModifiedDate":"2022-03-03"},{"lineNumber":245,"author":{"gitId":"emilysim00"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":246,"author":{"gitId":"emilysim00"},"content":"**Expected Outcome**","lastModifiedDate":"2022-03-03"},{"lineNumber":247,"author":{"gitId":"emilysim00"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":248,"author":{"gitId":"emilysim00"},"content":"------------------------------------------------------------","lastModifiedDate":"2022-03-03"},{"lineNumber":249,"author":{"gitId":"emilysim00"},"content":"Noted. I\u0027ve removed this task:","lastModifiedDate":"2022-03-03"},{"lineNumber":250,"author":{"gitId":"emilysim00"},"content":"[E][ ] meet kelly @ finefoods (at: Apr-11-2021 2:00PM)","lastModifiedDate":"2022-03-03"},{"lineNumber":251,"author":{"gitId":"emilysim00"},"content":"Now you have 2 tasks in the list.","lastModifiedDate":"2022-03-03"},{"lineNumber":252,"author":{"gitId":"emilysim00"},"content":"------------------------------------------------------------","lastModifiedDate":"2022-03-03"},{"lineNumber":253,"author":{"gitId":"emilysim00"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":254,"author":{"gitId":"emilysim00"},"content":"If you run `list` command again, you will observe that the deleted task have been removed from EM\u0027s list.","lastModifiedDate":"2022-03-03"},{"lineNumber":255,"author":{"gitId":"emilysim00"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":256,"author":{"gitId":"emilysim00"},"content":"------------------------------------------------------------","lastModifiedDate":"2022-03-03"},{"lineNumber":257,"author":{"gitId":"emilysim00"},"content":"Here are the tasks in your list:","lastModifiedDate":"2022-03-03"},{"lineNumber":258,"author":{"gitId":"emilysim00"},"content":"1. [T][ ] read a book","lastModifiedDate":"2022-03-03"},{"lineNumber":259,"author":{"gitId":"emilysim00"},"content":"2. [D][ ] assignment 3  (by: Jan-2-2022 1:30PM)","lastModifiedDate":"2022-03-03"},{"lineNumber":260,"author":{"gitId":"emilysim00"},"content":"------------------------------------------------------------","lastModifiedDate":"2022-03-03"},{"lineNumber":261,"author":{"gitId":"emilysim00"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":262,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":263,"author":{"gitId":"emilysim00"},"content":"### `find` - Search for task(s) in the list","lastModifiedDate":"2022-03-03"},{"lineNumber":264,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":265,"author":{"gitId":"emilysim00"},"content":"Searches EM\u0027s list to find tasks that match the keyword search. The keyword search can be a word/phrase. ","lastModifiedDate":"2022-03-03"},{"lineNumber":266,"author":{"gitId":"emilysim00"},"content":"The search function is case-sensitive and will match on the texts as listed in EM\u0027s list. ","lastModifiedDate":"2022-03-03"},{"lineNumber":267,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":268,"author":{"gitId":"emilysim00"},"content":"Syntax: `delete \u003ctask number\u003e`","lastModifiedDate":"2022-03-03"},{"lineNumber":269,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":270,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":271,"author":{"gitId":"emilysim00"},"content":"| Parameter      | Description                                                            |","lastModifiedDate":"2022-03-03"},{"lineNumber":272,"author":{"gitId":"emilysim00"},"content":"|----------------|------------------------------------------------------------------------|","lastModifiedDate":"2022-03-03"},{"lineNumber":273,"author":{"gitId":"emilysim00"},"content":"| `\u003ctask number\u003e` | The numbering of the task stored in EM\u0027s list that you want to delete. |","lastModifiedDate":"2022-03-03"},{"lineNumber":274,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":275,"author":{"gitId":"emilysim00"},"content":"**Example**","lastModifiedDate":"2022-03-03"},{"lineNumber":276,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":277,"author":{"gitId":"emilysim00"},"content":"Assume your current task list contains the following tasks (obtain from `list` command):","lastModifiedDate":"2022-03-03"},{"lineNumber":278,"author":{"gitId":"emilysim00"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":279,"author":{"gitId":"emilysim00"},"content":"------------------------------------------------------------","lastModifiedDate":"2022-03-03"},{"lineNumber":280,"author":{"gitId":"emilysim00"},"content":"Here are the tasks in your list:","lastModifiedDate":"2022-03-03"},{"lineNumber":281,"author":{"gitId":"emilysim00"},"content":"1. [T][ ] read a book","lastModifiedDate":"2022-03-03"},{"lineNumber":282,"author":{"gitId":"emilysim00"},"content":"2. [D][ ] assignment 3  (by: Jan-2-2022 1:30PM)","lastModifiedDate":"2022-03-03"},{"lineNumber":283,"author":{"gitId":"emilysim00"},"content":"3. [T][ ] buy book","lastModifiedDate":"2022-03-03"},{"lineNumber":284,"author":{"gitId":"emilysim00"},"content":"4. [E][ ] borrow book  (at: Nov-11-2022 3:00PM)","lastModifiedDate":"2022-03-03"},{"lineNumber":285,"author":{"gitId":"emilysim00"},"content":"------------------------------------------------------------","lastModifiedDate":"2022-03-03"},{"lineNumber":286,"author":{"gitId":"emilysim00"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":287,"author":{"gitId":"emilysim00"},"content":"To find task(s) that contains the word \"book\", you can enter the following command:","lastModifiedDate":"2022-03-03"},{"lineNumber":288,"author":{"gitId":"emilysim00"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":289,"author":{"gitId":"emilysim00"},"content":"\u003e find book","lastModifiedDate":"2022-03-03"},{"lineNumber":290,"author":{"gitId":"emilysim00"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":291,"author":{"gitId":"emilysim00"},"content":"**Expected Outcome**","lastModifiedDate":"2022-03-03"},{"lineNumber":292,"author":{"gitId":"emilysim00"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":293,"author":{"gitId":"emilysim00"},"content":"------------------------------------------------------------","lastModifiedDate":"2022-03-03"},{"lineNumber":294,"author":{"gitId":"emilysim00"},"content":"Remainder: Search is case sensitive","lastModifiedDate":"2022-03-03"},{"lineNumber":295,"author":{"gitId":"emilysim00"},"content":"Here are the matching tasks in your list:","lastModifiedDate":"2022-03-03"},{"lineNumber":296,"author":{"gitId":"emilysim00"},"content":"1. [T][ ] read a book","lastModifiedDate":"2022-03-03"},{"lineNumber":297,"author":{"gitId":"emilysim00"},"content":"2. [T][ ] buy book","lastModifiedDate":"2022-03-03"},{"lineNumber":298,"author":{"gitId":"emilysim00"},"content":"3. [E][ ] borrow book  (at: Nov-11-2022 3:00PM)","lastModifiedDate":"2022-03-03"},{"lineNumber":299,"author":{"gitId":"emilysim00"},"content":"------------------------------------------------------------","lastModifiedDate":"2022-03-03"},{"lineNumber":300,"author":{"gitId":"emilysim00"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":301,"author":{"gitId":"emilysim00"},"content":"From EM\u0027s list there are only 3 tasks that contains the word \"book\". ","lastModifiedDate":"2022-03-03"},{"lineNumber":302,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":303,"author":{"gitId":"emilysim00"},"content":"### `bye` - Exit the program","lastModifiedDate":"2022-03-03"},{"lineNumber":304,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":305,"author":{"gitId":"emilysim00"},"content":"Exits the application.","lastModifiedDate":"2022-03-03"},{"lineNumber":306,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":307,"author":{"gitId":"emilysim00"},"content":"**Syntax**","lastModifiedDate":"2022-03-03"},{"lineNumber":308,"author":{"gitId":"emilysim00"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":309,"author":{"gitId":"emilysim00"},"content":"bye","lastModifiedDate":"2022-03-03"},{"lineNumber":310,"author":{"gitId":"emilysim00"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":311,"author":{"gitId":"emilysim00"},"content":"**Expected Outcome**","lastModifiedDate":"2022-03-03"},{"lineNumber":312,"author":{"gitId":"emilysim00"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":313,"author":{"gitId":"emilysim00"},"content":"------------------------------------------------------------","lastModifiedDate":"2022-03-03"},{"lineNumber":314,"author":{"gitId":"emilysim00"},"content":"Bye. Hope to see you again soon!","lastModifiedDate":"2022-03-03"},{"lineNumber":315,"author":{"gitId":"emilysim00"},"content":"------------------------------------------------------------","lastModifiedDate":"2022-03-03"},{"lineNumber":316,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":317,"author":{"gitId":"emilysim00"},"content":"Process finished with exit code 0","lastModifiedDate":"2022-03-03"},{"lineNumber":318,"author":{"gitId":"emilysim00"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":319,"author":{"gitId":"emilysim00"},"content":"---","lastModifiedDate":"2022-03-03"},{"lineNumber":320,"author":{"gitId":"emilysim00"},"content":"## File storage information","lastModifiedDate":"2022-03-03"},{"lineNumber":321,"author":{"gitId":"emilysim00"},"content":"When EM is run for the first time, a directory and a file would be created to store all the task information.","lastModifiedDate":"2022-03-03"},{"lineNumber":322,"author":{"gitId":"emilysim00"},"content":"\"database/database.txt\" will be created in the same directory as where ip.jar file is being saved. ","lastModifiedDate":"2022-03-03"},{"lineNumber":323,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":324,"author":{"gitId":"emilysim00"},"content":"On subsequent run of EM, the data stored in database.txt will be loaded into the program. EM\u0027s list will store ","lastModifiedDate":"2022-03-03"},{"lineNumber":325,"author":{"gitId":"emilysim00"},"content":"tasks information of previous session as well as the current session. ","lastModifiedDate":"2022-03-03"},{"lineNumber":326,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":327,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":328,"author":{"gitId":"emilysim00"},"content":"### Caution","lastModifiedDate":"2022-03-03"},{"lineNumber":329,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":330,"author":{"gitId":"emilysim00"},"content":"During the booting of EM, the database file wil be loaded. If modifications have been ","lastModifiedDate":"2022-03-03"},{"lineNumber":331,"author":{"gitId":"emilysim00"},"content":"made to the file and is in invalid format, EM will fail to load the data into the program.","lastModifiedDate":"2022-03-03"},{"lineNumber":332,"author":{"gitId":"emilysim00"},"content":"As a result, you would have to delete the compromised file.","lastModifiedDate":"2022-03-03"},{"lineNumber":333,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":334,"author":{"gitId":"emilysim00"},"content":"---","lastModifiedDate":"2022-03-03"},{"lineNumber":335,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":336,"author":{"gitId":"emilysim00"},"content":"## Command summary","lastModifiedDate":"2022-03-03"},{"lineNumber":337,"author":{"gitId":"emilysim00"},"content":"| Action                  | Format, Examples                                                                                  |","lastModifiedDate":"2022-03-03"},{"lineNumber":338,"author":{"gitId":"emilysim00"},"content":"|-------------------------|---------------------------------------------------------------------------------------------------|","lastModifiedDate":"2022-03-03"},{"lineNumber":339,"author":{"gitId":"emilysim00"},"content":"| Create a todo task      | `todo \u003cdescription\u003e`\u003cbr/\u003ee.g., `todo read book`                                                   |","lastModifiedDate":"2022-03-03"},{"lineNumber":340,"author":{"gitId":"emilysim00"},"content":"| Create a event task     | `event \u003cdescription\u003e /at \u003cdate time\u003e`\u003cbr/\u003ee.g., `event meet kelly /at 2022-02-02 1230`            |","lastModifiedDate":"2022-03-03"},{"lineNumber":341,"author":{"gitId":"emilysim00"},"content":"| Create a deadline task  | `deadline \u003cdescription\u003e /by \u003cdate time\u003e`\u003cbr/\u003ee.g., `deadline assignment 3 /by 2022-04-01 2359` |","lastModifiedDate":"2022-03-03"},{"lineNumber":342,"author":{"gitId":"emilysim00"},"content":"| Delete a task           | `delete \u003ctask number\u003e`\u003cbr/\u003ee.g., `delete 2`                                                       |","lastModifiedDate":"2022-03-03"},{"lineNumber":343,"author":{"gitId":"emilysim00"},"content":"| Find task               | `find \u003ckeyword\u003e`\u003cbr/\u003ee.g., `find book`                                                            |","lastModifiedDate":"2022-03-03"},{"lineNumber":344,"author":{"gitId":"emilysim00"},"content":"| Mark task as completed  | `mark \u003ctask number\u003e`\u003cbr/\u003ee.g., `mark 2`\u003cbr/\u003e                                                      |","lastModifiedDate":"2022-03-03"},{"lineNumber":345,"author":{"gitId":"emilysim00"},"content":"| Mark task as incomplete | `unmark \u003ctask number\u003e`\u003cbr/\u003ee.g., `unmark 2`                                                       |","lastModifiedDate":"2022-03-03"},{"lineNumber":346,"author":{"gitId":"emilysim00"},"content":"| List all task           | `list`                                                                                            |","lastModifiedDate":"2022-03-03"},{"lineNumber":347,"author":{"gitId":"emilysim00"},"content":"| Exit                    | `bye`                                                                                             |","lastModifiedDate":"2022-03-03"}],"authorContributionMap":{"emilysim00":326,"-":21}},{"path":"src/main/java/EmProgram/exception/InvalidUserInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"emilysim00"},"content":"package EmProgram.exception;","lastModifiedDate":"2022-03-03"},{"lineNumber":2,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":3,"author":{"gitId":"emilysim00"},"content":"public class InvalidUserInputException extends Exception {","lastModifiedDate":"2022-02-25"},{"lineNumber":4,"author":{"gitId":"emilysim00"},"content":"    /**","lastModifiedDate":"2022-02-25"},{"lineNumber":5,"author":{"gitId":"emilysim00"},"content":"     * List of pre-defined error messages according to user input","lastModifiedDate":"2022-02-25"},{"lineNumber":6,"author":{"gitId":"emilysim00"},"content":"     */","lastModifiedDate":"2022-02-25"},{"lineNumber":7,"author":{"gitId":"emilysim00"},"content":"    public static final String INVALID_INPUT \u003d \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";","lastModifiedDate":"2022-02-25"},{"lineNumber":8,"author":{"gitId":"emilysim00"},"content":"    public static final String NO_DESCRIPTION \u003d \"☹ OOPS!!! The task description cannot be empty.\";","lastModifiedDate":"2022-02-25"},{"lineNumber":9,"author":{"gitId":"emilysim00"},"content":"    public static final String NO_TIME_OR_DESCRIPTION \u003d \"☹ OOPS!!! Did not include time or description.\";","lastModifiedDate":"2022-02-25"},{"lineNumber":10,"author":{"gitId":"emilysim00"},"content":"    public static final String INVALID_TASK \u003d \"☹ OOPS!!! The task number entered is not valid.\";","lastModifiedDate":"2022-02-25"},{"lineNumber":11,"author":{"gitId":"emilysim00"},"content":"    public static final String CORRUPTED_TASK_NUM \u003d \"☹ OOPS!!! The task number entered is not a number.\";","lastModifiedDate":"2022-02-25"},{"lineNumber":12,"author":{"gitId":"emilysim00"},"content":"    public static final String INVALID_TIME_OR_DATE \u003d \"☹ OOPS!!! The time or date you entered is invalid.\\n \" +","lastModifiedDate":"2022-02-26"},{"lineNumber":13,"author":{"gitId":"emilysim00"},"content":"            \"Please ensure that the date format is in YYYY-MM-DD and the time format is in HHmm (24 hour) \" +","lastModifiedDate":"2022-02-26"},{"lineNumber":14,"author":{"gitId":"emilysim00"},"content":"            \"(e.g. /at 2021-02-19 1330)\";","lastModifiedDate":"2022-02-26"},{"lineNumber":15,"author":{"gitId":"emilysim00"},"content":"    public static final String IO_EXCEPTION \u003d \"☹ OOPS!!! Something wrong with the input-output operation.\";","lastModifiedDate":"2022-02-27"},{"lineNumber":16,"author":{"gitId":"emilysim00"},"content":"    public static final String INVALID_MATCH \u003d \"☹ OOPS!!! The command is invalid. Please ensure command is entered as: \\n\" +","lastModifiedDate":"2022-03-02"},{"lineNumber":17,"author":{"gitId":"emilysim00"},"content":"            \" deadline [TASK DESCRIPTION] /by [DEADLINE TIMING] \\n\" + \" event [TASK DESCRIPTION] /at [EVENT TIMING]\" ;","lastModifiedDate":"2022-03-03"},{"lineNumber":18,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":19,"author":{"gitId":"emilysim00"},"content":"    /**","lastModifiedDate":"2022-02-25"},{"lineNumber":20,"author":{"gitId":"emilysim00"},"content":"     * Constructs an InvalidUserInputException with a specified error message.","lastModifiedDate":"2022-02-25"},{"lineNumber":21,"author":{"gitId":"emilysim00"},"content":"     *","lastModifiedDate":"2022-02-25"},{"lineNumber":22,"author":{"gitId":"emilysim00"},"content":"     * @param errorMsg The error message written by the throwing method.","lastModifiedDate":"2022-02-25"},{"lineNumber":23,"author":{"gitId":"emilysim00"},"content":"     */","lastModifiedDate":"2022-02-25"},{"lineNumber":24,"author":{"gitId":"emilysim00"},"content":"    public InvalidUserInputException(String errorMsg) {","lastModifiedDate":"2022-02-25"},{"lineNumber":25,"author":{"gitId":"emilysim00"},"content":"        super(errorMsg);","lastModifiedDate":"2022-02-25"},{"lineNumber":26,"author":{"gitId":"emilysim00"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":27,"author":{"gitId":"emilysim00"},"content":"}","lastModifiedDate":"2022-02-25"}],"authorContributionMap":{"emilysim00":27}},{"path":"src/main/java/EmProgram/exception/StorageException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"emilysim00"},"content":"package EmProgram.exception;","lastModifiedDate":"2022-03-03"},{"lineNumber":2,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":3,"author":{"gitId":"emilysim00"},"content":"public class StorageException extends Exception{","lastModifiedDate":"2022-02-25"},{"lineNumber":4,"author":{"gitId":"emilysim00"},"content":"    /**","lastModifiedDate":"2022-02-25"},{"lineNumber":5,"author":{"gitId":"emilysim00"},"content":"     * List of pre-defined error messages when reading and writing of file.","lastModifiedDate":"2022-02-25"},{"lineNumber":6,"author":{"gitId":"emilysim00"},"content":"     */","lastModifiedDate":"2022-02-25"},{"lineNumber":7,"author":{"gitId":"emilysim00"},"content":"    public static final String INVALID_FILE \u003d \"☹ OOPS!!! File is not found :-(\";","lastModifiedDate":"2022-02-25"},{"lineNumber":8,"author":{"gitId":"emilysim00"},"content":"    public static final String IO_EXCEPTION \u003d \"☹ OOPS!!! Something wrong with the input-output operation.\";","lastModifiedDate":"2022-02-25"},{"lineNumber":9,"author":{"gitId":"emilysim00"},"content":"    public static final String INVALID_FILE_INPUT \u003d \"☹ OOPS!!! The file information is corrupted. \" +","lastModifiedDate":"2022-03-02"},{"lineNumber":10,"author":{"gitId":"emilysim00"},"content":"            \"Please ensure that the data in the file is separated by commas and in the format of\\n \" +","lastModifiedDate":"2022-03-02"},{"lineNumber":11,"author":{"gitId":"emilysim00"},"content":"            \"[Task Type| task status| task description| task timing (applicable for event/deadline task)]\\n\"+","lastModifiedDate":"2022-03-03"},{"lineNumber":12,"author":{"gitId":"emilysim00"},"content":"            \" For example:\\n \" + \" T|0|read book\\n\" + \"  E|1|meet kelly|Nov-11-2012 12:30PM\\n\" +","lastModifiedDate":"2022-03-03"},{"lineNumber":13,"author":{"gitId":"emilysim00"},"content":"            \"Please also ensure that there are no spaces after the commas.\";","lastModifiedDate":"2022-03-02"},{"lineNumber":14,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":15,"author":{"gitId":"emilysim00"},"content":"    /**","lastModifiedDate":"2022-02-25"},{"lineNumber":16,"author":{"gitId":"emilysim00"},"content":"     * Constructs an StorageException with a specified error message.","lastModifiedDate":"2022-02-25"},{"lineNumber":17,"author":{"gitId":"emilysim00"},"content":"     *","lastModifiedDate":"2022-02-25"},{"lineNumber":18,"author":{"gitId":"emilysim00"},"content":"     * @param errorMsg The error message written by the throwing method.","lastModifiedDate":"2022-02-25"},{"lineNumber":19,"author":{"gitId":"emilysim00"},"content":"     */","lastModifiedDate":"2022-02-25"},{"lineNumber":20,"author":{"gitId":"emilysim00"},"content":"    public StorageException(String errorMsg) {","lastModifiedDate":"2022-02-25"},{"lineNumber":21,"author":{"gitId":"emilysim00"},"content":"        super(errorMsg);","lastModifiedDate":"2022-02-25"},{"lineNumber":22,"author":{"gitId":"emilysim00"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":23,"author":{"gitId":"emilysim00"},"content":"}","lastModifiedDate":"2022-02-25"}],"authorContributionMap":{"emilysim00":23}},{"path":"src/main/java/em/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"emilysim00"},"content":"package em;","lastModifiedDate":"2022-03-03"},{"lineNumber":2,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":3,"author":{"gitId":"emilysim00"},"content":"import java.io.*;","lastModifiedDate":"2022-02-16"},{"lineNumber":4,"author":{"gitId":"emilysim00"},"content":"import java.nio.file.Path;","lastModifiedDate":"2022-02-16"},{"lineNumber":5,"author":{"gitId":"emilysim00"},"content":"import java.util.*;","lastModifiedDate":"2022-02-22"},{"lineNumber":6,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"emilysim00"},"content":"import EmProgram.exception.*;","lastModifiedDate":"2022-03-03"},{"lineNumber":8,"author":{"gitId":"emilysim00"},"content":"import task.Task;","lastModifiedDate":"2022-02-10"},{"lineNumber":9,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":10,"author":{"gitId":"emilysim00"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-16"},{"lineNumber":11,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-16"},{"lineNumber":12,"author":{"gitId":"emilysim00"},"content":"import static EmProgram.exception.InvalidUserInputException.INVALID_INPUT;","lastModifiedDate":"2022-03-03"},{"lineNumber":13,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":15,"author":{"gitId":"emilysim00"},"content":"    public static ArrayList\u003cTask\u003e taskArrayList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-02-25"},{"lineNumber":16,"author":{"gitId":"emilysim00"},"content":"    public static final Path DATABASE_FILEPATH \u003d Path.of(\"database/database.txt\");","lastModifiedDate":"2022-02-22"},{"lineNumber":17,"author":{"gitId":"emilysim00"},"content":"    private Ui ui;","lastModifiedDate":"2022-02-25"},{"lineNumber":18,"author":{"gitId":"emilysim00"},"content":"    private TaskList tasks;","lastModifiedDate":"2022-02-25"},{"lineNumber":19,"author":{"gitId":"emilysim00"},"content":"    private Parser parser;","lastModifiedDate":"2022-02-25"},{"lineNumber":20,"author":{"gitId":"emilysim00"},"content":"    private Storage storage;","lastModifiedDate":"2022-02-25"},{"lineNumber":21,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":22,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":23,"author":{"gitId":"emilysim00"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":24,"author":{"gitId":"emilysim00"},"content":"     * Initiate and create all the required data needed before accepting user input.","lastModifiedDate":"2022-02-27"},{"lineNumber":25,"author":{"gitId":"emilysim00"},"content":"     * Populate tasks in file into the task list.","lastModifiedDate":"2022-02-27"},{"lineNumber":26,"author":{"gitId":"emilysim00"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":27,"author":{"gitId":"emilysim00"},"content":"     * @param databasePath file path of the pre-defined tasks to be populated to the task list.","lastModifiedDate":"2022-02-27"},{"lineNumber":28,"author":{"gitId":"emilysim00"},"content":"     * @throws FileNotFoundException If the file to be read was not found.","lastModifiedDate":"2022-02-27"},{"lineNumber":29,"author":{"gitId":"emilysim00"},"content":"     * @throws IOException If the input and output is invalid.","lastModifiedDate":"2022-02-27"},{"lineNumber":30,"author":{"gitId":"emilysim00"},"content":"     * @throws InvalidUserInputException If the command in the file is unable to be processed.","lastModifiedDate":"2022-02-27"},{"lineNumber":31,"author":{"gitId":"emilysim00"},"content":"     * @throws StorageException  If","lastModifiedDate":"2022-02-27"},{"lineNumber":32,"author":{"gitId":"emilysim00"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":33,"author":{"gitId":"emilysim00"},"content":"    public void initiateData(Path databasePath) {","lastModifiedDate":"2022-02-25"},{"lineNumber":34,"author":{"gitId":"emilysim00"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2022-02-25"},{"lineNumber":35,"author":{"gitId":"emilysim00"},"content":"        storage \u003d new Storage(databasePath);","lastModifiedDate":"2022-02-25"},{"lineNumber":36,"author":{"gitId":"emilysim00"},"content":"        parser \u003d new Parser();","lastModifiedDate":"2022-02-25"},{"lineNumber":37,"author":{"gitId":"emilysim00"},"content":"        ui.displayLogo();","lastModifiedDate":"2022-02-25"},{"lineNumber":38,"author":{"gitId":"emilysim00"},"content":"        try {","lastModifiedDate":"2022-02-22"},{"lineNumber":39,"author":{"gitId":"emilysim00"},"content":"            Storage.checkFileExists();","lastModifiedDate":"2022-02-25"},{"lineNumber":40,"author":{"gitId":"emilysim00"},"content":"            tasks \u003d new TaskList(Storage.populateFileContents());","lastModifiedDate":"2022-02-25"},{"lineNumber":41,"author":{"gitId":"emilysim00"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2022-02-25"},{"lineNumber":42,"author":{"gitId":"emilysim00"},"content":"            System.out.println(StorageException.INVALID_FILE);","lastModifiedDate":"2022-02-25"},{"lineNumber":43,"author":{"gitId":"emilysim00"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-22"},{"lineNumber":44,"author":{"gitId":"emilysim00"},"content":"            System.out.println(StorageException.IO_EXCEPTION);","lastModifiedDate":"2022-02-25"},{"lineNumber":45,"author":{"gitId":"emilysim00"},"content":"        } catch (InvalidUserInputException e){","lastModifiedDate":"2022-02-25"},{"lineNumber":46,"author":{"gitId":"emilysim00"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2022-02-25"},{"lineNumber":47,"author":{"gitId":"emilysim00"},"content":"        } catch (StorageException e) {","lastModifiedDate":"2022-02-25"},{"lineNumber":48,"author":{"gitId":"emilysim00"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2022-02-25"},{"lineNumber":49,"author":{"gitId":"emilysim00"},"content":"        }","lastModifiedDate":"2022-02-16"},{"lineNumber":50,"author":{"gitId":"emilysim00"},"content":"    }","lastModifiedDate":"2022-02-16"},{"lineNumber":51,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-16"},{"lineNumber":52,"author":{"gitId":"emilysim00"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":53,"author":{"gitId":"emilysim00"},"content":"     * Process user input and get the corresponding output.","lastModifiedDate":"2022-02-27"},{"lineNumber":54,"author":{"gitId":"emilysim00"},"content":"     * Keep running until user input \"Bye\" command.","lastModifiedDate":"2022-02-27"},{"lineNumber":55,"author":{"gitId":"emilysim00"},"content":"     * All user command type are case-insensitive. This method is able to process","lastModifiedDate":"2022-02-27"},{"lineNumber":56,"author":{"gitId":"emilysim00"},"content":"     * command types such as list, mark , unmark, find, event, deadline and todo.","lastModifiedDate":"2022-02-27"},{"lineNumber":57,"author":{"gitId":"emilysim00"},"content":"     * Other command types other than stated above will be deemed as invalid command.","lastModifiedDate":"2022-02-27"},{"lineNumber":58,"author":{"gitId":"emilysim00"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":59,"author":{"gitId":"emilysim00"},"content":"     * @throws IndexOutOfBoundsException If the user input did not include time or date description.","lastModifiedDate":"2022-02-27"},{"lineNumber":60,"author":{"gitId":"emilysim00"},"content":"     * @throws NumberFormatException If the task number stated is not a number.","lastModifiedDate":"2022-02-27"},{"lineNumber":61,"author":{"gitId":"emilysim00"},"content":"     * @throws InvalidUserInputException If the command in the file is unable to be processed.","lastModifiedDate":"2022-02-27"},{"lineNumber":62,"author":{"gitId":"emilysim00"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":63,"author":{"gitId":"emilysim00"},"content":"    public void processAction() {","lastModifiedDate":"2022-02-25"},{"lineNumber":64,"author":{"gitId":"emilysim00"},"content":"        initiateData(DATABASE_FILEPATH);","lastModifiedDate":"2022-02-25"},{"lineNumber":65,"author":{"gitId":"emilysim00"},"content":"        String userInput;","lastModifiedDate":"2022-01-26"},{"lineNumber":66,"author":{"gitId":"emilysim00"},"content":"        Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2022-01-26"},{"lineNumber":67,"author":{"gitId":"emilysim00"},"content":"        System.out.print(\"\u003e \");","lastModifiedDate":"2022-02-27"},{"lineNumber":68,"author":{"gitId":"emilysim00"},"content":"        userInput \u003d in.nextLine();","lastModifiedDate":"2022-01-26"},{"lineNumber":69,"author":{"gitId":"emilysim00"},"content":"        while (!userInput.equalsIgnoreCase(\"Bye\")) {","lastModifiedDate":"2022-01-26"},{"lineNumber":70,"author":{"gitId":"emilysim00"},"content":"            try {","lastModifiedDate":"2022-02-09"},{"lineNumber":71,"author":{"gitId":"emilysim00"},"content":"                parser.checkValidityOfInput(userInput);","lastModifiedDate":"2022-02-25"},{"lineNumber":72,"author":{"gitId":"emilysim00"},"content":"                String action \u003d userInput.split(\" \")[0];","lastModifiedDate":"2022-02-02"},{"lineNumber":73,"author":{"gitId":"emilysim00"},"content":"                switch (action.toLowerCase()) {","lastModifiedDate":"2022-02-02"},{"lineNumber":74,"author":{"gitId":"emilysim00"},"content":"                case \"list\":","lastModifiedDate":"2022-02-02"},{"lineNumber":75,"author":{"gitId":"emilysim00"},"content":"                    ui.displayTaskList(taskArrayList);","lastModifiedDate":"2022-02-25"},{"lineNumber":76,"author":{"gitId":"emilysim00"},"content":"                    break;","lastModifiedDate":"2022-02-02"},{"lineNumber":77,"author":{"gitId":"emilysim00"},"content":"                case \"mark\":","lastModifiedDate":"2022-02-02"},{"lineNumber":78,"author":{"gitId":"emilysim00"},"content":"                    int markTaskNumber \u003d Integer.parseInt(userInput.split(\" \")[1]);","lastModifiedDate":"2022-02-02"},{"lineNumber":79,"author":{"gitId":"emilysim00"},"content":"                    if (parser.isTaskValid(markTaskNumber, taskArrayList)) {","lastModifiedDate":"2022-02-25"},{"lineNumber":80,"author":{"gitId":"emilysim00"},"content":"                        taskArrayList.get(markTaskNumber - 1).markAsDone(markTaskNumber, taskArrayList, true);","lastModifiedDate":"2022-02-25"},{"lineNumber":81,"author":{"gitId":"emilysim00"},"content":"                        Storage.modifyDatabase(markTaskNumber, true, false);","lastModifiedDate":"2022-02-25"},{"lineNumber":82,"author":{"gitId":"emilysim00"},"content":"                    }","lastModifiedDate":"2022-01-26"},{"lineNumber":83,"author":{"gitId":"emilysim00"},"content":"                    break;","lastModifiedDate":"2022-02-02"},{"lineNumber":84,"author":{"gitId":"emilysim00"},"content":"                case \"unmark\":","lastModifiedDate":"2022-02-02"},{"lineNumber":85,"author":{"gitId":"emilysim00"},"content":"                    int unmarkTaskNumber \u003d Integer.parseInt(userInput.split(\" \")[1]);","lastModifiedDate":"2022-02-02"},{"lineNumber":86,"author":{"gitId":"emilysim00"},"content":"                    if (parser.isTaskValid(unmarkTaskNumber, taskArrayList)) {","lastModifiedDate":"2022-02-25"},{"lineNumber":87,"author":{"gitId":"emilysim00"},"content":"                        taskArrayList.get(unmarkTaskNumber - 1).markAsUndone(unmarkTaskNumber, taskArrayList, true);","lastModifiedDate":"2022-02-25"},{"lineNumber":88,"author":{"gitId":"emilysim00"},"content":"                        Storage.modifyDatabase(unmarkTaskNumber, false, false);","lastModifiedDate":"2022-02-25"},{"lineNumber":89,"author":{"gitId":"emilysim00"},"content":"                    }","lastModifiedDate":"2022-01-26"},{"lineNumber":90,"author":{"gitId":"emilysim00"},"content":"                    break;","lastModifiedDate":"2022-02-02"},{"lineNumber":91,"author":{"gitId":"emilysim00"},"content":"                case \"todo\":","lastModifiedDate":"2022-02-02"},{"lineNumber":92,"author":{"gitId":"emilysim00"},"content":"                    tasks.addTask(userInput, taskArrayList, true);","lastModifiedDate":"2022-02-25"},{"lineNumber":93,"author":{"gitId":"emilysim00"},"content":"                    break;","lastModifiedDate":"2022-02-02"},{"lineNumber":94,"author":{"gitId":"emilysim00"},"content":"                case \"event\":","lastModifiedDate":"2022-02-02"},{"lineNumber":95,"author":{"gitId":"emilysim00"},"content":"                case \"deadline\":","lastModifiedDate":"2022-02-02"},{"lineNumber":96,"author":{"gitId":"emilysim00"},"content":"                    tasks.addTaskAndTime(userInput, taskArrayList, true);","lastModifiedDate":"2022-02-25"},{"lineNumber":97,"author":{"gitId":"emilysim00"},"content":"                    break;","lastModifiedDate":"2022-02-16"},{"lineNumber":98,"author":{"gitId":"emilysim00"},"content":"                case \"delete\":","lastModifiedDate":"2022-02-16"},{"lineNumber":99,"author":{"gitId":"emilysim00"},"content":"                    int deleteTaskNumber \u003d Integer.parseInt(userInput.split(\" \")[1]);","lastModifiedDate":"2022-02-16"},{"lineNumber":100,"author":{"gitId":"emilysim00"},"content":"                    if (parser.isTaskValid(deleteTaskNumber, taskArrayList)) {","lastModifiedDate":"2022-02-25"},{"lineNumber":101,"author":{"gitId":"emilysim00"},"content":"                        taskArrayList.get(deleteTaskNumber - 1).deleteTask(deleteTaskNumber, taskArrayList);","lastModifiedDate":"2022-02-25"},{"lineNumber":102,"author":{"gitId":"emilysim00"},"content":"                        Storage.modifyDatabase(deleteTaskNumber, false, true);","lastModifiedDate":"2022-02-25"},{"lineNumber":103,"author":{"gitId":"emilysim00"},"content":"                    }","lastModifiedDate":"2022-02-16"},{"lineNumber":104,"author":{"gitId":"emilysim00"},"content":"                    break;","lastModifiedDate":"2022-02-02"},{"lineNumber":105,"author":{"gitId":"emilysim00"},"content":"                case \"find\":","lastModifiedDate":"2022-02-26"},{"lineNumber":106,"author":{"gitId":"emilysim00"},"content":"                    String keyword \u003d userInput.split(\" \")[1];","lastModifiedDate":"2022-02-26"},{"lineNumber":107,"author":{"gitId":"emilysim00"},"content":"                    TaskList.findContent(keyword);","lastModifiedDate":"2022-02-26"},{"lineNumber":108,"author":{"gitId":"emilysim00"},"content":"                    break;","lastModifiedDate":"2022-02-26"},{"lineNumber":109,"author":{"gitId":"emilysim00"},"content":"                default:","lastModifiedDate":"2022-02-02"},{"lineNumber":110,"author":{"gitId":"emilysim00"},"content":"                    throw new InvalidUserInputException(INVALID_INPUT);","lastModifiedDate":"2022-02-25"},{"lineNumber":111,"author":{"gitId":"emilysim00"},"content":"                }","lastModifiedDate":"2022-01-26"},{"lineNumber":112,"author":{"gitId":"emilysim00"},"content":"            } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2022-02-09"},{"lineNumber":113,"author":{"gitId":"emilysim00"},"content":"                System.out.println(InvalidUserInputException.NO_TIME_OR_DESCRIPTION);","lastModifiedDate":"2022-02-25"},{"lineNumber":114,"author":{"gitId":"emilysim00"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2022-02-09"},{"lineNumber":115,"author":{"gitId":"emilysim00"},"content":"                System.out.println(InvalidUserInputException.CORRUPTED_TASK_NUM);","lastModifiedDate":"2022-02-25"},{"lineNumber":116,"author":{"gitId":"emilysim00"},"content":"            } catch (InvalidUserInputException e) {","lastModifiedDate":"2022-02-25"},{"lineNumber":117,"author":{"gitId":"emilysim00"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2022-02-25"},{"lineNumber":118,"author":{"gitId":"emilysim00"},"content":"            }","lastModifiedDate":"2022-02-09"},{"lineNumber":119,"author":{"gitId":"emilysim00"},"content":"            System.out.print(\"\u003e \");","lastModifiedDate":"2022-02-27"},{"lineNumber":120,"author":{"gitId":"emilysim00"},"content":"            userInput \u003d in.nextLine();","lastModifiedDate":"2022-01-26"},{"lineNumber":121,"author":{"gitId":"emilysim00"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":122,"author":{"gitId":"emilysim00"},"content":"        ui.displayFarewell();","lastModifiedDate":"2022-02-25"},{"lineNumber":123,"author":{"gitId":"emilysim00"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":124,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":125,"author":{"gitId":"emilysim00"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2022-02-02"},{"lineNumber":126,"author":{"gitId":"emilysim00"},"content":"        new Duke().processAction();","lastModifiedDate":"2022-02-25"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":128,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"emilysim00":125,"-":3}},{"path":"src/main/java/em/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"emilysim00"},"content":"package em;","lastModifiedDate":"2022-03-03"},{"lineNumber":2,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":3,"author":{"gitId":"emilysim00"},"content":"import EmProgram.exception.InvalidUserInputException;","lastModifiedDate":"2022-03-03"},{"lineNumber":4,"author":{"gitId":"emilysim00"},"content":"import task.Task;","lastModifiedDate":"2022-02-25"},{"lineNumber":5,"author":{"gitId":"emilysim00"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-25"},{"lineNumber":6,"author":{"gitId":"emilysim00"},"content":"import static EmProgram.exception.InvalidUserInputException.*;","lastModifiedDate":"2022-03-03"},{"lineNumber":7,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":8,"author":{"gitId":"emilysim00"},"content":"public class Parser {","lastModifiedDate":"2022-02-25"},{"lineNumber":9,"author":{"gitId":"emilysim00"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":10,"author":{"gitId":"emilysim00"},"content":"     * Returns the command to be added into the database file.","lastModifiedDate":"2022-02-27"},{"lineNumber":11,"author":{"gitId":"emilysim00"},"content":"     * Take in an incomplete command and formulate it to be complete so","lastModifiedDate":"2022-02-27"},{"lineNumber":12,"author":{"gitId":"emilysim00"},"content":"     * it can be written into the file storing all the task created.","lastModifiedDate":"2022-02-27"},{"lineNumber":13,"author":{"gitId":"emilysim00"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":14,"author":{"gitId":"emilysim00"},"content":"     * @param taskDescription list to store the task description (task type, task description, task timing)","lastModifiedDate":"2022-02-27"},{"lineNumber":15,"author":{"gitId":"emilysim00"},"content":"     * @return formulated input to be added into the database.","lastModifiedDate":"2022-02-27"},{"lineNumber":16,"author":{"gitId":"emilysim00"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":17,"author":{"gitId":"emilysim00"},"content":"    public static String formulateDatabaseInput(String[] taskDescription) {","lastModifiedDate":"2022-02-25"},{"lineNumber":18,"author":{"gitId":"emilysim00"},"content":"        String databaseInput \u003d null;","lastModifiedDate":"2022-02-25"},{"lineNumber":19,"author":{"gitId":"emilysim00"},"content":"        switch (taskDescription[0]) {","lastModifiedDate":"2022-02-25"},{"lineNumber":20,"author":{"gitId":"emilysim00"},"content":"        case \"todo\":","lastModifiedDate":"2022-02-25"},{"lineNumber":21,"author":{"gitId":"emilysim00"},"content":"            databaseInput \u003d \"T|\" + \"0|\" + taskDescription[1];","lastModifiedDate":"2022-03-03"},{"lineNumber":22,"author":{"gitId":"emilysim00"},"content":"            break;","lastModifiedDate":"2022-02-25"},{"lineNumber":23,"author":{"gitId":"emilysim00"},"content":"        case \"deadline\":","lastModifiedDate":"2022-02-25"},{"lineNumber":24,"author":{"gitId":"emilysim00"},"content":"            databaseInput \u003d \"D|\" + \"0|\" + taskDescription[1] + \"|\" + taskDescription[2];","lastModifiedDate":"2022-03-03"},{"lineNumber":25,"author":{"gitId":"emilysim00"},"content":"            break;","lastModifiedDate":"2022-02-25"},{"lineNumber":26,"author":{"gitId":"emilysim00"},"content":"        case \"event\":","lastModifiedDate":"2022-02-25"},{"lineNumber":27,"author":{"gitId":"emilysim00"},"content":"            databaseInput \u003d \"E|\" + \"0|\" + taskDescription[1] + \"|\" + taskDescription[2];","lastModifiedDate":"2022-03-03"},{"lineNumber":28,"author":{"gitId":"emilysim00"},"content":"            break;","lastModifiedDate":"2022-02-25"},{"lineNumber":29,"author":{"gitId":"emilysim00"},"content":"        }","lastModifiedDate":"2022-02-25"},{"lineNumber":30,"author":{"gitId":"emilysim00"},"content":"        return databaseInput;","lastModifiedDate":"2022-02-25"},{"lineNumber":31,"author":{"gitId":"emilysim00"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":32,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":33,"author":{"gitId":"emilysim00"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":34,"author":{"gitId":"emilysim00"},"content":"     * Check whether the task exist in the list by specifying the number of the task.","lastModifiedDate":"2022-02-27"},{"lineNumber":35,"author":{"gitId":"emilysim00"},"content":"     * The number of the task is corresponding to the sequence it is being added into","lastModifiedDate":"2022-02-27"},{"lineNumber":36,"author":{"gitId":"emilysim00"},"content":"     * the task list.","lastModifiedDate":"2022-02-27"},{"lineNumber":37,"author":{"gitId":"emilysim00"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":38,"author":{"gitId":"emilysim00"},"content":"     * @param taskNumber numbering of task in the task list.","lastModifiedDate":"2022-02-27"},{"lineNumber":39,"author":{"gitId":"emilysim00"},"content":"     * @param taskList list storing all the tasks created.","lastModifiedDate":"2022-02-27"},{"lineNumber":40,"author":{"gitId":"emilysim00"},"content":"     * @return true if stated task number exist in the taskList.","lastModifiedDate":"2022-02-27"},{"lineNumber":41,"author":{"gitId":"emilysim00"},"content":"     * @return false if stated task number does not exist in the taskList.","lastModifiedDate":"2022-02-27"},{"lineNumber":42,"author":{"gitId":"emilysim00"},"content":"     * @throws InvalidUserInputException If the task number stated does not exist.","lastModifiedDate":"2022-03-03"},{"lineNumber":43,"author":{"gitId":"emilysim00"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":44,"author":{"gitId":"emilysim00"},"content":"    public static boolean isTaskValid(int taskNumber, ArrayList\u003cTask\u003e taskList) throws InvalidUserInputException {","lastModifiedDate":"2022-02-25"},{"lineNumber":45,"author":{"gitId":"emilysim00"},"content":"        if (taskNumber \u003e taskList.size() || taskNumber \u003c\u003d 0) {","lastModifiedDate":"2022-02-25"},{"lineNumber":46,"author":{"gitId":"emilysim00"},"content":"            throw new InvalidUserInputException(INVALID_TASK);","lastModifiedDate":"2022-02-25"},{"lineNumber":47,"author":{"gitId":"emilysim00"},"content":"        }","lastModifiedDate":"2022-02-25"},{"lineNumber":48,"author":{"gitId":"emilysim00"},"content":"        return true;","lastModifiedDate":"2022-02-25"},{"lineNumber":49,"author":{"gitId":"emilysim00"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":50,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":51,"author":{"gitId":"emilysim00"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":52,"author":{"gitId":"emilysim00"},"content":"     * Check the validity of yser input to ensure the input can be processed.","lastModifiedDate":"2022-02-27"},{"lineNumber":53,"author":{"gitId":"emilysim00"},"content":"     * Check whether user input contains the necessary contents for the command.","lastModifiedDate":"2022-02-27"},{"lineNumber":54,"author":{"gitId":"emilysim00"},"content":"     * If the user input is invalid, a message error will be thrown.","lastModifiedDate":"2022-02-27"},{"lineNumber":55,"author":{"gitId":"emilysim00"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":56,"author":{"gitId":"emilysim00"},"content":"     * @param userInput full command [command type + task description] entered by the user.","lastModifiedDate":"2022-02-27"},{"lineNumber":57,"author":{"gitId":"emilysim00"},"content":"     * @throws InvalidUserInputException If the command type is not valid or description is not inputted.","lastModifiedDate":"2022-03-03"},{"lineNumber":58,"author":{"gitId":"emilysim00"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":59,"author":{"gitId":"emilysim00"},"content":"    public static void checkValidityOfInput(String userInput) throws InvalidUserInputException {","lastModifiedDate":"2022-02-25"},{"lineNumber":60,"author":{"gitId":"emilysim00"},"content":"        String[] arrayOfUserInput \u003d userInput.split(\" \");","lastModifiedDate":"2022-02-25"},{"lineNumber":61,"author":{"gitId":"emilysim00"},"content":"        if (arrayOfUserInput.length \u003d\u003d 1 \u0026\u0026 arrayOfUserInput[0].equalsIgnoreCase(\"list\")) {","lastModifiedDate":"2022-02-25"},{"lineNumber":62,"author":{"gitId":"emilysim00"},"content":"            return;","lastModifiedDate":"2022-02-25"},{"lineNumber":63,"author":{"gitId":"emilysim00"},"content":"        } else if (arrayOfUserInput.length \u003e 1 \u0026\u0026 arrayOfUserInput[0].equalsIgnoreCase(\"list\")) {","lastModifiedDate":"2022-02-25"},{"lineNumber":64,"author":{"gitId":"emilysim00"},"content":"            throw new InvalidUserInputException(INVALID_INPUT);","lastModifiedDate":"2022-02-25"},{"lineNumber":65,"author":{"gitId":"emilysim00"},"content":"        } else if (arrayOfUserInput.length \u003c\u003d 1 \u0026\u0026 isCommandValid(arrayOfUserInput[0])) { //todo, deadline, event with no parameters","lastModifiedDate":"2022-02-25"},{"lineNumber":66,"author":{"gitId":"emilysim00"},"content":"            throw new InvalidUserInputException(NO_DESCRIPTION);","lastModifiedDate":"2022-02-25"},{"lineNumber":67,"author":{"gitId":"emilysim00"},"content":"        } else if ((arrayOfUserInput.length \u003c\u003d 1) || !isCommandValid(arrayOfUserInput[0])) {","lastModifiedDate":"2022-02-25"},{"lineNumber":68,"author":{"gitId":"emilysim00"},"content":"            throw new InvalidUserInputException(INVALID_INPUT);","lastModifiedDate":"2022-02-25"},{"lineNumber":69,"author":{"gitId":"emilysim00"},"content":"        } else {","lastModifiedDate":"2022-02-25"},{"lineNumber":70,"author":{"gitId":"emilysim00"},"content":"            return;","lastModifiedDate":"2022-02-25"},{"lineNumber":71,"author":{"gitId":"emilysim00"},"content":"        }","lastModifiedDate":"2022-02-25"},{"lineNumber":72,"author":{"gitId":"emilysim00"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":73,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":74,"author":{"gitId":"emilysim00"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":75,"author":{"gitId":"emilysim00"},"content":"     * Returns the validity of command type.","lastModifiedDate":"2022-02-27"},{"lineNumber":76,"author":{"gitId":"emilysim00"},"content":"     * Ensure that the command type entered by the user can","lastModifiedDate":"2022-02-27"},{"lineNumber":77,"author":{"gitId":"emilysim00"},"content":"     * be processed.","lastModifiedDate":"2022-02-27"},{"lineNumber":78,"author":{"gitId":"emilysim00"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":79,"author":{"gitId":"emilysim00"},"content":"     * @param command command type entered by user","lastModifiedDate":"2022-02-27"},{"lineNumber":80,"author":{"gitId":"emilysim00"},"content":"     * @return true if command entered is valid","lastModifiedDate":"2022-02-27"},{"lineNumber":81,"author":{"gitId":"emilysim00"},"content":"     * @return false if command entered is invalid","lastModifiedDate":"2022-02-27"},{"lineNumber":82,"author":{"gitId":"emilysim00"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":83,"author":{"gitId":"emilysim00"},"content":"    public static Boolean isCommandValid(String command) {","lastModifiedDate":"2022-02-25"},{"lineNumber":84,"author":{"gitId":"emilysim00"},"content":"        if (command.equalsIgnoreCase(\"todo\") || command.equalsIgnoreCase(\"event\")","lastModifiedDate":"2022-02-25"},{"lineNumber":85,"author":{"gitId":"emilysim00"},"content":"                || command.equalsIgnoreCase(\"deadline\") || command.equalsIgnoreCase(\"delete\")","lastModifiedDate":"2022-02-25"},{"lineNumber":86,"author":{"gitId":"emilysim00"},"content":"                || command.equalsIgnoreCase(\"find\") || command.equalsIgnoreCase(\"mark\")","lastModifiedDate":"2022-02-26"},{"lineNumber":87,"author":{"gitId":"emilysim00"},"content":"                || command.equalsIgnoreCase(\"unmark\")) {","lastModifiedDate":"2022-02-26"},{"lineNumber":88,"author":{"gitId":"emilysim00"},"content":"            return true;","lastModifiedDate":"2022-02-25"},{"lineNumber":89,"author":{"gitId":"emilysim00"},"content":"        }","lastModifiedDate":"2022-02-25"},{"lineNumber":90,"author":{"gitId":"emilysim00"},"content":"        return false;","lastModifiedDate":"2022-02-25"},{"lineNumber":91,"author":{"gitId":"emilysim00"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":92,"author":{"gitId":"emilysim00"},"content":"}","lastModifiedDate":"2022-02-25"}],"authorContributionMap":{"emilysim00":92}},{"path":"src/main/java/em/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"emilysim00"},"content":"package em;","lastModifiedDate":"2022-03-03"},{"lineNumber":2,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":3,"author":{"gitId":"emilysim00"},"content":"import EmProgram.exception.InvalidUserInputException;","lastModifiedDate":"2022-03-03"},{"lineNumber":4,"author":{"gitId":"emilysim00"},"content":"import EmProgram.exception.StorageException;","lastModifiedDate":"2022-03-03"},{"lineNumber":5,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":6,"author":{"gitId":"emilysim00"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2022-02-25"},{"lineNumber":7,"author":{"gitId":"emilysim00"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-25"},{"lineNumber":8,"author":{"gitId":"emilysim00"},"content":"import java.nio.file.Files;","lastModifiedDate":"2022-02-25"},{"lineNumber":9,"author":{"gitId":"emilysim00"},"content":"import java.nio.file.Path;","lastModifiedDate":"2022-02-25"},{"lineNumber":10,"author":{"gitId":"emilysim00"},"content":"import java.nio.file.StandardOpenOption;","lastModifiedDate":"2022-02-25"},{"lineNumber":11,"author":{"gitId":"emilysim00"},"content":"import java.text.ParseException;","lastModifiedDate":"2022-03-02"},{"lineNumber":12,"author":{"gitId":"emilysim00"},"content":"import java.text.SimpleDateFormat;","lastModifiedDate":"2022-03-02"},{"lineNumber":13,"author":{"gitId":"emilysim00"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-25"},{"lineNumber":14,"author":{"gitId":"emilysim00"},"content":"import java.util.List;","lastModifiedDate":"2022-02-25"},{"lineNumber":15,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":16,"author":{"gitId":"emilysim00"},"content":"import static EmProgram.exception.InvalidUserInputException.INVALID_INPUT;","lastModifiedDate":"2022-03-03"},{"lineNumber":17,"author":{"gitId":"emilysim00"},"content":"import static EmProgram.exception.StorageException.INVALID_FILE_INPUT;","lastModifiedDate":"2022-03-03"},{"lineNumber":18,"author":{"gitId":"emilysim00"},"content":"import static EmProgram.exception.StorageException.IO_EXCEPTION;","lastModifiedDate":"2022-03-03"},{"lineNumber":19,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":20,"author":{"gitId":"emilysim00"},"content":"public class Storage extends Duke {","lastModifiedDate":"2022-02-25"},{"lineNumber":21,"author":{"gitId":"emilysim00"},"content":"    private static TaskList tasks;","lastModifiedDate":"2022-02-25"},{"lineNumber":22,"author":{"gitId":"emilysim00"},"content":"    public static Path databasePath;","lastModifiedDate":"2022-02-25"},{"lineNumber":23,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":24,"author":{"gitId":"emilysim00"},"content":"    public Storage(Path databasePath) {","lastModifiedDate":"2022-02-25"},{"lineNumber":25,"author":{"gitId":"emilysim00"},"content":"        Storage.databasePath \u003d databasePath;","lastModifiedDate":"2022-02-25"},{"lineNumber":26,"author":{"gitId":"emilysim00"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":27,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":28,"author":{"gitId":"emilysim00"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":29,"author":{"gitId":"emilysim00"},"content":"     * Populate all the task details in the database file at the start of the program. To restore the","lastModifiedDate":"2022-02-27"},{"lineNumber":30,"author":{"gitId":"emilysim00"},"content":"     * data that was previously saved in the file.","lastModifiedDate":"2022-02-27"},{"lineNumber":31,"author":{"gitId":"emilysim00"},"content":"     * Iterate through the database file, process and add the task in the file into taskArrayList.","lastModifiedDate":"2022-02-27"},{"lineNumber":32,"author":{"gitId":"emilysim00"},"content":"     * Iterate through each line in the file and convert the task details to the correct","lastModifiedDate":"2022-02-27"},{"lineNumber":33,"author":{"gitId":"emilysim00"},"content":"     * format to be processed and be added into the taskArrayList.","lastModifiedDate":"2022-02-27"},{"lineNumber":34,"author":{"gitId":"emilysim00"},"content":"     * It checks for the correct date and time format as well as ensuring the mark status of the","lastModifiedDate":"2022-02-27"},{"lineNumber":35,"author":{"gitId":"emilysim00"},"content":"     * task is being reflected correctly from the database file into the taskArrayList.","lastModifiedDate":"2022-02-27"},{"lineNumber":36,"author":{"gitId":"emilysim00"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":37,"author":{"gitId":"emilysim00"},"content":"     * @return taskArrayList to store all the tasks being processed from the database file.","lastModifiedDate":"2022-02-27"},{"lineNumber":38,"author":{"gitId":"emilysim00"},"content":"     * @throws StorageException          If input and/or output have error.","lastModifiedDate":"2022-02-27"},{"lineNumber":39,"author":{"gitId":"emilysim00"},"content":"     * @throws FileNotFoundException     If input and/or output have error.","lastModifiedDate":"2022-02-27"},{"lineNumber":40,"author":{"gitId":"emilysim00"},"content":"     * @throws InvalidUserInputException If input and/or output have error.","lastModifiedDate":"2022-02-27"},{"lineNumber":41,"author":{"gitId":"emilysim00"},"content":"     * @throws IOException               If input and/or output have error.","lastModifiedDate":"2022-02-27"},{"lineNumber":42,"author":{"gitId":"emilysim00"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":43,"author":{"gitId":"emilysim00"},"content":"    public static ArrayList populateFileContents() throws FileNotFoundException, InvalidUserInputException, StorageException {","lastModifiedDate":"2022-02-25"},{"lineNumber":44,"author":{"gitId":"emilysim00"},"content":"        List\u003cString\u003e fileContentLines \u003d null;","lastModifiedDate":"2022-02-25"},{"lineNumber":45,"author":{"gitId":"emilysim00"},"content":"        try {","lastModifiedDate":"2022-02-25"},{"lineNumber":46,"author":{"gitId":"emilysim00"},"content":"            fileContentLines \u003d Files.readAllLines(databasePath);","lastModifiedDate":"2022-02-25"},{"lineNumber":47,"author":{"gitId":"emilysim00"},"content":"            for (String lines : fileContentLines) {","lastModifiedDate":"2022-02-25"},{"lineNumber":48,"author":{"gitId":"emilysim00"},"content":"                isFileContentValid(lines);","lastModifiedDate":"2022-03-02"},{"lineNumber":49,"author":{"gitId":"emilysim00"},"content":"                String userInput \u003d null;","lastModifiedDate":"2022-02-25"},{"lineNumber":50,"author":{"gitId":"emilysim00"},"content":"                String[] contentsInALine \u003d lines.split(\"\\\\|\", -1);","lastModifiedDate":"2022-03-03"},{"lineNumber":51,"author":{"gitId":"emilysim00"},"content":"                if (contentsInALine.length \u003c 1) {","lastModifiedDate":"2022-02-25"},{"lineNumber":52,"author":{"gitId":"emilysim00"},"content":"                    throw new InvalidUserInputException(INVALID_INPUT);","lastModifiedDate":"2022-02-25"},{"lineNumber":53,"author":{"gitId":"emilysim00"},"content":"                }","lastModifiedDate":"2022-02-25"},{"lineNumber":54,"author":{"gitId":"emilysim00"},"content":"                switch (contentsInALine[0].trim()) {","lastModifiedDate":"2022-02-25"},{"lineNumber":55,"author":{"gitId":"emilysim00"},"content":"                case \"T\":","lastModifiedDate":"2022-02-25"},{"lineNumber":56,"author":{"gitId":"emilysim00"},"content":"                    userInput \u003d \"todo \" + contentsInALine[2].trim();","lastModifiedDate":"2022-02-25"},{"lineNumber":57,"author":{"gitId":"emilysim00"},"content":"                    TaskList.addTask(userInput, Duke.taskArrayList, false);","lastModifiedDate":"2022-03-03"},{"lineNumber":58,"author":{"gitId":"emilysim00"},"content":"                    break;","lastModifiedDate":"2022-02-25"},{"lineNumber":59,"author":{"gitId":"emilysim00"},"content":"                case \"D\":","lastModifiedDate":"2022-02-25"},{"lineNumber":60,"author":{"gitId":"emilysim00"},"content":"                    userInput \u003d \"deadline \" + contentsInALine[2].trim() + \" \" + \"/by \" + contentsInALine[3].trim();","lastModifiedDate":"2022-02-25"},{"lineNumber":61,"author":{"gitId":"emilysim00"},"content":"                    TaskList.addTaskAndTime(userInput, Duke.taskArrayList, false);","lastModifiedDate":"2022-03-03"},{"lineNumber":62,"author":{"gitId":"emilysim00"},"content":"                    break;","lastModifiedDate":"2022-02-25"},{"lineNumber":63,"author":{"gitId":"emilysim00"},"content":"                case \"E\":","lastModifiedDate":"2022-02-25"},{"lineNumber":64,"author":{"gitId":"emilysim00"},"content":"                    userInput \u003d \"event \" + contentsInALine[2].trim() + \" \" + \"/at \" + contentsInALine[3].trim();","lastModifiedDate":"2022-02-25"},{"lineNumber":65,"author":{"gitId":"emilysim00"},"content":"                    TaskList.addTaskAndTime(userInput, Duke.taskArrayList, false);","lastModifiedDate":"2022-03-03"},{"lineNumber":66,"author":{"gitId":"emilysim00"},"content":"                    break;","lastModifiedDate":"2022-02-25"},{"lineNumber":67,"author":{"gitId":"emilysim00"},"content":"                default:","lastModifiedDate":"2022-02-25"},{"lineNumber":68,"author":{"gitId":"emilysim00"},"content":"                    throw new StorageException(INVALID_FILE_INPUT);","lastModifiedDate":"2022-02-25"},{"lineNumber":69,"author":{"gitId":"emilysim00"},"content":"                }","lastModifiedDate":"2022-02-25"},{"lineNumber":70,"author":{"gitId":"emilysim00"},"content":"                if (contentsInALine[1].trim().equalsIgnoreCase(\"1\")) {","lastModifiedDate":"2022-02-25"},{"lineNumber":71,"author":{"gitId":"emilysim00"},"content":"                    Duke.taskArrayList.get(Duke.taskArrayList.size() - 1).markAsDone(Duke.taskArrayList.size(), Duke.taskArrayList, false);","lastModifiedDate":"2022-03-03"},{"lineNumber":72,"author":{"gitId":"emilysim00"},"content":"                }","lastModifiedDate":"2022-02-25"},{"lineNumber":73,"author":{"gitId":"emilysim00"},"content":"            }","lastModifiedDate":"2022-02-25"},{"lineNumber":74,"author":{"gitId":"emilysim00"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-25"},{"lineNumber":75,"author":{"gitId":"emilysim00"},"content":"            System.out.println(IO_EXCEPTION);","lastModifiedDate":"2022-02-27"},{"lineNumber":76,"author":{"gitId":"emilysim00"},"content":"        }","lastModifiedDate":"2022-02-25"},{"lineNumber":77,"author":{"gitId":"emilysim00"},"content":"        return Duke.taskArrayList;","lastModifiedDate":"2022-03-03"},{"lineNumber":78,"author":{"gitId":"emilysim00"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":79,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":80,"author":{"gitId":"emilysim00"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":81,"author":{"gitId":"emilysim00"},"content":"     * Add new task details into the database file by appending the new task details","lastModifiedDate":"2022-02-27"},{"lineNumber":82,"author":{"gitId":"emilysim00"},"content":"     * into the last line of the file.","lastModifiedDate":"2022-02-27"},{"lineNumber":83,"author":{"gitId":"emilysim00"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":84,"author":{"gitId":"emilysim00"},"content":"     * @param textToAppend number of the task in the task list to be marked/unmarked.","lastModifiedDate":"2022-02-27"},{"lineNumber":85,"author":{"gitId":"emilysim00"},"content":"     * @throws IOException If input and/or output have error.","lastModifiedDate":"2022-02-27"},{"lineNumber":86,"author":{"gitId":"emilysim00"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":87,"author":{"gitId":"emilysim00"},"content":"    public static void writeToFile(String textToAppend) throws IOException {","lastModifiedDate":"2022-02-25"},{"lineNumber":88,"author":{"gitId":"emilysim00"},"content":"        String modifiedContent \u003d System.lineSeparator() + textToAppend;","lastModifiedDate":"2022-02-25"},{"lineNumber":89,"author":{"gitId":"emilysim00"},"content":"        Files.write(databasePath, modifiedContent.getBytes(), StandardOpenOption.APPEND);","lastModifiedDate":"2022-02-25"},{"lineNumber":90,"author":{"gitId":"emilysim00"},"content":"        removeSpaces();","lastModifiedDate":"2022-02-25"},{"lineNumber":91,"author":{"gitId":"emilysim00"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":92,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":93,"author":{"gitId":"emilysim00"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":94,"author":{"gitId":"emilysim00"},"content":"     * Iterate through the database file and remove any empty lines in the file.","lastModifiedDate":"2022-02-27"},{"lineNumber":95,"author":{"gitId":"emilysim00"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":96,"author":{"gitId":"emilysim00"},"content":"    public static void removeSpaces() throws IOException {","lastModifiedDate":"2022-02-25"},{"lineNumber":97,"author":{"gitId":"emilysim00"},"content":"        String content \u003d \"\";","lastModifiedDate":"2022-02-25"},{"lineNumber":98,"author":{"gitId":"emilysim00"},"content":"        List\u003cString\u003e fileContentLines \u003d Files.readAllLines(databasePath);","lastModifiedDate":"2022-02-25"},{"lineNumber":99,"author":{"gitId":"emilysim00"},"content":"        for (String lines : fileContentLines) {","lastModifiedDate":"2022-02-25"},{"lineNumber":100,"author":{"gitId":"emilysim00"},"content":"            lines \u003d lines.trim();","lastModifiedDate":"2022-02-25"},{"lineNumber":101,"author":{"gitId":"emilysim00"},"content":"            if (lines.length() \u003e 0) {","lastModifiedDate":"2022-02-25"},{"lineNumber":102,"author":{"gitId":"emilysim00"},"content":"                content +\u003d lines + System.lineSeparator();","lastModifiedDate":"2022-02-25"},{"lineNumber":103,"author":{"gitId":"emilysim00"},"content":"            }","lastModifiedDate":"2022-02-25"},{"lineNumber":104,"author":{"gitId":"emilysim00"},"content":"            Files.write(databasePath, content.getBytes());","lastModifiedDate":"2022-02-25"},{"lineNumber":105,"author":{"gitId":"emilysim00"},"content":"        }","lastModifiedDate":"2022-02-25"},{"lineNumber":106,"author":{"gitId":"emilysim00"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":107,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":108,"author":{"gitId":"emilysim00"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":109,"author":{"gitId":"emilysim00"},"content":"     * Go to the line (taskNumber) in the file that stores the task details and modifies","lastModifiedDate":"2022-02-27"},{"lineNumber":110,"author":{"gitId":"emilysim00"},"content":"     * its content and saved it back into the file.","lastModifiedDate":"2022-02-27"},{"lineNumber":111,"author":{"gitId":"emilysim00"},"content":"     * If task is marked, the mark status of the file will be represented as \"1\" and","lastModifiedDate":"2022-02-27"},{"lineNumber":112,"author":{"gitId":"emilysim00"},"content":"     * if the task is unmarked, the mark status of the file will be represented as \"0\".","lastModifiedDate":"2022-02-27"},{"lineNumber":113,"author":{"gitId":"emilysim00"},"content":"     * \u003cp\u003e","lastModifiedDate":"2022-03-02"},{"lineNumber":114,"author":{"gitId":"emilysim00"},"content":"     * If the task is being deleted, the task details in the file will be replaced as","lastModifiedDate":"2022-02-27"},{"lineNumber":115,"author":{"gitId":"emilysim00"},"content":"     * an empty string. The empty strings will be removed by the removeSpaces method.","lastModifiedDate":"2022-02-27"},{"lineNumber":116,"author":{"gitId":"emilysim00"},"content":"     * If the task is being marked/unmarked, the task details in","lastModifiedDate":"2022-02-27"},{"lineNumber":117,"author":{"gitId":"emilysim00"},"content":"     * the file will be modified to reflect the corresponding changes.","lastModifiedDate":"2022-02-27"},{"lineNumber":118,"author":{"gitId":"emilysim00"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":119,"author":{"gitId":"emilysim00"},"content":"     * @param taskNumber number of the task in the task list to be modified.","lastModifiedDate":"2022-02-27"},{"lineNumber":120,"author":{"gitId":"emilysim00"},"content":"     * @param isMark     whether the task is being marked or unmarked.","lastModifiedDate":"2022-02-27"},{"lineNumber":121,"author":{"gitId":"emilysim00"},"content":"     * @param isDelete   whether the task is being deleted.","lastModifiedDate":"2022-02-27"},{"lineNumber":122,"author":{"gitId":"emilysim00"},"content":"     * @throws IOException If input and/or output have error.","lastModifiedDate":"2022-02-27"},{"lineNumber":123,"author":{"gitId":"emilysim00"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":124,"author":{"gitId":"emilysim00"},"content":"    public static void modifyDatabase(int taskNumber, Boolean isMark, Boolean isDelete) {","lastModifiedDate":"2022-02-25"},{"lineNumber":125,"author":{"gitId":"emilysim00"},"content":"        String oldContent \u003d \"\";","lastModifiedDate":"2022-02-25"},{"lineNumber":126,"author":{"gitId":"emilysim00"},"content":"        String newLine \u003d \"\";","lastModifiedDate":"2022-02-25"},{"lineNumber":127,"author":{"gitId":"emilysim00"},"content":"        try {","lastModifiedDate":"2022-02-25"},{"lineNumber":128,"author":{"gitId":"emilysim00"},"content":"            removeSpaces();","lastModifiedDate":"2022-02-25"},{"lineNumber":129,"author":{"gitId":"emilysim00"},"content":"            if (isDelete) {","lastModifiedDate":"2022-02-25"},{"lineNumber":130,"author":{"gitId":"emilysim00"},"content":"                newLine \u003d \"\";","lastModifiedDate":"2022-02-25"},{"lineNumber":131,"author":{"gitId":"emilysim00"},"content":"            } else {","lastModifiedDate":"2022-02-25"},{"lineNumber":132,"author":{"gitId":"emilysim00"},"content":"                newLine \u003d modifyContent(taskNumber, isMark);","lastModifiedDate":"2022-02-25"},{"lineNumber":133,"author":{"gitId":"emilysim00"},"content":"            }","lastModifiedDate":"2022-02-25"},{"lineNumber":134,"author":{"gitId":"emilysim00"},"content":"            overWrite(taskNumber, newLine);","lastModifiedDate":"2022-02-26"},{"lineNumber":135,"author":{"gitId":"emilysim00"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-25"},{"lineNumber":136,"author":{"gitId":"emilysim00"},"content":"            System.out.println(StorageException.IO_EXCEPTION);","lastModifiedDate":"2022-02-25"},{"lineNumber":137,"author":{"gitId":"emilysim00"},"content":"        }","lastModifiedDate":"2022-02-25"},{"lineNumber":138,"author":{"gitId":"emilysim00"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":139,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":140,"author":{"gitId":"emilysim00"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":141,"author":{"gitId":"emilysim00"},"content":"     * Return the updated string of the task details after mark status","lastModifiedDate":"2022-02-27"},{"lineNumber":142,"author":{"gitId":"emilysim00"},"content":"     * of the task is modified in the task list.","lastModifiedDate":"2022-02-27"},{"lineNumber":143,"author":{"gitId":"emilysim00"},"content":"     * Go to the line (taskNumber) in the file that stores the task details and modifies","lastModifiedDate":"2022-02-27"},{"lineNumber":144,"author":{"gitId":"emilysim00"},"content":"     * its content.","lastModifiedDate":"2022-02-27"},{"lineNumber":145,"author":{"gitId":"emilysim00"},"content":"     * If task is marked, the mark status of the file will be represented as \"1\" and","lastModifiedDate":"2022-02-27"},{"lineNumber":146,"author":{"gitId":"emilysim00"},"content":"     * if the task is unmarked, the mark status of the file will be represented as \"0\".","lastModifiedDate":"2022-02-27"},{"lineNumber":147,"author":{"gitId":"emilysim00"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":148,"author":{"gitId":"emilysim00"},"content":"     * @param taskNumber number of the task in the task list to be marked/unmarked.","lastModifiedDate":"2022-02-27"},{"lineNumber":149,"author":{"gitId":"emilysim00"},"content":"     * @param isMark     whether the task is being marked or unmarked.","lastModifiedDate":"2022-02-27"},{"lineNumber":150,"author":{"gitId":"emilysim00"},"content":"     * @return newLine the updated task details after its been marked/unmarked.","lastModifiedDate":"2022-02-27"},{"lineNumber":151,"author":{"gitId":"emilysim00"},"content":"     * @throws IOException If input and/or output have error.","lastModifiedDate":"2022-02-27"},{"lineNumber":152,"author":{"gitId":"emilysim00"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":153,"author":{"gitId":"emilysim00"},"content":"    public static String modifyContent(int taskNumber, Boolean isMark) {","lastModifiedDate":"2022-02-25"},{"lineNumber":154,"author":{"gitId":"emilysim00"},"content":"        String newLine \u003d \"\";","lastModifiedDate":"2022-02-25"},{"lineNumber":155,"author":{"gitId":"emilysim00"},"content":"        try {","lastModifiedDate":"2022-02-25"},{"lineNumber":156,"author":{"gitId":"emilysim00"},"content":"            String oldLine \u003d Files.readAllLines(databasePath).get(taskNumber - 1);","lastModifiedDate":"2022-02-25"},{"lineNumber":157,"author":{"gitId":"emilysim00"},"content":"            if (isMark) {","lastModifiedDate":"2022-02-25"},{"lineNumber":158,"author":{"gitId":"emilysim00"},"content":"                newLine \u003d oldLine.replaceFirst(\"0\", \"1\");","lastModifiedDate":"2022-02-25"},{"lineNumber":159,"author":{"gitId":"emilysim00"},"content":"            } else {","lastModifiedDate":"2022-02-25"},{"lineNumber":160,"author":{"gitId":"emilysim00"},"content":"                newLine \u003d oldLine.replaceFirst(\"1\", \"0\");","lastModifiedDate":"2022-02-25"},{"lineNumber":161,"author":{"gitId":"emilysim00"},"content":"            }","lastModifiedDate":"2022-02-25"},{"lineNumber":162,"author":{"gitId":"emilysim00"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-25"},{"lineNumber":163,"author":{"gitId":"emilysim00"},"content":"            System.out.println(StorageException.IO_EXCEPTION);","lastModifiedDate":"2022-02-27"},{"lineNumber":164,"author":{"gitId":"emilysim00"},"content":"        }","lastModifiedDate":"2022-02-25"},{"lineNumber":165,"author":{"gitId":"emilysim00"},"content":"        return newLine;","lastModifiedDate":"2022-02-25"},{"lineNumber":166,"author":{"gitId":"emilysim00"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":167,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":168,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":169,"author":{"gitId":"emilysim00"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":170,"author":{"gitId":"emilysim00"},"content":"     * Overwrite certain lines in the database file.","lastModifiedDate":"2022-02-27"},{"lineNumber":171,"author":{"gitId":"emilysim00"},"content":"     * Look through the whole database file and find the string that","lastModifiedDate":"2022-02-27"},{"lineNumber":172,"author":{"gitId":"emilysim00"},"content":"     * matches the task to overwrite. Removes any empty spaces in between the lines","lastModifiedDate":"2022-02-27"},{"lineNumber":173,"author":{"gitId":"emilysim00"},"content":"     * after file is being modified.","lastModifiedDate":"2022-02-27"},{"lineNumber":174,"author":{"gitId":"emilysim00"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":175,"author":{"gitId":"emilysim00"},"content":"     * @param lineNumber number of the line to be replaced in the database file.","lastModifiedDate":"2022-02-27"},{"lineNumber":176,"author":{"gitId":"emilysim00"},"content":"     * @param newLine    command with the right date and time format.","lastModifiedDate":"2022-02-27"},{"lineNumber":177,"author":{"gitId":"emilysim00"},"content":"     * @throws IOException If input and/or output have error.","lastModifiedDate":"2022-02-27"},{"lineNumber":178,"author":{"gitId":"emilysim00"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":179,"author":{"gitId":"emilysim00"},"content":"    public static void overWrite(int lineNumber, String newLine) {","lastModifiedDate":"2022-02-26"},{"lineNumber":180,"author":{"gitId":"emilysim00"},"content":"        try {","lastModifiedDate":"2022-02-26"},{"lineNumber":181,"author":{"gitId":"emilysim00"},"content":"            String oldContent \u003d \"\";","lastModifiedDate":"2022-02-26"},{"lineNumber":182,"author":{"gitId":"emilysim00"},"content":"            removeSpaces();","lastModifiedDate":"2022-02-26"},{"lineNumber":183,"author":{"gitId":"emilysim00"},"content":"            List\u003cString\u003e fileContentLines \u003d null;","lastModifiedDate":"2022-02-26"},{"lineNumber":184,"author":{"gitId":"emilysim00"},"content":"            fileContentLines \u003d Files.readAllLines(databasePath);","lastModifiedDate":"2022-02-26"},{"lineNumber":185,"author":{"gitId":"emilysim00"},"content":"            int loopNumber \u003d 1;","lastModifiedDate":"2022-02-26"},{"lineNumber":186,"author":{"gitId":"emilysim00"},"content":"            for (String lines : fileContentLines) {","lastModifiedDate":"2022-02-26"},{"lineNumber":187,"author":{"gitId":"emilysim00"},"content":"                if (loopNumber \u003d\u003d lineNumber) {","lastModifiedDate":"2022-02-26"},{"lineNumber":188,"author":{"gitId":"emilysim00"},"content":"                    oldContent +\u003d (newLine + \"\\n\");","lastModifiedDate":"2022-02-26"},{"lineNumber":189,"author":{"gitId":"emilysim00"},"content":"                } else {","lastModifiedDate":"2022-02-26"},{"lineNumber":190,"author":{"gitId":"emilysim00"},"content":"                    oldContent +\u003d (lines + \"\\n\");","lastModifiedDate":"2022-02-26"},{"lineNumber":191,"author":{"gitId":"emilysim00"},"content":"                }","lastModifiedDate":"2022-02-26"},{"lineNumber":192,"author":{"gitId":"emilysim00"},"content":"                loopNumber +\u003d 1;","lastModifiedDate":"2022-02-26"},{"lineNumber":193,"author":{"gitId":"emilysim00"},"content":"            }","lastModifiedDate":"2022-02-26"},{"lineNumber":194,"author":{"gitId":"emilysim00"},"content":"            Files.write(databasePath, oldContent.getBytes());","lastModifiedDate":"2022-02-26"},{"lineNumber":195,"author":{"gitId":"emilysim00"},"content":"            removeSpaces();","lastModifiedDate":"2022-02-26"},{"lineNumber":196,"author":{"gitId":"emilysim00"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-26"},{"lineNumber":197,"author":{"gitId":"emilysim00"},"content":"            System.out.println(StorageException.IO_EXCEPTION);","lastModifiedDate":"2022-02-26"},{"lineNumber":198,"author":{"gitId":"emilysim00"},"content":"        }","lastModifiedDate":"2022-02-26"},{"lineNumber":199,"author":{"gitId":"emilysim00"},"content":"    }","lastModifiedDate":"2022-02-26"},{"lineNumber":200,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":201,"author":{"gitId":"emilysim00"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":202,"author":{"gitId":"emilysim00"},"content":"     * Check if the database file exists.","lastModifiedDate":"2022-03-02"},{"lineNumber":203,"author":{"gitId":"emilysim00"},"content":"     * If directory or file does not exist, it will create the corresponding directory and file.","lastModifiedDate":"2022-03-02"},{"lineNumber":204,"author":{"gitId":"emilysim00"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":205,"author":{"gitId":"emilysim00"},"content":"    public static void checkFileExists() throws IOException {","lastModifiedDate":"2022-03-02"},{"lineNumber":206,"author":{"gitId":"emilysim00"},"content":"        Path dataDirectory \u003d databasePath.getParent();","lastModifiedDate":"2022-03-02"},{"lineNumber":207,"author":{"gitId":"emilysim00"},"content":"        if (!Files.isDirectory(dataDirectory)) {","lastModifiedDate":"2022-03-02"},{"lineNumber":208,"author":{"gitId":"emilysim00"},"content":"            Files.createDirectories(dataDirectory);","lastModifiedDate":"2022-03-02"},{"lineNumber":209,"author":{"gitId":"emilysim00"},"content":"        }","lastModifiedDate":"2022-03-02"},{"lineNumber":210,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":211,"author":{"gitId":"emilysim00"},"content":"        if (Files.notExists(databasePath)) {","lastModifiedDate":"2022-03-02"},{"lineNumber":212,"author":{"gitId":"emilysim00"},"content":"            Files.createFile(databasePath);","lastModifiedDate":"2022-03-02"},{"lineNumber":213,"author":{"gitId":"emilysim00"},"content":"        }","lastModifiedDate":"2022-03-02"},{"lineNumber":214,"author":{"gitId":"emilysim00"},"content":"    }","lastModifiedDate":"2022-03-02"},{"lineNumber":215,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":216,"author":{"gitId":"emilysim00"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":217,"author":{"gitId":"emilysim00"},"content":"     * Check for the validity of the file contents.","lastModifiedDate":"2022-03-02"},{"lineNumber":218,"author":{"gitId":"emilysim00"},"content":"     * Look through the whole database file and check the validity of each line.","lastModifiedDate":"2022-03-02"},{"lineNumber":219,"author":{"gitId":"emilysim00"},"content":"     * It will check for all the validations of the input and ensure all fulfilled the","lastModifiedDate":"2022-03-02"},{"lineNumber":220,"author":{"gitId":"emilysim00"},"content":"     * validations.","lastModifiedDate":"2022-03-02"},{"lineNumber":221,"author":{"gitId":"emilysim00"},"content":"     *","lastModifiedDate":"2022-03-02"},{"lineNumber":222,"author":{"gitId":"emilysim00"},"content":"     * @param fileCommand Command in the file.","lastModifiedDate":"2022-03-02"},{"lineNumber":223,"author":{"gitId":"emilysim00"},"content":"     * @throws StorageException If command in the file is invalid.","lastModifiedDate":"2022-03-02"},{"lineNumber":224,"author":{"gitId":"emilysim00"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":225,"author":{"gitId":"emilysim00"},"content":"    public static void isFileContentValid(String fileCommand) throws StorageException {","lastModifiedDate":"2022-03-02"},{"lineNumber":226,"author":{"gitId":"emilysim00"},"content":"        String[] fileCommandArray \u003d fileCommand.split(\"\\\\|\");","lastModifiedDate":"2022-03-03"},{"lineNumber":227,"author":{"gitId":"emilysim00"},"content":"        switch (fileCommandArray[0]) {","lastModifiedDate":"2022-03-02"},{"lineNumber":228,"author":{"gitId":"emilysim00"},"content":"        case \"T\":","lastModifiedDate":"2022-03-02"},{"lineNumber":229,"author":{"gitId":"emilysim00"},"content":"            if (fileCommandArray.length \u003c 3) {","lastModifiedDate":"2022-03-02"},{"lineNumber":230,"author":{"gitId":"emilysim00"},"content":"                printFileCorrupted();","lastModifiedDate":"2022-03-02"},{"lineNumber":231,"author":{"gitId":"emilysim00"},"content":"            }","lastModifiedDate":"2022-03-02"},{"lineNumber":232,"author":{"gitId":"emilysim00"},"content":"            break;","lastModifiedDate":"2022-02-26"},{"lineNumber":233,"author":{"gitId":"emilysim00"},"content":"        case \"E\":","lastModifiedDate":"2022-03-02"},{"lineNumber":234,"author":{"gitId":"emilysim00"},"content":"        case \"D\":","lastModifiedDate":"2022-03-02"},{"lineNumber":235,"author":{"gitId":"emilysim00"},"content":"            if (fileCommandArray.length \u003c 4) {","lastModifiedDate":"2022-03-02"},{"lineNumber":236,"author":{"gitId":"emilysim00"},"content":"                printFileCorrupted();","lastModifiedDate":"2022-03-02"},{"lineNumber":237,"author":{"gitId":"emilysim00"},"content":"            }","lastModifiedDate":"2022-02-26"},{"lineNumber":238,"author":{"gitId":"emilysim00"},"content":"            isTimeAndDateInFileValid(fileCommandArray[3]);","lastModifiedDate":"2022-03-02"},{"lineNumber":239,"author":{"gitId":"emilysim00"},"content":"            break;","lastModifiedDate":"2022-03-02"},{"lineNumber":240,"author":{"gitId":"emilysim00"},"content":"        default:","lastModifiedDate":"2022-03-02"},{"lineNumber":241,"author":{"gitId":"emilysim00"},"content":"            throw new StorageException(INVALID_FILE_INPUT);","lastModifiedDate":"2022-03-02"},{"lineNumber":242,"author":{"gitId":"emilysim00"},"content":"        }","lastModifiedDate":"2022-02-26"},{"lineNumber":243,"author":{"gitId":"emilysim00"},"content":"    }","lastModifiedDate":"2022-02-26"},{"lineNumber":244,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":245,"author":{"gitId":"emilysim00"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":246,"author":{"gitId":"emilysim00"},"content":"     * Check for the validity of the time in the file command.","lastModifiedDate":"2022-03-02"},{"lineNumber":247,"author":{"gitId":"emilysim00"},"content":"     * Check if the time contains \":, AM, PM\" and also whether the","lastModifiedDate":"2022-03-02"},{"lineNumber":248,"author":{"gitId":"emilysim00"},"content":"     * hour and minutes of the time in the file command satisfy the","lastModifiedDate":"2022-03-02"},{"lineNumber":249,"author":{"gitId":"emilysim00"},"content":"     * conditions of a time.","lastModifiedDate":"2022-03-02"},{"lineNumber":250,"author":{"gitId":"emilysim00"},"content":"     *","lastModifiedDate":"2022-03-02"},{"lineNumber":251,"author":{"gitId":"emilysim00"},"content":"     * If time failed to meet the conditions stated, an error message will","lastModifiedDate":"2022-03-02"},{"lineNumber":252,"author":{"gitId":"emilysim00"},"content":"     * be printed and the program will be terminated for file correction.","lastModifiedDate":"2022-03-02"},{"lineNumber":253,"author":{"gitId":"emilysim00"},"content":"     *","lastModifiedDate":"2022-03-02"},{"lineNumber":254,"author":{"gitId":"emilysim00"},"content":"     * @param Time Time found in Command in the file.","lastModifiedDate":"2022-03-02"},{"lineNumber":255,"author":{"gitId":"emilysim00"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":256,"author":{"gitId":"emilysim00"},"content":"    public static void isTimeValid(String Time) {","lastModifiedDate":"2022-03-02"},{"lineNumber":257,"author":{"gitId":"emilysim00"},"content":"        String[] TimeArray \u003d Time.split(\":\"); //TimeArray[0] contain hour","lastModifiedDate":"2022-03-02"},{"lineNumber":258,"author":{"gitId":"emilysim00"},"content":"        String[] minArray \u003d null;","lastModifiedDate":"2022-03-02"},{"lineNumber":259,"author":{"gitId":"emilysim00"},"content":"        if (Integer.parseInt(TimeArray[0]) \u003e 12 || Integer.parseInt(TimeArray[0]) \u003c\u003d 0) {","lastModifiedDate":"2022-03-02"},{"lineNumber":260,"author":{"gitId":"emilysim00"},"content":"            printFileCorrupted();","lastModifiedDate":"2022-03-02"},{"lineNumber":261,"author":{"gitId":"emilysim00"},"content":"            return;","lastModifiedDate":"2022-03-02"},{"lineNumber":262,"author":{"gitId":"emilysim00"},"content":"        }","lastModifiedDate":"2022-03-02"},{"lineNumber":263,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":264,"author":{"gitId":"emilysim00"},"content":"        if (TimeArray[1].contains(\"AM\")) {","lastModifiedDate":"2022-03-02"},{"lineNumber":265,"author":{"gitId":"emilysim00"},"content":"            minArray \u003d TimeArray[1].split(\"AM\"); //minArray[0] contains min","lastModifiedDate":"2022-03-02"},{"lineNumber":266,"author":{"gitId":"emilysim00"},"content":"        } else if (TimeArray[1].contains(\"PM\")) {","lastModifiedDate":"2022-03-02"},{"lineNumber":267,"author":{"gitId":"emilysim00"},"content":"            minArray \u003d TimeArray[1].split(\"PM\");","lastModifiedDate":"2022-03-02"},{"lineNumber":268,"author":{"gitId":"emilysim00"},"content":"        } else {","lastModifiedDate":"2022-03-02"},{"lineNumber":269,"author":{"gitId":"emilysim00"},"content":"            printFileCorrupted();","lastModifiedDate":"2022-03-02"},{"lineNumber":270,"author":{"gitId":"emilysim00"},"content":"            return;","lastModifiedDate":"2022-03-02"},{"lineNumber":271,"author":{"gitId":"emilysim00"},"content":"        }","lastModifiedDate":"2022-03-02"},{"lineNumber":272,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":273,"author":{"gitId":"emilysim00"},"content":"        if (Integer.parseInt(minArray[0]) \u003e 59) {","lastModifiedDate":"2022-03-02"},{"lineNumber":274,"author":{"gitId":"emilysim00"},"content":"            printFileCorrupted();","lastModifiedDate":"2022-03-02"},{"lineNumber":275,"author":{"gitId":"emilysim00"},"content":"            return;","lastModifiedDate":"2022-03-02"},{"lineNumber":276,"author":{"gitId":"emilysim00"},"content":"        }","lastModifiedDate":"2022-02-26"},{"lineNumber":277,"author":{"gitId":"emilysim00"},"content":"    }","lastModifiedDate":"2022-02-26"},{"lineNumber":278,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":279,"author":{"gitId":"emilysim00"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":280,"author":{"gitId":"emilysim00"},"content":"     * Check for the validity of the date in the file command.","lastModifiedDate":"2022-03-02"},{"lineNumber":281,"author":{"gitId":"emilysim00"},"content":"     * Check if the date is in \"MMM-d-yyyy\" format.","lastModifiedDate":"2022-03-02"},{"lineNumber":282,"author":{"gitId":"emilysim00"},"content":"     *","lastModifiedDate":"2022-03-02"},{"lineNumber":283,"author":{"gitId":"emilysim00"},"content":"     * If date failed to meet the conditions stated, an error message will","lastModifiedDate":"2022-03-02"},{"lineNumber":284,"author":{"gitId":"emilysim00"},"content":"     * be printed and the program will be terminated for file correction.","lastModifiedDate":"2022-03-02"},{"lineNumber":285,"author":{"gitId":"emilysim00"},"content":"     *","lastModifiedDate":"2022-03-02"},{"lineNumber":286,"author":{"gitId":"emilysim00"},"content":"     * @param inDate Date found in Command in the file.","lastModifiedDate":"2022-03-02"},{"lineNumber":287,"author":{"gitId":"emilysim00"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":288,"author":{"gitId":"emilysim00"},"content":"    public static void isDateInFileValid(String inDate) {","lastModifiedDate":"2022-03-02"},{"lineNumber":289,"author":{"gitId":"emilysim00"},"content":"        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"MMM-d-yyyy\");","lastModifiedDate":"2022-03-02"},{"lineNumber":290,"author":{"gitId":"emilysim00"},"content":"        dateFormat.setLenient(false);","lastModifiedDate":"2022-03-02"},{"lineNumber":291,"author":{"gitId":"emilysim00"},"content":"        try {","lastModifiedDate":"2022-03-02"},{"lineNumber":292,"author":{"gitId":"emilysim00"},"content":"            dateFormat.parse(inDate.trim());","lastModifiedDate":"2022-03-02"},{"lineNumber":293,"author":{"gitId":"emilysim00"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2022-03-02"},{"lineNumber":294,"author":{"gitId":"emilysim00"},"content":"            printFileCorrupted();","lastModifiedDate":"2022-03-02"},{"lineNumber":295,"author":{"gitId":"emilysim00"},"content":"            return;","lastModifiedDate":"2022-03-02"},{"lineNumber":296,"author":{"gitId":"emilysim00"},"content":"        }","lastModifiedDate":"2022-03-02"},{"lineNumber":297,"author":{"gitId":"emilysim00"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":298,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":299,"author":{"gitId":"emilysim00"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":300,"author":{"gitId":"emilysim00"},"content":"     * Check for the validity of both the time and date in the file command.","lastModifiedDate":"2022-03-02"},{"lineNumber":301,"author":{"gitId":"emilysim00"},"content":"     * Check if the time contains \":, AM, PM\" and also whether the","lastModifiedDate":"2022-03-02"},{"lineNumber":302,"author":{"gitId":"emilysim00"},"content":"     * hour and minutes of the time in the file command satisfy the","lastModifiedDate":"2022-03-02"},{"lineNumber":303,"author":{"gitId":"emilysim00"},"content":"     * conditions of a time.","lastModifiedDate":"2022-03-02"},{"lineNumber":304,"author":{"gitId":"emilysim00"},"content":"     * Check if the date is in \"MMM-d-yyyy\" format.","lastModifiedDate":"2022-03-02"},{"lineNumber":305,"author":{"gitId":"emilysim00"},"content":"     * Ensure that both date and time exist in the field for both event and deadline.","lastModifiedDate":"2022-03-02"},{"lineNumber":306,"author":{"gitId":"emilysim00"},"content":"     *","lastModifiedDate":"2022-03-02"},{"lineNumber":307,"author":{"gitId":"emilysim00"},"content":"     * If time or date failed to meet the conditions stated, an error message will","lastModifiedDate":"2022-03-02"},{"lineNumber":308,"author":{"gitId":"emilysim00"},"content":"     * be printed and the program will be terminated for file correction.","lastModifiedDate":"2022-03-02"},{"lineNumber":309,"author":{"gitId":"emilysim00"},"content":"     *","lastModifiedDate":"2022-03-02"},{"lineNumber":310,"author":{"gitId":"emilysim00"},"content":"     * @param DateAndTime Time found in Command in the file.","lastModifiedDate":"2022-03-02"},{"lineNumber":311,"author":{"gitId":"emilysim00"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":312,"author":{"gitId":"emilysim00"},"content":"    public static void isTimeAndDateInFileValid(String DateAndTime) {","lastModifiedDate":"2022-03-02"},{"lineNumber":313,"author":{"gitId":"emilysim00"},"content":"        String[] DateAndTimeArray \u003d DateAndTime.split(\" \");","lastModifiedDate":"2022-03-02"},{"lineNumber":314,"author":{"gitId":"emilysim00"},"content":"        if (DateAndTimeArray.length \u003c\u003d 1) {","lastModifiedDate":"2022-03-02"},{"lineNumber":315,"author":{"gitId":"emilysim00"},"content":"            printFileCorrupted();","lastModifiedDate":"2022-03-02"},{"lineNumber":316,"author":{"gitId":"emilysim00"},"content":"        }","lastModifiedDate":"2022-02-25"},{"lineNumber":317,"author":{"gitId":"emilysim00"},"content":"        isDateInFileValid(DateAndTimeArray[0].trim());","lastModifiedDate":"2022-03-02"},{"lineNumber":318,"author":{"gitId":"emilysim00"},"content":"        isTimeValid(DateAndTimeArray[1].trim());","lastModifiedDate":"2022-03-02"},{"lineNumber":319,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":320,"author":{"gitId":"emilysim00"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":321,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":322,"author":{"gitId":"emilysim00"},"content":"    /**","lastModifiedDate":"2022-03-02"},{"lineNumber":323,"author":{"gitId":"emilysim00"},"content":"     * Terminates the program if file contents is corrupted.","lastModifiedDate":"2022-03-02"},{"lineNumber":324,"author":{"gitId":"emilysim00"},"content":"     * If the content in the file is not stored in the correct format,","lastModifiedDate":"2022-03-02"},{"lineNumber":325,"author":{"gitId":"emilysim00"},"content":"     * the program will be terminated. It will also print an error message","lastModifiedDate":"2022-03-02"},{"lineNumber":326,"author":{"gitId":"emilysim00"},"content":"     * to remind the user to check the content in the file.","lastModifiedDate":"2022-03-02"},{"lineNumber":327,"author":{"gitId":"emilysim00"},"content":"     */","lastModifiedDate":"2022-03-02"},{"lineNumber":328,"author":{"gitId":"emilysim00"},"content":"    public static void printFileCorrupted() {","lastModifiedDate":"2022-03-02"},{"lineNumber":329,"author":{"gitId":"emilysim00"},"content":"        System.out.println(INVALID_FILE_INPUT);","lastModifiedDate":"2022-03-02"},{"lineNumber":330,"author":{"gitId":"emilysim00"},"content":"        System.exit(0);","lastModifiedDate":"2022-03-02"},{"lineNumber":331,"author":{"gitId":"emilysim00"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":332,"author":{"gitId":"emilysim00"},"content":"}","lastModifiedDate":"2022-03-02"},{"lineNumber":333,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-02"}],"authorContributionMap":{"emilysim00":333}},{"path":"src/main/java/em/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"emilysim00"},"content":"package em;","lastModifiedDate":"2022-03-03"},{"lineNumber":2,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":3,"author":{"gitId":"emilysim00"},"content":"import EmProgram.exception.InvalidUserInputException;","lastModifiedDate":"2022-03-03"},{"lineNumber":4,"author":{"gitId":"emilysim00"},"content":"import task.Deadline;","lastModifiedDate":"2022-02-25"},{"lineNumber":5,"author":{"gitId":"emilysim00"},"content":"import task.Event;","lastModifiedDate":"2022-02-25"},{"lineNumber":6,"author":{"gitId":"emilysim00"},"content":"import task.Task;","lastModifiedDate":"2022-02-25"},{"lineNumber":7,"author":{"gitId":"emilysim00"},"content":"import task.ToDo;","lastModifiedDate":"2022-02-25"},{"lineNumber":8,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":9,"author":{"gitId":"emilysim00"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-25"},{"lineNumber":10,"author":{"gitId":"emilysim00"},"content":"import java.nio.file.Files;","lastModifiedDate":"2022-02-26"},{"lineNumber":11,"author":{"gitId":"emilysim00"},"content":"import java.text.ParseException;","lastModifiedDate":"2022-02-26"},{"lineNumber":12,"author":{"gitId":"emilysim00"},"content":"import java.text.SimpleDateFormat;","lastModifiedDate":"2022-02-26"},{"lineNumber":13,"author":{"gitId":"emilysim00"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2022-02-26"},{"lineNumber":14,"author":{"gitId":"emilysim00"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-02-26"},{"lineNumber":15,"author":{"gitId":"emilysim00"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-02-26"},{"lineNumber":16,"author":{"gitId":"emilysim00"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-25"},{"lineNumber":17,"author":{"gitId":"emilysim00"},"content":"import java.util.List;","lastModifiedDate":"2022-02-26"},{"lineNumber":18,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":19,"author":{"gitId":"emilysim00"},"content":"import static EmProgram.exception.InvalidUserInputException.*;","lastModifiedDate":"2022-03-03"},{"lineNumber":20,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":21,"author":{"gitId":"emilysim00"},"content":"public class TaskList {","lastModifiedDate":"2022-02-25"},{"lineNumber":22,"author":{"gitId":"emilysim00"},"content":"    public static final String LINE_SEPARATOR \u003d \"____________________________________________________________\\n\";","lastModifiedDate":"2022-02-25"},{"lineNumber":23,"author":{"gitId":"emilysim00"},"content":"    private static Parser parser;","lastModifiedDate":"2022-02-25"},{"lineNumber":24,"author":{"gitId":"emilysim00"},"content":"    public static ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-02-25"},{"lineNumber":25,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":26,"author":{"gitId":"emilysim00"},"content":"    public TaskList(ArrayList taskList) {","lastModifiedDate":"2022-02-25"},{"lineNumber":27,"author":{"gitId":"emilysim00"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2022-02-25"},{"lineNumber":28,"author":{"gitId":"emilysim00"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":29,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":30,"author":{"gitId":"emilysim00"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":31,"author":{"gitId":"emilysim00"},"content":"     * To add a task with no date and/or time into the task list.","lastModifiedDate":"2022-02-27"},{"lineNumber":32,"author":{"gitId":"emilysim00"},"content":"     * Only add task type of \"todo\".","lastModifiedDate":"2022-02-27"},{"lineNumber":33,"author":{"gitId":"emilysim00"},"content":"     * Upon successful adding the task into the task list, a message will","lastModifiedDate":"2022-02-27"},{"lineNumber":34,"author":{"gitId":"emilysim00"},"content":"     * be displayed to indicate the command is processed successfully and also","lastModifiedDate":"2022-02-27"},{"lineNumber":35,"author":{"gitId":"emilysim00"},"content":"     * indicates the total number of tasks that exist in the task list.","lastModifiedDate":"2022-02-27"},{"lineNumber":36,"author":{"gitId":"emilysim00"},"content":"     * In addition, the newly added task will also be written into the database file","lastModifiedDate":"2022-02-27"},{"lineNumber":37,"author":{"gitId":"emilysim00"},"content":"     * which stores all the task information in the task list.","lastModifiedDate":"2022-02-27"},{"lineNumber":38,"author":{"gitId":"emilysim00"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":39,"author":{"gitId":"emilysim00"},"content":"     * @param userInput     command entered by user.","lastModifiedDate":"2022-02-27"},{"lineNumber":40,"author":{"gitId":"emilysim00"},"content":"     * @param taskList      arrayList to store all tasks created.","lastModifiedDate":"2022-02-27"},{"lineNumber":41,"author":{"gitId":"emilysim00"},"content":"     * @param isUserCommand states whether command is user input or file input.","lastModifiedDate":"2022-02-27"},{"lineNumber":42,"author":{"gitId":"emilysim00"},"content":"     * @throws IOException If the input and output have error.","lastModifiedDate":"2022-02-27"},{"lineNumber":43,"author":{"gitId":"emilysim00"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":44,"author":{"gitId":"emilysim00"},"content":"    public static void addTask(String userInput, ArrayList\u003cTask\u003e taskList, Boolean isUserCommand) {","lastModifiedDate":"2022-02-25"},{"lineNumber":45,"author":{"gitId":"emilysim00"},"content":"        String[] taskDescription \u003d userInput.split(\" \", 2);","lastModifiedDate":"2022-02-25"},{"lineNumber":46,"author":{"gitId":"emilysim00"},"content":"        Task newTask \u003d new ToDo(taskDescription[1]);","lastModifiedDate":"2022-02-25"},{"lineNumber":47,"author":{"gitId":"emilysim00"},"content":"        taskList.add(newTask);","lastModifiedDate":"2022-02-25"},{"lineNumber":48,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":49,"author":{"gitId":"emilysim00"},"content":"        if (isUserCommand) {","lastModifiedDate":"2022-02-25"},{"lineNumber":50,"author":{"gitId":"emilysim00"},"content":"            System.out.println(LINE_SEPARATOR + \"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2022-02-25"},{"lineNumber":51,"author":{"gitId":"emilysim00"},"content":"            System.out.println(taskList.get(taskList.size() - 1).toString());","lastModifiedDate":"2022-02-25"},{"lineNumber":52,"author":{"gitId":"emilysim00"},"content":"            System.out.println(\"Now you have \" + taskList.size() + \" tasks in the list.\\n\" + LINE_SEPARATOR);","lastModifiedDate":"2022-02-25"},{"lineNumber":53,"author":{"gitId":"emilysim00"},"content":"            try {","lastModifiedDate":"2022-02-25"},{"lineNumber":54,"author":{"gitId":"emilysim00"},"content":"                Storage.writeToFile(parser.formulateDatabaseInput(taskDescription));","lastModifiedDate":"2022-02-25"},{"lineNumber":55,"author":{"gitId":"emilysim00"},"content":"            } catch (IOException e) {","lastModifiedDate":"2022-02-25"},{"lineNumber":56,"author":{"gitId":"emilysim00"},"content":"                System.out.println(IO_EXCEPTION);","lastModifiedDate":"2022-02-27"},{"lineNumber":57,"author":{"gitId":"emilysim00"},"content":"            }","lastModifiedDate":"2022-02-25"},{"lineNumber":58,"author":{"gitId":"emilysim00"},"content":"        }","lastModifiedDate":"2022-02-25"},{"lineNumber":59,"author":{"gitId":"emilysim00"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":60,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":61,"author":{"gitId":"emilysim00"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":62,"author":{"gitId":"emilysim00"},"content":"     * To add a task with date and/or time into the task list.","lastModifiedDate":"2022-02-27"},{"lineNumber":63,"author":{"gitId":"emilysim00"},"content":"     * Only add task type of \"deadline\" and \"event\".","lastModifiedDate":"2022-02-27"},{"lineNumber":64,"author":{"gitId":"emilysim00"},"content":"     * It will ensure that the date and time of the task meets the required format.","lastModifiedDate":"2022-02-27"},{"lineNumber":65,"author":{"gitId":"emilysim00"},"content":"     * \u003cp\u003e","lastModifiedDate":"2022-03-02"},{"lineNumber":66,"author":{"gitId":"emilysim00"},"content":"     * Upon successful adding the task into the task list, a message will","lastModifiedDate":"2022-02-27"},{"lineNumber":67,"author":{"gitId":"emilysim00"},"content":"     * be displayed to indicate the command is processed successfully and also","lastModifiedDate":"2022-02-27"},{"lineNumber":68,"author":{"gitId":"emilysim00"},"content":"     * indicates the total number of tasks that exist in the task list.","lastModifiedDate":"2022-02-27"},{"lineNumber":69,"author":{"gitId":"emilysim00"},"content":"     * In addition, the newly added task will also be written into the database file","lastModifiedDate":"2022-02-27"},{"lineNumber":70,"author":{"gitId":"emilysim00"},"content":"     * which stores all the task information in the task list.","lastModifiedDate":"2022-02-27"},{"lineNumber":71,"author":{"gitId":"emilysim00"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":72,"author":{"gitId":"emilysim00"},"content":"     * @param userInput     command entered by user.","lastModifiedDate":"2022-02-27"},{"lineNumber":73,"author":{"gitId":"emilysim00"},"content":"     * @param taskList      arrayList to store all tasks created.","lastModifiedDate":"2022-02-27"},{"lineNumber":74,"author":{"gitId":"emilysim00"},"content":"     * @param isUserCommand states whether command is user input or file input.","lastModifiedDate":"2022-02-27"},{"lineNumber":75,"author":{"gitId":"emilysim00"},"content":"     * @throws InvalidUserInputException If the task description is empty.","lastModifiedDate":"2022-02-27"},{"lineNumber":76,"author":{"gitId":"emilysim00"},"content":"     * @throws IOException               If the input and output have error.","lastModifiedDate":"2022-02-27"},{"lineNumber":77,"author":{"gitId":"emilysim00"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":78,"author":{"gitId":"emilysim00"},"content":"    public static void addTaskAndTime(String userInput, ArrayList\u003cTask\u003e taskList, Boolean isUserCommand) throws InvalidUserInputException {","lastModifiedDate":"2022-03-03"},{"lineNumber":79,"author":{"gitId":"emilysim00"},"content":"        String[] arrayOfUserInput \u003d userInput.split(\"/\", 2);","lastModifiedDate":"2022-02-26"},{"lineNumber":80,"author":{"gitId":"emilysim00"},"content":"        String[] taskDescription \u003d arrayOfUserInput[0].split(\" \", 2);","lastModifiedDate":"2022-02-26"},{"lineNumber":81,"author":{"gitId":"emilysim00"},"content":"        String[] timing \u003d arrayOfUserInput[1].split(\" \", 2);","lastModifiedDate":"2022-02-26"},{"lineNumber":82,"author":{"gitId":"emilysim00"},"content":"        String formattedTimeAndDate \u003d processDateAndTime(timing[1]);","lastModifiedDate":"2022-02-26"},{"lineNumber":83,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":84,"author":{"gitId":"emilysim00"},"content":"        if (formattedTimeAndDate.equals(timing[1]) \u0026\u0026 isUserCommand) {","lastModifiedDate":"2022-02-26"},{"lineNumber":85,"author":{"gitId":"emilysim00"},"content":"            return;","lastModifiedDate":"2022-03-03"},{"lineNumber":86,"author":{"gitId":"emilysim00"},"content":"        }","lastModifiedDate":"2022-02-26"},{"lineNumber":87,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":88,"author":{"gitId":"emilysim00"},"content":"        timing[1] \u003d formattedTimeAndDate;","lastModifiedDate":"2022-02-26"},{"lineNumber":89,"author":{"gitId":"emilysim00"},"content":"        Task newTask;","lastModifiedDate":"2022-02-25"},{"lineNumber":90,"author":{"gitId":"emilysim00"},"content":"        try {","lastModifiedDate":"2022-02-25"},{"lineNumber":91,"author":{"gitId":"emilysim00"},"content":"            if (taskDescription[1].trim().equals(\"\")) {","lastModifiedDate":"2022-02-25"},{"lineNumber":92,"author":{"gitId":"emilysim00"},"content":"                throw new InvalidUserInputException(NO_DESCRIPTION); //check if there is task description","lastModifiedDate":"2022-02-26"},{"lineNumber":93,"author":{"gitId":"emilysim00"},"content":"            }","lastModifiedDate":"2022-02-25"},{"lineNumber":94,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":95,"author":{"gitId":"emilysim00"},"content":"            if (timing[0].equals(\"by\") \u0026\u0026 taskDescription[0].equals(\"deadline\")) {","lastModifiedDate":"2022-03-02"},{"lineNumber":96,"author":{"gitId":"emilysim00"},"content":"                newTask \u003d new Deadline(taskDescription[1], timing[1]);","lastModifiedDate":"2022-02-25"},{"lineNumber":97,"author":{"gitId":"emilysim00"},"content":"            } else if (timing[0].equals(\"at\") \u0026\u0026 taskDescription[0].equals(\"event\")) {","lastModifiedDate":"2022-03-02"},{"lineNumber":98,"author":{"gitId":"emilysim00"},"content":"                newTask \u003d new Event(taskDescription[1], timing[1]);","lastModifiedDate":"2022-02-25"},{"lineNumber":99,"author":{"gitId":"emilysim00"},"content":"            } else {","lastModifiedDate":"2022-03-02"},{"lineNumber":100,"author":{"gitId":"emilysim00"},"content":"                throw new InvalidUserInputException(INVALID_MATCH);","lastModifiedDate":"2022-03-02"},{"lineNumber":101,"author":{"gitId":"emilysim00"},"content":"            }","lastModifiedDate":"2022-02-25"},{"lineNumber":102,"author":{"gitId":"emilysim00"},"content":"            taskList.add(newTask);","lastModifiedDate":"2022-03-02"},{"lineNumber":103,"author":{"gitId":"emilysim00"},"content":"            if (isUserCommand) {","lastModifiedDate":"2022-03-02"},{"lineNumber":104,"author":{"gitId":"emilysim00"},"content":"                try {","lastModifiedDate":"2022-02-25"},{"lineNumber":105,"author":{"gitId":"emilysim00"},"content":"                    String[] databaseInput \u003d new String[3];","lastModifiedDate":"2022-02-25"},{"lineNumber":106,"author":{"gitId":"emilysim00"},"content":"                    switch (timing[0]) {","lastModifiedDate":"2022-02-26"},{"lineNumber":107,"author":{"gitId":"emilysim00"},"content":"                    case \"by\":","lastModifiedDate":"2022-02-26"},{"lineNumber":108,"author":{"gitId":"emilysim00"},"content":"                        databaseInput[0] \u003d \"deadline\";","lastModifiedDate":"2022-02-25"},{"lineNumber":109,"author":{"gitId":"emilysim00"},"content":"                        break;","lastModifiedDate":"2022-02-26"},{"lineNumber":110,"author":{"gitId":"emilysim00"},"content":"                    case \"at\":","lastModifiedDate":"2022-02-26"},{"lineNumber":111,"author":{"gitId":"emilysim00"},"content":"                        databaseInput[0] \u003d \"event\";","lastModifiedDate":"2022-02-25"},{"lineNumber":112,"author":{"gitId":"emilysim00"},"content":"                        break;","lastModifiedDate":"2022-02-26"},{"lineNumber":113,"author":{"gitId":"emilysim00"},"content":"                    default:","lastModifiedDate":"2022-02-26"},{"lineNumber":114,"author":{"gitId":"emilysim00"},"content":"                        break;","lastModifiedDate":"2022-02-26"},{"lineNumber":115,"author":{"gitId":"emilysim00"},"content":"                    }","lastModifiedDate":"2022-02-25"},{"lineNumber":116,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":117,"author":{"gitId":"emilysim00"},"content":"                    databaseInput[1] \u003d taskDescription[1];","lastModifiedDate":"2022-02-25"},{"lineNumber":118,"author":{"gitId":"emilysim00"},"content":"                    databaseInput[2] \u003d timing[1];","lastModifiedDate":"2022-02-25"},{"lineNumber":119,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":120,"author":{"gitId":"emilysim00"},"content":"                    String newData \u003d parser.formulateDatabaseInput(databaseInput);","lastModifiedDate":"2022-02-26"},{"lineNumber":121,"author":{"gitId":"emilysim00"},"content":"                    System.out.println(LINE_SEPARATOR + \"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2022-02-26"},{"lineNumber":122,"author":{"gitId":"emilysim00"},"content":"                    System.out.println(taskList.get(taskList.size() - 1).toString());","lastModifiedDate":"2022-02-26"},{"lineNumber":123,"author":{"gitId":"emilysim00"},"content":"                    System.out.println(\"Now you have \" + taskList.size() + \" tasks in the list.\\n\" + LINE_SEPARATOR);","lastModifiedDate":"2022-02-26"},{"lineNumber":124,"author":{"gitId":"emilysim00"},"content":"                    Storage.writeToFile(newData);","lastModifiedDate":"2022-02-26"},{"lineNumber":125,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-02"},{"lineNumber":126,"author":{"gitId":"emilysim00"},"content":"                } catch (IOException e) {","lastModifiedDate":"2022-02-25"},{"lineNumber":127,"author":{"gitId":"emilysim00"},"content":"                    e.printStackTrace();","lastModifiedDate":"2022-02-25"},{"lineNumber":128,"author":{"gitId":"emilysim00"},"content":"                }","lastModifiedDate":"2022-02-25"},{"lineNumber":129,"author":{"gitId":"emilysim00"},"content":"            }","lastModifiedDate":"2022-02-25"},{"lineNumber":130,"author":{"gitId":"emilysim00"},"content":"        } catch (InvalidUserInputException e) {","lastModifiedDate":"2022-02-25"},{"lineNumber":131,"author":{"gitId":"emilysim00"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2022-02-25"},{"lineNumber":132,"author":{"gitId":"emilysim00"},"content":"        }","lastModifiedDate":"2022-02-25"},{"lineNumber":133,"author":{"gitId":"emilysim00"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":134,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":135,"author":{"gitId":"emilysim00"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":136,"author":{"gitId":"emilysim00"},"content":"     * Return the correct format of the date and time as a string that can be","lastModifiedDate":"2022-02-27"},{"lineNumber":137,"author":{"gitId":"emilysim00"},"content":"     * processed and be added into the task list.","lastModifiedDate":"2022-02-27"},{"lineNumber":138,"author":{"gitId":"emilysim00"},"content":"     * Ensure that the date is in \"MMM-d-yyyy\" format and the time in 12-hour format.","lastModifiedDate":"2022-02-27"},{"lineNumber":139,"author":{"gitId":"emilysim00"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":140,"author":{"gitId":"emilysim00"},"content":"     * @param DateAndTime time and date inputted by the user.","lastModifiedDate":"2022-02-27"},{"lineNumber":141,"author":{"gitId":"emilysim00"},"content":"     * @return finalDateAndTime correct format of the date and time to be processed.","lastModifiedDate":"2022-02-27"},{"lineNumber":142,"author":{"gitId":"emilysim00"},"content":"     * @throws InvalidUserInputException      If the time and date entered is invalid such as not a time/date.","lastModifiedDate":"2022-02-27"},{"lineNumber":143,"author":{"gitId":"emilysim00"},"content":"     * @throws ArrayIndexOutOfBoundsException If DateAndTime length is out of bound.","lastModifiedDate":"2022-02-27"},{"lineNumber":144,"author":{"gitId":"emilysim00"},"content":"     * @throws DateTimeException              If the format of the date is not in the right format/invalid.","lastModifiedDate":"2022-02-27"},{"lineNumber":145,"author":{"gitId":"emilysim00"},"content":"     * @throws NullPointerException           If no date and time is being parsed in.","lastModifiedDate":"2022-02-27"},{"lineNumber":146,"author":{"gitId":"emilysim00"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":147,"author":{"gitId":"emilysim00"},"content":"    public static String processDateAndTime(String DateAndTime) {","lastModifiedDate":"2022-02-27"},{"lineNumber":148,"author":{"gitId":"emilysim00"},"content":"        String finalDateAndTime \u003d DateAndTime;","lastModifiedDate":"2022-02-27"},{"lineNumber":149,"author":{"gitId":"emilysim00"},"content":"        String date, time \u003d null;","lastModifiedDate":"2022-03-03"},{"lineNumber":150,"author":{"gitId":"emilysim00"},"content":"        try {","lastModifiedDate":"2022-02-26"},{"lineNumber":151,"author":{"gitId":"emilysim00"},"content":"            String[] arrayOfTimeAndDate \u003d DateAndTime.split(\" \");","lastModifiedDate":"2022-02-27"},{"lineNumber":152,"author":{"gitId":"emilysim00"},"content":"            switch (arrayOfTimeAndDate.length) {","lastModifiedDate":"2022-02-26"},{"lineNumber":153,"author":{"gitId":"emilysim00"},"content":"            case (2):","lastModifiedDate":"2022-02-26"},{"lineNumber":154,"author":{"gitId":"emilysim00"},"content":"                date \u003d processDate(arrayOfTimeAndDate[0]);","lastModifiedDate":"2022-02-26"},{"lineNumber":155,"author":{"gitId":"emilysim00"},"content":"                time \u003d processTime(arrayOfTimeAndDate[1]);","lastModifiedDate":"2022-02-26"},{"lineNumber":156,"author":{"gitId":"emilysim00"},"content":"                if (!isTimeProcessed(time)) {","lastModifiedDate":"2022-03-03"},{"lineNumber":157,"author":{"gitId":"emilysim00"},"content":"                    throw new InvalidUserInputException(INVALID_TIME_OR_DATE);","lastModifiedDate":"2022-03-03"},{"lineNumber":158,"author":{"gitId":"emilysim00"},"content":"                }","lastModifiedDate":"2022-03-03"},{"lineNumber":159,"author":{"gitId":"emilysim00"},"content":"                finalDateAndTime \u003d date + \" \" + time;","lastModifiedDate":"2022-02-26"},{"lineNumber":160,"author":{"gitId":"emilysim00"},"content":"                break;","lastModifiedDate":"2022-02-26"},{"lineNumber":161,"author":{"gitId":"emilysim00"},"content":"            default:","lastModifiedDate":"2022-02-26"},{"lineNumber":162,"author":{"gitId":"emilysim00"},"content":"                throw new InvalidUserInputException(INVALID_TIME_OR_DATE);","lastModifiedDate":"2022-02-26"},{"lineNumber":163,"author":{"gitId":"emilysim00"},"content":"            }","lastModifiedDate":"2022-02-26"},{"lineNumber":164,"author":{"gitId":"emilysim00"},"content":"        } catch (InvalidUserInputException e) {","lastModifiedDate":"2022-02-26"},{"lineNumber":165,"author":{"gitId":"emilysim00"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2022-02-26"},{"lineNumber":166,"author":{"gitId":"emilysim00"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2022-02-26"},{"lineNumber":167,"author":{"gitId":"emilysim00"},"content":"            System.out.println(INVALID_TIME_OR_DATE);","lastModifiedDate":"2022-02-26"},{"lineNumber":168,"author":{"gitId":"emilysim00"},"content":"        } catch (DateTimeException e) {","lastModifiedDate":"2022-02-26"},{"lineNumber":169,"author":{"gitId":"emilysim00"},"content":"            System.out.println(INVALID_TIME_OR_DATE);","lastModifiedDate":"2022-02-26"},{"lineNumber":170,"author":{"gitId":"emilysim00"},"content":"        } catch (NullPointerException e) {","lastModifiedDate":"2022-02-26"},{"lineNumber":171,"author":{"gitId":"emilysim00"},"content":"            System.out.println(INVALID_TIME_OR_DATE);","lastModifiedDate":"2022-02-26"},{"lineNumber":172,"author":{"gitId":"emilysim00"},"content":"        }","lastModifiedDate":"2022-02-26"},{"lineNumber":173,"author":{"gitId":"emilysim00"},"content":"        return finalDateAndTime;","lastModifiedDate":"2022-02-26"},{"lineNumber":174,"author":{"gitId":"emilysim00"},"content":"    }","lastModifiedDate":"2022-02-26"},{"lineNumber":175,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":176,"author":{"gitId":"emilysim00"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":177,"author":{"gitId":"emilysim00"},"content":"     * Return the correct format of the time that can be processed and be","lastModifiedDate":"2022-02-27"},{"lineNumber":178,"author":{"gitId":"emilysim00"},"content":"     * added into the task list.","lastModifiedDate":"2022-02-27"},{"lineNumber":179,"author":{"gitId":"emilysim00"},"content":"     * Take in timeInput which can be in 24 hour or 12-hour format, and convert it to","lastModifiedDate":"2022-02-27"},{"lineNumber":180,"author":{"gitId":"emilysim00"},"content":"     * 12-hour format. If the format of timeInput is not in the correct format, it will formulate it","lastModifiedDate":"2022-02-27"},{"lineNumber":181,"author":{"gitId":"emilysim00"},"content":"     * to be in the correct format (in 12-hour format) such as \"12:20PM\".","lastModifiedDate":"2022-02-27"},{"lineNumber":182,"author":{"gitId":"emilysim00"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":183,"author":{"gitId":"emilysim00"},"content":"     * @param timeInput time inputted by the user.","lastModifiedDate":"2022-02-27"},{"lineNumber":184,"author":{"gitId":"emilysim00"},"content":"     * @return time correct format of the time to be processed.","lastModifiedDate":"2022-02-27"},{"lineNumber":185,"author":{"gitId":"emilysim00"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":186,"author":{"gitId":"emilysim00"},"content":"    public static String processTime(String timeInput) {","lastModifiedDate":"2022-02-26"},{"lineNumber":187,"author":{"gitId":"emilysim00"},"content":"        String time \u003d timeInput;","lastModifiedDate":"2022-02-27"},{"lineNumber":188,"author":{"gitId":"emilysim00"},"content":"        boolean isAM \u003d false;","lastModifiedDate":"2022-03-03"},{"lineNumber":189,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":190,"author":{"gitId":"emilysim00"},"content":"        if (!isTimeProcessed(timeInput)) {","lastModifiedDate":"2022-02-26"},{"lineNumber":191,"author":{"gitId":"emilysim00"},"content":"            int hourOfDay \u003d Integer.parseInt(timeInput) / 100;","lastModifiedDate":"2022-02-26"},{"lineNumber":192,"author":{"gitId":"emilysim00"},"content":"            if (hourOfDay \u003d\u003d 0) {","lastModifiedDate":"2022-03-03"},{"lineNumber":193,"author":{"gitId":"emilysim00"},"content":"                hourOfDay \u003d 12;","lastModifiedDate":"2022-03-03"},{"lineNumber":194,"author":{"gitId":"emilysim00"},"content":"                isAM \u003d true;","lastModifiedDate":"2022-03-03"},{"lineNumber":195,"author":{"gitId":"emilysim00"},"content":"            }","lastModifiedDate":"2022-03-03"},{"lineNumber":196,"author":{"gitId":"emilysim00"},"content":"            int minute \u003d Integer.parseInt(timeInput) % 100;","lastModifiedDate":"2022-02-26"},{"lineNumber":197,"author":{"gitId":"emilysim00"},"content":"            if (minute \u003e 59) {","lastModifiedDate":"2022-02-26"},{"lineNumber":198,"author":{"gitId":"emilysim00"},"content":"                return time \u003d null;","lastModifiedDate":"2022-03-03"},{"lineNumber":199,"author":{"gitId":"emilysim00"},"content":"            }","lastModifiedDate":"2022-02-26"},{"lineNumber":200,"author":{"gitId":"emilysim00"},"content":"            time \u003d ((hourOfDay \u003e 12) ? hourOfDay % 12 : hourOfDay)","lastModifiedDate":"2022-02-27"},{"lineNumber":201,"author":{"gitId":"emilysim00"},"content":"                    + \":\" + (minute \u003c 10 ? (\"0\" + minute) : minute) + ((hourOfDay \u003e\u003d 12 \u0026\u0026 !isAM) ? \"PM\" : \"AM\");","lastModifiedDate":"2022-03-03"},{"lineNumber":202,"author":{"gitId":"emilysim00"},"content":"        }","lastModifiedDate":"2022-02-26"},{"lineNumber":203,"author":{"gitId":"emilysim00"},"content":"        return time;","lastModifiedDate":"2022-02-27"},{"lineNumber":204,"author":{"gitId":"emilysim00"},"content":"    }","lastModifiedDate":"2022-02-26"},{"lineNumber":205,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":206,"author":{"gitId":"emilysim00"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":207,"author":{"gitId":"emilysim00"},"content":"     * Return the correct format of the date that can be processed and be","lastModifiedDate":"2022-02-27"},{"lineNumber":208,"author":{"gitId":"emilysim00"},"content":"     * added into the task list.","lastModifiedDate":"2022-02-27"},{"lineNumber":209,"author":{"gitId":"emilysim00"},"content":"     * If the format of dateInput is not in the correct format, it will formulate it","lastModifiedDate":"2022-02-27"},{"lineNumber":210,"author":{"gitId":"emilysim00"},"content":"     * to be in the correct format (\"MMM-d-yyyy\").","lastModifiedDate":"2022-02-27"},{"lineNumber":211,"author":{"gitId":"emilysim00"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":212,"author":{"gitId":"emilysim00"},"content":"     * @param dateInput date inputted by the user.","lastModifiedDate":"2022-02-27"},{"lineNumber":213,"author":{"gitId":"emilysim00"},"content":"     * @return date correct format of the date to be processed.","lastModifiedDate":"2022-02-27"},{"lineNumber":214,"author":{"gitId":"emilysim00"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":215,"author":{"gitId":"emilysim00"},"content":"    public static String processDate(String dateInput) {","lastModifiedDate":"2022-02-26"},{"lineNumber":216,"author":{"gitId":"emilysim00"},"content":"        String date;","lastModifiedDate":"2022-02-26"},{"lineNumber":217,"author":{"gitId":"emilysim00"},"content":"        Boolean isDateProcessed \u003d isDateProcessed(dateInput);","lastModifiedDate":"2022-02-26"},{"lineNumber":218,"author":{"gitId":"emilysim00"},"content":"        if (!isDateProcessed) {","lastModifiedDate":"2022-02-26"},{"lineNumber":219,"author":{"gitId":"emilysim00"},"content":"            LocalDate date1 \u003d LocalDate.parse(dateInput);","lastModifiedDate":"2022-02-26"},{"lineNumber":220,"author":{"gitId":"emilysim00"},"content":"            date \u003d date1.format(DateTimeFormatter.ofPattern(\"MMM-d-yyyy\"));","lastModifiedDate":"2022-02-26"},{"lineNumber":221,"author":{"gitId":"emilysim00"},"content":"        } else {","lastModifiedDate":"2022-02-26"},{"lineNumber":222,"author":{"gitId":"emilysim00"},"content":"            date \u003d dateInput;","lastModifiedDate":"2022-02-26"},{"lineNumber":223,"author":{"gitId":"emilysim00"},"content":"        }","lastModifiedDate":"2022-02-26"},{"lineNumber":224,"author":{"gitId":"emilysim00"},"content":"        return date;","lastModifiedDate":"2022-02-26"},{"lineNumber":225,"author":{"gitId":"emilysim00"},"content":"    }","lastModifiedDate":"2022-02-26"},{"lineNumber":226,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":227,"author":{"gitId":"emilysim00"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":228,"author":{"gitId":"emilysim00"},"content":"     * Check if the date is in the correct format, if it is in the correct","lastModifiedDate":"2022-02-27"},{"lineNumber":229,"author":{"gitId":"emilysim00"},"content":"     * format then there is no need for to change the format of the date,","lastModifiedDate":"2022-02-27"},{"lineNumber":230,"author":{"gitId":"emilysim00"},"content":"     * else otherwise.","lastModifiedDate":"2022-02-27"},{"lineNumber":231,"author":{"gitId":"emilysim00"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":232,"author":{"gitId":"emilysim00"},"content":"     * @param inDate date inputted by the user.","lastModifiedDate":"2022-02-27"},{"lineNumber":233,"author":{"gitId":"emilysim00"},"content":"     * @return true if the date input matches the stated format.","lastModifiedDate":"2022-02-27"},{"lineNumber":234,"author":{"gitId":"emilysim00"},"content":"     * @return false if the date input does not match the stated format.","lastModifiedDate":"2022-02-27"},{"lineNumber":235,"author":{"gitId":"emilysim00"},"content":"     * @throws ParseException If date is not in the stated format.","lastModifiedDate":"2022-02-27"},{"lineNumber":236,"author":{"gitId":"emilysim00"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":237,"author":{"gitId":"emilysim00"},"content":"    public static boolean isDateProcessed(String inDate) {","lastModifiedDate":"2022-02-26"},{"lineNumber":238,"author":{"gitId":"emilysim00"},"content":"        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"MMM-d-yyyy\");","lastModifiedDate":"2022-02-26"},{"lineNumber":239,"author":{"gitId":"emilysim00"},"content":"        dateFormat.setLenient(false);","lastModifiedDate":"2022-02-26"},{"lineNumber":240,"author":{"gitId":"emilysim00"},"content":"        try {","lastModifiedDate":"2022-02-26"},{"lineNumber":241,"author":{"gitId":"emilysim00"},"content":"            dateFormat.parse(inDate.trim());","lastModifiedDate":"2022-02-26"},{"lineNumber":242,"author":{"gitId":"emilysim00"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2022-02-26"},{"lineNumber":243,"author":{"gitId":"emilysim00"},"content":"            return false;","lastModifiedDate":"2022-02-26"},{"lineNumber":244,"author":{"gitId":"emilysim00"},"content":"        }","lastModifiedDate":"2022-02-26"},{"lineNumber":245,"author":{"gitId":"emilysim00"},"content":"        return true;","lastModifiedDate":"2022-02-26"},{"lineNumber":246,"author":{"gitId":"emilysim00"},"content":"    }","lastModifiedDate":"2022-02-26"},{"lineNumber":247,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":248,"author":{"gitId":"emilysim00"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":249,"author":{"gitId":"emilysim00"},"content":"     * Check if the time is in the correct format, if it is in the correct","lastModifiedDate":"2022-02-27"},{"lineNumber":250,"author":{"gitId":"emilysim00"},"content":"     * format then there is no need for to change the format of the time,","lastModifiedDate":"2022-02-27"},{"lineNumber":251,"author":{"gitId":"emilysim00"},"content":"     * else otherwise.","lastModifiedDate":"2022-02-27"},{"lineNumber":252,"author":{"gitId":"emilysim00"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":253,"author":{"gitId":"emilysim00"},"content":"     * @param inTime time inputted by the user.","lastModifiedDate":"2022-02-27"},{"lineNumber":254,"author":{"gitId":"emilysim00"},"content":"     * @return true if the time input matches the stated format.","lastModifiedDate":"2022-02-27"},{"lineNumber":255,"author":{"gitId":"emilysim00"},"content":"     * @return false if the time input does not match the stated format.","lastModifiedDate":"2022-02-27"},{"lineNumber":256,"author":{"gitId":"emilysim00"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":257,"author":{"gitId":"emilysim00"},"content":"    public static boolean isTimeProcessed(String inTime) {","lastModifiedDate":"2022-02-26"},{"lineNumber":258,"author":{"gitId":"emilysim00"},"content":"        if (inTime.contains(\"PM\") || inTime.contains(\"AM\")) {","lastModifiedDate":"2022-02-26"},{"lineNumber":259,"author":{"gitId":"emilysim00"},"content":"            return true;","lastModifiedDate":"2022-02-26"},{"lineNumber":260,"author":{"gitId":"emilysim00"},"content":"        }","lastModifiedDate":"2022-02-26"},{"lineNumber":261,"author":{"gitId":"emilysim00"},"content":"        return false;","lastModifiedDate":"2022-02-26"},{"lineNumber":262,"author":{"gitId":"emilysim00"},"content":"    }","lastModifiedDate":"2022-02-26"},{"lineNumber":263,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":264,"author":{"gitId":"emilysim00"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":265,"author":{"gitId":"emilysim00"},"content":"     * Returns a list containing all the task that contains the keywords.","lastModifiedDate":"2022-02-27"},{"lineNumber":266,"author":{"gitId":"emilysim00"},"content":"     * Search the entire list of tasks to look for tasks that matched the keyword","lastModifiedDate":"2022-02-27"},{"lineNumber":267,"author":{"gitId":"emilysim00"},"content":"     * stated.","lastModifiedDate":"2022-02-27"},{"lineNumber":268,"author":{"gitId":"emilysim00"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":269,"author":{"gitId":"emilysim00"},"content":"     * @param keyword word or a short term to be matched in the entire task list.","lastModifiedDate":"2022-02-27"},{"lineNumber":270,"author":{"gitId":"emilysim00"},"content":"     * @return List of task that matched with keyword search.","lastModifiedDate":"2022-02-27"},{"lineNumber":271,"author":{"gitId":"emilysim00"},"content":"     * @throws InvalidUserInputException If keyword to be searched is not stated.","lastModifiedDate":"2022-02-27"},{"lineNumber":272,"author":{"gitId":"emilysim00"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":273,"author":{"gitId":"emilysim00"},"content":"    public static ArrayList findContent(String keyword) {","lastModifiedDate":"2022-02-26"},{"lineNumber":274,"author":{"gitId":"emilysim00"},"content":"        ArrayList\u003cInteger\u003e keywordList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-02-26"},{"lineNumber":275,"author":{"gitId":"emilysim00"},"content":"        List\u003cString\u003e fileContentLines \u003d null;","lastModifiedDate":"2022-02-26"},{"lineNumber":276,"author":{"gitId":"emilysim00"},"content":"        try {","lastModifiedDate":"2022-02-26"},{"lineNumber":277,"author":{"gitId":"emilysim00"},"content":"            fileContentLines \u003d Files.readAllLines(Storage.databasePath);","lastModifiedDate":"2022-02-26"},{"lineNumber":278,"author":{"gitId":"emilysim00"},"content":"            int taskNumber \u003d 1;","lastModifiedDate":"2022-02-26"},{"lineNumber":279,"author":{"gitId":"emilysim00"},"content":"            for (String lines : fileContentLines) {","lastModifiedDate":"2022-02-26"},{"lineNumber":280,"author":{"gitId":"emilysim00"},"content":"                String[] contentsInALine \u003d lines.split(\"\\\\|\", -1);","lastModifiedDate":"2022-03-03"},{"lineNumber":281,"author":{"gitId":"emilysim00"},"content":"                if (contentsInALine.length \u003c 1) {","lastModifiedDate":"2022-02-26"},{"lineNumber":282,"author":{"gitId":"emilysim00"},"content":"                    throw new InvalidUserInputException(NO_DESCRIPTION);","lastModifiedDate":"2022-02-27"},{"lineNumber":283,"author":{"gitId":"emilysim00"},"content":"                }","lastModifiedDate":"2022-02-26"},{"lineNumber":284,"author":{"gitId":"emilysim00"},"content":"                if (contentsInALine[2].contains(keyword)) {","lastModifiedDate":"2022-02-26"},{"lineNumber":285,"author":{"gitId":"emilysim00"},"content":"                    keywordList.add(taskNumber);","lastModifiedDate":"2022-02-26"},{"lineNumber":286,"author":{"gitId":"emilysim00"},"content":"                }","lastModifiedDate":"2022-02-26"},{"lineNumber":287,"author":{"gitId":"emilysim00"},"content":"                taskNumber +\u003d 1;","lastModifiedDate":"2022-02-26"},{"lineNumber":288,"author":{"gitId":"emilysim00"},"content":"            }","lastModifiedDate":"2022-02-26"},{"lineNumber":289,"author":{"gitId":"emilysim00"},"content":"            Ui.displayFoundTask(taskList, keywordList);","lastModifiedDate":"2022-02-26"},{"lineNumber":290,"author":{"gitId":"emilysim00"},"content":"        } catch (InvalidUserInputException e) {","lastModifiedDate":"2022-02-26"},{"lineNumber":291,"author":{"gitId":"emilysim00"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2022-02-27"},{"lineNumber":292,"author":{"gitId":"emilysim00"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-26"},{"lineNumber":293,"author":{"gitId":"emilysim00"},"content":"            e.printStackTrace();","lastModifiedDate":"2022-02-26"},{"lineNumber":294,"author":{"gitId":"emilysim00"},"content":"        }","lastModifiedDate":"2022-02-26"},{"lineNumber":295,"author":{"gitId":"emilysim00"},"content":"        return keywordList;","lastModifiedDate":"2022-02-26"},{"lineNumber":296,"author":{"gitId":"emilysim00"},"content":"    }","lastModifiedDate":"2022-02-26"},{"lineNumber":297,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-26"},{"lineNumber":298,"author":{"gitId":"emilysim00"},"content":"}","lastModifiedDate":"2022-02-25"}],"authorContributionMap":{"emilysim00":298}},{"path":"src/main/java/em/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"emilysim00"},"content":"package em;","lastModifiedDate":"2022-03-03"},{"lineNumber":2,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":3,"author":{"gitId":"emilysim00"},"content":"import task.Task;","lastModifiedDate":"2022-02-25"},{"lineNumber":4,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":5,"author":{"gitId":"emilysim00"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-25"},{"lineNumber":6,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":7,"author":{"gitId":"emilysim00"},"content":"public class Ui {","lastModifiedDate":"2022-02-25"},{"lineNumber":8,"author":{"gitId":"emilysim00"},"content":"    public static final String LINE_SEPARATOR \u003d \"____________________________________________________________\\n\";","lastModifiedDate":"2022-02-25"},{"lineNumber":9,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":10,"author":{"gitId":"emilysim00"},"content":"    /**","lastModifiedDate":"2022-02-26"},{"lineNumber":11,"author":{"gitId":"emilysim00"},"content":"     * Prints the greeting\u0027s logo of the application when the user runs the program","lastModifiedDate":"2022-02-26"},{"lineNumber":12,"author":{"gitId":"emilysim00"},"content":"     */","lastModifiedDate":"2022-02-26"},{"lineNumber":13,"author":{"gitId":"emilysim00"},"content":"    public static void displayLogo() {","lastModifiedDate":"2022-02-25"},{"lineNumber":14,"author":{"gitId":"emilysim00"},"content":"        String logo \u003d \"                       ___\\n\"","lastModifiedDate":"2022-02-25"},{"lineNumber":15,"author":{"gitId":"emilysim00"},"content":"                + \"                      / ()\\\\\\n\"","lastModifiedDate":"2022-02-25"},{"lineNumber":16,"author":{"gitId":"emilysim00"},"content":"                + \"                    _|_____|_\\n\"","lastModifiedDate":"2022-02-25"},{"lineNumber":17,"author":{"gitId":"emilysim00"},"content":"                + \"                   | | \u003d\u003d\u003d | |\\n\"","lastModifiedDate":"2022-02-25"},{"lineNumber":18,"author":{"gitId":"emilysim00"},"content":"                + \" _____  _      _   |_|  0  |_|\\n\"","lastModifiedDate":"2022-02-25"},{"lineNumber":19,"author":{"gitId":"emilysim00"},"content":"                + \"| ___| | \\\\    / |   ||  0  ||\\n\"","lastModifiedDate":"2022-02-25"},{"lineNumber":20,"author":{"gitId":"emilysim00"},"content":"                + \"| |__  |  \\\\  /  |   ||__*__||\\n\"","lastModifiedDate":"2022-02-25"},{"lineNumber":21,"author":{"gitId":"emilysim00"},"content":"                + \"|  __| |   \\\\/   |  |~ \\\\___/ ~| \\n\"","lastModifiedDate":"2022-02-25"},{"lineNumber":22,"author":{"gitId":"emilysim00"},"content":"                + \"| |___ | |\\\\__/| |  /\u003d\\\\ /\u003d\\\\ /\u003d\\\\ \\n\"","lastModifiedDate":"2022-02-25"},{"lineNumber":23,"author":{"gitId":"emilysim00"},"content":"                + \"|_____||_|    |_|__[_]_[_]_[_]______________________________\\n\";","lastModifiedDate":"2022-02-25"},{"lineNumber":24,"author":{"gitId":"emilysim00"},"content":"        String greetings \u003d LINE_SEPARATOR","lastModifiedDate":"2022-02-25"},{"lineNumber":25,"author":{"gitId":"emilysim00"},"content":"                + \"Hello! I\u0027m EM\\n\" + \"What can I do for you?\\n\" + LINE_SEPARATOR;","lastModifiedDate":"2022-02-25"},{"lineNumber":26,"author":{"gitId":"emilysim00"},"content":"        System.out.println(logo + greetings);","lastModifiedDate":"2022-02-25"},{"lineNumber":27,"author":{"gitId":"emilysim00"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":28,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":29,"author":{"gitId":"emilysim00"},"content":"    /**","lastModifiedDate":"2022-02-26"},{"lineNumber":30,"author":{"gitId":"emilysim00"},"content":"     * Prints the farewell\u0027s logo of the application when the user exits the program","lastModifiedDate":"2022-02-26"},{"lineNumber":31,"author":{"gitId":"emilysim00"},"content":"     */","lastModifiedDate":"2022-02-26"},{"lineNumber":32,"author":{"gitId":"emilysim00"},"content":"    public static void displayFarewell() {","lastModifiedDate":"2022-02-25"},{"lineNumber":33,"author":{"gitId":"emilysim00"},"content":"        String farewell \u003d LINE_SEPARATOR","lastModifiedDate":"2022-02-25"},{"lineNumber":34,"author":{"gitId":"emilysim00"},"content":"                + \"Bye. Hope to see you again soon!\\n\" + LINE_SEPARATOR;","lastModifiedDate":"2022-02-25"},{"lineNumber":35,"author":{"gitId":"emilysim00"},"content":"        System.out.println(farewell);","lastModifiedDate":"2022-02-25"},{"lineNumber":36,"author":{"gitId":"emilysim00"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":37,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":38,"author":{"gitId":"emilysim00"},"content":"    /**","lastModifiedDate":"2022-02-25"},{"lineNumber":39,"author":{"gitId":"emilysim00"},"content":"     * Prints out all tasks being stored in the em.TaskList.","lastModifiedDate":"2022-03-03"},{"lineNumber":40,"author":{"gitId":"emilysim00"},"content":"     * If there is nothing in the em.TaskList, a message \"List is Empty!\"","lastModifiedDate":"2022-03-03"},{"lineNumber":41,"author":{"gitId":"emilysim00"},"content":"     * will be printed.","lastModifiedDate":"2022-02-25"},{"lineNumber":42,"author":{"gitId":"emilysim00"},"content":"     * \u003cp\u003e","lastModifiedDate":"2022-02-26"},{"lineNumber":43,"author":{"gitId":"emilysim00"},"content":"     * This method always prints, whether or not there is any task in","lastModifiedDate":"2022-02-25"},{"lineNumber":44,"author":{"gitId":"emilysim00"},"content":"     * the em.TaskList. The method will print the task in the em.TaskList","lastModifiedDate":"2022-03-03"},{"lineNumber":45,"author":{"gitId":"emilysim00"},"content":"     * as well as the increments indicating the task number.","lastModifiedDate":"2022-02-25"},{"lineNumber":46,"author":{"gitId":"emilysim00"},"content":"     *","lastModifiedDate":"2022-02-25"},{"lineNumber":47,"author":{"gitId":"emilysim00"},"content":"     * @param tasklist a list storing all the tasks created","lastModifiedDate":"2022-02-25"},{"lineNumber":48,"author":{"gitId":"emilysim00"},"content":"     */","lastModifiedDate":"2022-02-25"},{"lineNumber":49,"author":{"gitId":"emilysim00"},"content":"    public static void displayTaskList(ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2022-02-25"},{"lineNumber":50,"author":{"gitId":"emilysim00"},"content":"        System.out.println(LINE_SEPARATOR);","lastModifiedDate":"2022-02-25"},{"lineNumber":51,"author":{"gitId":"emilysim00"},"content":"        System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2022-02-25"},{"lineNumber":52,"author":{"gitId":"emilysim00"},"content":"        if (taskList.size() \u003d\u003d 0) {","lastModifiedDate":"2022-02-25"},{"lineNumber":53,"author":{"gitId":"emilysim00"},"content":"            System.out.println(\"List is Empty!\");","lastModifiedDate":"2022-02-25"},{"lineNumber":54,"author":{"gitId":"emilysim00"},"content":"        }","lastModifiedDate":"2022-02-25"},{"lineNumber":55,"author":{"gitId":"emilysim00"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2022-02-25"},{"lineNumber":56,"author":{"gitId":"emilysim00"},"content":"            System.out.println((i + 1) + \". \" + taskList.get(i).toString());","lastModifiedDate":"2022-02-25"},{"lineNumber":57,"author":{"gitId":"emilysim00"},"content":"        }","lastModifiedDate":"2022-02-25"},{"lineNumber":58,"author":{"gitId":"emilysim00"},"content":"        System.out.println(LINE_SEPARATOR);","lastModifiedDate":"2022-02-25"},{"lineNumber":59,"author":{"gitId":"emilysim00"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":60,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":61,"author":{"gitId":"emilysim00"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":62,"author":{"gitId":"emilysim00"},"content":"     * Prints out all tasks that matches the keyword search.","lastModifiedDate":"2022-02-27"},{"lineNumber":63,"author":{"gitId":"emilysim00"},"content":"     * If there is no matching task, a message \"No task found!\"","lastModifiedDate":"2022-02-27"},{"lineNumber":64,"author":{"gitId":"emilysim00"},"content":"     * will be printed.","lastModifiedDate":"2022-02-27"},{"lineNumber":65,"author":{"gitId":"emilysim00"},"content":"     * \u003cp\u003e","lastModifiedDate":"2022-02-27"},{"lineNumber":66,"author":{"gitId":"emilysim00"},"content":"     * This method always prints, whether or not there is any task in","lastModifiedDate":"2022-02-27"},{"lineNumber":67,"author":{"gitId":"emilysim00"},"content":"     * found. The method will print the task in the keywordList","lastModifiedDate":"2022-02-27"},{"lineNumber":68,"author":{"gitId":"emilysim00"},"content":"     * as well as the increments indicating the number of task found.","lastModifiedDate":"2022-02-27"},{"lineNumber":69,"author":{"gitId":"emilysim00"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":70,"author":{"gitId":"emilysim00"},"content":"     * @param tasklist    a list storing all the tasks created","lastModifiedDate":"2022-02-27"},{"lineNumber":71,"author":{"gitId":"emilysim00"},"content":"     * @param keywordList a list storing all the tasks that matches the keyword search","lastModifiedDate":"2022-02-27"},{"lineNumber":72,"author":{"gitId":"emilysim00"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":73,"author":{"gitId":"emilysim00"},"content":"    public static void displayFoundTask(ArrayList\u003cTask\u003e taskList, ArrayList\u003cInteger\u003e keywordList) {","lastModifiedDate":"2022-02-26"},{"lineNumber":74,"author":{"gitId":"emilysim00"},"content":"        System.out.println(LINE_SEPARATOR);","lastModifiedDate":"2022-02-26"},{"lineNumber":75,"author":{"gitId":"emilysim00"},"content":"        System.out.println(\"Remainder: Search is case sensitive\");","lastModifiedDate":"2022-03-03"},{"lineNumber":76,"author":{"gitId":"emilysim00"},"content":"        if (keywordList.size() \u003d\u003d 0) {","lastModifiedDate":"2022-02-27"},{"lineNumber":77,"author":{"gitId":"emilysim00"},"content":"            System.out.println(\"No task found!\");","lastModifiedDate":"2022-02-26"},{"lineNumber":78,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":79,"author":{"gitId":"emilysim00"},"content":"        } else {","lastModifiedDate":"2022-02-27"},{"lineNumber":80,"author":{"gitId":"emilysim00"},"content":"            System.out.println(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2022-02-27"},{"lineNumber":81,"author":{"gitId":"emilysim00"},"content":"            for (int i \u003d 0; i \u003c keywordList.size(); i++) {","lastModifiedDate":"2022-02-26"},{"lineNumber":82,"author":{"gitId":"emilysim00"},"content":"                System.out.println((i + 1) + \". \" + taskList.get(keywordList.get(i) - 1).toString());","lastModifiedDate":"2022-02-26"},{"lineNumber":83,"author":{"gitId":"emilysim00"},"content":"            }","lastModifiedDate":"2022-02-27"},{"lineNumber":84,"author":{"gitId":"emilysim00"},"content":"        }","lastModifiedDate":"2022-02-26"},{"lineNumber":85,"author":{"gitId":"emilysim00"},"content":"        System.out.println(LINE_SEPARATOR);","lastModifiedDate":"2022-02-26"},{"lineNumber":86,"author":{"gitId":"emilysim00"},"content":"    }","lastModifiedDate":"2022-02-26"},{"lineNumber":87,"author":{"gitId":"emilysim00"},"content":"}","lastModifiedDate":"2022-02-25"}],"authorContributionMap":{"emilysim00":87}},{"path":"src/main/java/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"emilysim00"},"content":"package task;","lastModifiedDate":"2022-02-10"},{"lineNumber":2,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-10"},{"lineNumber":3,"author":{"gitId":"emilysim00"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-16"},{"lineNumber":4,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-16"},{"lineNumber":5,"author":{"gitId":"emilysim00"},"content":"public class Deadline extends Task {","lastModifiedDate":"2022-02-02"},{"lineNumber":6,"author":{"gitId":"emilysim00"},"content":"    protected String by;","lastModifiedDate":"2022-02-02"},{"lineNumber":7,"author":{"gitId":"emilysim00"},"content":"    protected String taskType;","lastModifiedDate":"2022-02-16"},{"lineNumber":8,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":9,"author":{"gitId":"emilysim00"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2022-02-02"},{"lineNumber":10,"author":{"gitId":"emilysim00"},"content":"        super(description);","lastModifiedDate":"2022-02-02"},{"lineNumber":11,"author":{"gitId":"emilysim00"},"content":"        this.by \u003d by;","lastModifiedDate":"2022-02-02"},{"lineNumber":12,"author":{"gitId":"emilysim00"},"content":"        this.taskType \u003d \"deadline\";","lastModifiedDate":"2022-02-16"},{"lineNumber":13,"author":{"gitId":"emilysim00"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":14,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":15,"author":{"gitId":"emilysim00"},"content":"    @Override","lastModifiedDate":"2022-02-02"},{"lineNumber":16,"author":{"gitId":"emilysim00"},"content":"    public String toString() {","lastModifiedDate":"2022-02-02"},{"lineNumber":17,"author":{"gitId":"emilysim00"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";","lastModifiedDate":"2022-02-02"},{"lineNumber":18,"author":{"gitId":"emilysim00"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":19,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-16"},{"lineNumber":20,"author":{"gitId":"emilysim00"},"content":"    @Override","lastModifiedDate":"2022-02-16"},{"lineNumber":21,"author":{"gitId":"emilysim00"},"content":"    public void deleteTask(int taskNumber,  ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2022-02-16"},{"lineNumber":22,"author":{"gitId":"emilysim00"},"content":"        System.out.print(LINE_SEPARATOR);","lastModifiedDate":"2022-02-25"},{"lineNumber":23,"author":{"gitId":"emilysim00"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2022-02-16"},{"lineNumber":24,"author":{"gitId":"emilysim00"},"content":"        System.out.println(\"[D]\" + super.toString() + \"(by: \" + by + \")\");","lastModifiedDate":"2022-02-16"},{"lineNumber":25,"author":{"gitId":"emilysim00"},"content":"        taskList.remove(taskNumber-1);","lastModifiedDate":"2022-02-16"},{"lineNumber":26,"author":{"gitId":"emilysim00"},"content":"        System.out.println(\"Now you have \" + taskList.size() + \" tasks in the list.\");","lastModifiedDate":"2022-02-16"},{"lineNumber":27,"author":{"gitId":"emilysim00"},"content":"        System.out.print(LINE_SEPARATOR);","lastModifiedDate":"2022-02-25"},{"lineNumber":28,"author":{"gitId":"emilysim00"},"content":"    }","lastModifiedDate":"2022-02-16"},{"lineNumber":29,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-16"},{"lineNumber":30,"author":{"gitId":"emilysim00"},"content":"    @Override","lastModifiedDate":"2022-02-16"},{"lineNumber":31,"author":{"gitId":"emilysim00"},"content":"    public String getTaskType() {","lastModifiedDate":"2022-02-16"},{"lineNumber":32,"author":{"gitId":"emilysim00"},"content":"        return taskType;","lastModifiedDate":"2022-02-16"},{"lineNumber":33,"author":{"gitId":"emilysim00"},"content":"    }","lastModifiedDate":"2022-02-16"},{"lineNumber":34,"author":{"gitId":"emilysim00"},"content":"}","lastModifiedDate":"2022-02-02"}],"authorContributionMap":{"emilysim00":34}},{"path":"src/main/java/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"emilysim00"},"content":"package task;","lastModifiedDate":"2022-02-10"},{"lineNumber":2,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-10"},{"lineNumber":3,"author":{"gitId":"emilysim00"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-16"},{"lineNumber":4,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-16"},{"lineNumber":5,"author":{"gitId":"emilysim00"},"content":"public class Event extends Task {","lastModifiedDate":"2022-02-02"},{"lineNumber":6,"author":{"gitId":"emilysim00"},"content":"    protected String at;","lastModifiedDate":"2022-02-02"},{"lineNumber":7,"author":{"gitId":"emilysim00"},"content":"    protected String taskType;","lastModifiedDate":"2022-02-16"},{"lineNumber":8,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":9,"author":{"gitId":"emilysim00"},"content":"    public Event(String description, String at) {","lastModifiedDate":"2022-02-02"},{"lineNumber":10,"author":{"gitId":"emilysim00"},"content":"        super(description);","lastModifiedDate":"2022-02-02"},{"lineNumber":11,"author":{"gitId":"emilysim00"},"content":"        this.at \u003d at;","lastModifiedDate":"2022-02-02"},{"lineNumber":12,"author":{"gitId":"emilysim00"},"content":"        this.taskType \u003d \"event\";","lastModifiedDate":"2022-02-16"},{"lineNumber":13,"author":{"gitId":"emilysim00"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":14,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":15,"author":{"gitId":"emilysim00"},"content":"    @Override","lastModifiedDate":"2022-02-02"},{"lineNumber":16,"author":{"gitId":"emilysim00"},"content":"    public String toString() {","lastModifiedDate":"2022-02-02"},{"lineNumber":17,"author":{"gitId":"emilysim00"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";","lastModifiedDate":"2022-02-02"},{"lineNumber":18,"author":{"gitId":"emilysim00"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":19,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-16"},{"lineNumber":20,"author":{"gitId":"emilysim00"},"content":"    @Override","lastModifiedDate":"2022-02-16"},{"lineNumber":21,"author":{"gitId":"emilysim00"},"content":"    public String getTaskType() {","lastModifiedDate":"2022-02-16"},{"lineNumber":22,"author":{"gitId":"emilysim00"},"content":"        return taskType;","lastModifiedDate":"2022-02-16"},{"lineNumber":23,"author":{"gitId":"emilysim00"},"content":"    }","lastModifiedDate":"2022-02-16"},{"lineNumber":24,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-16"},{"lineNumber":25,"author":{"gitId":"emilysim00"},"content":"    @Override","lastModifiedDate":"2022-02-16"},{"lineNumber":26,"author":{"gitId":"emilysim00"},"content":"    public void deleteTask(int taskNumber,  ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2022-02-16"},{"lineNumber":27,"author":{"gitId":"emilysim00"},"content":"        System.out.print(LINE_SEPARATOR);","lastModifiedDate":"2022-02-25"},{"lineNumber":28,"author":{"gitId":"emilysim00"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2022-02-16"},{"lineNumber":29,"author":{"gitId":"emilysim00"},"content":"        System.out.println(\"[E]\" + super.toString() + \"(at: \" + at + \")\");","lastModifiedDate":"2022-02-16"},{"lineNumber":30,"author":{"gitId":"emilysim00"},"content":"        taskList.remove(taskNumber-1);","lastModifiedDate":"2022-02-16"},{"lineNumber":31,"author":{"gitId":"emilysim00"},"content":"        System.out.println(\"Now you have \" + taskList.size() + \" tasks in the list.\");","lastModifiedDate":"2022-02-16"},{"lineNumber":32,"author":{"gitId":"emilysim00"},"content":"        System.out.print(LINE_SEPARATOR);","lastModifiedDate":"2022-02-25"},{"lineNumber":33,"author":{"gitId":"emilysim00"},"content":"    }","lastModifiedDate":"2022-02-16"},{"lineNumber":34,"author":{"gitId":"emilysim00"},"content":"}","lastModifiedDate":"2022-02-02"}],"authorContributionMap":{"emilysim00":34}},{"path":"src/main/java/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"emilysim00"},"content":"package task;","lastModifiedDate":"2022-02-10"},{"lineNumber":2,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-10"},{"lineNumber":3,"author":{"gitId":"emilysim00"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-16"},{"lineNumber":4,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-16"},{"lineNumber":5,"author":{"gitId":"emilysim00"},"content":"public class Task {","lastModifiedDate":"2022-01-26"},{"lineNumber":6,"author":{"gitId":"emilysim00"},"content":"    protected String description;","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"emilysim00"},"content":"    protected boolean isDone;","lastModifiedDate":"2022-01-26"},{"lineNumber":8,"author":{"gitId":"emilysim00"},"content":"    protected String taskType;","lastModifiedDate":"2022-02-16"},{"lineNumber":9,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-16"},{"lineNumber":10,"author":{"gitId":"emilysim00"},"content":"    public static final String LINE_SEPARATOR \u003d \"____________________________________________________________\\n\";","lastModifiedDate":"2022-02-25"},{"lineNumber":11,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":12,"author":{"gitId":"emilysim00"},"content":"    public Task(String description) {","lastModifiedDate":"2022-01-26"},{"lineNumber":13,"author":{"gitId":"emilysim00"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-01-26"},{"lineNumber":14,"author":{"gitId":"emilysim00"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-01-26"},{"lineNumber":15,"author":{"gitId":"emilysim00"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":16,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":17,"author":{"gitId":"emilysim00"},"content":"    public String getDescription() {","lastModifiedDate":"2022-01-26"},{"lineNumber":18,"author":{"gitId":"emilysim00"},"content":"        return description;","lastModifiedDate":"2022-01-26"},{"lineNumber":19,"author":{"gitId":"emilysim00"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":20,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":21,"author":{"gitId":"emilysim00"},"content":"    public String getTaskType() {","lastModifiedDate":"2022-02-16"},{"lineNumber":22,"author":{"gitId":"emilysim00"},"content":"        return taskType;","lastModifiedDate":"2022-02-16"},{"lineNumber":23,"author":{"gitId":"emilysim00"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":24,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":25,"author":{"gitId":"emilysim00"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2022-01-26"},{"lineNumber":26,"author":{"gitId":"emilysim00"},"content":"        return (isDone ? \"X\" : \" \");","lastModifiedDate":"2022-01-26"},{"lineNumber":27,"author":{"gitId":"emilysim00"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":28,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":29,"author":{"gitId":"emilysim00"},"content":"    public void markAsDone(int taskNumber, ArrayList\u003cTask\u003e taskList, Boolean isUserCommand) {","lastModifiedDate":"2022-02-16"},{"lineNumber":30,"author":{"gitId":"emilysim00"},"content":"        isDone \u003d true;","lastModifiedDate":"2022-01-26"},{"lineNumber":31,"author":{"gitId":"emilysim00"},"content":"        if (isUserCommand) {","lastModifiedDate":"2022-02-16"},{"lineNumber":32,"author":{"gitId":"emilysim00"},"content":"            System.out.print(LINE_SEPARATOR);","lastModifiedDate":"2022-02-25"},{"lineNumber":33,"author":{"gitId":"emilysim00"},"content":"            System.out.println(\"OK, I\u0027ve marked this task as done:\");","lastModifiedDate":"2022-02-16"},{"lineNumber":34,"author":{"gitId":"emilysim00"},"content":"            System.out.println(taskList.get(taskNumber - 1).toString());","lastModifiedDate":"2022-02-16"},{"lineNumber":35,"author":{"gitId":"emilysim00"},"content":"            System.out.print(LINE_SEPARATOR);","lastModifiedDate":"2022-02-25"},{"lineNumber":36,"author":{"gitId":"emilysim00"},"content":"        }","lastModifiedDate":"2022-01-26"},{"lineNumber":37,"author":{"gitId":"emilysim00"},"content":"    }","lastModifiedDate":"2022-02-16"},{"lineNumber":38,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":39,"author":{"gitId":"emilysim00"},"content":"    public void markAsUndone(int taskNumber, ArrayList\u003cTask\u003e taskList, Boolean isUserCommand) {","lastModifiedDate":"2022-02-16"},{"lineNumber":40,"author":{"gitId":"emilysim00"},"content":"        isDone \u003d false;","lastModifiedDate":"2022-01-26"},{"lineNumber":41,"author":{"gitId":"emilysim00"},"content":"        if (isUserCommand) {","lastModifiedDate":"2022-02-16"},{"lineNumber":42,"author":{"gitId":"emilysim00"},"content":"            System.out.print(LINE_SEPARATOR);","lastModifiedDate":"2022-02-25"},{"lineNumber":43,"author":{"gitId":"emilysim00"},"content":"            System.out.println(\"OK, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2022-01-26"},{"lineNumber":44,"author":{"gitId":"emilysim00"},"content":"            System.out.println(taskList.get(taskNumber - 1).toString());","lastModifiedDate":"2022-02-16"},{"lineNumber":45,"author":{"gitId":"emilysim00"},"content":"            System.out.print(LINE_SEPARATOR);","lastModifiedDate":"2022-02-25"},{"lineNumber":46,"author":{"gitId":"emilysim00"},"content":"        }","lastModifiedDate":"2022-02-02"},{"lineNumber":47,"author":{"gitId":"emilysim00"},"content":"    }","lastModifiedDate":"2022-02-16"},{"lineNumber":48,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-16"},{"lineNumber":49,"author":{"gitId":"emilysim00"},"content":"    public void deleteTask(int taskNumber, ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2022-02-16"},{"lineNumber":50,"author":{"gitId":"emilysim00"},"content":"    }","lastModifiedDate":"2022-02-16"},{"lineNumber":51,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":52,"author":{"gitId":"emilysim00"},"content":"    public String toString() {","lastModifiedDate":"2022-02-02"},{"lineNumber":53,"author":{"gitId":"emilysim00"},"content":"        if (isDone) {","lastModifiedDate":"2022-02-02"},{"lineNumber":54,"author":{"gitId":"emilysim00"},"content":"            return \"[X] \" + description;","lastModifiedDate":"2022-02-02"},{"lineNumber":55,"author":{"gitId":"emilysim00"},"content":"        } else {","lastModifiedDate":"2022-02-02"},{"lineNumber":56,"author":{"gitId":"emilysim00"},"content":"            return \"[ ] \" + description;","lastModifiedDate":"2022-02-02"},{"lineNumber":57,"author":{"gitId":"emilysim00"},"content":"        }","lastModifiedDate":"2022-02-02"},{"lineNumber":58,"author":{"gitId":"emilysim00"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":59,"author":{"gitId":"emilysim00"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"emilysim00":59}},{"path":"src/main/java/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"emilysim00"},"content":"package task;","lastModifiedDate":"2022-02-10"},{"lineNumber":2,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-10"},{"lineNumber":3,"author":{"gitId":"emilysim00"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-16"},{"lineNumber":4,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-16"},{"lineNumber":5,"author":{"gitId":"emilysim00"},"content":"public class ToDo extends Task {","lastModifiedDate":"2022-02-02"},{"lineNumber":6,"author":{"gitId":"emilysim00"},"content":"    protected String taskType;","lastModifiedDate":"2022-02-16"},{"lineNumber":7,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-16"},{"lineNumber":8,"author":{"gitId":"emilysim00"},"content":"    public ToDo(String description) {","lastModifiedDate":"2022-02-02"},{"lineNumber":9,"author":{"gitId":"emilysim00"},"content":"        super(description);","lastModifiedDate":"2022-02-02"},{"lineNumber":10,"author":{"gitId":"emilysim00"},"content":"        this.taskType \u003d \"todo\";","lastModifiedDate":"2022-02-16"},{"lineNumber":11,"author":{"gitId":"emilysim00"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":12,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":13,"author":{"gitId":"emilysim00"},"content":"    @Override","lastModifiedDate":"2022-02-02"},{"lineNumber":14,"author":{"gitId":"emilysim00"},"content":"    public String toString() {","lastModifiedDate":"2022-02-02"},{"lineNumber":15,"author":{"gitId":"emilysim00"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2022-02-02"},{"lineNumber":16,"author":{"gitId":"emilysim00"},"content":"    }","lastModifiedDate":"2022-02-02"},{"lineNumber":17,"author":{"gitId":"emilysim00"},"content":"","lastModifiedDate":"2022-02-02"},{"lineNumber":18,"author":{"gitId":"emilysim00"},"content":"    @Override","lastModifiedDate":"2022-02-16"},{"lineNumber":19,"author":{"gitId":"emilysim00"},"content":"    public void deleteTask(int taskNumber,  ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2022-02-16"},{"lineNumber":20,"author":{"gitId":"emilysim00"},"content":"        System.out.print(LINE_SEPARATOR);","lastModifiedDate":"2022-02-25"},{"lineNumber":21,"author":{"gitId":"emilysim00"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2022-02-16"},{"lineNumber":22,"author":{"gitId":"emilysim00"},"content":"        System.out.println(\"[T]\" + super.toString());","lastModifiedDate":"2022-02-16"},{"lineNumber":23,"author":{"gitId":"emilysim00"},"content":"        taskList.remove(taskNumber-1);","lastModifiedDate":"2022-02-16"},{"lineNumber":24,"author":{"gitId":"emilysim00"},"content":"        System.out.println(\"Now you have \" + taskList.size() + \" tasks in the list.\");","lastModifiedDate":"2022-02-16"},{"lineNumber":25,"author":{"gitId":"emilysim00"},"content":"        System.out.print(LINE_SEPARATOR);","lastModifiedDate":"2022-02-25"},{"lineNumber":26,"author":{"gitId":"emilysim00"},"content":"    }","lastModifiedDate":"2022-02-16"},{"lineNumber":27,"author":{"gitId":"emilysim00"},"content":"    @Override","lastModifiedDate":"2022-02-16"},{"lineNumber":28,"author":{"gitId":"emilysim00"},"content":"    public String getTaskType() {","lastModifiedDate":"2022-02-16"},{"lineNumber":29,"author":{"gitId":"emilysim00"},"content":"        return taskType;","lastModifiedDate":"2022-02-16"},{"lineNumber":30,"author":{"gitId":"emilysim00"},"content":"    }","lastModifiedDate":"2022-02-16"},{"lineNumber":31,"author":{"gitId":"emilysim00"},"content":"}","lastModifiedDate":"2022-02-02"}],"authorContributionMap":{"emilysim00":31}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"emilysim00"},"content":"todo read book","lastModifiedDate":"2022-02-02"},{"lineNumber":2,"author":{"gitId":"emilysim00"},"content":"todo buy book","lastModifiedDate":"2022-03-03"},{"lineNumber":3,"author":{"gitId":"emilysim00"},"content":"list","lastModifiedDate":"2022-02-02"},{"lineNumber":4,"author":{"gitId":"emilysim00"},"content":"mark 1","lastModifiedDate":"2022-02-02"},{"lineNumber":5,"author":{"gitId":"emilysim00"},"content":"event meeting with kelly /at 2022-01-01 1730","lastModifiedDate":"2022-03-03"},{"lineNumber":6,"author":{"gitId":"emilysim00"},"content":"deadline return book /by 2022-02-03 1120","lastModifiedDate":"2022-03-03"},{"lineNumber":7,"author":{"gitId":"emilysim00"},"content":"deadline return kelly water bottle /by 2022-03-11 1330","lastModifiedDate":"2022-03-03"},{"lineNumber":8,"author":{"gitId":"emilysim00"},"content":"event meet ben /at 2022-10-11 1415","lastModifiedDate":"2022-03-03"},{"lineNumber":9,"author":{"gitId":"emilysim00"},"content":"mark 3","lastModifiedDate":"2022-02-02"},{"lineNumber":10,"author":{"gitId":"emilysim00"},"content":"unmark 123","lastModifiedDate":"2022-03-03"},{"lineNumber":11,"author":{"gitId":"emilysim00"},"content":"mark 23131ii","lastModifiedDate":"2022-03-03"},{"lineNumber":12,"author":{"gitId":"emilysim00"},"content":"list ","lastModifiedDate":"2022-03-03"},{"lineNumber":13,"author":{"gitId":"emilysim00"},"content":"mark 6","lastModifiedDate":"2022-03-03"},{"lineNumber":14,"author":{"gitId":"emilysim00"},"content":"find book","lastModifiedDate":"2022-03-03"},{"lineNumber":15,"author":{"gitId":"emilysim00"},"content":"find BOOK","lastModifiedDate":"2022-03-03"},{"lineNumber":16,"author":{"gitId":"emilysim00"},"content":"return ","lastModifiedDate":"2022-03-03"},{"lineNumber":17,"author":{"gitId":"emilysim00"},"content":"deadline assignment 3 /by 01-01-2011 1230","lastModifiedDate":"2022-03-03"},{"lineNumber":18,"author":{"gitId":"emilysim00"},"content":"deadline assignment 3 /by 2011-01-01 1230","lastModifiedDate":"2022-03-03"},{"lineNumber":19,"author":{"gitId":"emilysim00"},"content":"event exam2 /by 2021-11-01 1299","lastModifiedDate":"2022-03-03"},{"lineNumber":20,"author":{"gitId":"emilysim00"},"content":"event exam2 /by 2021-11-01 1249","lastModifiedDate":"2022-03-03"},{"lineNumber":21,"author":{"gitId":"emilysim00"},"content":"mark 7","lastModifiedDate":"2022-03-03"},{"lineNumber":22,"author":{"gitId":"emilysim00"},"content":"hello","lastModifiedDate":"2022-03-03"},{"lineNumber":23,"author":{"gitId":"emilysim00"},"content":"list","lastModifiedDate":"2022-03-03"},{"lineNumber":24,"author":{"gitId":"emilysim00"},"content":"unmark 7","lastModifiedDate":"2022-03-03"},{"lineNumber":25,"author":{"gitId":"emilysim00"},"content":"delete 1","lastModifiedDate":"2022-03-03"},{"lineNumber":26,"author":{"gitId":"emilysim00"},"content":"list","lastModifiedDate":"2022-03-03"},{"lineNumber":27,"author":{"gitId":"emilysim00"},"content":"bye","lastModifiedDate":"2022-03-03"}],"authorContributionMap":{"emilysim00":27}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"emilysim00"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\em\\*.java","lastModifiedDate":"2022-03-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"emilysim00"},"content":"java -classpath ..\\bin em.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2022-03-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"emilysim00":2,"-":19}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"emilysim00"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/em/*.java","lastModifiedDate":"2022-03-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"emilysim00":1,"-":37}}]
