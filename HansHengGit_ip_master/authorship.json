[{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"HansHengGit"},"content":"**Duke is an application for keeping track of your tasks** that runs of *Java 11*","lastModifiedDate":"2022-02-27"},{"lineNumber":3,"author":{"gitId":"HansHengGit"},"content":"by typing in commands and the task to track using a Command Line interface(CLI).","lastModifiedDate":"2022-02-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2019-07-29"},{"lineNumber":6,"author":{"gitId":"HansHengGit"},"content":"- list: Lists all tasks currently stored","lastModifiedDate":"2022-02-27"},{"lineNumber":7,"author":{"gitId":"HansHengGit"},"content":"- todo: Creates a todo task","lastModifiedDate":"2022-02-27"},{"lineNumber":8,"author":{"gitId":"HansHengGit"},"content":"- deadline: Creates a deadline task","lastModifiedDate":"2022-02-27"},{"lineNumber":9,"author":{"gitId":"HansHengGit"},"content":"- event: Creates a event task","lastModifiedDate":"2022-02-27"},{"lineNumber":10,"author":{"gitId":"HansHengGit"},"content":"- mark: Marks the indicated task as done","lastModifiedDate":"2022-02-27"},{"lineNumber":11,"author":{"gitId":"HansHengGit"},"content":"- unmark: Marks the indicated task as not done yet","lastModifiedDate":"2022-02-27"},{"lineNumber":12,"author":{"gitId":"HansHengGit"},"content":"- delete: Deletes a single indicated task","lastModifiedDate":"2022-02-27"},{"lineNumber":13,"author":{"gitId":"HansHengGit"},"content":"- find: Finds tasks which consist of the keyword given and prints the results","lastModifiedDate":"2022-02-27"},{"lineNumber":14,"author":{"gitId":"HansHengGit"},"content":"- bye: Terminates the session","lastModifiedDate":"2022-02-27"},{"lineNumber":15,"author":{"gitId":"HansHengGit"},"content":"- save: The application automatically saves the list into a file","lastModifiedDate":"2022-02-27"},{"lineNumber":16,"author":{"gitId":"HansHengGit"},"content":"- load: The application loads existing list record from a file upon application start up ","lastModifiedDate":"2022-02-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":18,"author":{"gitId":"HansHengGit"},"content":"\u003e **Note the format of each command:**\u003cbr\u003e","lastModifiedDate":"2022-02-27"},{"lineNumber":19,"author":{"gitId":"HansHengGit"},"content":"\u003e Capitalised words in `\u003cHERE\u003e` are actions to be supplied by the user","lastModifiedDate":"2022-02-27"},{"lineNumber":20,"author":{"gitId":"HansHengGit"},"content":"\u003e e.g. `todo \u003cDESCRIPTION\u003e` where `\u003cDESCRIPTION\u003e` should be replaced with the task","lastModifiedDate":"2022-02-27"},{"lineNumber":21,"author":{"gitId":"HansHengGit"},"content":"\u003e the user needs to be done (e.g. `todo hang clothes`). Each command is **case-sensitive**.","lastModifiedDate":"2022-02-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":23,"author":{"gitId":"HansHengGit"},"content":"### List all task: list","lastModifiedDate":"2022-02-27"},{"lineNumber":24,"author":{"gitId":"HansHengGit"},"content":"List out all task stored in the application.","lastModifiedDate":"2022-02-27"},{"lineNumber":25,"author":{"gitId":"HansHengGit"},"content":"#### Format: `list`","lastModifiedDate":"2022-02-27"},{"lineNumber":26,"author":{"gitId":"HansHengGit"},"content":"- **Note:** Anything after the command list will be ignored.","lastModifiedDate":"2022-02-27"},{"lineNumber":27,"author":{"gitId":"HansHengGit"},"content":"#### Example usage:\u003cbr\u003e","lastModifiedDate":"2022-02-27"},{"lineNumber":28,"author":{"gitId":"HansHengGit"},"content":"```","lastModifiedDate":"2022-02-27"},{"lineNumber":29,"author":{"gitId":"HansHengGit"},"content":"list","lastModifiedDate":"2022-02-27"},{"lineNumber":30,"author":{"gitId":"HansHengGit"},"content":"```","lastModifiedDate":"2022-02-27"},{"lineNumber":31,"author":{"gitId":"HansHengGit"},"content":"#### Example expected outcome:\u003cbr\u003e","lastModifiedDate":"2022-02-27"},{"lineNumber":32,"author":{"gitId":"HansHengGit"},"content":"```","lastModifiedDate":"2022-02-27"},{"lineNumber":33,"author":{"gitId":"HansHengGit"},"content":"1. [T][ ] read book","lastModifiedDate":"2022-02-27"},{"lineNumber":34,"author":{"gitId":"HansHengGit"},"content":"2. [E][ ] concert (at:Oct 3 2022)","lastModifiedDate":"2022-02-27"},{"lineNumber":35,"author":{"gitId":"HansHengGit"},"content":"3. [D][ ] submit assignment  (by:Feb 27 2022)","lastModifiedDate":"2022-02-27"},{"lineNumber":36,"author":{"gitId":"HansHengGit"},"content":"```","lastModifiedDate":"2022-02-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":38,"author":{"gitId":"HansHengGit"},"content":"### Creates a todo task: todo","lastModifiedDate":"2022-02-27"},{"lineNumber":39,"author":{"gitId":"HansHengGit"},"content":"Creates and adds a task to be done.","lastModifiedDate":"2022-02-27"},{"lineNumber":40,"author":{"gitId":"HansHengGit"},"content":"#### Format: `todo \u003cDESCRIPTION\u003e`","lastModifiedDate":"2022-02-27"},{"lineNumber":41,"author":{"gitId":"HansHengGit"},"content":"#### Example usage:\u003cbr\u003e","lastModifiedDate":"2022-02-27"},{"lineNumber":42,"author":{"gitId":"HansHengGit"},"content":"```","lastModifiedDate":"2022-02-27"},{"lineNumber":43,"author":{"gitId":"HansHengGit"},"content":"todo read a book","lastModifiedDate":"2022-02-27"},{"lineNumber":44,"author":{"gitId":"HansHengGit"},"content":"```","lastModifiedDate":"2022-02-27"},{"lineNumber":45,"author":{"gitId":"HansHengGit"},"content":"#### Example expected outcome:\u003cbr\u003e","lastModifiedDate":"2022-02-27"},{"lineNumber":46,"author":{"gitId":"HansHengGit"},"content":"```","lastModifiedDate":"2022-02-27"},{"lineNumber":47,"author":{"gitId":"HansHengGit"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2022-02-27"},{"lineNumber":48,"author":{"gitId":"HansHengGit"},"content":"[T][ ] read a book","lastModifiedDate":"2022-02-27"},{"lineNumber":49,"author":{"gitId":"HansHengGit"},"content":"Now you have 1 tasks in the list.","lastModifiedDate":"2022-02-27"},{"lineNumber":50,"author":{"gitId":"HansHengGit"},"content":"```","lastModifiedDate":"2022-02-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":52,"author":{"gitId":"HansHengGit"},"content":"### Creates a deadline task: deadline","lastModifiedDate":"2022-02-27"},{"lineNumber":53,"author":{"gitId":"HansHengGit"},"content":"Creates and adds a task with a deadline.","lastModifiedDate":"2022-02-27"},{"lineNumber":54,"author":{"gitId":"HansHengGit"},"content":"#### Format: `deadline \u003cDESCRIPTION\u003e /by \u003cDATE\u003e`","lastModifiedDate":"2022-02-27"},{"lineNumber":55,"author":{"gitId":"HansHengGit"},"content":"- **Note:** `\u003cDATE\u003e` must be in a format of `YYYY-MM-DD`and both `\u003cDESCRIPTION\u003e` ","lastModifiedDate":"2022-02-27"},{"lineNumber":56,"author":{"gitId":"HansHengGit"},"content":"and `\u003cDATE\u003e` cannot be empty.","lastModifiedDate":"2022-02-27"},{"lineNumber":57,"author":{"gitId":"HansHengGit"},"content":"#### Example usage:\u003cbr\u003e","lastModifiedDate":"2022-02-27"},{"lineNumber":58,"author":{"gitId":"HansHengGit"},"content":"```","lastModifiedDate":"2022-02-27"},{"lineNumber":59,"author":{"gitId":"HansHengGit"},"content":"deadline submit journal /by 2022-12-15","lastModifiedDate":"2022-02-27"},{"lineNumber":60,"author":{"gitId":"HansHengGit"},"content":"```","lastModifiedDate":"2022-02-27"},{"lineNumber":61,"author":{"gitId":"HansHengGit"},"content":"#### Example expected outcome:\u003cbr\u003e","lastModifiedDate":"2022-02-27"},{"lineNumber":62,"author":{"gitId":"HansHengGit"},"content":"```","lastModifiedDate":"2022-02-27"},{"lineNumber":63,"author":{"gitId":"HansHengGit"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2022-02-27"},{"lineNumber":64,"author":{"gitId":"HansHengGit"},"content":"[D][ ] submit journal  (by:Dec 15 2022)","lastModifiedDate":"2022-02-27"},{"lineNumber":65,"author":{"gitId":"HansHengGit"},"content":"Now you have 3 tasks in the list.","lastModifiedDate":"2022-02-27"},{"lineNumber":66,"author":{"gitId":"HansHengGit"},"content":"```","lastModifiedDate":"2022-02-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":68,"author":{"gitId":"HansHengGit"},"content":"### Creates an event task: event","lastModifiedDate":"2022-02-27"},{"lineNumber":69,"author":{"gitId":"HansHengGit"},"content":"Creates and adds an upcoming event task.","lastModifiedDate":"2022-02-27"},{"lineNumber":70,"author":{"gitId":"HansHengGit"},"content":"#### Format: `event \u003cDESCRIPTION\u003e /at \u003cDATE\u003e`","lastModifiedDate":"2022-02-27"},{"lineNumber":71,"author":{"gitId":"HansHengGit"},"content":"- **Note:** `\u003cDATE\u003e` must be in a format of `YYYY-MM-DD` ","lastModifiedDate":"2022-02-27"},{"lineNumber":72,"author":{"gitId":"HansHengGit"},"content":"and both `\u003cDESCRIPTION\u003e` and `\u003cDATE\u003e` cannot be empty.","lastModifiedDate":"2022-02-27"},{"lineNumber":73,"author":{"gitId":"HansHengGit"},"content":"#### Example usage:\u003cbr\u003e","lastModifiedDate":"2022-02-27"},{"lineNumber":74,"author":{"gitId":"HansHengGit"},"content":"```","lastModifiedDate":"2022-02-27"},{"lineNumber":75,"author":{"gitId":"HansHengGit"},"content":"event TED talk /at 2022-12-15","lastModifiedDate":"2022-02-27"},{"lineNumber":76,"author":{"gitId":"HansHengGit"},"content":"```","lastModifiedDate":"2022-02-27"},{"lineNumber":77,"author":{"gitId":"HansHengGit"},"content":"#### Example expected outcome:\u003cbr\u003e","lastModifiedDate":"2022-02-27"},{"lineNumber":78,"author":{"gitId":"HansHengGit"},"content":"```","lastModifiedDate":"2022-02-27"},{"lineNumber":79,"author":{"gitId":"HansHengGit"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2022-02-27"},{"lineNumber":80,"author":{"gitId":"HansHengGit"},"content":"[E][ ] TED talk  (at:Dec 15 2022)","lastModifiedDate":"2022-02-27"},{"lineNumber":81,"author":{"gitId":"HansHengGit"},"content":"Now you have 2 tasks in the list.","lastModifiedDate":"2022-02-27"},{"lineNumber":82,"author":{"gitId":"HansHengGit"},"content":"```","lastModifiedDate":"2022-02-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":84,"author":{"gitId":"HansHengGit"},"content":"### Marks a task as done: mark","lastModifiedDate":"2022-02-27"},{"lineNumber":85,"author":{"gitId":"HansHengGit"},"content":"Marks the given index of a task as done, index is based on the list.","lastModifiedDate":"2022-02-27"},{"lineNumber":86,"author":{"gitId":"HansHengGit"},"content":"#### Format: `mark \u003cTASK INDEX\u003e`","lastModifiedDate":"2022-02-27"},{"lineNumber":87,"author":{"gitId":"HansHengGit"},"content":"#### Example usage:\u003cbr\u003e ","lastModifiedDate":"2022-02-27"},{"lineNumber":88,"author":{"gitId":"HansHengGit"},"content":"```","lastModifiedDate":"2022-02-27"},{"lineNumber":89,"author":{"gitId":"HansHengGit"},"content":"mark 1","lastModifiedDate":"2022-02-27"},{"lineNumber":90,"author":{"gitId":"HansHengGit"},"content":"```","lastModifiedDate":"2022-02-27"},{"lineNumber":91,"author":{"gitId":"HansHengGit"},"content":"- Marks the first task in the list as done.","lastModifiedDate":"2022-02-27"},{"lineNumber":92,"author":{"gitId":"HansHengGit"},"content":"#### Example expected outcome:\u003cbr\u003e","lastModifiedDate":"2022-02-27"},{"lineNumber":93,"author":{"gitId":"HansHengGit"},"content":"```","lastModifiedDate":"2022-02-27"},{"lineNumber":94,"author":{"gitId":"HansHengGit"},"content":"Nice! I\u0027ve marked this task as done:","lastModifiedDate":"2022-02-27"},{"lineNumber":95,"author":{"gitId":"HansHengGit"},"content":"[T][X] read book","lastModifiedDate":"2022-02-27"},{"lineNumber":96,"author":{"gitId":"HansHengGit"},"content":"```","lastModifiedDate":"2022-02-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":98,"author":{"gitId":"HansHengGit"},"content":"### Marks a task as not done yet: unmark","lastModifiedDate":"2022-02-27"},{"lineNumber":99,"author":{"gitId":"HansHengGit"},"content":"Marks the given index of a task as not done yet, index is based on the list.","lastModifiedDate":"2022-02-27"},{"lineNumber":100,"author":{"gitId":"HansHengGit"},"content":"#### Format: `unmark \u003cTASK INDEX\u003e`","lastModifiedDate":"2022-02-27"},{"lineNumber":101,"author":{"gitId":"HansHengGit"},"content":"#### Example usage:\u003cbr\u003e","lastModifiedDate":"2022-02-27"},{"lineNumber":102,"author":{"gitId":"HansHengGit"},"content":"```","lastModifiedDate":"2022-02-27"},{"lineNumber":103,"author":{"gitId":"HansHengGit"},"content":"unmark 1","lastModifiedDate":"2022-02-27"},{"lineNumber":104,"author":{"gitId":"HansHengGit"},"content":"```","lastModifiedDate":"2022-02-27"},{"lineNumber":105,"author":{"gitId":"HansHengGit"},"content":"#### Example expected outcome:\u003cbr\u003e","lastModifiedDate":"2022-02-27"},{"lineNumber":106,"author":{"gitId":"HansHengGit"},"content":"```","lastModifiedDate":"2022-02-27"},{"lineNumber":107,"author":{"gitId":"HansHengGit"},"content":"Nice! I\u0027ve marked this task as not done yet:","lastModifiedDate":"2022-02-27"},{"lineNumber":108,"author":{"gitId":"HansHengGit"},"content":"[T][ ] read book","lastModifiedDate":"2022-02-27"},{"lineNumber":109,"author":{"gitId":"HansHengGit"},"content":"```","lastModifiedDate":"2022-02-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":111,"author":{"gitId":"HansHengGit"},"content":"### Deletes a task from the list: delete","lastModifiedDate":"2022-02-27"},{"lineNumber":112,"author":{"gitId":"HansHengGit"},"content":"Deletes a given task index from the list.","lastModifiedDate":"2022-02-27"},{"lineNumber":113,"author":{"gitId":"HansHengGit"},"content":"#### Format: `delete \u003cTASK INDEX\u003e`","lastModifiedDate":"2022-02-27"},{"lineNumber":114,"author":{"gitId":"HansHengGit"},"content":"- **Note:** `\u003cTASK INDEX\u003e` must be a positive integer and must range within the list. ","lastModifiedDate":"2022-02-27"},{"lineNumber":115,"author":{"gitId":"HansHengGit"},"content":"#### Example usage:\u003cbr\u003e","lastModifiedDate":"2022-02-27"},{"lineNumber":116,"author":{"gitId":"HansHengGit"},"content":"```","lastModifiedDate":"2022-02-27"},{"lineNumber":117,"author":{"gitId":"HansHengGit"},"content":"delete 1","lastModifiedDate":"2022-02-27"},{"lineNumber":118,"author":{"gitId":"HansHengGit"},"content":"```","lastModifiedDate":"2022-02-27"},{"lineNumber":119,"author":{"gitId":"HansHengGit"},"content":"- Deletes the first task in the list.","lastModifiedDate":"2022-02-27"},{"lineNumber":120,"author":{"gitId":"HansHengGit"},"content":"#### Example expected outcome:\u003cbr\u003e","lastModifiedDate":"2022-02-27"},{"lineNumber":121,"author":{"gitId":"HansHengGit"},"content":"```","lastModifiedDate":"2022-02-27"},{"lineNumber":122,"author":{"gitId":"HansHengGit"},"content":"Noted. I\u0027ve removed this task:","lastModifiedDate":"2022-02-27"},{"lineNumber":123,"author":{"gitId":"HansHengGit"},"content":"[T][ ] read book","lastModifiedDate":"2022-02-27"},{"lineNumber":124,"author":{"gitId":"HansHengGit"},"content":"Now you have 2 tasks in the list.","lastModifiedDate":"2022-02-27"},{"lineNumber":125,"author":{"gitId":"HansHengGit"},"content":"```","lastModifiedDate":"2022-02-27"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":127,"author":{"gitId":"HansHengGit"},"content":"### Find tasks from the list: find","lastModifiedDate":"2022-02-27"},{"lineNumber":128,"author":{"gitId":"HansHengGit"},"content":"Finds all task in the list which consist of the given keyword\u003cbr\u003e","lastModifiedDate":"2022-02-27"},{"lineNumber":129,"author":{"gitId":"HansHengGit"},"content":"and prints all tasks found.","lastModifiedDate":"2022-02-27"},{"lineNumber":130,"author":{"gitId":"HansHengGit"},"content":"#### Format: `find \u003cKEYWORD\u003e`","lastModifiedDate":"2022-02-27"},{"lineNumber":131,"author":{"gitId":"HansHengGit"},"content":"#### Example usage:\u003cbr\u003e","lastModifiedDate":"2022-02-27"},{"lineNumber":132,"author":{"gitId":"HansHengGit"},"content":"```","lastModifiedDate":"2022-02-27"},{"lineNumber":133,"author":{"gitId":"HansHengGit"},"content":"find book","lastModifiedDate":"2022-02-27"},{"lineNumber":134,"author":{"gitId":"HansHengGit"},"content":"```","lastModifiedDate":"2022-02-27"},{"lineNumber":135,"author":{"gitId":"HansHengGit"},"content":"- Finds all task which consist of the word \u0027book\u0027 in the list.","lastModifiedDate":"2022-02-27"},{"lineNumber":136,"author":{"gitId":"HansHengGit"},"content":"#### Example expected outcome:\u003cbr\u003e","lastModifiedDate":"2022-02-27"},{"lineNumber":137,"author":{"gitId":"HansHengGit"},"content":"```","lastModifiedDate":"2022-02-27"},{"lineNumber":138,"author":{"gitId":"HansHengGit"},"content":"1. [T][ ] read book","lastModifiedDate":"2022-02-27"},{"lineNumber":139,"author":{"gitId":"HansHengGit"},"content":"2. [T][ ] return book","lastModifiedDate":"2022-02-27"},{"lineNumber":140,"author":{"gitId":"HansHengGit"},"content":"```","lastModifiedDate":"2022-02-27"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":142,"author":{"gitId":"HansHengGit"},"content":"### Terminates the session: bye","lastModifiedDate":"2022-02-27"},{"lineNumber":143,"author":{"gitId":"HansHengGit"},"content":"Terminates the current session.","lastModifiedDate":"2022-02-27"},{"lineNumber":144,"author":{"gitId":"HansHengGit"},"content":"- **Note:** Anything after the command `bye` will be ignored.","lastModifiedDate":"2022-02-27"},{"lineNumber":145,"author":{"gitId":"HansHengGit"},"content":"#### Format: `bye`","lastModifiedDate":"2022-02-27"},{"lineNumber":146,"author":{"gitId":"HansHengGit"},"content":"#### Example usage:\u003cbr\u003e","lastModifiedDate":"2022-02-27"},{"lineNumber":147,"author":{"gitId":"HansHengGit"},"content":"```","lastModifiedDate":"2022-02-27"},{"lineNumber":148,"author":{"gitId":"HansHengGit"},"content":"bye","lastModifiedDate":"2022-02-27"},{"lineNumber":149,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2022-02-27"},{"lineNumber":150,"author":{"gitId":"HansHengGit"},"content":"#### Example expected outcome:\u003cbr\u003e","lastModifiedDate":"2022-02-27"},{"lineNumber":151,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":152,"author":{"gitId":"HansHengGit"},"content":"Bye. Hope to see you again soon!","lastModifiedDate":"2022-02-27"},{"lineNumber":153,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":154,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":155,"author":{"gitId":"HansHengGit"},"content":"### Saves the list into a local file: save","lastModifiedDate":"2022-02-27"},{"lineNumber":156,"author":{"gitId":"HansHengGit"},"content":"There is no input needed, automatically saves the list","lastModifiedDate":"2022-02-27"},{"lineNumber":157,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":158,"author":{"gitId":"HansHengGit"},"content":"### Loads the existing list from the local file: load","lastModifiedDate":"2022-02-27"},{"lineNumber":159,"author":{"gitId":"HansHengGit"},"content":"There is no input needed, automatically loads the list upon start up","lastModifiedDate":"2022-02-27"},{"lineNumber":160,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-27"}],"authorContributionMap":{"HansHengGit":144,"-":16}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HansHengGit"},"content":"package duke;","lastModifiedDate":"2022-02-06"},{"lineNumber":2,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":3,"author":{"gitId":"HansHengGit"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-13"},{"lineNumber":4,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":5,"author":{"gitId":"HansHengGit"},"content":"/**","lastModifiedDate":"2022-02-27"},{"lineNumber":6,"author":{"gitId":"HansHengGit"},"content":" * The main class of all the other objects for this program.","lastModifiedDate":"2022-02-27"},{"lineNumber":7,"author":{"gitId":"HansHengGit"},"content":" * Starts of the program and initiates other classes.","lastModifiedDate":"2022-02-27"},{"lineNumber":8,"author":{"gitId":"HansHengGit"},"content":" */","lastModifiedDate":"2022-02-27"},{"lineNumber":9,"author":{"gitId":"HansHengGit"},"content":"public class Duke {","lastModifiedDate":"2022-01-30"},{"lineNumber":10,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"HansHengGit"},"content":"    private static Storage storage;","lastModifiedDate":"2022-02-25"},{"lineNumber":12,"author":{"gitId":"HansHengGit"},"content":"    private static Ui ui;","lastModifiedDate":"2022-02-25"},{"lineNumber":13,"author":{"gitId":"HansHengGit"},"content":"    private static TaskList tasks;","lastModifiedDate":"2022-02-25"},{"lineNumber":14,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":16,"author":{"gitId":"HansHengGit"},"content":"     * Creates a new instance of the program and loads the saved file stored locally.","lastModifiedDate":"2022-02-27"},{"lineNumber":17,"author":{"gitId":"HansHengGit"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":18,"author":{"gitId":"HansHengGit"},"content":"     * @throws DukeException If there is an error loading task from saved file","lastModifiedDate":"2022-02-27"},{"lineNumber":19,"author":{"gitId":"HansHengGit"},"content":"     * @throws IOException If there is an error creating the file","lastModifiedDate":"2022-02-27"},{"lineNumber":20,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":21,"author":{"gitId":"HansHengGit"},"content":"    public Duke() throws DukeException, IOException {","lastModifiedDate":"2022-02-25"},{"lineNumber":22,"author":{"gitId":"HansHengGit"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2022-02-25"},{"lineNumber":23,"author":{"gitId":"HansHengGit"},"content":"        storage \u003d new Storage(\"data/Hage.txt\");","lastModifiedDate":"2022-02-25"},{"lineNumber":24,"author":{"gitId":"HansHengGit"},"content":"        storage.createFile();","lastModifiedDate":"2022-02-25"},{"lineNumber":25,"author":{"gitId":"HansHengGit"},"content":"        tasks \u003d new TaskList(storage.loadData(), storage.getItemNumber());","lastModifiedDate":"2022-02-27"},{"lineNumber":26,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":27,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":28,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":29,"author":{"gitId":"HansHengGit"},"content":"     * Prints the welcome message and starts the program loop","lastModifiedDate":"2022-02-27"},{"lineNumber":30,"author":{"gitId":"HansHengGit"},"content":"     * which continuously accept users input until they terminate","lastModifiedDate":"2022-02-27"},{"lineNumber":31,"author":{"gitId":"HansHengGit"},"content":"     * the session and saves the list into a local file.","lastModifiedDate":"2022-02-27"},{"lineNumber":32,"author":{"gitId":"HansHengGit"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":33,"author":{"gitId":"HansHengGit"},"content":"     * @throws DukeException If there is an error executing the command","lastModifiedDate":"2022-02-27"},{"lineNumber":34,"author":{"gitId":"HansHengGit"},"content":"     * @throws IOException If there is an error opening or closing the file","lastModifiedDate":"2022-02-27"},{"lineNumber":35,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":36,"author":{"gitId":"HansHengGit"},"content":"    public void run() throws DukeException, IOException {","lastModifiedDate":"2022-02-25"},{"lineNumber":37,"author":{"gitId":"HansHengGit"},"content":"        ui.printWelcomeMessage();","lastModifiedDate":"2022-02-25"},{"lineNumber":38,"author":{"gitId":"HansHengGit"},"content":"        while (true) {","lastModifiedDate":"2022-01-30"},{"lineNumber":39,"author":{"gitId":"HansHengGit"},"content":"            tasks.executeCommand(ui.getNewInput());","lastModifiedDate":"2022-02-27"},{"lineNumber":40,"author":{"gitId":"HansHengGit"},"content":"            storage.saveTaskList();","lastModifiedDate":"2022-02-25"},{"lineNumber":41,"author":{"gitId":"HansHengGit"},"content":"        }","lastModifiedDate":"2022-01-30"},{"lineNumber":42,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":43,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":44,"author":{"gitId":"HansHengGit"},"content":"    public static void main(String[] args) throws DukeException, IOException {","lastModifiedDate":"2022-02-25"},{"lineNumber":45,"author":{"gitId":"HansHengGit"},"content":"        new Duke().run();","lastModifiedDate":"2022-02-25"},{"lineNumber":46,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"HansHengGit":46,"-":1}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HansHengGit"},"content":"package duke;","lastModifiedDate":"2022-02-06"},{"lineNumber":2,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":3,"author":{"gitId":"HansHengGit"},"content":"/**","lastModifiedDate":"2022-02-27"},{"lineNumber":4,"author":{"gitId":"HansHengGit"},"content":" * Handles any exceptions that may occur.","lastModifiedDate":"2022-02-27"},{"lineNumber":5,"author":{"gitId":"HansHengGit"},"content":" */","lastModifiedDate":"2022-02-27"},{"lineNumber":6,"author":{"gitId":"HansHengGit"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2022-02-05"},{"lineNumber":7,"author":{"gitId":"HansHengGit"},"content":"}","lastModifiedDate":"2022-02-05"}],"authorContributionMap":{"HansHengGit":7}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HansHengGit"},"content":"package duke;","lastModifiedDate":"2022-02-25"},{"lineNumber":2,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":3,"author":{"gitId":"HansHengGit"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-02-25"},{"lineNumber":4,"author":{"gitId":"HansHengGit"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-02-25"},{"lineNumber":5,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":6,"author":{"gitId":"HansHengGit"},"content":"    ","lastModifiedDate":"2022-02-27"},{"lineNumber":7,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":8,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":9,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":10,"author":{"gitId":"HansHengGit"},"content":" /**","lastModifiedDate":"2022-02-27"},{"lineNumber":11,"author":{"gitId":"HansHengGit"},"content":" * Deals with making sense of the user command.","lastModifiedDate":"2022-02-27"},{"lineNumber":12,"author":{"gitId":"HansHengGit"},"content":" */","lastModifiedDate":"2022-02-27"},{"lineNumber":13,"author":{"gitId":"HansHengGit"},"content":"public class Parser {","lastModifiedDate":"2022-02-25"},{"lineNumber":14,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":15,"author":{"gitId":"HansHengGit"},"content":"    private static Ui ui;","lastModifiedDate":"2022-02-25"},{"lineNumber":16,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":17,"author":{"gitId":"HansHengGit"},"content":"    public Parser() {","lastModifiedDate":"2022-02-25"},{"lineNumber":18,"author":{"gitId":"HansHengGit"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2022-02-25"},{"lineNumber":19,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":20,"author":{"gitId":"HansHengGit"},"content":"     /**","lastModifiedDate":"2022-02-27"},{"lineNumber":21,"author":{"gitId":"HansHengGit"},"content":"     * Takes in the user input as a string, split it into sections","lastModifiedDate":"2022-02-27"},{"lineNumber":22,"author":{"gitId":"HansHengGit"},"content":"     * stored in a string array and return the first index to be the","lastModifiedDate":"2022-02-27"},{"lineNumber":23,"author":{"gitId":"HansHengGit"},"content":"     * user command.","lastModifiedDate":"2022-02-27"},{"lineNumber":24,"author":{"gitId":"HansHengGit"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":25,"author":{"gitId":"HansHengGit"},"content":"     * @param inputCommand The string of the user input","lastModifiedDate":"2022-02-27"},{"lineNumber":26,"author":{"gitId":"HansHengGit"},"content":"     * @return The command type of the input","lastModifiedDate":"2022-02-27"},{"lineNumber":27,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":28,"author":{"gitId":"HansHengGit"},"content":"    public static String parseCommandFromString(String inputCommand) {","lastModifiedDate":"2022-02-25"},{"lineNumber":29,"author":{"gitId":"HansHengGit"},"content":"        String[] command \u003d inputCommand.split(\" \");","lastModifiedDate":"2022-02-25"},{"lineNumber":30,"author":{"gitId":"HansHengGit"},"content":"        return command[0];","lastModifiedDate":"2022-02-25"},{"lineNumber":31,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":32,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":33,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":34,"author":{"gitId":"HansHengGit"},"content":"     * Takes in the user input as a string, split it into sections","lastModifiedDate":"2022-02-27"},{"lineNumber":35,"author":{"gitId":"HansHengGit"},"content":"     * stored in a string array and return the index which consist","lastModifiedDate":"2022-02-27"},{"lineNumber":36,"author":{"gitId":"HansHengGit"},"content":"     * of the item in the list the user wants to mark as done.","lastModifiedDate":"2022-02-27"},{"lineNumber":37,"author":{"gitId":"HansHengGit"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":38,"author":{"gitId":"HansHengGit"},"content":"     * @param inputCommand The string of user input","lastModifiedDate":"2022-02-27"},{"lineNumber":39,"author":{"gitId":"HansHengGit"},"content":"     * @return The item number on the list the user wants to mark as done","lastModifiedDate":"2022-02-27"},{"lineNumber":40,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":41,"author":{"gitId":"HansHengGit"},"content":"    public static int parseMarkIndexFromString(String inputCommand) {","lastModifiedDate":"2022-02-25"},{"lineNumber":42,"author":{"gitId":"HansHengGit"},"content":"        String[] commandArr \u003d inputCommand.split(\" \");","lastModifiedDate":"2022-02-25"},{"lineNumber":43,"author":{"gitId":"HansHengGit"},"content":"        int markNum \u003d Integer.parseInt(commandArr[1]) - 1;","lastModifiedDate":"2022-02-25"},{"lineNumber":44,"author":{"gitId":"HansHengGit"},"content":"        return markNum;","lastModifiedDate":"2022-02-25"},{"lineNumber":45,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":46,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":47,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":48,"author":{"gitId":"HansHengGit"},"content":"     * Takes in the user input as a string, split it into sections","lastModifiedDate":"2022-02-27"},{"lineNumber":49,"author":{"gitId":"HansHengGit"},"content":"     * stored in a string array and return the index which consist","lastModifiedDate":"2022-02-27"},{"lineNumber":50,"author":{"gitId":"HansHengGit"},"content":"     * of the item in the list the user wants to mark as not done.","lastModifiedDate":"2022-02-27"},{"lineNumber":51,"author":{"gitId":"HansHengGit"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":52,"author":{"gitId":"HansHengGit"},"content":"     * @param inputCommand The string of user input","lastModifiedDate":"2022-02-27"},{"lineNumber":53,"author":{"gitId":"HansHengGit"},"content":"     * @return The item number on the list the user wants to mark as not done","lastModifiedDate":"2022-02-27"},{"lineNumber":54,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":55,"author":{"gitId":"HansHengGit"},"content":"    public static int parseUnMarkIndexFromString(String inputCommand) {","lastModifiedDate":"2022-02-25"},{"lineNumber":56,"author":{"gitId":"HansHengGit"},"content":"        String[] commandArr \u003d inputCommand.split(\" \");","lastModifiedDate":"2022-02-25"},{"lineNumber":57,"author":{"gitId":"HansHengGit"},"content":"        int UnMarkNum \u003d Integer.parseInt(commandArr[1]) - 1;","lastModifiedDate":"2022-02-25"},{"lineNumber":58,"author":{"gitId":"HansHengGit"},"content":"        return UnMarkNum;","lastModifiedDate":"2022-02-25"},{"lineNumber":59,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":60,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":61,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":62,"author":{"gitId":"HansHengGit"},"content":"     * Takes in the user input as a string, split it into sections","lastModifiedDate":"2022-02-27"},{"lineNumber":63,"author":{"gitId":"HansHengGit"},"content":"     * stored in a string array and return the index which consist","lastModifiedDate":"2022-02-27"},{"lineNumber":64,"author":{"gitId":"HansHengGit"},"content":"     * of the item in the list the user wants to delete.","lastModifiedDate":"2022-02-27"},{"lineNumber":65,"author":{"gitId":"HansHengGit"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":66,"author":{"gitId":"HansHengGit"},"content":"     * @param inputCommand The string of user input","lastModifiedDate":"2022-02-27"},{"lineNumber":67,"author":{"gitId":"HansHengGit"},"content":"     * @return The item number on the list the user wants to delete","lastModifiedDate":"2022-02-27"},{"lineNumber":68,"author":{"gitId":"HansHengGit"},"content":"     * @throws IndexOutOfBoundsException If delete index is empty or out of range","lastModifiedDate":"2022-02-27"},{"lineNumber":69,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":70,"author":{"gitId":"HansHengGit"},"content":"    public static int parseDeleteIndexFromString(String inputCommand) {","lastModifiedDate":"2022-02-25"},{"lineNumber":71,"author":{"gitId":"HansHengGit"},"content":"        try {","lastModifiedDate":"2022-02-27"},{"lineNumber":72,"author":{"gitId":"HansHengGit"},"content":"            String[] commandArr \u003d inputCommand.split(\" \");","lastModifiedDate":"2022-02-25"},{"lineNumber":73,"author":{"gitId":"HansHengGit"},"content":"            int deleteIndex \u003d Integer.parseInt(commandArr[1]) - 1;","lastModifiedDate":"2022-02-25"},{"lineNumber":74,"author":{"gitId":"HansHengGit"},"content":"            return deleteIndex;","lastModifiedDate":"2022-02-25"},{"lineNumber":75,"author":{"gitId":"HansHengGit"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2022-02-27"},{"lineNumber":76,"author":{"gitId":"HansHengGit"},"content":"            ui.printInvalidDeleteIndex();","lastModifiedDate":"2022-02-27"},{"lineNumber":77,"author":{"gitId":"HansHengGit"},"content":"        }","lastModifiedDate":"2022-02-27"},{"lineNumber":78,"author":{"gitId":"HansHengGit"},"content":"        return 0;","lastModifiedDate":"2022-02-27"},{"lineNumber":79,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":80,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":81,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":82,"author":{"gitId":"HansHengGit"},"content":"     * Takes in the user input as a string and split the string","lastModifiedDate":"2022-02-27"},{"lineNumber":83,"author":{"gitId":"HansHengGit"},"content":"     * into sections to take only the task type of the command.","lastModifiedDate":"2022-02-27"},{"lineNumber":84,"author":{"gitId":"HansHengGit"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":85,"author":{"gitId":"HansHengGit"},"content":"     * @param inCommand The user input string","lastModifiedDate":"2022-02-27"},{"lineNumber":86,"author":{"gitId":"HansHengGit"},"content":"     * @return The task type of the user command","lastModifiedDate":"2022-02-27"},{"lineNumber":87,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":88,"author":{"gitId":"HansHengGit"},"content":"    public String parseTaskTypeFromString(String inCommand) {","lastModifiedDate":"2022-02-25"},{"lineNumber":89,"author":{"gitId":"HansHengGit"},"content":"        String[] sentenceArr \u003d inCommand.split(\" \", 2);","lastModifiedDate":"2022-02-25"},{"lineNumber":90,"author":{"gitId":"HansHengGit"},"content":"        return sentenceArr[0];","lastModifiedDate":"2022-02-25"},{"lineNumber":91,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":92,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":93,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":94,"author":{"gitId":"HansHengGit"},"content":"     * Takes in the user input as a string and split it into","lastModifiedDate":"2022-02-27"},{"lineNumber":95,"author":{"gitId":"HansHengGit"},"content":"     * a string array.","lastModifiedDate":"2022-02-27"},{"lineNumber":96,"author":{"gitId":"HansHengGit"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":97,"author":{"gitId":"HansHengGit"},"content":"     * @param inCommand The user input as a string","lastModifiedDate":"2022-02-27"},{"lineNumber":98,"author":{"gitId":"HansHengGit"},"content":"     * @return The string array consisting of the user commands","lastModifiedDate":"2022-02-27"},{"lineNumber":99,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":100,"author":{"gitId":"HansHengGit"},"content":"    public String[] parseTaskDescriptionFromString(String inCommand) {","lastModifiedDate":"2022-02-25"},{"lineNumber":101,"author":{"gitId":"HansHengGit"},"content":"        String[] sentenceArr \u003d inCommand.split(\" \", 2);","lastModifiedDate":"2022-02-25"},{"lineNumber":102,"author":{"gitId":"HansHengGit"},"content":"        return sentenceArr;","lastModifiedDate":"2022-02-25"},{"lineNumber":103,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":104,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":105,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":106,"author":{"gitId":"HansHengGit"},"content":"     * Takes in the task description for the todo task","lastModifiedDate":"2022-02-27"},{"lineNumber":107,"author":{"gitId":"HansHengGit"},"content":"     * and return the action of the task.","lastModifiedDate":"2022-02-27"},{"lineNumber":108,"author":{"gitId":"HansHengGit"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":109,"author":{"gitId":"HansHengGit"},"content":"     * @param taskDescription The todo task description","lastModifiedDate":"2022-02-27"},{"lineNumber":110,"author":{"gitId":"HansHengGit"},"content":"     * @return The action of the task","lastModifiedDate":"2022-02-27"},{"lineNumber":111,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":112,"author":{"gitId":"HansHengGit"},"content":"    public String parseToDoActionFromDescription(String[] taskDescription) {","lastModifiedDate":"2022-02-25"},{"lineNumber":113,"author":{"gitId":"HansHengGit"},"content":"        return taskDescription[1];","lastModifiedDate":"2022-02-25"},{"lineNumber":114,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":115,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":116,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":117,"author":{"gitId":"HansHengGit"},"content":"     * Takes in the task description for the deadline task","lastModifiedDate":"2022-02-27"},{"lineNumber":118,"author":{"gitId":"HansHengGit"},"content":"     * and return the action of the task.","lastModifiedDate":"2022-02-27"},{"lineNumber":119,"author":{"gitId":"HansHengGit"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":120,"author":{"gitId":"HansHengGit"},"content":"     * @param taskDescription The deadline task description","lastModifiedDate":"2022-02-27"},{"lineNumber":121,"author":{"gitId":"HansHengGit"},"content":"     * @return The action of the task","lastModifiedDate":"2022-02-27"},{"lineNumber":122,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":123,"author":{"gitId":"HansHengGit"},"content":"    public String[] parseDeadLineActionFromDescription(String[] taskDescription) {","lastModifiedDate":"2022-02-25"},{"lineNumber":124,"author":{"gitId":"HansHengGit"},"content":"        return taskDescription[1].split(\"/by\", 2);","lastModifiedDate":"2022-02-25"},{"lineNumber":125,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":126,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":127,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":128,"author":{"gitId":"HansHengGit"},"content":"     * Takes in the task description for the event task","lastModifiedDate":"2022-02-27"},{"lineNumber":129,"author":{"gitId":"HansHengGit"},"content":"     * and return the action of the task.","lastModifiedDate":"2022-02-27"},{"lineNumber":130,"author":{"gitId":"HansHengGit"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":131,"author":{"gitId":"HansHengGit"},"content":"     * @param taskDescription The event task description","lastModifiedDate":"2022-02-27"},{"lineNumber":132,"author":{"gitId":"HansHengGit"},"content":"     * @return The action of the task","lastModifiedDate":"2022-02-27"},{"lineNumber":133,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":134,"author":{"gitId":"HansHengGit"},"content":"    public String[] parseEventsActionFromDescription(String[] taskDescription) {","lastModifiedDate":"2022-02-27"},{"lineNumber":135,"author":{"gitId":"HansHengGit"},"content":"        return taskDescription[1].split(\"/at\", 2);","lastModifiedDate":"2022-02-25"},{"lineNumber":136,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":137,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":138,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":139,"author":{"gitId":"HansHengGit"},"content":"     * Takes in the read line from the local file to be loaded","lastModifiedDate":"2022-02-27"},{"lineNumber":140,"author":{"gitId":"HansHengGit"},"content":"     * into the list when the program begins.","lastModifiedDate":"2022-02-27"},{"lineNumber":141,"author":{"gitId":"HansHengGit"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":142,"author":{"gitId":"HansHengGit"},"content":"     * @param line The read line from the local file","lastModifiedDate":"2022-02-27"},{"lineNumber":143,"author":{"gitId":"HansHengGit"},"content":"     * @return The string array of the read line split by commands","lastModifiedDate":"2022-02-27"},{"lineNumber":144,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":145,"author":{"gitId":"HansHengGit"},"content":"    public String[] parseLineFromFile(String line) {","lastModifiedDate":"2022-02-25"},{"lineNumber":146,"author":{"gitId":"HansHengGit"},"content":"        return line.split(\"-\", 3);","lastModifiedDate":"2022-02-25"},{"lineNumber":147,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":148,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":149,"author":{"gitId":"HansHengGit"},"content":"     /**","lastModifiedDate":"2022-02-27"},{"lineNumber":150,"author":{"gitId":"HansHengGit"},"content":"      * Takes in the user input and parse the keyword from it","lastModifiedDate":"2022-02-27"},{"lineNumber":151,"author":{"gitId":"HansHengGit"},"content":"      *","lastModifiedDate":"2022-02-27"},{"lineNumber":152,"author":{"gitId":"HansHengGit"},"content":"      * @param inputCommand The user input","lastModifiedDate":"2022-02-27"},{"lineNumber":153,"author":{"gitId":"HansHengGit"},"content":"      * @return The keyword the user wants to find","lastModifiedDate":"2022-02-27"},{"lineNumber":154,"author":{"gitId":"HansHengGit"},"content":"      * @throws IndexOutOfBoundsException If the keyword is empty","lastModifiedDate":"2022-02-27"},{"lineNumber":155,"author":{"gitId":"HansHengGit"},"content":"      */","lastModifiedDate":"2022-02-27"},{"lineNumber":156,"author":{"gitId":"HansHengGit"},"content":"    public String getKeywordFromString(String inputCommand) {","lastModifiedDate":"2022-02-25"},{"lineNumber":157,"author":{"gitId":"HansHengGit"},"content":"        try {","lastModifiedDate":"2022-02-27"},{"lineNumber":158,"author":{"gitId":"HansHengGit"},"content":"            String[] commandArr \u003d inputCommand.split(\" \");","lastModifiedDate":"2022-02-25"},{"lineNumber":159,"author":{"gitId":"HansHengGit"},"content":"            return commandArr[1];","lastModifiedDate":"2022-02-25"},{"lineNumber":160,"author":{"gitId":"HansHengGit"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2022-02-27"},{"lineNumber":161,"author":{"gitId":"HansHengGit"},"content":"            ui.printInvalidKeywordError();","lastModifiedDate":"2022-02-27"},{"lineNumber":162,"author":{"gitId":"HansHengGit"},"content":"        }","lastModifiedDate":"2022-02-27"},{"lineNumber":163,"author":{"gitId":"HansHengGit"},"content":"        return \"\";","lastModifiedDate":"2022-02-27"},{"lineNumber":164,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":165,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":166,"author":{"gitId":"HansHengGit"},"content":"    public LocalDate parseDateFormatFromString(String dateInString)  {","lastModifiedDate":"2022-02-25"},{"lineNumber":167,"author":{"gitId":"HansHengGit"},"content":"        LocalDate date \u003d LocalDate.now();","lastModifiedDate":"2022-02-25"},{"lineNumber":168,"author":{"gitId":"HansHengGit"},"content":"        try {","lastModifiedDate":"2022-02-25"},{"lineNumber":169,"author":{"gitId":"HansHengGit"},"content":"            date \u003d LocalDate.parse(dateInString.trim());","lastModifiedDate":"2022-02-25"},{"lineNumber":170,"author":{"gitId":"HansHengGit"},"content":"        } catch (DateTimeParseException invalidDate) {","lastModifiedDate":"2022-02-25"},{"lineNumber":171,"author":{"gitId":"HansHengGit"},"content":"            ui.printInvalidDateException();","lastModifiedDate":"2022-02-25"},{"lineNumber":172,"author":{"gitId":"HansHengGit"},"content":"        }","lastModifiedDate":"2022-02-25"},{"lineNumber":173,"author":{"gitId":"HansHengGit"},"content":"        return date;","lastModifiedDate":"2022-02-25"},{"lineNumber":174,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":175,"author":{"gitId":"HansHengGit"},"content":"}","lastModifiedDate":"2022-02-25"}],"authorContributionMap":{"HansHengGit":175}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HansHengGit"},"content":"package duke;","lastModifiedDate":"2022-02-25"},{"lineNumber":2,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":3,"author":{"gitId":"HansHengGit"},"content":"import duke.task.Deadline;","lastModifiedDate":"2022-02-25"},{"lineNumber":4,"author":{"gitId":"HansHengGit"},"content":"import duke.task.Event;","lastModifiedDate":"2022-02-25"},{"lineNumber":5,"author":{"gitId":"HansHengGit"},"content":"import duke.task.Task;","lastModifiedDate":"2022-02-25"},{"lineNumber":6,"author":{"gitId":"HansHengGit"},"content":"import duke.task.ToDo;","lastModifiedDate":"2022-02-25"},{"lineNumber":7,"author":{"gitId":"HansHengGit"},"content":"import java.io.File;","lastModifiedDate":"2022-02-25"},{"lineNumber":8,"author":{"gitId":"HansHengGit"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2022-02-25"},{"lineNumber":9,"author":{"gitId":"HansHengGit"},"content":"import java.io.FileWriter;","lastModifiedDate":"2022-02-25"},{"lineNumber":10,"author":{"gitId":"HansHengGit"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-25"},{"lineNumber":11,"author":{"gitId":"HansHengGit"},"content":"import java.nio.charset.Charset;","lastModifiedDate":"2022-02-25"},{"lineNumber":12,"author":{"gitId":"HansHengGit"},"content":"import java.nio.file.Files;","lastModifiedDate":"2022-02-25"},{"lineNumber":13,"author":{"gitId":"HansHengGit"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-02-25"},{"lineNumber":14,"author":{"gitId":"HansHengGit"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-25"},{"lineNumber":15,"author":{"gitId":"HansHengGit"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-02-25"},{"lineNumber":16,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":17,"author":{"gitId":"HansHengGit"},"content":"/**","lastModifiedDate":"2022-02-27"},{"lineNumber":18,"author":{"gitId":"HansHengGit"},"content":" * Deals with loading tasks from the local file and saving","lastModifiedDate":"2022-02-27"},{"lineNumber":19,"author":{"gitId":"HansHengGit"},"content":" * tasks in the file","lastModifiedDate":"2022-02-27"},{"lineNumber":20,"author":{"gitId":"HansHengGit"},"content":" */","lastModifiedDate":"2022-02-27"},{"lineNumber":21,"author":{"gitId":"HansHengGit"},"content":"public class Storage {","lastModifiedDate":"2022-02-25"},{"lineNumber":22,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":23,"author":{"gitId":"HansHengGit"},"content":"    private static File dataFile;","lastModifiedDate":"2022-02-25"},{"lineNumber":24,"author":{"gitId":"HansHengGit"},"content":"    public static final String COMMAND_EVENT \u003d \"event\";","lastModifiedDate":"2022-02-25"},{"lineNumber":25,"author":{"gitId":"HansHengGit"},"content":"    public static final String COMMAND_DEADLINE \u003d \"deadline\";","lastModifiedDate":"2022-02-25"},{"lineNumber":26,"author":{"gitId":"HansHengGit"},"content":"    public static final String COMMAND_TODO \u003d \"todo\";","lastModifiedDate":"2022-02-25"},{"lineNumber":27,"author":{"gitId":"HansHengGit"},"content":"    public static final char TYPE_EVENT \u003d \u0027E\u0027;","lastModifiedDate":"2022-02-25"},{"lineNumber":28,"author":{"gitId":"HansHengGit"},"content":"    public static final char TYPE_DEADLINE \u003d \u0027D\u0027;","lastModifiedDate":"2022-02-25"},{"lineNumber":29,"author":{"gitId":"HansHengGit"},"content":"    public static final char TYPE_TODO \u003d \u0027T\u0027;","lastModifiedDate":"2022-02-25"},{"lineNumber":30,"author":{"gitId":"HansHengGit"},"content":"    private static String[] datesArray;","lastModifiedDate":"2022-02-25"},{"lineNumber":31,"author":{"gitId":"HansHengGit"},"content":"    private static String[] eventsArray;","lastModifiedDate":"2022-02-25"},{"lineNumber":32,"author":{"gitId":"HansHengGit"},"content":"    private static ArrayList\u003cTask\u003e allTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-02-25"},{"lineNumber":33,"author":{"gitId":"HansHengGit"},"content":"    private static Ui ui;","lastModifiedDate":"2022-02-25"},{"lineNumber":34,"author":{"gitId":"HansHengGit"},"content":"    private static Parser parser;","lastModifiedDate":"2022-02-25"},{"lineNumber":35,"author":{"gitId":"HansHengGit"},"content":"    private static int itemNumber;","lastModifiedDate":"2022-02-27"},{"lineNumber":36,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":37,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":38,"author":{"gitId":"HansHengGit"},"content":"     * Gets the number of items loaded from the file.","lastModifiedDate":"2022-02-27"},{"lineNumber":39,"author":{"gitId":"HansHengGit"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":40,"author":{"gitId":"HansHengGit"},"content":"     * @return The number of items in the list loaded from the file","lastModifiedDate":"2022-02-27"},{"lineNumber":41,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":42,"author":{"gitId":"HansHengGit"},"content":"    public static int getItemNumber() {","lastModifiedDate":"2022-02-27"},{"lineNumber":43,"author":{"gitId":"HansHengGit"},"content":"        return itemNumber;","lastModifiedDate":"2022-02-25"},{"lineNumber":44,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":45,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":46,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":47,"author":{"gitId":"HansHengGit"},"content":"     * Creates a storage object to handle reading of the file,","lastModifiedDate":"2022-02-27"},{"lineNumber":48,"author":{"gitId":"HansHengGit"},"content":"     * loading of tasks from the file and saving the tasks to the file.","lastModifiedDate":"2022-02-27"},{"lineNumber":49,"author":{"gitId":"HansHengGit"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":50,"author":{"gitId":"HansHengGit"},"content":"     * @param fileName The path of the local file","lastModifiedDate":"2022-02-27"},{"lineNumber":51,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":52,"author":{"gitId":"HansHengGit"},"content":"    public Storage(String fileName) {","lastModifiedDate":"2022-02-25"},{"lineNumber":53,"author":{"gitId":"HansHengGit"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2022-02-25"},{"lineNumber":54,"author":{"gitId":"HansHengGit"},"content":"        parser \u003d new Parser();","lastModifiedDate":"2022-02-25"},{"lineNumber":55,"author":{"gitId":"HansHengGit"},"content":"        dataFile \u003d new File(fileName);","lastModifiedDate":"2022-02-25"},{"lineNumber":56,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":57,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":58,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":59,"author":{"gitId":"HansHengGit"},"content":"     * Checks if the directory and file exists, else create one.","lastModifiedDate":"2022-02-27"},{"lineNumber":60,"author":{"gitId":"HansHengGit"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":61,"author":{"gitId":"HansHengGit"},"content":"     * @throws IOException If there is an error creating the file","lastModifiedDate":"2022-02-27"},{"lineNumber":62,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":63,"author":{"gitId":"HansHengGit"},"content":"    public void createFile() throws IOException {","lastModifiedDate":"2022-02-25"},{"lineNumber":64,"author":{"gitId":"HansHengGit"},"content":"        File directory \u003d new File(\"data\");","lastModifiedDate":"2022-02-25"},{"lineNumber":65,"author":{"gitId":"HansHengGit"},"content":"        try {","lastModifiedDate":"2022-02-25"},{"lineNumber":66,"author":{"gitId":"HansHengGit"},"content":"            if (!directory.exists()) {","lastModifiedDate":"2022-02-25"},{"lineNumber":67,"author":{"gitId":"HansHengGit"},"content":"                directory.mkdir();","lastModifiedDate":"2022-02-25"},{"lineNumber":68,"author":{"gitId":"HansHengGit"},"content":"                ui.printCreateDirectoryMessage();","lastModifiedDate":"2022-02-25"},{"lineNumber":69,"author":{"gitId":"HansHengGit"},"content":"            }","lastModifiedDate":"2022-02-25"},{"lineNumber":70,"author":{"gitId":"HansHengGit"},"content":"            if (dataFile.createNewFile()) {","lastModifiedDate":"2022-02-25"},{"lineNumber":71,"author":{"gitId":"HansHengGit"},"content":"                ui.newFileCreatedMessage();","lastModifiedDate":"2022-02-25"},{"lineNumber":72,"author":{"gitId":"HansHengGit"},"content":"            } else {","lastModifiedDate":"2022-02-25"},{"lineNumber":73,"author":{"gitId":"HansHengGit"},"content":"                ui.printFileExistsMessage();","lastModifiedDate":"2022-02-25"},{"lineNumber":74,"author":{"gitId":"HansHengGit"},"content":"            }","lastModifiedDate":"2022-02-25"},{"lineNumber":75,"author":{"gitId":"HansHengGit"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-25"},{"lineNumber":76,"author":{"gitId":"HansHengGit"},"content":"            ui.printCreateFileError();","lastModifiedDate":"2022-02-25"},{"lineNumber":77,"author":{"gitId":"HansHengGit"},"content":"        }","lastModifiedDate":"2022-02-25"},{"lineNumber":78,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":79,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":80,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":81,"author":{"gitId":"HansHengGit"},"content":"     * Reads the tasks from the file and returns the list","lastModifiedDate":"2022-02-27"},{"lineNumber":82,"author":{"gitId":"HansHengGit"},"content":"     * of tasks.","lastModifiedDate":"2022-02-27"},{"lineNumber":83,"author":{"gitId":"HansHengGit"},"content":"     * @return The list of tasks read from the file","lastModifiedDate":"2022-02-27"},{"lineNumber":84,"author":{"gitId":"HansHengGit"},"content":"     * @throws IOException If the file is not found","lastModifiedDate":"2022-02-27"},{"lineNumber":85,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":86,"author":{"gitId":"HansHengGit"},"content":"    private ArrayList readFile () throws IOException {","lastModifiedDate":"2022-02-25"},{"lineNumber":87,"author":{"gitId":"HansHengGit"},"content":"        if (!dataFile.exists()) {","lastModifiedDate":"2022-02-25"},{"lineNumber":88,"author":{"gitId":"HansHengGit"},"content":"            throw new FileNotFoundException();","lastModifiedDate":"2022-02-25"},{"lineNumber":89,"author":{"gitId":"HansHengGit"},"content":"        }","lastModifiedDate":"2022-02-25"},{"lineNumber":90,"author":{"gitId":"HansHengGit"},"content":"        if (dataFile.length() \u003d\u003d 0) {","lastModifiedDate":"2022-02-25"},{"lineNumber":91,"author":{"gitId":"HansHengGit"},"content":"            ui.printFileEmptyMessage();","lastModifiedDate":"2022-02-25"},{"lineNumber":92,"author":{"gitId":"HansHengGit"},"content":"        }","lastModifiedDate":"2022-02-25"},{"lineNumber":93,"author":{"gitId":"HansHengGit"},"content":"        ArrayList\u003cString\u003e dataItems \u003d (ArrayList) Files.readAllLines(dataFile.toPath(), Charset.defaultCharset());","lastModifiedDate":"2022-02-25"},{"lineNumber":94,"author":{"gitId":"HansHengGit"},"content":"        return dataItems;","lastModifiedDate":"2022-02-25"},{"lineNumber":95,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":96,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":97,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":98,"author":{"gitId":"HansHengGit"},"content":"     * Loads the data from the read file into the task list.","lastModifiedDate":"2022-02-27"},{"lineNumber":99,"author":{"gitId":"HansHengGit"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":100,"author":{"gitId":"HansHengGit"},"content":"     * @return The task list loaded from the file","lastModifiedDate":"2022-02-27"},{"lineNumber":101,"author":{"gitId":"HansHengGit"},"content":"     * @throws IOException If the file is not found","lastModifiedDate":"2022-02-27"},{"lineNumber":102,"author":{"gitId":"HansHengGit"},"content":"     * @throws DukeException If there is an error parsing the file contents","lastModifiedDate":"2022-02-27"},{"lineNumber":103,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":104,"author":{"gitId":"HansHengGit"},"content":"    public ArrayList\u003cTask\u003e loadData() throws IOException, DukeException{","lastModifiedDate":"2022-02-27"},{"lineNumber":105,"author":{"gitId":"HansHengGit"},"content":"        ArrayList\u003cTask\u003e taskList \u003d null;","lastModifiedDate":"2022-02-25"},{"lineNumber":106,"author":{"gitId":"HansHengGit"},"content":"        try {","lastModifiedDate":"2022-02-25"},{"lineNumber":107,"author":{"gitId":"HansHengGit"},"content":"            ArrayList\u003cString\u003e dataItems \u003d readFile();","lastModifiedDate":"2022-02-25"},{"lineNumber":108,"author":{"gitId":"HansHengGit"},"content":"            taskList \u003d parse(dataItems);","lastModifiedDate":"2022-02-25"},{"lineNumber":109,"author":{"gitId":"HansHengGit"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-25"},{"lineNumber":110,"author":{"gitId":"HansHengGit"},"content":"            e.printStackTrace();","lastModifiedDate":"2022-02-25"},{"lineNumber":111,"author":{"gitId":"HansHengGit"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-02-25"},{"lineNumber":112,"author":{"gitId":"HansHengGit"},"content":"            e.printStackTrace();","lastModifiedDate":"2022-02-25"},{"lineNumber":113,"author":{"gitId":"HansHengGit"},"content":"        }","lastModifiedDate":"2022-02-25"},{"lineNumber":114,"author":{"gitId":"HansHengGit"},"content":"        return taskList;","lastModifiedDate":"2022-02-25"},{"lineNumber":115,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":116,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":117,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":118,"author":{"gitId":"HansHengGit"},"content":"     * Loads individual task into the task list by checking the","lastModifiedDate":"2022-02-27"},{"lineNumber":119,"author":{"gitId":"HansHengGit"},"content":"     * task type.","lastModifiedDate":"2022-02-27"},{"lineNumber":120,"author":{"gitId":"HansHengGit"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":121,"author":{"gitId":"HansHengGit"},"content":"     * @param inCommand The line read from the file","lastModifiedDate":"2022-02-27"},{"lineNumber":122,"author":{"gitId":"HansHengGit"},"content":"     * @throws DukeException If there is an error adding a task","lastModifiedDate":"2022-02-27"},{"lineNumber":123,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":124,"author":{"gitId":"HansHengGit"},"content":"    private static void loadTask(String inCommand) throws DukeException {","lastModifiedDate":"2022-02-25"},{"lineNumber":125,"author":{"gitId":"HansHengGit"},"content":"        String taskType \u003d parser.parseCommandFromString(inCommand);","lastModifiedDate":"2022-02-25"},{"lineNumber":126,"author":{"gitId":"HansHengGit"},"content":"        String[] taskDescription \u003d parser.parseTaskDescriptionFromString(inCommand);","lastModifiedDate":"2022-02-25"},{"lineNumber":127,"author":{"gitId":"HansHengGit"},"content":"        switch (taskType) {","lastModifiedDate":"2022-02-25"},{"lineNumber":128,"author":{"gitId":"HansHengGit"},"content":"        case COMMAND_TODO:","lastModifiedDate":"2022-02-25"},{"lineNumber":129,"author":{"gitId":"HansHengGit"},"content":"            loadToDoEntry(taskDescription);","lastModifiedDate":"2022-02-25"},{"lineNumber":130,"author":{"gitId":"HansHengGit"},"content":"            break;","lastModifiedDate":"2022-02-25"},{"lineNumber":131,"author":{"gitId":"HansHengGit"},"content":"        case COMMAND_DEADLINE:","lastModifiedDate":"2022-02-25"},{"lineNumber":132,"author":{"gitId":"HansHengGit"},"content":"            loadDeadLineEntry(taskDescription);","lastModifiedDate":"2022-02-25"},{"lineNumber":133,"author":{"gitId":"HansHengGit"},"content":"            break;","lastModifiedDate":"2022-02-25"},{"lineNumber":134,"author":{"gitId":"HansHengGit"},"content":"        case COMMAND_EVENT:","lastModifiedDate":"2022-02-25"},{"lineNumber":135,"author":{"gitId":"HansHengGit"},"content":"            loadEventEntry(taskDescription);","lastModifiedDate":"2022-02-25"},{"lineNumber":136,"author":{"gitId":"HansHengGit"},"content":"            break;","lastModifiedDate":"2022-02-25"},{"lineNumber":137,"author":{"gitId":"HansHengGit"},"content":"        default:","lastModifiedDate":"2022-02-25"},{"lineNumber":138,"author":{"gitId":"HansHengGit"},"content":"            ui.printUnknownCommand();","lastModifiedDate":"2022-02-25"},{"lineNumber":139,"author":{"gitId":"HansHengGit"},"content":"            break;","lastModifiedDate":"2022-02-25"},{"lineNumber":140,"author":{"gitId":"HansHengGit"},"content":"        }","lastModifiedDate":"2022-02-25"},{"lineNumber":141,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":142,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":143,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":144,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":145,"author":{"gitId":"HansHengGit"},"content":"     * Loads the event task type into the task list.","lastModifiedDate":"2022-02-27"},{"lineNumber":146,"author":{"gitId":"HansHengGit"},"content":"     * @param taskDescription The event task description from the file line","lastModifiedDate":"2022-02-27"},{"lineNumber":147,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":148,"author":{"gitId":"HansHengGit"},"content":"    private static void loadEventEntry(String[] taskDescription) {","lastModifiedDate":"2022-02-25"},{"lineNumber":149,"author":{"gitId":"HansHengGit"},"content":"        LocalDate eventDate;","lastModifiedDate":"2022-02-27"},{"lineNumber":150,"author":{"gitId":"HansHengGit"},"content":"        try {","lastModifiedDate":"2022-02-25"},{"lineNumber":151,"author":{"gitId":"HansHengGit"},"content":"            eventsArray \u003d parser.parseEventsActionFromDescription(taskDescription);","lastModifiedDate":"2022-02-27"},{"lineNumber":152,"author":{"gitId":"HansHengGit"},"content":"            eventDate \u003d parser.parseDateFormatFromString(eventsArray[1]);","lastModifiedDate":"2022-02-27"},{"lineNumber":153,"author":{"gitId":"HansHengGit"},"content":"            if (isEventFormatInvalid(eventsArray)) {","lastModifiedDate":"2022-02-25"},{"lineNumber":154,"author":{"gitId":"HansHengGit"},"content":"                throw new DukeException();","lastModifiedDate":"2022-02-25"},{"lineNumber":155,"author":{"gitId":"HansHengGit"},"content":"            }","lastModifiedDate":"2022-02-25"},{"lineNumber":156,"author":{"gitId":"HansHengGit"},"content":"            allTasks.add(new Event(eventsArray[0], eventDate));","lastModifiedDate":"2022-02-27"},{"lineNumber":157,"author":{"gitId":"HansHengGit"},"content":"            itemNumber++;","lastModifiedDate":"2022-02-25"},{"lineNumber":158,"author":{"gitId":"HansHengGit"},"content":"        } catch (ArrayIndexOutOfBoundsException deadlineEmpty) {","lastModifiedDate":"2022-02-25"},{"lineNumber":159,"author":{"gitId":"HansHengGit"},"content":"            ui.printEventEmptyException();","lastModifiedDate":"2022-02-25"},{"lineNumber":160,"author":{"gitId":"HansHengGit"},"content":"        } catch (DukeException invalidEventInput) {","lastModifiedDate":"2022-02-25"},{"lineNumber":161,"author":{"gitId":"HansHengGit"},"content":"            ui.printInvalidEventException();","lastModifiedDate":"2022-02-25"},{"lineNumber":162,"author":{"gitId":"HansHengGit"},"content":"        }","lastModifiedDate":"2022-02-25"},{"lineNumber":163,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":164,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":165,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":166,"author":{"gitId":"HansHengGit"},"content":"     * Checks if the action parameter or the event date parameter is empty.","lastModifiedDate":"2022-02-27"},{"lineNumber":167,"author":{"gitId":"HansHengGit"},"content":"     * @param eventsArray the event description","lastModifiedDate":"2022-02-27"},{"lineNumber":168,"author":{"gitId":"HansHengGit"},"content":"     * @return True if any parameter is empty, false otherwise","lastModifiedDate":"2022-02-27"},{"lineNumber":169,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":170,"author":{"gitId":"HansHengGit"},"content":"    private static boolean isEventFormatInvalid(String[] eventsArray) {","lastModifiedDate":"2022-02-25"},{"lineNumber":171,"author":{"gitId":"HansHengGit"},"content":"        return eventsArray[1].length() \u003d\u003d 0 || eventsArray[0].length() \u003d\u003d 0;","lastModifiedDate":"2022-02-25"},{"lineNumber":172,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":173,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":174,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":175,"author":{"gitId":"HansHengGit"},"content":"     * Loads the deadline task type into the task list.","lastModifiedDate":"2022-02-27"},{"lineNumber":176,"author":{"gitId":"HansHengGit"},"content":"     * @param taskDescription The deadline task description from the file line","lastModifiedDate":"2022-02-27"},{"lineNumber":177,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":178,"author":{"gitId":"HansHengGit"},"content":"    private static void loadDeadLineEntry(String[] taskDescription) {","lastModifiedDate":"2022-02-25"},{"lineNumber":179,"author":{"gitId":"HansHengGit"},"content":"        LocalDate deadLineDate;","lastModifiedDate":"2022-02-25"},{"lineNumber":180,"author":{"gitId":"HansHengGit"},"content":"        try {","lastModifiedDate":"2022-02-25"},{"lineNumber":181,"author":{"gitId":"HansHengGit"},"content":"            datesArray \u003d parser.parseDeadLineActionFromDescription(taskDescription);","lastModifiedDate":"2022-02-25"},{"lineNumber":182,"author":{"gitId":"HansHengGit"},"content":"            deadLineDate \u003d parser.parseDateFormatFromString(datesArray[1]);","lastModifiedDate":"2022-02-25"},{"lineNumber":183,"author":{"gitId":"HansHengGit"},"content":"            if (isDateFormatInvalid(datesArray)) {","lastModifiedDate":"2022-02-25"},{"lineNumber":184,"author":{"gitId":"HansHengGit"},"content":"                throw new DukeException();","lastModifiedDate":"2022-02-25"},{"lineNumber":185,"author":{"gitId":"HansHengGit"},"content":"            }","lastModifiedDate":"2022-02-25"},{"lineNumber":186,"author":{"gitId":"HansHengGit"},"content":"            allTasks.add(new Deadline(datesArray[0], deadLineDate));","lastModifiedDate":"2022-02-25"},{"lineNumber":187,"author":{"gitId":"HansHengGit"},"content":"            itemNumber++;","lastModifiedDate":"2022-02-25"},{"lineNumber":188,"author":{"gitId":"HansHengGit"},"content":"        } catch (ArrayIndexOutOfBoundsException deadLineEmpty) {","lastModifiedDate":"2022-02-25"},{"lineNumber":189,"author":{"gitId":"HansHengGit"},"content":"            ui.printDeadLineEmptyException();","lastModifiedDate":"2022-02-25"},{"lineNumber":190,"author":{"gitId":"HansHengGit"},"content":"        } catch (DukeException invalidDateInput) {","lastModifiedDate":"2022-02-25"},{"lineNumber":191,"author":{"gitId":"HansHengGit"},"content":"            ui.printInvalidDeadLineException();","lastModifiedDate":"2022-02-25"},{"lineNumber":192,"author":{"gitId":"HansHengGit"},"content":"        }","lastModifiedDate":"2022-02-25"},{"lineNumber":193,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":194,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":195,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":196,"author":{"gitId":"HansHengGit"},"content":"     * Checks if the action parameter or the due date parameter is empty","lastModifiedDate":"2022-02-27"},{"lineNumber":197,"author":{"gitId":"HansHengGit"},"content":"     * @param datesArray the deadline description","lastModifiedDate":"2022-02-27"},{"lineNumber":198,"author":{"gitId":"HansHengGit"},"content":"     * @return True if any parameter is empty, false otherwise","lastModifiedDate":"2022-02-27"},{"lineNumber":199,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":200,"author":{"gitId":"HansHengGit"},"content":"    private static boolean isDateFormatInvalid(String[] datesArray) {","lastModifiedDate":"2022-02-25"},{"lineNumber":201,"author":{"gitId":"HansHengGit"},"content":"        return datesArray[1].length() \u003d\u003d 0 || datesArray[0].length() \u003d\u003d 0;","lastModifiedDate":"2022-02-25"},{"lineNumber":202,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":203,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":204,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":205,"author":{"gitId":"HansHengGit"},"content":"     * Loads the todo task type into the task list.","lastModifiedDate":"2022-02-27"},{"lineNumber":206,"author":{"gitId":"HansHengGit"},"content":"     * @param taskDescription The todo task description from the file line","lastModifiedDate":"2022-02-27"},{"lineNumber":207,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":208,"author":{"gitId":"HansHengGit"},"content":"    private static void loadToDoEntry(String[] taskDescription) {","lastModifiedDate":"2022-02-27"},{"lineNumber":209,"author":{"gitId":"HansHengGit"},"content":"        try {","lastModifiedDate":"2022-02-25"},{"lineNumber":210,"author":{"gitId":"HansHengGit"},"content":"            allTasks.add(new ToDo(taskDescription[1]));","lastModifiedDate":"2022-02-27"},{"lineNumber":211,"author":{"gitId":"HansHengGit"},"content":"            itemNumber++;","lastModifiedDate":"2022-02-25"},{"lineNumber":212,"author":{"gitId":"HansHengGit"},"content":"        } catch (IndexOutOfBoundsException todoEmpty) {","lastModifiedDate":"2022-02-25"},{"lineNumber":213,"author":{"gitId":"HansHengGit"},"content":"            ui.printTodoEmptyException();","lastModifiedDate":"2022-02-25"},{"lineNumber":214,"author":{"gitId":"HansHengGit"},"content":"        }","lastModifiedDate":"2022-02-25"},{"lineNumber":215,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":216,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":217,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":218,"author":{"gitId":"HansHengGit"},"content":"     * Checks if the task has been marked done in the file.","lastModifiedDate":"2022-02-27"},{"lineNumber":219,"author":{"gitId":"HansHengGit"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":220,"author":{"gitId":"HansHengGit"},"content":"     * @param checkDone The string of the done component in the line","lastModifiedDate":"2022-02-27"},{"lineNumber":221,"author":{"gitId":"HansHengGit"},"content":"     * @return True if task was already marked done in the file, false otherwise","lastModifiedDate":"2022-02-27"},{"lineNumber":222,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":223,"author":{"gitId":"HansHengGit"},"content":"    private static boolean checkIfDone(String checkDone) {","lastModifiedDate":"2022-02-25"},{"lineNumber":224,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":225,"author":{"gitId":"HansHengGit"},"content":"        if (checkDone.equals(\"true\")) {","lastModifiedDate":"2022-02-25"},{"lineNumber":226,"author":{"gitId":"HansHengGit"},"content":"            return true;","lastModifiedDate":"2022-02-25"},{"lineNumber":227,"author":{"gitId":"HansHengGit"},"content":"        }","lastModifiedDate":"2022-02-25"},{"lineNumber":228,"author":{"gitId":"HansHengGit"},"content":"        else {","lastModifiedDate":"2022-02-25"},{"lineNumber":229,"author":{"gitId":"HansHengGit"},"content":"            return false;","lastModifiedDate":"2022-02-25"},{"lineNumber":230,"author":{"gitId":"HansHengGit"},"content":"        }","lastModifiedDate":"2022-02-25"},{"lineNumber":231,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":232,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":233,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":234,"author":{"gitId":"HansHengGit"},"content":"     * Takes in all the lines from the file and parse the information","lastModifiedDate":"2022-02-27"},{"lineNumber":235,"author":{"gitId":"HansHengGit"},"content":"     * to distinguish each task type and its description.","lastModifiedDate":"2022-02-27"},{"lineNumber":236,"author":{"gitId":"HansHengGit"},"content":"     * @param dataItems The list of lines in the file","lastModifiedDate":"2022-02-27"},{"lineNumber":237,"author":{"gitId":"HansHengGit"},"content":"     * @return The task list consisting of all the task saved in the file","lastModifiedDate":"2022-02-27"},{"lineNumber":238,"author":{"gitId":"HansHengGit"},"content":"     * @throws DukeException If there is an error adding a task","lastModifiedDate":"2022-02-27"},{"lineNumber":239,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":240,"author":{"gitId":"HansHengGit"},"content":"    private ArrayList\u003cTask\u003e parse(ArrayList\u003cString\u003e dataItems) throws DukeException {","lastModifiedDate":"2022-02-25"},{"lineNumber":241,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":242,"author":{"gitId":"HansHengGit"},"content":"        String[] fileLineArray;","lastModifiedDate":"2022-02-25"},{"lineNumber":243,"author":{"gitId":"HansHengGit"},"content":"        char inputTask;","lastModifiedDate":"2022-02-25"},{"lineNumber":244,"author":{"gitId":"HansHengGit"},"content":"        for (String line : dataItems) {","lastModifiedDate":"2022-02-25"},{"lineNumber":245,"author":{"gitId":"HansHengGit"},"content":"            fileLineArray \u003d parser.parseLineFromFile(line);","lastModifiedDate":"2022-02-25"},{"lineNumber":246,"author":{"gitId":"HansHengGit"},"content":"            inputTask \u003d fileLineArray[0].charAt(0);","lastModifiedDate":"2022-02-25"},{"lineNumber":247,"author":{"gitId":"HansHengGit"},"content":"            switch (inputTask) {","lastModifiedDate":"2022-02-25"},{"lineNumber":248,"author":{"gitId":"HansHengGit"},"content":"            case TYPE_TODO:","lastModifiedDate":"2022-02-25"},{"lineNumber":249,"author":{"gitId":"HansHengGit"},"content":"                loadTask(\"todo \" + fileLineArray[2]);","lastModifiedDate":"2022-02-25"},{"lineNumber":250,"author":{"gitId":"HansHengGit"},"content":"                break;","lastModifiedDate":"2022-02-25"},{"lineNumber":251,"author":{"gitId":"HansHengGit"},"content":"            case TYPE_DEADLINE:","lastModifiedDate":"2022-02-25"},{"lineNumber":252,"author":{"gitId":"HansHengGit"},"content":"                loadTask(\"deadline \" + fileLineArray[2]);","lastModifiedDate":"2022-02-25"},{"lineNumber":253,"author":{"gitId":"HansHengGit"},"content":"                break;","lastModifiedDate":"2022-02-25"},{"lineNumber":254,"author":{"gitId":"HansHengGit"},"content":"            case TYPE_EVENT:","lastModifiedDate":"2022-02-25"},{"lineNumber":255,"author":{"gitId":"HansHengGit"},"content":"                loadTask(\"event \" + fileLineArray[2]);","lastModifiedDate":"2022-02-25"},{"lineNumber":256,"author":{"gitId":"HansHengGit"},"content":"            }","lastModifiedDate":"2022-02-25"},{"lineNumber":257,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":258,"author":{"gitId":"HansHengGit"},"content":"            allTasks.get(itemNumber - 1).setDone(checkIfDone(fileLineArray[1]));","lastModifiedDate":"2022-02-25"},{"lineNumber":259,"author":{"gitId":"HansHengGit"},"content":"        }","lastModifiedDate":"2022-02-25"},{"lineNumber":260,"author":{"gitId":"HansHengGit"},"content":"        return allTasks;","lastModifiedDate":"2022-02-25"},{"lineNumber":261,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":262,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":263,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":264,"author":{"gitId":"HansHengGit"},"content":"     * Saves the current state of the list to the file.","lastModifiedDate":"2022-02-27"},{"lineNumber":265,"author":{"gitId":"HansHengGit"},"content":"     * @throws IOException If there is error opening the file","lastModifiedDate":"2022-02-27"},{"lineNumber":266,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":267,"author":{"gitId":"HansHengGit"},"content":"    public static void saveTaskList() throws IOException {","lastModifiedDate":"2022-02-25"},{"lineNumber":268,"author":{"gitId":"HansHengGit"},"content":"        FileWriter fw \u003d new FileWriter(dataFile);","lastModifiedDate":"2022-02-25"},{"lineNumber":269,"author":{"gitId":"HansHengGit"},"content":"        ArrayList\u003cTask\u003e copyOfTasks \u003d TaskList.getTaskList();","lastModifiedDate":"2022-02-25"},{"lineNumber":270,"author":{"gitId":"HansHengGit"},"content":"        for (Task a : copyOfTasks) {","lastModifiedDate":"2022-02-25"},{"lineNumber":271,"author":{"gitId":"HansHengGit"},"content":"            fw.write(String.valueOf(a.getTaskType()) + \"-\" + String.valueOf(a.isDone()) + \"-\"","lastModifiedDate":"2022-02-25"},{"lineNumber":272,"author":{"gitId":"HansHengGit"},"content":"                    + a.saveDescription() + a.saveAdditionalInfo() + System.lineSeparator());","lastModifiedDate":"2022-02-25"},{"lineNumber":273,"author":{"gitId":"HansHengGit"},"content":"        }","lastModifiedDate":"2022-02-25"},{"lineNumber":274,"author":{"gitId":"HansHengGit"},"content":"        fw.close();","lastModifiedDate":"2022-02-25"},{"lineNumber":275,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":276,"author":{"gitId":"HansHengGit"},"content":"}","lastModifiedDate":"2022-02-25"}],"authorContributionMap":{"HansHengGit":276}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HansHengGit"},"content":"package duke;","lastModifiedDate":"2022-02-25"},{"lineNumber":2,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":3,"author":{"gitId":"HansHengGit"},"content":"import duke.task.Deadline;","lastModifiedDate":"2022-02-25"},{"lineNumber":4,"author":{"gitId":"HansHengGit"},"content":"import duke.task.Event;","lastModifiedDate":"2022-02-25"},{"lineNumber":5,"author":{"gitId":"HansHengGit"},"content":"import duke.task.Task;","lastModifiedDate":"2022-02-25"},{"lineNumber":6,"author":{"gitId":"HansHengGit"},"content":"import duke.task.ToDo;","lastModifiedDate":"2022-02-25"},{"lineNumber":7,"author":{"gitId":"HansHengGit"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-25"},{"lineNumber":8,"author":{"gitId":"HansHengGit"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-25"},{"lineNumber":9,"author":{"gitId":"HansHengGit"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-02-25"},{"lineNumber":10,"author":{"gitId":"HansHengGit"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-02-25"},{"lineNumber":11,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":12,"author":{"gitId":"HansHengGit"},"content":"/**","lastModifiedDate":"2022-02-27"},{"lineNumber":13,"author":{"gitId":"HansHengGit"},"content":" * Contains the list of tasks and performs commands","lastModifiedDate":"2022-02-27"},{"lineNumber":14,"author":{"gitId":"HansHengGit"},"content":" * operations.","lastModifiedDate":"2022-02-27"},{"lineNumber":15,"author":{"gitId":"HansHengGit"},"content":" */","lastModifiedDate":"2022-02-27"},{"lineNumber":16,"author":{"gitId":"HansHengGit"},"content":"public class TaskList {","lastModifiedDate":"2022-02-25"},{"lineNumber":17,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":18,"author":{"gitId":"HansHengGit"},"content":"    public static final String COMMAND_LIST \u003d \"list\";","lastModifiedDate":"2022-02-25"},{"lineNumber":19,"author":{"gitId":"HansHengGit"},"content":"    public static final String COMMAND_DELETE \u003d \"delete\";","lastModifiedDate":"2022-02-25"},{"lineNumber":20,"author":{"gitId":"HansHengGit"},"content":"    public static final String COMMAND_MARK \u003d \"mark\";","lastModifiedDate":"2022-02-25"},{"lineNumber":21,"author":{"gitId":"HansHengGit"},"content":"    public static final String COMMAND_UNMARK \u003d \"unmark\";","lastModifiedDate":"2022-02-25"},{"lineNumber":22,"author":{"gitId":"HansHengGit"},"content":"    public static final String COMMAND_BYE \u003d \"bye\";","lastModifiedDate":"2022-02-25"},{"lineNumber":23,"author":{"gitId":"HansHengGit"},"content":"    public static final String COMMAND_FIND \u003d \"find\";","lastModifiedDate":"2022-02-25"},{"lineNumber":24,"author":{"gitId":"HansHengGit"},"content":"    public static final String COMMAND_EVENT \u003d \"event\";","lastModifiedDate":"2022-02-25"},{"lineNumber":25,"author":{"gitId":"HansHengGit"},"content":"    public static final String COMMAND_DEADLINE \u003d \"deadline\";","lastModifiedDate":"2022-02-25"},{"lineNumber":26,"author":{"gitId":"HansHengGit"},"content":"    public static final String COMMAND_TODO \u003d \"todo\";","lastModifiedDate":"2022-02-25"},{"lineNumber":27,"author":{"gitId":"HansHengGit"},"content":"    private static Ui ui;","lastModifiedDate":"2022-02-25"},{"lineNumber":28,"author":{"gitId":"HansHengGit"},"content":"    private static Parser parser;","lastModifiedDate":"2022-02-25"},{"lineNumber":29,"author":{"gitId":"HansHengGit"},"content":"    private static ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-02-25"},{"lineNumber":30,"author":{"gitId":"HansHengGit"},"content":"    private static int itemNumber;","lastModifiedDate":"2022-02-25"},{"lineNumber":31,"author":{"gitId":"HansHengGit"},"content":"    private static String[] datesArray;","lastModifiedDate":"2022-02-25"},{"lineNumber":32,"author":{"gitId":"HansHengGit"},"content":"    private static String[] eventsArray;","lastModifiedDate":"2022-02-25"},{"lineNumber":33,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":34,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":35,"author":{"gitId":"HansHengGit"},"content":"     * Gets the task list stored in the task list object and returns","lastModifiedDate":"2022-02-27"},{"lineNumber":36,"author":{"gitId":"HansHengGit"},"content":"     * the list.","lastModifiedDate":"2022-02-27"},{"lineNumber":37,"author":{"gitId":"HansHengGit"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":38,"author":{"gitId":"HansHengGit"},"content":"     * @return The current task list","lastModifiedDate":"2022-02-27"},{"lineNumber":39,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":40,"author":{"gitId":"HansHengGit"},"content":"    public static ArrayList\u003cTask\u003e getTaskList() {","lastModifiedDate":"2022-02-25"},{"lineNumber":41,"author":{"gitId":"HansHengGit"},"content":"        return taskList;","lastModifiedDate":"2022-02-25"},{"lineNumber":42,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":43,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":44,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":45,"author":{"gitId":"HansHengGit"},"content":"     * Creates a new list of task object to store all the individual","lastModifiedDate":"2022-02-27"},{"lineNumber":46,"author":{"gitId":"HansHengGit"},"content":"     * tasks the user wants to store.","lastModifiedDate":"2022-02-27"},{"lineNumber":47,"author":{"gitId":"HansHengGit"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":48,"author":{"gitId":"HansHengGit"},"content":"     * @param newTaskList The task list loaded from the save local file","lastModifiedDate":"2022-02-27"},{"lineNumber":49,"author":{"gitId":"HansHengGit"},"content":"     * @param savedItemNumber The number of items in the list of the loaded saved local file","lastModifiedDate":"2022-02-27"},{"lineNumber":50,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":51,"author":{"gitId":"HansHengGit"},"content":"    public TaskList(ArrayList\u003cTask\u003e newTaskList, int savedItemNumber) {","lastModifiedDate":"2022-02-27"},{"lineNumber":52,"author":{"gitId":"HansHengGit"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2022-02-25"},{"lineNumber":53,"author":{"gitId":"HansHengGit"},"content":"        parser \u003d new Parser();","lastModifiedDate":"2022-02-25"},{"lineNumber":54,"author":{"gitId":"HansHengGit"},"content":"        this.taskList \u003d newTaskList;","lastModifiedDate":"2022-02-25"},{"lineNumber":55,"author":{"gitId":"HansHengGit"},"content":"        this.itemNumber \u003d savedItemNumber;","lastModifiedDate":"2022-02-25"},{"lineNumber":56,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":57,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":58,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":59,"author":{"gitId":"HansHengGit"},"content":"     * Takes in the user input string and checks the type of command the","lastModifiedDate":"2022-02-27"},{"lineNumber":60,"author":{"gitId":"HansHengGit"},"content":"     * user wants the program to execute and calls the relevant operation function.","lastModifiedDate":"2022-02-27"},{"lineNumber":61,"author":{"gitId":"HansHengGit"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":62,"author":{"gitId":"HansHengGit"},"content":"     * @param inputCommand The user input string","lastModifiedDate":"2022-02-27"},{"lineNumber":63,"author":{"gitId":"HansHengGit"},"content":"     * @throws DukeException If there is an error adding a task","lastModifiedDate":"2022-02-27"},{"lineNumber":64,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":65,"author":{"gitId":"HansHengGit"},"content":"    public static void executeCommand(String inputCommand) throws DukeException {","lastModifiedDate":"2022-02-27"},{"lineNumber":66,"author":{"gitId":"HansHengGit"},"content":"        String command \u003d parser.parseCommandFromString(inputCommand);","lastModifiedDate":"2022-02-25"},{"lineNumber":67,"author":{"gitId":"HansHengGit"},"content":"        switch (command) {","lastModifiedDate":"2022-02-25"},{"lineNumber":68,"author":{"gitId":"HansHengGit"},"content":"        case COMMAND_LIST:","lastModifiedDate":"2022-02-25"},{"lineNumber":69,"author":{"gitId":"HansHengGit"},"content":"            listAllEntry();","lastModifiedDate":"2022-02-25"},{"lineNumber":70,"author":{"gitId":"HansHengGit"},"content":"            break;","lastModifiedDate":"2022-02-25"},{"lineNumber":71,"author":{"gitId":"HansHengGit"},"content":"        case COMMAND_MARK:","lastModifiedDate":"2022-02-25"},{"lineNumber":72,"author":{"gitId":"HansHengGit"},"content":"            int markNum \u003d parser.parseMarkIndexFromString(inputCommand);","lastModifiedDate":"2022-02-25"},{"lineNumber":73,"author":{"gitId":"HansHengGit"},"content":"            markEntry(markNum);","lastModifiedDate":"2022-02-25"},{"lineNumber":74,"author":{"gitId":"HansHengGit"},"content":"            break;","lastModifiedDate":"2022-02-25"},{"lineNumber":75,"author":{"gitId":"HansHengGit"},"content":"        case COMMAND_UNMARK:","lastModifiedDate":"2022-02-25"},{"lineNumber":76,"author":{"gitId":"HansHengGit"},"content":"            int unMarkNum \u003d parser.parseUnMarkIndexFromString(inputCommand);","lastModifiedDate":"2022-02-25"},{"lineNumber":77,"author":{"gitId":"HansHengGit"},"content":"            unMarkEntry(unMarkNum);","lastModifiedDate":"2022-02-25"},{"lineNumber":78,"author":{"gitId":"HansHengGit"},"content":"            break;","lastModifiedDate":"2022-02-25"},{"lineNumber":79,"author":{"gitId":"HansHengGit"},"content":"        case COMMAND_DELETE:","lastModifiedDate":"2022-02-25"},{"lineNumber":80,"author":{"gitId":"HansHengGit"},"content":"            int deleteIndex \u003d parser.parseDeleteIndexFromString(inputCommand);","lastModifiedDate":"2022-02-25"},{"lineNumber":81,"author":{"gitId":"HansHengGit"},"content":"            deleteEntry(deleteIndex);","lastModifiedDate":"2022-02-25"},{"lineNumber":82,"author":{"gitId":"HansHengGit"},"content":"            break;","lastModifiedDate":"2022-02-25"},{"lineNumber":83,"author":{"gitId":"HansHengGit"},"content":"        case COMMAND_FIND:","lastModifiedDate":"2022-02-25"},{"lineNumber":84,"author":{"gitId":"HansHengGit"},"content":"            findKeyword(inputCommand);","lastModifiedDate":"2022-02-25"},{"lineNumber":85,"author":{"gitId":"HansHengGit"},"content":"            break;","lastModifiedDate":"2022-02-25"},{"lineNumber":86,"author":{"gitId":"HansHengGit"},"content":"        case COMMAND_BYE:","lastModifiedDate":"2022-02-25"},{"lineNumber":87,"author":{"gitId":"HansHengGit"},"content":"            exitProgram();","lastModifiedDate":"2022-02-25"},{"lineNumber":88,"author":{"gitId":"HansHengGit"},"content":"            break;","lastModifiedDate":"2022-02-25"},{"lineNumber":89,"author":{"gitId":"HansHengGit"},"content":"        default:","lastModifiedDate":"2022-02-25"},{"lineNumber":90,"author":{"gitId":"HansHengGit"},"content":"            addTask(inputCommand);","lastModifiedDate":"2022-02-25"},{"lineNumber":91,"author":{"gitId":"HansHengGit"},"content":"            break;","lastModifiedDate":"2022-02-25"},{"lineNumber":92,"author":{"gitId":"HansHengGit"},"content":"        }","lastModifiedDate":"2022-02-25"},{"lineNumber":93,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":94,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":95,"author":{"gitId":"HansHengGit"},"content":"     /**","lastModifiedDate":"2022-02-27"},{"lineNumber":96,"author":{"gitId":"HansHengGit"},"content":"     * Takes in the user input, parse the keyword from the user input","lastModifiedDate":"2022-02-27"},{"lineNumber":97,"author":{"gitId":"HansHengGit"},"content":"     * and checks the list to find the tasks containing the keyword.","lastModifiedDate":"2022-02-27"},{"lineNumber":98,"author":{"gitId":"HansHengGit"},"content":"     * Prints all task found.","lastModifiedDate":"2022-02-27"},{"lineNumber":99,"author":{"gitId":"HansHengGit"},"content":"     * ","lastModifiedDate":"2022-02-27"},{"lineNumber":100,"author":{"gitId":"HansHengGit"},"content":"     * @param inputCommand The user input","lastModifiedDate":"2022-02-27"},{"lineNumber":101,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":102,"author":{"gitId":"HansHengGit"},"content":"    private static void findKeyword(String inputCommand) {","lastModifiedDate":"2022-02-25"},{"lineNumber":103,"author":{"gitId":"HansHengGit"},"content":"        String keyword \u003d parser.getKeywordFromString(inputCommand).trim();","lastModifiedDate":"2022-02-25"},{"lineNumber":104,"author":{"gitId":"HansHengGit"},"content":"        int listNum \u003d 1;","lastModifiedDate":"2022-02-25"},{"lineNumber":105,"author":{"gitId":"HansHengGit"},"content":"        for (Task foundTask : taskList) {","lastModifiedDate":"2022-02-25"},{"lineNumber":106,"author":{"gitId":"HansHengGit"},"content":"            if (isFound(keyword, foundTask)) {","lastModifiedDate":"2022-02-25"},{"lineNumber":107,"author":{"gitId":"HansHengGit"},"content":"                ui.printFoundItems(listNum++, foundTask);","lastModifiedDate":"2022-02-25"},{"lineNumber":108,"author":{"gitId":"HansHengGit"},"content":"            }","lastModifiedDate":"2022-02-25"},{"lineNumber":109,"author":{"gitId":"HansHengGit"},"content":"        }","lastModifiedDate":"2022-02-25"},{"lineNumber":110,"author":{"gitId":"HansHengGit"},"content":"        if (listNum \u003d\u003d 1) {","lastModifiedDate":"2022-02-27"},{"lineNumber":111,"author":{"gitId":"HansHengGit"},"content":"            ui.printNoMatchesFound();","lastModifiedDate":"2022-02-27"},{"lineNumber":112,"author":{"gitId":"HansHengGit"},"content":"        }","lastModifiedDate":"2022-02-27"},{"lineNumber":113,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":114,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":115,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":116,"author":{"gitId":"HansHengGit"},"content":"     * Takes in the keyword and an individual task and checks","lastModifiedDate":"2022-02-27"},{"lineNumber":117,"author":{"gitId":"HansHengGit"},"content":"     * if the word is in the task description.","lastModifiedDate":"2022-02-27"},{"lineNumber":118,"author":{"gitId":"HansHengGit"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":119,"author":{"gitId":"HansHengGit"},"content":"     * @param keyword The word to check for","lastModifiedDate":"2022-02-27"},{"lineNumber":120,"author":{"gitId":"HansHengGit"},"content":"     * @param t The task to be checked","lastModifiedDate":"2022-02-27"},{"lineNumber":121,"author":{"gitId":"HansHengGit"},"content":"     * @return True if the task description contains the word, false otherwise","lastModifiedDate":"2022-02-27"},{"lineNumber":122,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":123,"author":{"gitId":"HansHengGit"},"content":"    private static boolean isFound(String keyword, Task t) {","lastModifiedDate":"2022-02-25"},{"lineNumber":124,"author":{"gitId":"HansHengGit"},"content":"        return Arrays.asList(t.getDescription().trim().split(\" \")).contains(keyword);","lastModifiedDate":"2022-02-27"},{"lineNumber":125,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":126,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":127,"author":{"gitId":"HansHengGit"},"content":"     /**","lastModifiedDate":"2022-02-27"},{"lineNumber":128,"author":{"gitId":"HansHengGit"},"content":"     * Lists all the task in the task list by printing each task","lastModifiedDate":"2022-02-27"},{"lineNumber":129,"author":{"gitId":"HansHengGit"},"content":"     * to the standard output.","lastModifiedDate":"2022-02-27"},{"lineNumber":130,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":131,"author":{"gitId":"HansHengGit"},"content":"    private static void listAllEntry() {","lastModifiedDate":"2022-02-25"},{"lineNumber":132,"author":{"gitId":"HansHengGit"},"content":"        int listNum;","lastModifiedDate":"2022-02-25"},{"lineNumber":133,"author":{"gitId":"HansHengGit"},"content":"        listNum \u003d 1;","lastModifiedDate":"2022-02-25"},{"lineNumber":134,"author":{"gitId":"HansHengGit"},"content":"        if (itemNumber \u003d\u003d 0) {","lastModifiedDate":"2022-02-25"},{"lineNumber":135,"author":{"gitId":"HansHengGit"},"content":"            ui.printListEmptyMessage();","lastModifiedDate":"2022-02-25"},{"lineNumber":136,"author":{"gitId":"HansHengGit"},"content":"        }","lastModifiedDate":"2022-02-25"},{"lineNumber":137,"author":{"gitId":"HansHengGit"},"content":"        else {","lastModifiedDate":"2022-02-25"},{"lineNumber":138,"author":{"gitId":"HansHengGit"},"content":"            for (Task singleTask : taskList) {","lastModifiedDate":"2022-02-25"},{"lineNumber":139,"author":{"gitId":"HansHengGit"},"content":"                ui.printAllTaskInList(listNum++, singleTask);","lastModifiedDate":"2022-02-25"},{"lineNumber":140,"author":{"gitId":"HansHengGit"},"content":"            }","lastModifiedDate":"2022-02-25"},{"lineNumber":141,"author":{"gitId":"HansHengGit"},"content":"        }","lastModifiedDate":"2022-02-25"},{"lineNumber":142,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":143,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":144,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":145,"author":{"gitId":"HansHengGit"},"content":"     * Takes in the index of the item to mark and marks","lastModifiedDate":"2022-02-27"},{"lineNumber":146,"author":{"gitId":"HansHengGit"},"content":"     * the item in the list as done.","lastModifiedDate":"2022-02-27"},{"lineNumber":147,"author":{"gitId":"HansHengGit"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":148,"author":{"gitId":"HansHengGit"},"content":"     * @param markNum The index of the item to mark","lastModifiedDate":"2022-02-27"},{"lineNumber":149,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":150,"author":{"gitId":"HansHengGit"},"content":"    private static void markEntry(int markNum) {","lastModifiedDate":"2022-02-25"},{"lineNumber":151,"author":{"gitId":"HansHengGit"},"content":"        try {","lastModifiedDate":"2022-02-25"},{"lineNumber":152,"author":{"gitId":"HansHengGit"},"content":"            if (taskList.get(markNum).isDone() \u003d\u003d true) {","lastModifiedDate":"2022-02-25"},{"lineNumber":153,"author":{"gitId":"HansHengGit"},"content":"                ui.printAlreadyMarkDoneMessage();","lastModifiedDate":"2022-02-25"},{"lineNumber":154,"author":{"gitId":"HansHengGit"},"content":"            }","lastModifiedDate":"2022-02-25"},{"lineNumber":155,"author":{"gitId":"HansHengGit"},"content":"            else {","lastModifiedDate":"2022-02-25"},{"lineNumber":156,"author":{"gitId":"HansHengGit"},"content":"                taskList.get(markNum).setDone(true);","lastModifiedDate":"2022-02-25"},{"lineNumber":157,"author":{"gitId":"HansHengGit"},"content":"                ui.printMarkDoneMessage(taskList.get(markNum));","lastModifiedDate":"2022-02-25"},{"lineNumber":158,"author":{"gitId":"HansHengGit"},"content":"            }","lastModifiedDate":"2022-02-25"},{"lineNumber":159,"author":{"gitId":"HansHengGit"},"content":"        } catch(IndexOutOfBoundsException markOutOfBounds) {","lastModifiedDate":"2022-02-25"},{"lineNumber":160,"author":{"gitId":"HansHengGit"},"content":"            ui.printMarkIndexOutOfBounds();","lastModifiedDate":"2022-02-25"},{"lineNumber":161,"author":{"gitId":"HansHengGit"},"content":"        }","lastModifiedDate":"2022-02-25"},{"lineNumber":162,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":163,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":164,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":165,"author":{"gitId":"HansHengGit"},"content":"     * Takes in the index of the item to mark and marks","lastModifiedDate":"2022-02-27"},{"lineNumber":166,"author":{"gitId":"HansHengGit"},"content":"     * the item in the list as not done.","lastModifiedDate":"2022-02-27"},{"lineNumber":167,"author":{"gitId":"HansHengGit"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":168,"author":{"gitId":"HansHengGit"},"content":"     * @param unMarkNum The index of the item to mark as not done","lastModifiedDate":"2022-02-27"},{"lineNumber":169,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":170,"author":{"gitId":"HansHengGit"},"content":"    private static void unMarkEntry(int unMarkNum) {","lastModifiedDate":"2022-02-25"},{"lineNumber":171,"author":{"gitId":"HansHengGit"},"content":"        try {","lastModifiedDate":"2022-02-25"},{"lineNumber":172,"author":{"gitId":"HansHengGit"},"content":"            if (taskList.get(unMarkNum).isDone() \u003d\u003d false) {","lastModifiedDate":"2022-02-25"},{"lineNumber":173,"author":{"gitId":"HansHengGit"},"content":"                ui.printAlreadyMarkNotDoneMessage();","lastModifiedDate":"2022-02-25"},{"lineNumber":174,"author":{"gitId":"HansHengGit"},"content":"            }","lastModifiedDate":"2022-02-25"},{"lineNumber":175,"author":{"gitId":"HansHengGit"},"content":"            else {","lastModifiedDate":"2022-02-25"},{"lineNumber":176,"author":{"gitId":"HansHengGit"},"content":"                taskList.get(unMarkNum).setDone(false);","lastModifiedDate":"2022-02-25"},{"lineNumber":177,"author":{"gitId":"HansHengGit"},"content":"                ui.printUnMarkDoneMessage(taskList.get(unMarkNum));","lastModifiedDate":"2022-02-25"},{"lineNumber":178,"author":{"gitId":"HansHengGit"},"content":"            }","lastModifiedDate":"2022-02-25"},{"lineNumber":179,"author":{"gitId":"HansHengGit"},"content":"        } catch(IndexOutOfBoundsException unMarkOutOfBounds) {","lastModifiedDate":"2022-02-25"},{"lineNumber":180,"author":{"gitId":"HansHengGit"},"content":"            ui.printUnMarkIndexOutOfBounds();","lastModifiedDate":"2022-02-25"},{"lineNumber":181,"author":{"gitId":"HansHengGit"},"content":"        }","lastModifiedDate":"2022-02-25"},{"lineNumber":182,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":183,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":184,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":185,"author":{"gitId":"HansHengGit"},"content":"     * Takes in the index of the item to delete and deletes","lastModifiedDate":"2022-02-27"},{"lineNumber":186,"author":{"gitId":"HansHengGit"},"content":"     * the item in the list.","lastModifiedDate":"2022-02-27"},{"lineNumber":187,"author":{"gitId":"HansHengGit"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":188,"author":{"gitId":"HansHengGit"},"content":"     * @param deleteIndex The index of the item to be deleted","lastModifiedDate":"2022-02-27"},{"lineNumber":189,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":190,"author":{"gitId":"HansHengGit"},"content":"    private static void deleteEntry(int deleteIndex) {","lastModifiedDate":"2022-02-25"},{"lineNumber":191,"author":{"gitId":"HansHengGit"},"content":"        try {","lastModifiedDate":"2022-02-25"},{"lineNumber":192,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":193,"author":{"gitId":"HansHengGit"},"content":"            ui.printAcknowledgeDeleteMessage(taskList.get(deleteIndex), itemNumber - 1);","lastModifiedDate":"2022-02-25"},{"lineNumber":194,"author":{"gitId":"HansHengGit"},"content":"            taskList.remove(deleteIndex);","lastModifiedDate":"2022-02-25"},{"lineNumber":195,"author":{"gitId":"HansHengGit"},"content":"            itemNumber--;","lastModifiedDate":"2022-02-25"},{"lineNumber":196,"author":{"gitId":"HansHengGit"},"content":"        } catch(IndexOutOfBoundsException deleteIndexOutOFBounds) {","lastModifiedDate":"2022-02-25"},{"lineNumber":197,"author":{"gitId":"HansHengGit"},"content":"            ui.itemNotInListMessage();","lastModifiedDate":"2022-02-25"},{"lineNumber":198,"author":{"gitId":"HansHengGit"},"content":"        }","lastModifiedDate":"2022-02-25"},{"lineNumber":199,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":200,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":201,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":202,"author":{"gitId":"HansHengGit"},"content":"     * Takes in the adding of task command and perform the","lastModifiedDate":"2022-02-27"},{"lineNumber":203,"author":{"gitId":"HansHengGit"},"content":"     * instructed operation by calling the relevant add type","lastModifiedDate":"2022-02-27"},{"lineNumber":204,"author":{"gitId":"HansHengGit"},"content":"     * function.","lastModifiedDate":"2022-02-27"},{"lineNumber":205,"author":{"gitId":"HansHengGit"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":206,"author":{"gitId":"HansHengGit"},"content":"     * @param inCommand The user add task command","lastModifiedDate":"2022-02-27"},{"lineNumber":207,"author":{"gitId":"HansHengGit"},"content":"     * @throws DukeException If there is an error adding a task","lastModifiedDate":"2022-02-27"},{"lineNumber":208,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":209,"author":{"gitId":"HansHengGit"},"content":"    private static void addTask(String inCommand) throws DukeException {","lastModifiedDate":"2022-02-25"},{"lineNumber":210,"author":{"gitId":"HansHengGit"},"content":"        String taskType \u003d parser.parseTaskTypeFromString(inCommand);","lastModifiedDate":"2022-02-25"},{"lineNumber":211,"author":{"gitId":"HansHengGit"},"content":"        String[] taskDescription \u003d parser.parseTaskDescriptionFromString(inCommand);","lastModifiedDate":"2022-02-25"},{"lineNumber":212,"author":{"gitId":"HansHengGit"},"content":"        switch (taskType) {","lastModifiedDate":"2022-02-25"},{"lineNumber":213,"author":{"gitId":"HansHengGit"},"content":"        case COMMAND_TODO:","lastModifiedDate":"2022-02-25"},{"lineNumber":214,"author":{"gitId":"HansHengGit"},"content":"            createToDoEntry(taskDescription);","lastModifiedDate":"2022-02-25"},{"lineNumber":215,"author":{"gitId":"HansHengGit"},"content":"            break;","lastModifiedDate":"2022-02-25"},{"lineNumber":216,"author":{"gitId":"HansHengGit"},"content":"        case COMMAND_DEADLINE:","lastModifiedDate":"2022-02-25"},{"lineNumber":217,"author":{"gitId":"HansHengGit"},"content":"            createDeadLineEntry(taskDescription);","lastModifiedDate":"2022-02-25"},{"lineNumber":218,"author":{"gitId":"HansHengGit"},"content":"            break;","lastModifiedDate":"2022-02-25"},{"lineNumber":219,"author":{"gitId":"HansHengGit"},"content":"        case COMMAND_EVENT:","lastModifiedDate":"2022-02-25"},{"lineNumber":220,"author":{"gitId":"HansHengGit"},"content":"            createEventEntry(taskDescription);","lastModifiedDate":"2022-02-25"},{"lineNumber":221,"author":{"gitId":"HansHengGit"},"content":"            break;","lastModifiedDate":"2022-02-25"},{"lineNumber":222,"author":{"gitId":"HansHengGit"},"content":"        default:","lastModifiedDate":"2022-02-25"},{"lineNumber":223,"author":{"gitId":"HansHengGit"},"content":"            ui.printUnknownCommand();","lastModifiedDate":"2022-02-25"},{"lineNumber":224,"author":{"gitId":"HansHengGit"},"content":"            break;","lastModifiedDate":"2022-02-25"},{"lineNumber":225,"author":{"gitId":"HansHengGit"},"content":"        }","lastModifiedDate":"2022-02-25"},{"lineNumber":226,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":227,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":228,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":229,"author":{"gitId":"HansHengGit"},"content":"     * Takes in the todo task description, parse the task action","lastModifiedDate":"2022-02-27"},{"lineNumber":230,"author":{"gitId":"HansHengGit"},"content":"     * and add the task into the list","lastModifiedDate":"2022-02-27"},{"lineNumber":231,"author":{"gitId":"HansHengGit"},"content":"     * @param taskDescription The todo task description","lastModifiedDate":"2022-02-27"},{"lineNumber":232,"author":{"gitId":"HansHengGit"},"content":"     * @throws IndexOutOfBoundsException If the input of the action is empty","lastModifiedDate":"2022-02-27"},{"lineNumber":233,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":234,"author":{"gitId":"HansHengGit"},"content":"    private static void createToDoEntry(String[] taskDescription) throws IndexOutOfBoundsException{","lastModifiedDate":"2022-02-27"},{"lineNumber":235,"author":{"gitId":"HansHengGit"},"content":"        String toDoAction;","lastModifiedDate":"2022-02-25"},{"lineNumber":236,"author":{"gitId":"HansHengGit"},"content":"        try {","lastModifiedDate":"2022-02-25"},{"lineNumber":237,"author":{"gitId":"HansHengGit"},"content":"            toDoAction \u003d parser.parseToDoActionFromDescription(taskDescription);","lastModifiedDate":"2022-02-25"},{"lineNumber":238,"author":{"gitId":"HansHengGit"},"content":"            taskList.add(new ToDo(toDoAction));","lastModifiedDate":"2022-02-25"},{"lineNumber":239,"author":{"gitId":"HansHengGit"},"content":"            ui.printAcknowledgeAddMessage(taskList.get(itemNumber), itemNumber + 1);","lastModifiedDate":"2022-02-25"},{"lineNumber":240,"author":{"gitId":"HansHengGit"},"content":"            itemNumber++;","lastModifiedDate":"2022-02-25"},{"lineNumber":241,"author":{"gitId":"HansHengGit"},"content":"        } catch (IndexOutOfBoundsException todoEmpty) {","lastModifiedDate":"2022-02-25"},{"lineNumber":242,"author":{"gitId":"HansHengGit"},"content":"            ui.printTodoEmptyException();","lastModifiedDate":"2022-02-25"},{"lineNumber":243,"author":{"gitId":"HansHengGit"},"content":"        }","lastModifiedDate":"2022-02-25"},{"lineNumber":244,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":245,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":246,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":247,"author":{"gitId":"HansHengGit"},"content":"     * Takes in the deadline task description and parse the task action and the","lastModifiedDate":"2022-02-27"},{"lineNumber":248,"author":{"gitId":"HansHengGit"},"content":"     * due date and adds them to the list.","lastModifiedDate":"2022-02-27"},{"lineNumber":249,"author":{"gitId":"HansHengGit"},"content":"     * @param taskDescription The deadline task description from the input","lastModifiedDate":"2022-02-27"},{"lineNumber":250,"author":{"gitId":"HansHengGit"},"content":"     * @throws DukeException If the deadline parameters are invalid","lastModifiedDate":"2022-02-27"},{"lineNumber":251,"author":{"gitId":"HansHengGit"},"content":"     * @throws ArrayIndexOutOfBoundsException If the deadline parameters are empty","lastModifiedDate":"2022-02-27"},{"lineNumber":252,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":253,"author":{"gitId":"HansHengGit"},"content":"    private static void createDeadLineEntry(String[] taskDescription) throws DukeException, ArrayIndexOutOfBoundsException {","lastModifiedDate":"2022-02-27"},{"lineNumber":254,"author":{"gitId":"HansHengGit"},"content":"        LocalDate deadLineDate;","lastModifiedDate":"2022-02-25"},{"lineNumber":255,"author":{"gitId":"HansHengGit"},"content":"        try {","lastModifiedDate":"2022-02-25"},{"lineNumber":256,"author":{"gitId":"HansHengGit"},"content":"            datesArray \u003d parser.parseDeadLineActionFromDescription(taskDescription);","lastModifiedDate":"2022-02-25"},{"lineNumber":257,"author":{"gitId":"HansHengGit"},"content":"            deadLineDate \u003d parser.parseDateFormatFromString(datesArray[1]);","lastModifiedDate":"2022-02-25"},{"lineNumber":258,"author":{"gitId":"HansHengGit"},"content":"            if (isDateFormatInvalid(datesArray)) {","lastModifiedDate":"2022-02-25"},{"lineNumber":259,"author":{"gitId":"HansHengGit"},"content":"                throw new DukeException();","lastModifiedDate":"2022-02-25"},{"lineNumber":260,"author":{"gitId":"HansHengGit"},"content":"            }","lastModifiedDate":"2022-02-25"},{"lineNumber":261,"author":{"gitId":"HansHengGit"},"content":"            taskList.add(new Deadline(datesArray[0], deadLineDate));","lastModifiedDate":"2022-02-25"},{"lineNumber":262,"author":{"gitId":"HansHengGit"},"content":"            ui.printAcknowledgeAddMessage(taskList.get(itemNumber), itemNumber + 1);","lastModifiedDate":"2022-02-25"},{"lineNumber":263,"author":{"gitId":"HansHengGit"},"content":"            itemNumber++;","lastModifiedDate":"2022-02-25"},{"lineNumber":264,"author":{"gitId":"HansHengGit"},"content":"        } catch (ArrayIndexOutOfBoundsException deadlineEmpty) {","lastModifiedDate":"2022-02-25"},{"lineNumber":265,"author":{"gitId":"HansHengGit"},"content":"            ui.printDeadLineEmptyException();","lastModifiedDate":"2022-02-25"},{"lineNumber":266,"author":{"gitId":"HansHengGit"},"content":"        } catch (DukeException invalidDateLineInput) {","lastModifiedDate":"2022-02-25"},{"lineNumber":267,"author":{"gitId":"HansHengGit"},"content":"            ui.printInvalidDeadLineException();","lastModifiedDate":"2022-02-25"},{"lineNumber":268,"author":{"gitId":"HansHengGit"},"content":"        }","lastModifiedDate":"2022-02-25"},{"lineNumber":269,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":270,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":271,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":272,"author":{"gitId":"HansHengGit"},"content":"     * Checks if the action parameter or the due date parameter is empty","lastModifiedDate":"2022-02-27"},{"lineNumber":273,"author":{"gitId":"HansHengGit"},"content":"     * @param datesArray the deadline description","lastModifiedDate":"2022-02-27"},{"lineNumber":274,"author":{"gitId":"HansHengGit"},"content":"     * @return True if any parameter is empty, false otherwise","lastModifiedDate":"2022-02-27"},{"lineNumber":275,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":276,"author":{"gitId":"HansHengGit"},"content":"    private static boolean isDateFormatInvalid(String[] datesArray) {","lastModifiedDate":"2022-02-25"},{"lineNumber":277,"author":{"gitId":"HansHengGit"},"content":"        return datesArray[1].length() \u003d\u003d 0 || datesArray[0].length() \u003d\u003d 0;","lastModifiedDate":"2022-02-25"},{"lineNumber":278,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":279,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":280,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":281,"author":{"gitId":"HansHengGit"},"content":"     * Takes in the event task description and parse the task action and the","lastModifiedDate":"2022-02-27"},{"lineNumber":282,"author":{"gitId":"HansHengGit"},"content":"     * due date and adds them to the list.","lastModifiedDate":"2022-02-27"},{"lineNumber":283,"author":{"gitId":"HansHengGit"},"content":"     * @param taskDescription The event task description from the input","lastModifiedDate":"2022-02-27"},{"lineNumber":284,"author":{"gitId":"HansHengGit"},"content":"     * @throws DukeException If the event parameters are invalid","lastModifiedDate":"2022-02-27"},{"lineNumber":285,"author":{"gitId":"HansHengGit"},"content":"     * @throws ArrayIndexOutOfBoundsException If the event parameters are empty","lastModifiedDate":"2022-02-27"},{"lineNumber":286,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":287,"author":{"gitId":"HansHengGit"},"content":"    private static void createEventEntry(String[] taskDescription) throws DukeException, ArrayIndexOutOfBoundsException {","lastModifiedDate":"2022-02-27"},{"lineNumber":288,"author":{"gitId":"HansHengGit"},"content":"        LocalDate eventDate;","lastModifiedDate":"2022-02-27"},{"lineNumber":289,"author":{"gitId":"HansHengGit"},"content":"        try {","lastModifiedDate":"2022-02-25"},{"lineNumber":290,"author":{"gitId":"HansHengGit"},"content":"            eventsArray \u003d parser.parseEventsActionFromDescription(taskDescription);","lastModifiedDate":"2022-02-27"},{"lineNumber":291,"author":{"gitId":"HansHengGit"},"content":"            eventDate \u003d parser.parseDateFormatFromString(eventsArray[1]);","lastModifiedDate":"2022-02-27"},{"lineNumber":292,"author":{"gitId":"HansHengGit"},"content":"            if (isEventFormatInvalid(eventsArray)) {","lastModifiedDate":"2022-02-25"},{"lineNumber":293,"author":{"gitId":"HansHengGit"},"content":"                throw new DukeException();","lastModifiedDate":"2022-02-25"},{"lineNumber":294,"author":{"gitId":"HansHengGit"},"content":"            }","lastModifiedDate":"2022-02-25"},{"lineNumber":295,"author":{"gitId":"HansHengGit"},"content":"            taskList.add(new Event(eventsArray[0], eventDate));","lastModifiedDate":"2022-02-27"},{"lineNumber":296,"author":{"gitId":"HansHengGit"},"content":"            ui.printAcknowledgeAddMessage(taskList.get(itemNumber), itemNumber + 1);","lastModifiedDate":"2022-02-25"},{"lineNumber":297,"author":{"gitId":"HansHengGit"},"content":"            itemNumber++;","lastModifiedDate":"2022-02-25"},{"lineNumber":298,"author":{"gitId":"HansHengGit"},"content":"        } catch (ArrayIndexOutOfBoundsException eventEmpty) {","lastModifiedDate":"2022-02-25"},{"lineNumber":299,"author":{"gitId":"HansHengGit"},"content":"            ui.printEventEmptyException();","lastModifiedDate":"2022-02-25"},{"lineNumber":300,"author":{"gitId":"HansHengGit"},"content":"        } catch (DukeException invalidEventInput) {","lastModifiedDate":"2022-02-25"},{"lineNumber":301,"author":{"gitId":"HansHengGit"},"content":"            ui.printInvalidEventException();","lastModifiedDate":"2022-02-25"},{"lineNumber":302,"author":{"gitId":"HansHengGit"},"content":"        }","lastModifiedDate":"2022-02-25"},{"lineNumber":303,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":304,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":305,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":306,"author":{"gitId":"HansHengGit"},"content":"     * Checks if the action parameter or the event date parameter is empty.","lastModifiedDate":"2022-02-27"},{"lineNumber":307,"author":{"gitId":"HansHengGit"},"content":"     * @param eventsArray the event description","lastModifiedDate":"2022-02-27"},{"lineNumber":308,"author":{"gitId":"HansHengGit"},"content":"     * @return True if any parameter is empty, false otherwise","lastModifiedDate":"2022-02-27"},{"lineNumber":309,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":310,"author":{"gitId":"HansHengGit"},"content":"    private static boolean isEventFormatInvalid(String[] eventsArray) {","lastModifiedDate":"2022-02-25"},{"lineNumber":311,"author":{"gitId":"HansHengGit"},"content":"        return eventsArray[1].length() \u003d\u003d 0 || eventsArray[0].length() \u003d\u003d 0;","lastModifiedDate":"2022-02-25"},{"lineNumber":312,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":313,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":314,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":315,"author":{"gitId":"HansHengGit"},"content":"     * Terminates the session.","lastModifiedDate":"2022-02-27"},{"lineNumber":316,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":317,"author":{"gitId":"HansHengGit"},"content":"    private static void exitProgram() {","lastModifiedDate":"2022-02-25"},{"lineNumber":318,"author":{"gitId":"HansHengGit"},"content":"        ui.printGoodbyeMessage();","lastModifiedDate":"2022-02-25"},{"lineNumber":319,"author":{"gitId":"HansHengGit"},"content":"        System.exit(0);","lastModifiedDate":"2022-02-25"},{"lineNumber":320,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":321,"author":{"gitId":"HansHengGit"},"content":"}","lastModifiedDate":"2022-02-25"}],"authorContributionMap":{"HansHengGit":321}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HansHengGit"},"content":"package duke;","lastModifiedDate":"2022-02-25"},{"lineNumber":2,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":3,"author":{"gitId":"HansHengGit"},"content":"import duke.task.Task;","lastModifiedDate":"2022-02-25"},{"lineNumber":4,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":5,"author":{"gitId":"HansHengGit"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-27"},{"lineNumber":6,"author":{"gitId":"HansHengGit"},"content":"import java.io.InputStream;","lastModifiedDate":"2022-02-25"},{"lineNumber":7,"author":{"gitId":"HansHengGit"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-02-25"},{"lineNumber":8,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":9,"author":{"gitId":"HansHengGit"},"content":"/**","lastModifiedDate":"2022-02-27"},{"lineNumber":10,"author":{"gitId":"HansHengGit"},"content":" * Deals with the interactions between the program and the user.","lastModifiedDate":"2022-02-27"},{"lineNumber":11,"author":{"gitId":"HansHengGit"},"content":" * Handles reading of commands from the user and printing of message","lastModifiedDate":"2022-02-27"},{"lineNumber":12,"author":{"gitId":"HansHengGit"},"content":" * to the user.","lastModifiedDate":"2022-02-27"},{"lineNumber":13,"author":{"gitId":"HansHengGit"},"content":" */","lastModifiedDate":"2022-02-27"},{"lineNumber":14,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":15,"author":{"gitId":"HansHengGit"},"content":"public class Ui {","lastModifiedDate":"2022-02-25"},{"lineNumber":16,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":17,"author":{"gitId":"HansHengGit"},"content":"    private static Scanner in;","lastModifiedDate":"2022-02-27"},{"lineNumber":18,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":19,"author":{"gitId":"HansHengGit"},"content":"    public Ui() {","lastModifiedDate":"2022-02-25"},{"lineNumber":20,"author":{"gitId":"HansHengGit"},"content":"        this(System.in);","lastModifiedDate":"2022-02-27"},{"lineNumber":21,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":22,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":23,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":24,"author":{"gitId":"HansHengGit"},"content":"     * Creates an Ui object to handle reading from the Scanner object and printing","lastModifiedDate":"2022-02-27"},{"lineNumber":25,"author":{"gitId":"HansHengGit"},"content":"     * of messages to standard output.","lastModifiedDate":"2022-02-27"},{"lineNumber":26,"author":{"gitId":"HansHengGit"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":27,"author":{"gitId":"HansHengGit"},"content":"     * @param in Scanner object that takes user input","lastModifiedDate":"2022-02-27"},{"lineNumber":28,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":29,"author":{"gitId":"HansHengGit"},"content":"    public Ui(InputStream in) {","lastModifiedDate":"2022-02-27"},{"lineNumber":30,"author":{"gitId":"HansHengGit"},"content":"        this.in \u003d new Scanner(in);","lastModifiedDate":"2022-02-25"},{"lineNumber":31,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":32,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":33,"author":{"gitId":"HansHengGit"},"content":"    public static String getNewInput() throws DukeException, IOException {","lastModifiedDate":"2022-02-27"},{"lineNumber":34,"author":{"gitId":"HansHengGit"},"content":"        String inputCommand \u003d in.nextLine();","lastModifiedDate":"2022-02-27"},{"lineNumber":35,"author":{"gitId":"HansHengGit"},"content":"        return inputCommand;","lastModifiedDate":"2022-02-27"},{"lineNumber":36,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-27"},{"lineNumber":37,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":38,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":39,"author":{"gitId":"HansHengGit"},"content":"     * Prints welcome message to standard output.","lastModifiedDate":"2022-02-27"},{"lineNumber":40,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":41,"author":{"gitId":"HansHengGit"},"content":"    public void printWelcomeMessage() {","lastModifiedDate":"2022-02-25"},{"lineNumber":42,"author":{"gitId":"HansHengGit"},"content":"        System.out.println(\"Hello! I\u0027m Hage\");","lastModifiedDate":"2022-02-25"},{"lineNumber":43,"author":{"gitId":"HansHengGit"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2022-02-25"},{"lineNumber":44,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":45,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":46,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":47,"author":{"gitId":"HansHengGit"},"content":"     * Prints goodbye message to standard out.","lastModifiedDate":"2022-02-27"},{"lineNumber":48,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":49,"author":{"gitId":"HansHengGit"},"content":"    public void printGoodbyeMessage() {","lastModifiedDate":"2022-02-25"},{"lineNumber":50,"author":{"gitId":"HansHengGit"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2022-02-25"},{"lineNumber":51,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":52,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":53,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":54,"author":{"gitId":"HansHengGit"},"content":"     * Takes in a task object, and it\u0027s item number on the list","lastModifiedDate":"2022-02-27"},{"lineNumber":55,"author":{"gitId":"HansHengGit"},"content":"     * and prints a confirmation to standard output that the","lastModifiedDate":"2022-02-27"},{"lineNumber":56,"author":{"gitId":"HansHengGit"},"content":"     * task was successfully added with the number of task in","lastModifiedDate":"2022-02-27"},{"lineNumber":57,"author":{"gitId":"HansHengGit"},"content":"     * the list.","lastModifiedDate":"2022-02-27"},{"lineNumber":58,"author":{"gitId":"HansHengGit"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":59,"author":{"gitId":"HansHengGit"},"content":"     * @param taskToAcknowledge The task that has been added","lastModifiedDate":"2022-02-27"},{"lineNumber":60,"author":{"gitId":"HansHengGit"},"content":"     * @param itemNumber The item number of the task on the list","lastModifiedDate":"2022-02-27"},{"lineNumber":61,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":62,"author":{"gitId":"HansHengGit"},"content":"    public void printAcknowledgeAddMessage(Task taskToAcknowledge, int itemNumber) {","lastModifiedDate":"2022-02-25"},{"lineNumber":63,"author":{"gitId":"HansHengGit"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\\n\" + taskToAcknowledge);","lastModifiedDate":"2022-02-25"},{"lineNumber":64,"author":{"gitId":"HansHengGit"},"content":"        System.out.println(\"Now you have \" + itemNumber +  \" tasks in the list.\");","lastModifiedDate":"2022-02-25"},{"lineNumber":65,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":66,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":67,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":68,"author":{"gitId":"HansHengGit"},"content":"     * Takes in a task object, and it\u0027s item number on the list","lastModifiedDate":"2022-02-27"},{"lineNumber":69,"author":{"gitId":"HansHengGit"},"content":"     * and prints a confirmation to standard output that the","lastModifiedDate":"2022-02-27"},{"lineNumber":70,"author":{"gitId":"HansHengGit"},"content":"     * task was successfully deleted with the number of task","lastModifiedDate":"2022-02-27"},{"lineNumber":71,"author":{"gitId":"HansHengGit"},"content":"     * remaining in the list.","lastModifiedDate":"2022-02-27"},{"lineNumber":72,"author":{"gitId":"HansHengGit"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":73,"author":{"gitId":"HansHengGit"},"content":"     * @param taskToAcknowledge The task that has been deleted","lastModifiedDate":"2022-02-27"},{"lineNumber":74,"author":{"gitId":"HansHengGit"},"content":"     * @param itemNumber The number of items left in the list","lastModifiedDate":"2022-02-27"},{"lineNumber":75,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":76,"author":{"gitId":"HansHengGit"},"content":"    public void printAcknowledgeDeleteMessage(Task taskToAcknowledge, int itemNumber) {","lastModifiedDate":"2022-02-25"},{"lineNumber":77,"author":{"gitId":"HansHengGit"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\\n\" + taskToAcknowledge +","lastModifiedDate":"2022-02-25"},{"lineNumber":78,"author":{"gitId":"HansHengGit"},"content":"                \"\\nNow you have \" + itemNumber + \" tasks in the list.\");","lastModifiedDate":"2022-02-25"},{"lineNumber":79,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":80,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":81,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":82,"author":{"gitId":"HansHengGit"},"content":"     * Prints an error message if any of the event input is empty.","lastModifiedDate":"2022-02-27"},{"lineNumber":83,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":84,"author":{"gitId":"HansHengGit"},"content":"    public void printEventEmptyException() {","lastModifiedDate":"2022-02-25"},{"lineNumber":85,"author":{"gitId":"HansHengGit"},"content":"        System.out.println(\"OOPS!!! The description and time of event cannot be empty.\");","lastModifiedDate":"2022-02-25"},{"lineNumber":86,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":87,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":88,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":89,"author":{"gitId":"HansHengGit"},"content":"     * Prints an error message if the event input is invalid.","lastModifiedDate":"2022-02-27"},{"lineNumber":90,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":91,"author":{"gitId":"HansHengGit"},"content":"    public void printInvalidEventException() {","lastModifiedDate":"2022-02-25"},{"lineNumber":92,"author":{"gitId":"HansHengGit"},"content":"        System.out.println(\"Invalid event input! Please try again.\");","lastModifiedDate":"2022-02-25"},{"lineNumber":93,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":94,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":95,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":96,"author":{"gitId":"HansHengGit"},"content":"     * Prints an error message if any of the deadline input is empty.","lastModifiedDate":"2022-02-27"},{"lineNumber":97,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":98,"author":{"gitId":"HansHengGit"},"content":"    public void printDeadLineEmptyException() {","lastModifiedDate":"2022-02-25"},{"lineNumber":99,"author":{"gitId":"HansHengGit"},"content":"        System.out.println(\"OOPS!!! The description and time of Deadline cannot be empty.\");","lastModifiedDate":"2022-02-25"},{"lineNumber":100,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":101,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":102,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":103,"author":{"gitId":"HansHengGit"},"content":"     * Prints an error message if the deadline input is invalid.","lastModifiedDate":"2022-02-27"},{"lineNumber":104,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":105,"author":{"gitId":"HansHengGit"},"content":"    public void printInvalidDeadLineException() {","lastModifiedDate":"2022-02-25"},{"lineNumber":106,"author":{"gitId":"HansHengGit"},"content":"        System.out.println(\"Invalid deadline input! Please try again.\");","lastModifiedDate":"2022-02-25"},{"lineNumber":107,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":108,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":109,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":110,"author":{"gitId":"HansHengGit"},"content":"     * Prints an error message if any of the todo description is empty.","lastModifiedDate":"2022-02-27"},{"lineNumber":111,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":112,"author":{"gitId":"HansHengGit"},"content":"    public void printTodoEmptyException() {","lastModifiedDate":"2022-02-25"},{"lineNumber":113,"author":{"gitId":"HansHengGit"},"content":"        System.out.println(\"OOPS!!! The description and time of todo cannot be empty.\");","lastModifiedDate":"2022-02-25"},{"lineNumber":114,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":115,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":116,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":117,"author":{"gitId":"HansHengGit"},"content":"     * Prints error message if command is unknown.","lastModifiedDate":"2022-02-27"},{"lineNumber":118,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":119,"author":{"gitId":"HansHengGit"},"content":"    public void printUnknownCommand() {","lastModifiedDate":"2022-02-25"},{"lineNumber":120,"author":{"gitId":"HansHengGit"},"content":"        System.out.println(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2022-02-25"},{"lineNumber":121,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":122,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":123,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":124,"author":{"gitId":"HansHengGit"},"content":"     * Prints error message if index given is not in the list.","lastModifiedDate":"2022-02-27"},{"lineNumber":125,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":126,"author":{"gitId":"HansHengGit"},"content":"    public void itemNotInListMessage() {","lastModifiedDate":"2022-02-25"},{"lineNumber":127,"author":{"gitId":"HansHengGit"},"content":"        System.out.println(\"The item you want to delete is not in the list!\");","lastModifiedDate":"2022-02-25"},{"lineNumber":128,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":129,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":130,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":131,"author":{"gitId":"HansHengGit"},"content":"     * Prints out error message if list is empty and \"list\" command is entered.","lastModifiedDate":"2022-02-27"},{"lineNumber":132,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":133,"author":{"gitId":"HansHengGit"},"content":"    public void printListEmptyMessage() {","lastModifiedDate":"2022-02-25"},{"lineNumber":134,"author":{"gitId":"HansHengGit"},"content":"        System.out.println(\"List is empty\");","lastModifiedDate":"2022-02-25"},{"lineNumber":135,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":136,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":137,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":138,"author":{"gitId":"HansHengGit"},"content":"     * Takes in the task object of the item to be mark as done","lastModifiedDate":"2022-02-27"},{"lineNumber":139,"author":{"gitId":"HansHengGit"},"content":"     * and prints out if task is succesfully marked as done.","lastModifiedDate":"2022-02-27"},{"lineNumber":140,"author":{"gitId":"HansHengGit"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":141,"author":{"gitId":"HansHengGit"},"content":"     * @param markDoneTask The task to be marked as done","lastModifiedDate":"2022-02-27"},{"lineNumber":142,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":143,"author":{"gitId":"HansHengGit"},"content":"    public void printMarkDoneMessage(Task markDoneTask) {","lastModifiedDate":"2022-02-25"},{"lineNumber":144,"author":{"gitId":"HansHengGit"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\\n\" + markDoneTask);","lastModifiedDate":"2022-02-25"},{"lineNumber":145,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":146,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":147,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":148,"author":{"gitId":"HansHengGit"},"content":"     * Takes in the task object to be mark as not done yet","lastModifiedDate":"2022-02-27"},{"lineNumber":149,"author":{"gitId":"HansHengGit"},"content":"     * and prints our message if the task is successfully marked","lastModifiedDate":"2022-02-27"},{"lineNumber":150,"author":{"gitId":"HansHengGit"},"content":"     * as not done.","lastModifiedDate":"2022-02-27"},{"lineNumber":151,"author":{"gitId":"HansHengGit"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":152,"author":{"gitId":"HansHengGit"},"content":"     * @param markDoneTask The task to be marked as not done yet","lastModifiedDate":"2022-02-27"},{"lineNumber":153,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":154,"author":{"gitId":"HansHengGit"},"content":"    public void printUnMarkDoneMessage(Task markDoneTask) {","lastModifiedDate":"2022-02-25"},{"lineNumber":155,"author":{"gitId":"HansHengGit"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as not done yet:\\n\" + markDoneTask);","lastModifiedDate":"2022-02-25"},{"lineNumber":156,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":157,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":158,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":159,"author":{"gitId":"HansHengGit"},"content":"     * Prints error message if mark index given is out of the list range.","lastModifiedDate":"2022-02-27"},{"lineNumber":160,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":161,"author":{"gitId":"HansHengGit"},"content":"    public void printMarkIndexOutOfBounds() {","lastModifiedDate":"2022-02-25"},{"lineNumber":162,"author":{"gitId":"HansHengGit"},"content":"        System.out.println(\"Mark index is out of bounds\");","lastModifiedDate":"2022-02-25"},{"lineNumber":163,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":164,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":165,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":166,"author":{"gitId":"HansHengGit"},"content":"     * Prints error message if unmark index given is out of the list range.","lastModifiedDate":"2022-02-27"},{"lineNumber":167,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":168,"author":{"gitId":"HansHengGit"},"content":"    public void printUnMarkIndexOutOfBounds() {","lastModifiedDate":"2022-02-25"},{"lineNumber":169,"author":{"gitId":"HansHengGit"},"content":"        System.out.println(\"Unmark index is out of bounds!!\");","lastModifiedDate":"2022-02-25"},{"lineNumber":170,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":171,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":172,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":173,"author":{"gitId":"HansHengGit"},"content":"     * Prints error message if given task index is already marked as not done.","lastModifiedDate":"2022-02-27"},{"lineNumber":174,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":175,"author":{"gitId":"HansHengGit"},"content":"    public void printAlreadyMarkNotDoneMessage() {","lastModifiedDate":"2022-02-25"},{"lineNumber":176,"author":{"gitId":"HansHengGit"},"content":"        System.out.println(\"Task is already marked as not done yet\");","lastModifiedDate":"2022-02-25"},{"lineNumber":177,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":178,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":179,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":180,"author":{"gitId":"HansHengGit"},"content":"     * Prints error message if given task index is already marked as done.","lastModifiedDate":"2022-02-27"},{"lineNumber":181,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":182,"author":{"gitId":"HansHengGit"},"content":"    public void printAlreadyMarkDoneMessage() {","lastModifiedDate":"2022-02-25"},{"lineNumber":183,"author":{"gitId":"HansHengGit"},"content":"        System.out.println(\"Task is already marked as done \");","lastModifiedDate":"2022-02-25"},{"lineNumber":184,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":185,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":186,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":187,"author":{"gitId":"HansHengGit"},"content":"     * Prints message if file loaded is empty.","lastModifiedDate":"2022-02-27"},{"lineNumber":188,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":189,"author":{"gitId":"HansHengGit"},"content":"    public void printFileEmptyMessage() {","lastModifiedDate":"2022-02-25"},{"lineNumber":190,"author":{"gitId":"HansHengGit"},"content":"        System.out.println(\"Empty file\");","lastModifiedDate":"2022-02-25"},{"lineNumber":191,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":192,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":193,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":194,"author":{"gitId":"HansHengGit"},"content":"     * Prints message if a directory is not found and is newly created.","lastModifiedDate":"2022-02-27"},{"lineNumber":195,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":196,"author":{"gitId":"HansHengGit"},"content":"    public void printCreateDirectoryMessage() {","lastModifiedDate":"2022-02-25"},{"lineNumber":197,"author":{"gitId":"HansHengGit"},"content":"        System.out.println(\"New Directory created!\");","lastModifiedDate":"2022-02-25"},{"lineNumber":198,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":199,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":200,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":201,"author":{"gitId":"HansHengGit"},"content":"     * Prints message if file is not found and a new one is created.","lastModifiedDate":"2022-02-27"},{"lineNumber":202,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":203,"author":{"gitId":"HansHengGit"},"content":"    public void newFileCreatedMessage() {","lastModifiedDate":"2022-02-25"},{"lineNumber":204,"author":{"gitId":"HansHengGit"},"content":"        System.out.println(\"new file Hage.txt created\");","lastModifiedDate":"2022-02-25"},{"lineNumber":205,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":206,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":207,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":208,"author":{"gitId":"HansHengGit"},"content":"     * Prints message if file is found.","lastModifiedDate":"2022-02-27"},{"lineNumber":209,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":210,"author":{"gitId":"HansHengGit"},"content":"    public void printFileExistsMessage() {","lastModifiedDate":"2022-02-25"},{"lineNumber":211,"author":{"gitId":"HansHengGit"},"content":"        System.out.println(\"Hage.txt exists\");","lastModifiedDate":"2022-02-25"},{"lineNumber":212,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":213,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":214,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":215,"author":{"gitId":"HansHengGit"},"content":"     * Prints error if file cannot be created.","lastModifiedDate":"2022-02-27"},{"lineNumber":216,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":217,"author":{"gitId":"HansHengGit"},"content":"    public void printCreateFileError() {","lastModifiedDate":"2022-02-25"},{"lineNumber":218,"author":{"gitId":"HansHengGit"},"content":"        System.out.println(\"Cannot create file!!\");","lastModifiedDate":"2022-02-25"},{"lineNumber":219,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":220,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":221,"author":{"gitId":"HansHengGit"},"content":"    public void printFoundItems(int listNum, Task t) {","lastModifiedDate":"2022-02-25"},{"lineNumber":222,"author":{"gitId":"HansHengGit"},"content":"        System.out.println(listNum + \". \" + t);","lastModifiedDate":"2022-02-25"},{"lineNumber":223,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":224,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":225,"author":{"gitId":"HansHengGit"},"content":"    public void printAllTaskInList(int listNum, Task singleTask) {","lastModifiedDate":"2022-02-25"},{"lineNumber":226,"author":{"gitId":"HansHengGit"},"content":"        System.out.println(listNum + \". \" + singleTask);","lastModifiedDate":"2022-02-25"},{"lineNumber":227,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":228,"author":{"gitId":"HansHengGit"},"content":"  ","lastModifiedDate":"2022-02-27"},{"lineNumber":229,"author":{"gitId":"HansHengGit"},"content":"    public void printInvalidDateException() {","lastModifiedDate":"2022-02-25"},{"lineNumber":230,"author":{"gitId":"HansHengGit"},"content":"        System.out.println(\"Invalid Date input\");","lastModifiedDate":"2022-02-25"},{"lineNumber":231,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":232,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":233,"author":{"gitId":"HansHengGit"},"content":"    public void printNoMatchesFound() {","lastModifiedDate":"2022-02-27"},{"lineNumber":234,"author":{"gitId":"HansHengGit"},"content":"        System.out.println(\"No task matches the keyword!\");","lastModifiedDate":"2022-02-27"},{"lineNumber":235,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-27"},{"lineNumber":236,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":237,"author":{"gitId":"HansHengGit"},"content":"    public void printInvalidKeywordError() {","lastModifiedDate":"2022-02-27"},{"lineNumber":238,"author":{"gitId":"HansHengGit"},"content":"        System.out.println(\"Invalid keyword!!\");","lastModifiedDate":"2022-02-27"},{"lineNumber":239,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-27"},{"lineNumber":240,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":241,"author":{"gitId":"HansHengGit"},"content":"    public void printInvalidDeleteIndex() {","lastModifiedDate":"2022-02-27"},{"lineNumber":242,"author":{"gitId":"HansHengGit"},"content":"        System.out.println(\"Invalid task index!\");","lastModifiedDate":"2022-02-27"},{"lineNumber":243,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-27"},{"lineNumber":244,"author":{"gitId":"HansHengGit"},"content":"}","lastModifiedDate":"2022-02-25"}],"authorContributionMap":{"HansHengGit":244}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HansHengGit"},"content":"package duke.task;","lastModifiedDate":"2022-02-06"},{"lineNumber":2,"author":{"gitId":"HansHengGit"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-02-25"},{"lineNumber":3,"author":{"gitId":"HansHengGit"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-02-25"},{"lineNumber":4,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":5,"author":{"gitId":"HansHengGit"},"content":"/**","lastModifiedDate":"2022-02-27"},{"lineNumber":6,"author":{"gitId":"HansHengGit"},"content":" * Describes a task which stores the description","lastModifiedDate":"2022-02-27"},{"lineNumber":7,"author":{"gitId":"HansHengGit"},"content":" * and when the task deadline is.","lastModifiedDate":"2022-02-27"},{"lineNumber":8,"author":{"gitId":"HansHengGit"},"content":" */","lastModifiedDate":"2022-02-27"},{"lineNumber":9,"author":{"gitId":"HansHengGit"},"content":"public class Deadline extends Task {","lastModifiedDate":"2022-02-03"},{"lineNumber":10,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":11,"author":{"gitId":"HansHengGit"},"content":"    protected LocalDate by;","lastModifiedDate":"2022-02-27"},{"lineNumber":12,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":13,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":14,"author":{"gitId":"HansHengGit"},"content":"     * The constructor which sets the given description of the task","lastModifiedDate":"2022-02-27"},{"lineNumber":15,"author":{"gitId":"HansHengGit"},"content":"     * and its deadline, and sets the task type accordingly.","lastModifiedDate":"2022-02-27"},{"lineNumber":16,"author":{"gitId":"HansHengGit"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":17,"author":{"gitId":"HansHengGit"},"content":"     * @param description The description of the task","lastModifiedDate":"2022-02-27"},{"lineNumber":18,"author":{"gitId":"HansHengGit"},"content":"     * @param by The deadline of the task","lastModifiedDate":"2022-02-27"},{"lineNumber":19,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":20,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":21,"author":{"gitId":"HansHengGit"},"content":"    public Deadline(String description, LocalDate by) {","lastModifiedDate":"2022-02-25"},{"lineNumber":22,"author":{"gitId":"HansHengGit"},"content":"        super(description);","lastModifiedDate":"2022-02-03"},{"lineNumber":23,"author":{"gitId":"HansHengGit"},"content":"        this.by \u003d by;","lastModifiedDate":"2022-02-03"},{"lineNumber":24,"author":{"gitId":"HansHengGit"},"content":"        this.taskType \u003d \u0027D\u0027;","lastModifiedDate":"2022-02-13"},{"lineNumber":25,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-03"},{"lineNumber":26,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":27,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":28,"author":{"gitId":"HansHengGit"},"content":"     * Returns the string which represents all information of the task","lastModifiedDate":"2022-02-27"},{"lineNumber":29,"author":{"gitId":"HansHengGit"},"content":"     * to be printed to the standard output.","lastModifiedDate":"2022-02-27"},{"lineNumber":30,"author":{"gitId":"HansHengGit"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":31,"author":{"gitId":"HansHengGit"},"content":"     * @return A string consisting of all the information of the task to be printed","lastModifiedDate":"2022-02-27"},{"lineNumber":32,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":33,"author":{"gitId":"HansHengGit"},"content":"    public String toString() {","lastModifiedDate":"2022-02-03"},{"lineNumber":34,"author":{"gitId":"HansHengGit"},"content":"        return \"[D]\" + super.toString() + \" (by:\" + by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";","lastModifiedDate":"2022-02-25"},{"lineNumber":35,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-03"},{"lineNumber":36,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-13"},{"lineNumber":37,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":38,"author":{"gitId":"HansHengGit"},"content":"     * Gets the description of the task.","lastModifiedDate":"2022-02-27"},{"lineNumber":39,"author":{"gitId":"HansHengGit"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":40,"author":{"gitId":"HansHengGit"},"content":"     * @return The description of the task","lastModifiedDate":"2022-02-27"},{"lineNumber":41,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":42,"author":{"gitId":"HansHengGit"},"content":"    public String saveDescription() {","lastModifiedDate":"2022-02-13"},{"lineNumber":43,"author":{"gitId":"HansHengGit"},"content":"        return super.saveDescription();","lastModifiedDate":"2022-02-13"},{"lineNumber":44,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-13"},{"lineNumber":45,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":46,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":47,"author":{"gitId":"HansHengGit"},"content":"     * Gets the information of the task.","lastModifiedDate":"2022-02-27"},{"lineNumber":48,"author":{"gitId":"HansHengGit"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":49,"author":{"gitId":"HansHengGit"},"content":"     * @return The information of the task","lastModifiedDate":"2022-02-27"},{"lineNumber":50,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":51,"author":{"gitId":"HansHengGit"},"content":"    public String saveAdditionalInfo() {","lastModifiedDate":"2022-02-13"},{"lineNumber":52,"author":{"gitId":"HansHengGit"},"content":"        return \"/by\" + by;","lastModifiedDate":"2022-02-13"},{"lineNumber":53,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-13"},{"lineNumber":54,"author":{"gitId":"HansHengGit"},"content":"}","lastModifiedDate":"2022-02-03"}],"authorContributionMap":{"HansHengGit":54}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HansHengGit"},"content":"package duke.task;","lastModifiedDate":"2022-02-06"},{"lineNumber":2,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":3,"author":{"gitId":"HansHengGit"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-02-27"},{"lineNumber":4,"author":{"gitId":"HansHengGit"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-02-27"},{"lineNumber":5,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":6,"author":{"gitId":"HansHengGit"},"content":"/**","lastModifiedDate":"2022-02-27"},{"lineNumber":7,"author":{"gitId":"HansHengGit"},"content":" * Describes an upcoming event task which stores the description","lastModifiedDate":"2022-02-27"},{"lineNumber":8,"author":{"gitId":"HansHengGit"},"content":" * and when the event is going to happen.","lastModifiedDate":"2022-02-27"},{"lineNumber":9,"author":{"gitId":"HansHengGit"},"content":" */","lastModifiedDate":"2022-02-27"},{"lineNumber":10,"author":{"gitId":"HansHengGit"},"content":"public class Event extends Task {","lastModifiedDate":"2022-02-03"},{"lineNumber":11,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":12,"author":{"gitId":"HansHengGit"},"content":"    protected LocalDate at;","lastModifiedDate":"2022-02-27"},{"lineNumber":13,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":14,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":15,"author":{"gitId":"HansHengGit"},"content":"     * The constructor which sets the given description of the event","lastModifiedDate":"2022-02-27"},{"lineNumber":16,"author":{"gitId":"HansHengGit"},"content":"     * and its time and assigns its task type accordingly.","lastModifiedDate":"2022-02-27"},{"lineNumber":17,"author":{"gitId":"HansHengGit"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":18,"author":{"gitId":"HansHengGit"},"content":"     * @param description The description of the event","lastModifiedDate":"2022-02-27"},{"lineNumber":19,"author":{"gitId":"HansHengGit"},"content":"     * @param at The time of the event","lastModifiedDate":"2022-02-27"},{"lineNumber":20,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":21,"author":{"gitId":"HansHengGit"},"content":"    public Event(String description, LocalDate at) {","lastModifiedDate":"2022-02-27"},{"lineNumber":22,"author":{"gitId":"HansHengGit"},"content":"        super(description);","lastModifiedDate":"2022-02-03"},{"lineNumber":23,"author":{"gitId":"HansHengGit"},"content":"        this.at \u003d at;","lastModifiedDate":"2022-02-03"},{"lineNumber":24,"author":{"gitId":"HansHengGit"},"content":"        this.taskType \u003d \u0027E\u0027;","lastModifiedDate":"2022-02-13"},{"lineNumber":25,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-03"},{"lineNumber":26,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":27,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":28,"author":{"gitId":"HansHengGit"},"content":"     * Returns the string which represents all information of the task","lastModifiedDate":"2022-02-27"},{"lineNumber":29,"author":{"gitId":"HansHengGit"},"content":"     * to be printed to the standard output.","lastModifiedDate":"2022-02-27"},{"lineNumber":30,"author":{"gitId":"HansHengGit"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":31,"author":{"gitId":"HansHengGit"},"content":"     * @return A string consisting of all the information of the task to be printed","lastModifiedDate":"2022-02-27"},{"lineNumber":32,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":33,"author":{"gitId":"HansHengGit"},"content":"    public String toString() {","lastModifiedDate":"2022-02-03"},{"lineNumber":34,"author":{"gitId":"HansHengGit"},"content":"        return \"[E]\" + super.toString() + \" (at:\" + at.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";","lastModifiedDate":"2022-02-27"},{"lineNumber":35,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-03"},{"lineNumber":36,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-13"},{"lineNumber":37,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":38,"author":{"gitId":"HansHengGit"},"content":"     * Gets the description of the task.","lastModifiedDate":"2022-02-27"},{"lineNumber":39,"author":{"gitId":"HansHengGit"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":40,"author":{"gitId":"HansHengGit"},"content":"     * @return The description of the task","lastModifiedDate":"2022-02-27"},{"lineNumber":41,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":42,"author":{"gitId":"HansHengGit"},"content":"    public String saveDescription() {","lastModifiedDate":"2022-02-13"},{"lineNumber":43,"author":{"gitId":"HansHengGit"},"content":"        return super.saveDescription();","lastModifiedDate":"2022-02-13"},{"lineNumber":44,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-13"},{"lineNumber":45,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-13"},{"lineNumber":46,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":47,"author":{"gitId":"HansHengGit"},"content":"     * Gets the information of the task.","lastModifiedDate":"2022-02-27"},{"lineNumber":48,"author":{"gitId":"HansHengGit"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":49,"author":{"gitId":"HansHengGit"},"content":"     * @return The information of the task","lastModifiedDate":"2022-02-27"},{"lineNumber":50,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":51,"author":{"gitId":"HansHengGit"},"content":"    public String saveAdditionalInfo() {","lastModifiedDate":"2022-02-13"},{"lineNumber":52,"author":{"gitId":"HansHengGit"},"content":"        return \"/at\" + at;","lastModifiedDate":"2022-02-13"},{"lineNumber":53,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-13"},{"lineNumber":54,"author":{"gitId":"HansHengGit"},"content":"}","lastModifiedDate":"2022-02-03"}],"authorContributionMap":{"HansHengGit":54}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HansHengGit"},"content":"package duke.task;","lastModifiedDate":"2022-02-06"},{"lineNumber":2,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":3,"author":{"gitId":"HansHengGit"},"content":"/**","lastModifiedDate":"2022-02-27"},{"lineNumber":4,"author":{"gitId":"HansHengGit"},"content":" * Indicates the task description and whether it is done.","lastModifiedDate":"2022-02-27"},{"lineNumber":5,"author":{"gitId":"HansHengGit"},"content":" */","lastModifiedDate":"2022-02-27"},{"lineNumber":6,"author":{"gitId":"HansHengGit"},"content":"public class Task {","lastModifiedDate":"2022-01-27"},{"lineNumber":7,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":8,"author":{"gitId":"HansHengGit"},"content":"    public String getDescription() {","lastModifiedDate":"2022-02-25"},{"lineNumber":9,"author":{"gitId":"HansHengGit"},"content":"        return description;","lastModifiedDate":"2022-02-25"},{"lineNumber":10,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-25"},{"lineNumber":11,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-25"},{"lineNumber":12,"author":{"gitId":"HansHengGit"},"content":"    protected String description;","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"HansHengGit"},"content":"    protected boolean isDone;","lastModifiedDate":"2022-01-27"},{"lineNumber":14,"author":{"gitId":"HansHengGit"},"content":"    protected String info;","lastModifiedDate":"2022-02-13"},{"lineNumber":15,"author":{"gitId":"HansHengGit"},"content":"    protected char taskType;","lastModifiedDate":"2022-02-13"},{"lineNumber":16,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-13"},{"lineNumber":17,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":18,"author":{"gitId":"HansHengGit"},"content":"     * Gets the task type of the corresponding task.","lastModifiedDate":"2022-02-27"},{"lineNumber":19,"author":{"gitId":"HansHengGit"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":20,"author":{"gitId":"HansHengGit"},"content":"     * @return The task type","lastModifiedDate":"2022-02-27"},{"lineNumber":21,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":22,"author":{"gitId":"HansHengGit"},"content":"    public char getTaskType() {","lastModifiedDate":"2022-02-13"},{"lineNumber":23,"author":{"gitId":"HansHengGit"},"content":"        return taskType;","lastModifiedDate":"2022-02-13"},{"lineNumber":24,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-13"},{"lineNumber":25,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-13"},{"lineNumber":26,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":27,"author":{"gitId":"HansHengGit"},"content":"     * The constructor for each task, taking in and storing its description","lastModifiedDate":"2022-02-27"},{"lineNumber":28,"author":{"gitId":"HansHengGit"},"content":"     * and sets isDone to false.","lastModifiedDate":"2022-02-27"},{"lineNumber":29,"author":{"gitId":"HansHengGit"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":30,"author":{"gitId":"HansHengGit"},"content":"     * @param description","lastModifiedDate":"2022-02-27"},{"lineNumber":31,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":32,"author":{"gitId":"HansHengGit"},"content":"    public Task(String description) {","lastModifiedDate":"2022-01-27"},{"lineNumber":33,"author":{"gitId":"HansHengGit"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-01-27"},{"lineNumber":34,"author":{"gitId":"HansHengGit"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-01-27"},{"lineNumber":35,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":36,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":37,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":38,"author":{"gitId":"HansHengGit"},"content":"     * Marks the task as done or not done yet.","lastModifiedDate":"2022-02-27"},{"lineNumber":39,"author":{"gitId":"HansHengGit"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":40,"author":{"gitId":"HansHengGit"},"content":"     * @param done The indication whether the task is done or not done yet","lastModifiedDate":"2022-02-27"},{"lineNumber":41,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":42,"author":{"gitId":"HansHengGit"},"content":"    public void setDone(boolean done) {","lastModifiedDate":"2022-02-06"},{"lineNumber":43,"author":{"gitId":"HansHengGit"},"content":"        isDone \u003d done;","lastModifiedDate":"2022-02-06"},{"lineNumber":44,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-06"},{"lineNumber":45,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":46,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":47,"author":{"gitId":"HansHengGit"},"content":"     * Checks if the task is done.","lastModifiedDate":"2022-02-27"},{"lineNumber":48,"author":{"gitId":"HansHengGit"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":49,"author":{"gitId":"HansHengGit"},"content":"     * @return True if the task is done, false otherwise","lastModifiedDate":"2022-02-27"},{"lineNumber":50,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":51,"author":{"gitId":"HansHengGit"},"content":"    public boolean isDone() {","lastModifiedDate":"2022-02-06"},{"lineNumber":52,"author":{"gitId":"HansHengGit"},"content":"        return isDone;","lastModifiedDate":"2022-02-06"},{"lineNumber":53,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-06"},{"lineNumber":54,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":55,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":56,"author":{"gitId":"HansHengGit"},"content":"     * Checks if the task is done and returns an indication.","lastModifiedDate":"2022-02-27"},{"lineNumber":57,"author":{"gitId":"HansHengGit"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":58,"author":{"gitId":"HansHengGit"},"content":"     * @return \"X\" if the task is done, \" \" otherwise","lastModifiedDate":"2022-02-27"},{"lineNumber":59,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":60,"author":{"gitId":"HansHengGit"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2022-01-27"},{"lineNumber":61,"author":{"gitId":"HansHengGit"},"content":"        if (isDone \u003d\u003d true) {","lastModifiedDate":"2022-01-27"},{"lineNumber":62,"author":{"gitId":"HansHengGit"},"content":"            return \"X\";","lastModifiedDate":"2022-01-27"},{"lineNumber":63,"author":{"gitId":"HansHengGit"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":64,"author":{"gitId":"HansHengGit"},"content":"        else {","lastModifiedDate":"2022-01-27"},{"lineNumber":65,"author":{"gitId":"HansHengGit"},"content":"            return \" \";","lastModifiedDate":"2022-01-27"},{"lineNumber":66,"author":{"gitId":"HansHengGit"},"content":"        }","lastModifiedDate":"2022-01-27"},{"lineNumber":67,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":68,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":69,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":70,"author":{"gitId":"HansHengGit"},"content":"     * Returns the string which represents all information of the task","lastModifiedDate":"2022-02-27"},{"lineNumber":71,"author":{"gitId":"HansHengGit"},"content":"     * to be printed to the standard output.","lastModifiedDate":"2022-02-27"},{"lineNumber":72,"author":{"gitId":"HansHengGit"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":73,"author":{"gitId":"HansHengGit"},"content":"     * @return A string consisting of all the information of the task to be printed","lastModifiedDate":"2022-02-27"},{"lineNumber":74,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":75,"author":{"gitId":"HansHengGit"},"content":"    @Override","lastModifiedDate":"2022-02-03"},{"lineNumber":76,"author":{"gitId":"HansHengGit"},"content":"    public String toString() {","lastModifiedDate":"2022-02-03"},{"lineNumber":77,"author":{"gitId":"HansHengGit"},"content":"        return \"[\" + getStatusIcon() + \"] \" + description;","lastModifiedDate":"2022-02-03"},{"lineNumber":78,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-03"},{"lineNumber":79,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-13"},{"lineNumber":80,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":81,"author":{"gitId":"HansHengGit"},"content":"     * Gets the description of the task.","lastModifiedDate":"2022-02-27"},{"lineNumber":82,"author":{"gitId":"HansHengGit"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":83,"author":{"gitId":"HansHengGit"},"content":"     * @return The description of the task","lastModifiedDate":"2022-02-27"},{"lineNumber":84,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":85,"author":{"gitId":"HansHengGit"},"content":"    public String saveDescription() {","lastModifiedDate":"2022-02-13"},{"lineNumber":86,"author":{"gitId":"HansHengGit"},"content":"        return description;","lastModifiedDate":"2022-02-13"},{"lineNumber":87,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-13"},{"lineNumber":88,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-13"},{"lineNumber":89,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":90,"author":{"gitId":"HansHengGit"},"content":"     * Gets the information of the task.","lastModifiedDate":"2022-02-27"},{"lineNumber":91,"author":{"gitId":"HansHengGit"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":92,"author":{"gitId":"HansHengGit"},"content":"     * @return The information of the task","lastModifiedDate":"2022-02-27"},{"lineNumber":93,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":94,"author":{"gitId":"HansHengGit"},"content":"    public String saveAdditionalInfo() {","lastModifiedDate":"2022-02-13"},{"lineNumber":95,"author":{"gitId":"HansHengGit"},"content":"        return info;","lastModifiedDate":"2022-02-13"},{"lineNumber":96,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-13"},{"lineNumber":97,"author":{"gitId":"HansHengGit"},"content":"}","lastModifiedDate":"2022-01-27"}],"authorContributionMap":{"HansHengGit":97}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HansHengGit"},"content":"package duke.task;","lastModifiedDate":"2022-02-06"},{"lineNumber":2,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":3,"author":{"gitId":"HansHengGit"},"content":"/**","lastModifiedDate":"2022-02-27"},{"lineNumber":4,"author":{"gitId":"HansHengGit"},"content":" * Describes a to do task.","lastModifiedDate":"2022-02-27"},{"lineNumber":5,"author":{"gitId":"HansHengGit"},"content":" */","lastModifiedDate":"2022-02-27"},{"lineNumber":6,"author":{"gitId":"HansHengGit"},"content":"public class ToDo extends Task {","lastModifiedDate":"2022-02-03"},{"lineNumber":7,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":8,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":9,"author":{"gitId":"HansHengGit"},"content":"     * The constructor which sets the given description to the task","lastModifiedDate":"2022-02-27"},{"lineNumber":10,"author":{"gitId":"HansHengGit"},"content":"     * and assigns the task type.","lastModifiedDate":"2022-02-27"},{"lineNumber":11,"author":{"gitId":"HansHengGit"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":12,"author":{"gitId":"HansHengGit"},"content":"     * @param description The task description","lastModifiedDate":"2022-02-27"},{"lineNumber":13,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":14,"author":{"gitId":"HansHengGit"},"content":"    public ToDo(String description) {","lastModifiedDate":"2022-02-03"},{"lineNumber":15,"author":{"gitId":"HansHengGit"},"content":"        super(description);","lastModifiedDate":"2022-02-03"},{"lineNumber":16,"author":{"gitId":"HansHengGit"},"content":"        this.taskType \u003d \u0027T\u0027;","lastModifiedDate":"2022-02-13"},{"lineNumber":17,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-03"},{"lineNumber":18,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-03"},{"lineNumber":19,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":20,"author":{"gitId":"HansHengGit"},"content":"     * Returns the string which represents all information of the task","lastModifiedDate":"2022-02-27"},{"lineNumber":21,"author":{"gitId":"HansHengGit"},"content":"     * to be printed to the standard output.","lastModifiedDate":"2022-02-27"},{"lineNumber":22,"author":{"gitId":"HansHengGit"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":23,"author":{"gitId":"HansHengGit"},"content":"     * @return A string consisting of all the information of the task to be printed","lastModifiedDate":"2022-02-27"},{"lineNumber":24,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":25,"author":{"gitId":"HansHengGit"},"content":"    public String toString() {","lastModifiedDate":"2022-02-03"},{"lineNumber":26,"author":{"gitId":"HansHengGit"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2022-02-03"},{"lineNumber":27,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-03"},{"lineNumber":28,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-13"},{"lineNumber":29,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":30,"author":{"gitId":"HansHengGit"},"content":"     * Gets the description of the task.","lastModifiedDate":"2022-02-27"},{"lineNumber":31,"author":{"gitId":"HansHengGit"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":32,"author":{"gitId":"HansHengGit"},"content":"     * @return The description of the task","lastModifiedDate":"2022-02-27"},{"lineNumber":33,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":34,"author":{"gitId":"HansHengGit"},"content":"    public String saveDescription() {","lastModifiedDate":"2022-02-13"},{"lineNumber":35,"author":{"gitId":"HansHengGit"},"content":"        return super.saveDescription();","lastModifiedDate":"2022-02-13"},{"lineNumber":36,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-13"},{"lineNumber":37,"author":{"gitId":"HansHengGit"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":38,"author":{"gitId":"HansHengGit"},"content":"    /**","lastModifiedDate":"2022-02-27"},{"lineNumber":39,"author":{"gitId":"HansHengGit"},"content":"     * Gets the information of the task.","lastModifiedDate":"2022-02-27"},{"lineNumber":40,"author":{"gitId":"HansHengGit"},"content":"     *","lastModifiedDate":"2022-02-27"},{"lineNumber":41,"author":{"gitId":"HansHengGit"},"content":"     * @return The information of the task","lastModifiedDate":"2022-02-27"},{"lineNumber":42,"author":{"gitId":"HansHengGit"},"content":"     */","lastModifiedDate":"2022-02-27"},{"lineNumber":43,"author":{"gitId":"HansHengGit"},"content":"    public String saveAdditionalInfo() {","lastModifiedDate":"2022-02-13"},{"lineNumber":44,"author":{"gitId":"HansHengGit"},"content":"        return \"\";","lastModifiedDate":"2022-02-13"},{"lineNumber":45,"author":{"gitId":"HansHengGit"},"content":"    }","lastModifiedDate":"2022-02-13"},{"lineNumber":46,"author":{"gitId":"HansHengGit"},"content":"}","lastModifiedDate":"2022-02-03"}],"authorContributionMap":{"HansHengGit":46}}]
