[{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"darylhjd"},"content":"# Sailfish","lastModifiedDate":"2022-02-12"},{"lineNumber":2,"author":{"gitId":"darylhjd"},"content":"The minimalist task manager app for your daily needs.","lastModifiedDate":"2022-02-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":4,"author":{"gitId":"-"},"content":"## Usage","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"darylhjd"},"content":"To run the application, enter the following command in the terminal:","lastModifiedDate":"2022-02-12"},{"lineNumber":6,"author":{"gitId":"darylhjd"},"content":"```cmd","lastModifiedDate":"2022-02-12"},{"lineNumber":7,"author":{"gitId":"darylhjd"},"content":"$ java -jar ip.jar","lastModifiedDate":"2022-02-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":9,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":10,"author":{"gitId":"darylhjd"},"content":"## Features","lastModifiedDate":"2022-02-12"},{"lineNumber":11,"author":{"gitId":"darylhjd"},"content":"The following subsections highlight the main features of the application and ","lastModifiedDate":"2022-02-12"},{"lineNumber":12,"author":{"gitId":"darylhjd"},"content":"how to use them.","lastModifiedDate":"2022-02-12"},{"lineNumber":13,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":14,"author":{"gitId":"darylhjd"},"content":"### Add Tasks","lastModifiedDate":"2022-02-12"},{"lineNumber":15,"author":{"gitId":"darylhjd"},"content":"The application provides support for storing multiple task types.","lastModifiedDate":"2022-02-18"},{"lineNumber":16,"author":{"gitId":"darylhjd"},"content":"- Add a `Todo` task.","lastModifiedDate":"2022-02-12"},{"lineNumber":17,"author":{"gitId":"darylhjd"},"content":"  - `\u003e\u003e\u003e todo description`","lastModifiedDate":"2022-02-12"},{"lineNumber":18,"author":{"gitId":"darylhjd"},"content":"- Add a `Deadline` task.","lastModifiedDate":"2022-02-12"},{"lineNumber":19,"author":{"gitId":"darylhjd"},"content":"  - `\u003e\u003e\u003e deadline description /by by_description`","lastModifiedDate":"2022-02-12"},{"lineNumber":20,"author":{"gitId":"darylhjd"},"content":"- Add an `Event` task.","lastModifiedDate":"2022-02-12"},{"lineNumber":21,"author":{"gitId":"darylhjd"},"content":"  - `\u003e\u003e\u003e event description /at at_description`","lastModifiedDate":"2022-02-12"},{"lineNumber":22,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":23,"author":{"gitId":"darylhjd"},"content":"Examples:","lastModifiedDate":"2022-02-18"},{"lineNumber":24,"author":{"gitId":"darylhjd"},"content":"- `\u003e\u003e\u003e todo return book`","lastModifiedDate":"2022-02-18"},{"lineNumber":25,"author":{"gitId":"darylhjd"},"content":"- `\u003e\u003e\u003e deadline finish assignment /by next monday`","lastModifiedDate":"2022-02-18"},{"lineNumber":26,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":27,"author":{"gitId":"darylhjd"},"content":"### List Tasks","lastModifiedDate":"2022-02-12"},{"lineNumber":28,"author":{"gitId":"darylhjd"},"content":"To list all stored tasks, simply input the following command:","lastModifiedDate":"2022-02-12"},{"lineNumber":29,"author":{"gitId":"darylhjd"},"content":"- `\u003e\u003e\u003e list`","lastModifiedDate":"2022-02-18"},{"lineNumber":30,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":31,"author":{"gitId":"darylhjd"},"content":"This command is useful for figuring out the index of the task, which is required","lastModifiedDate":"2022-02-12"},{"lineNumber":32,"author":{"gitId":"darylhjd"},"content":"for many other features.","lastModifiedDate":"2022-02-12"},{"lineNumber":33,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":34,"author":{"gitId":"darylhjd"},"content":"### Mark as Done/Undone","lastModifiedDate":"2022-02-12"},{"lineNumber":35,"author":{"gitId":"darylhjd"},"content":"Tasks can be marked as done or undone by specifying their index.","lastModifiedDate":"2022-02-12"},{"lineNumber":36,"author":{"gitId":"darylhjd"},"content":"- Marking as done","lastModifiedDate":"2022-02-12"},{"lineNumber":37,"author":{"gitId":"darylhjd"},"content":"  - `\u003e\u003e\u003e mark task_index`","lastModifiedDate":"2022-02-12"},{"lineNumber":38,"author":{"gitId":"darylhjd"},"content":"- Marking as undone","lastModifiedDate":"2022-02-12"},{"lineNumber":39,"author":{"gitId":"darylhjd"},"content":"  - `\u003e\u003e\u003e unmark task_index`","lastModifiedDate":"2022-02-12"},{"lineNumber":40,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":41,"author":{"gitId":"darylhjd"},"content":"Examples:","lastModifiedDate":"2022-02-27"},{"lineNumber":42,"author":{"gitId":"darylhjd"},"content":"- `\u003e\u003e\u003e mark 1`","lastModifiedDate":"2022-02-27"},{"lineNumber":43,"author":{"gitId":"darylhjd"},"content":"- `\u003e\u003e\u003e mark 2`","lastModifiedDate":"2022-02-27"},{"lineNumber":44,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":45,"author":{"gitId":"darylhjd"},"content":"### Delete Tasks","lastModifiedDate":"2022-02-12"},{"lineNumber":46,"author":{"gitId":"darylhjd"},"content":"Users may delete any task by specifying the task\u0027s index:","lastModifiedDate":"2022-02-18"},{"lineNumber":47,"author":{"gitId":"darylhjd"},"content":"- `\u003e\u003e\u003e delete task_index`","lastModifiedDate":"2022-02-12"},{"lineNumber":48,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":49,"author":{"gitId":"darylhjd"},"content":"Examples:","lastModifiedDate":"2022-02-27"},{"lineNumber":50,"author":{"gitId":"darylhjd"},"content":"- `\u003e\u003e\u003e delete 1`","lastModifiedDate":"2022-02-27"},{"lineNumber":51,"author":{"gitId":"darylhjd"},"content":"- `\u003e\u003e\u003e delete 3`","lastModifiedDate":"2022-02-27"},{"lineNumber":52,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-02-27"},{"lineNumber":53,"author":{"gitId":"darylhjd"},"content":"### Find Tasks","lastModifiedDate":"2022-02-18"},{"lineNumber":54,"author":{"gitId":"darylhjd"},"content":"Users may find tasks based on keywords.","lastModifiedDate":"2022-02-18"},{"lineNumber":55,"author":{"gitId":"darylhjd"},"content":"- `\u003e\u003e\u003e find search terms`","lastModifiedDate":"2022-02-18"},{"lineNumber":56,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":57,"author":{"gitId":"darylhjd"},"content":"Note that multiple words are allowed and that the case does not matter. ","lastModifiedDate":"2022-02-18"},{"lineNumber":58,"author":{"gitId":"darylhjd"},"content":"The program will search for tasks per word.","lastModifiedDate":"2022-02-18"},{"lineNumber":59,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":60,"author":{"gitId":"darylhjd"},"content":"Examples:","lastModifiedDate":"2022-02-18"},{"lineNumber":61,"author":{"gitId":"darylhjd"},"content":"- `\u003e\u003e\u003e find book`","lastModifiedDate":"2022-02-18"},{"lineNumber":62,"author":{"gitId":"darylhjd"},"content":"- `\u003e\u003e\u003e find school assignment`","lastModifiedDate":"2022-02-18"}],"authorContributionMap":{"darylhjd":59,"-":3}},{"path":"src/main/java/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"darylhjd"},"content":"import bot.SailfishUI;","lastModifiedDate":"2022-02-11"},{"lineNumber":2,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":3,"author":{"gitId":"darylhjd"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-05"},{"lineNumber":4,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":5,"author":{"gitId":"darylhjd"},"content":"/**","lastModifiedDate":"2022-02-19"},{"lineNumber":6,"author":{"gitId":"darylhjd"},"content":" * Bot starts here.","lastModifiedDate":"2022-02-19"},{"lineNumber":7,"author":{"gitId":"darylhjd"},"content":" */","lastModifiedDate":"2022-02-19"},{"lineNumber":8,"author":{"gitId":"darylhjd"},"content":"public class Main {","lastModifiedDate":"2022-01-21"},{"lineNumber":9,"author":{"gitId":"darylhjd"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2022-01-21"},{"lineNumber":10,"author":{"gitId":"darylhjd"},"content":"        try {","lastModifiedDate":"2022-02-05"},{"lineNumber":11,"author":{"gitId":"darylhjd"},"content":"            SailfishUI fish \u003d new SailfishUI();","lastModifiedDate":"2022-02-11"},{"lineNumber":12,"author":{"gitId":"darylhjd"},"content":"            fish.takeControl();","lastModifiedDate":"2022-01-21"},{"lineNumber":13,"author":{"gitId":"darylhjd"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-05"},{"lineNumber":14,"author":{"gitId":"darylhjd"},"content":"            System.out.printf(\"There was an error reading/saving the database: %s\\n\" +","lastModifiedDate":"2022-02-05"},{"lineNumber":15,"author":{"gitId":"darylhjd"},"content":"                    \"Stopping application...\\n\", e.getMessage());","lastModifiedDate":"2022-02-05"},{"lineNumber":16,"author":{"gitId":"darylhjd"},"content":"        }","lastModifiedDate":"2022-02-05"},{"lineNumber":17,"author":{"gitId":"darylhjd"},"content":"    }","lastModifiedDate":"2022-01-21"},{"lineNumber":18,"author":{"gitId":"darylhjd"},"content":"}","lastModifiedDate":"2022-01-21"}],"authorContributionMap":{"darylhjd":18}},{"path":"src/main/java/bot/CommandParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"darylhjd"},"content":"package bot;","lastModifiedDate":"2022-01-21"},{"lineNumber":2,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":3,"author":{"gitId":"darylhjd"},"content":"import java.util.HashMap;","lastModifiedDate":"2022-01-21"},{"lineNumber":4,"author":{"gitId":"darylhjd"},"content":"import java.util.Map;","lastModifiedDate":"2022-01-21"},{"lineNumber":5,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":6,"author":{"gitId":"darylhjd"},"content":"/**","lastModifiedDate":"2022-01-21"},{"lineNumber":7,"author":{"gitId":"darylhjd"},"content":" * CommandParser class is concerned with parsing the input from the user.","lastModifiedDate":"2022-02-11"},{"lineNumber":8,"author":{"gitId":"darylhjd"},"content":" * \u003cp\u003e","lastModifiedDate":"2022-02-05"},{"lineNumber":9,"author":{"gitId":"darylhjd"},"content":" * Note that this class is not in fact responsible for the bot\u0027s individual commands (list command, todo command).","lastModifiedDate":"2022-02-02"},{"lineNumber":10,"author":{"gitId":"darylhjd"},"content":" */","lastModifiedDate":"2022-01-21"},{"lineNumber":11,"author":{"gitId":"darylhjd"},"content":"public final class CommandParser {","lastModifiedDate":"2022-02-11"},{"lineNumber":12,"author":{"gitId":"darylhjd"},"content":"    /**","lastModifiedDate":"2022-01-21"},{"lineNumber":13,"author":{"gitId":"darylhjd"},"content":"     * The actual command the user inputted.","lastModifiedDate":"2022-01-21"},{"lineNumber":14,"author":{"gitId":"darylhjd"},"content":"     */","lastModifiedDate":"2022-01-21"},{"lineNumber":15,"author":{"gitId":"darylhjd"},"content":"    private final String command;","lastModifiedDate":"2022-01-21"},{"lineNumber":16,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":17,"author":{"gitId":"darylhjd"},"content":"    /**","lastModifiedDate":"2022-01-21"},{"lineNumber":18,"author":{"gitId":"darylhjd"},"content":"     * This description that came with this command.","lastModifiedDate":"2022-01-21"},{"lineNumber":19,"author":{"gitId":"darylhjd"},"content":"     */","lastModifiedDate":"2022-01-21"},{"lineNumber":20,"author":{"gitId":"darylhjd"},"content":"    private final String desc;","lastModifiedDate":"2022-01-21"},{"lineNumber":21,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":22,"author":{"gitId":"darylhjd"},"content":"    /**","lastModifiedDate":"2022-01-21"},{"lineNumber":23,"author":{"gitId":"darylhjd"},"content":"     * The extra arguments specified with the command.","lastModifiedDate":"2022-01-21"},{"lineNumber":24,"author":{"gitId":"darylhjd"},"content":"     */","lastModifiedDate":"2022-01-21"},{"lineNumber":25,"author":{"gitId":"darylhjd"},"content":"    private final Map\u003cString, String\u003e arguments;","lastModifiedDate":"2022-01-28"},{"lineNumber":26,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":27,"author":{"gitId":"darylhjd"},"content":"    /**","lastModifiedDate":"2022-01-21"},{"lineNumber":28,"author":{"gitId":"darylhjd"},"content":"     * Creates a Command object.","lastModifiedDate":"2022-01-21"},{"lineNumber":29,"author":{"gitId":"darylhjd"},"content":"     *","lastModifiedDate":"2022-01-21"},{"lineNumber":30,"author":{"gitId":"darylhjd"},"content":"     * @param command   The actual command inputted by the user.","lastModifiedDate":"2022-01-21"},{"lineNumber":31,"author":{"gitId":"darylhjd"},"content":"     * @param desc      Description for the command.","lastModifiedDate":"2022-01-21"},{"lineNumber":32,"author":{"gitId":"darylhjd"},"content":"     * @param artifacts Extra arguments specified with this command.","lastModifiedDate":"2022-01-21"},{"lineNumber":33,"author":{"gitId":"darylhjd"},"content":"     */","lastModifiedDate":"2022-01-21"},{"lineNumber":34,"author":{"gitId":"darylhjd"},"content":"    private CommandParser(String command, String desc, Map\u003cString, String\u003e artifacts) {","lastModifiedDate":"2022-02-11"},{"lineNumber":35,"author":{"gitId":"darylhjd"},"content":"        this.command \u003d command;","lastModifiedDate":"2022-01-21"},{"lineNumber":36,"author":{"gitId":"darylhjd"},"content":"        this.desc \u003d desc;","lastModifiedDate":"2022-01-21"},{"lineNumber":37,"author":{"gitId":"darylhjd"},"content":"        this.arguments \u003d artifacts;","lastModifiedDate":"2022-01-28"},{"lineNumber":38,"author":{"gitId":"darylhjd"},"content":"    }","lastModifiedDate":"2022-01-21"},{"lineNumber":39,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":40,"author":{"gitId":"darylhjd"},"content":"    /**","lastModifiedDate":"2022-01-21"},{"lineNumber":41,"author":{"gitId":"darylhjd"},"content":"     * Creates a new Command from a user input line.","lastModifiedDate":"2022-01-21"},{"lineNumber":42,"author":{"gitId":"darylhjd"},"content":"     *","lastModifiedDate":"2022-01-21"},{"lineNumber":43,"author":{"gitId":"darylhjd"},"content":"     * @param input The inputted line from the console.","lastModifiedDate":"2022-01-21"},{"lineNumber":44,"author":{"gitId":"darylhjd"},"content":"     * @return New Command object with parsed information.","lastModifiedDate":"2022-01-21"},{"lineNumber":45,"author":{"gitId":"darylhjd"},"content":"     */","lastModifiedDate":"2022-01-21"},{"lineNumber":46,"author":{"gitId":"darylhjd"},"content":"    public static CommandParser fromString(String input) {","lastModifiedDate":"2022-02-11"},{"lineNumber":47,"author":{"gitId":"darylhjd"},"content":"        // Trim the input.","lastModifiedDate":"2022-01-28"},{"lineNumber":48,"author":{"gitId":"darylhjd"},"content":"        input \u003d input.trim();","lastModifiedDate":"2022-01-28"},{"lineNumber":49,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":50,"author":{"gitId":"darylhjd"},"content":"        // We first split the command with a space. This will allow us to get the first word","lastModifiedDate":"2022-01-21"},{"lineNumber":51,"author":{"gitId":"darylhjd"},"content":"        // in the input. The first word will be the command that the user wants.","lastModifiedDate":"2022-01-21"},{"lineNumber":52,"author":{"gitId":"darylhjd"},"content":"        String[] parsedOne \u003d input.split(\" \", 2);","lastModifiedDate":"2022-01-21"},{"lineNumber":53,"author":{"gitId":"darylhjd"},"content":"        String command \u003d parsedOne[0].toLowerCase();","lastModifiedDate":"2022-01-28"},{"lineNumber":54,"author":{"gitId":"darylhjd"},"content":"        // If the length of the first parsed command is not more or equal to 2, then","lastModifiedDate":"2022-01-21"},{"lineNumber":55,"author":{"gitId":"darylhjd"},"content":"        // there is no description or extra arguments.","lastModifiedDate":"2022-01-21"},{"lineNumber":56,"author":{"gitId":"darylhjd"},"content":"        if (parsedOne.length \u003c 2) {","lastModifiedDate":"2022-01-21"},{"lineNumber":57,"author":{"gitId":"darylhjd"},"content":"            return new CommandParser(command, \"\", new HashMap\u003c\u003e());","lastModifiedDate":"2022-02-11"},{"lineNumber":58,"author":{"gitId":"darylhjd"},"content":"        }","lastModifiedDate":"2022-01-21"},{"lineNumber":59,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":60,"author":{"gitId":"darylhjd"},"content":"        // Else, there is either a description or extra arguments.","lastModifiedDate":"2022-01-21"},{"lineNumber":61,"author":{"gitId":"darylhjd"},"content":"        // To find out, we first split by the \"/\" character.","lastModifiedDate":"2022-01-21"},{"lineNumber":62,"author":{"gitId":"darylhjd"},"content":"        String[] parsedTwo \u003d parsedOne[1].split(\"/\");","lastModifiedDate":"2022-01-21"},{"lineNumber":63,"author":{"gitId":"darylhjd"},"content":"        // The first item in the list will always be the description.","lastModifiedDate":"2022-01-21"},{"lineNumber":64,"author":{"gitId":"darylhjd"},"content":"        String task \u003d parsedTwo[0].trim();","lastModifiedDate":"2022-01-28"},{"lineNumber":65,"author":{"gitId":"darylhjd"},"content":"        // Then we parse the rest of the extra arguments.","lastModifiedDate":"2022-01-21"},{"lineNumber":66,"author":{"gitId":"darylhjd"},"content":"        Map\u003cString, String\u003e extras \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2022-01-21"},{"lineNumber":67,"author":{"gitId":"darylhjd"},"content":"        for (int i \u003d 1; i \u003c parsedTwo.length; i++) {","lastModifiedDate":"2022-01-21"},{"lineNumber":68,"author":{"gitId":"darylhjd"},"content":"            // The first word will be the argument type.","lastModifiedDate":"2022-01-21"},{"lineNumber":69,"author":{"gitId":"darylhjd"},"content":"            String[] parsedThree \u003d parsedTwo[i].split(\" \", 2);","lastModifiedDate":"2022-01-21"},{"lineNumber":70,"author":{"gitId":"darylhjd"},"content":"            extras.put(parsedThree[0].toLowerCase(), parsedThree.length \u003d\u003d 2 ? parsedThree[1] : \"\");","lastModifiedDate":"2022-01-28"},{"lineNumber":71,"author":{"gitId":"darylhjd"},"content":"        }","lastModifiedDate":"2022-01-21"},{"lineNumber":72,"author":{"gitId":"darylhjd"},"content":"        return new CommandParser(command, task, extras);","lastModifiedDate":"2022-02-11"},{"lineNumber":73,"author":{"gitId":"darylhjd"},"content":"    }","lastModifiedDate":"2022-01-21"},{"lineNumber":74,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":75,"author":{"gitId":"darylhjd"},"content":"    /**","lastModifiedDate":"2022-01-21"},{"lineNumber":76,"author":{"gitId":"darylhjd"},"content":"     * Gets the command.","lastModifiedDate":"2022-01-21"},{"lineNumber":77,"author":{"gitId":"darylhjd"},"content":"     *","lastModifiedDate":"2022-01-21"},{"lineNumber":78,"author":{"gitId":"darylhjd"},"content":"     * @return Command string.","lastModifiedDate":"2022-01-21"},{"lineNumber":79,"author":{"gitId":"darylhjd"},"content":"     */","lastModifiedDate":"2022-01-21"},{"lineNumber":80,"author":{"gitId":"darylhjd"},"content":"    public String getCommand() {","lastModifiedDate":"2022-01-21"},{"lineNumber":81,"author":{"gitId":"darylhjd"},"content":"        return this.command;","lastModifiedDate":"2022-01-21"},{"lineNumber":82,"author":{"gitId":"darylhjd"},"content":"    }","lastModifiedDate":"2022-01-21"},{"lineNumber":83,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":84,"author":{"gitId":"darylhjd"},"content":"    /**","lastModifiedDate":"2022-01-21"},{"lineNumber":85,"author":{"gitId":"darylhjd"},"content":"     * Gets the command description.","lastModifiedDate":"2022-01-21"},{"lineNumber":86,"author":{"gitId":"darylhjd"},"content":"     *","lastModifiedDate":"2022-01-21"},{"lineNumber":87,"author":{"gitId":"darylhjd"},"content":"     * @return Command description.","lastModifiedDate":"2022-01-21"},{"lineNumber":88,"author":{"gitId":"darylhjd"},"content":"     */","lastModifiedDate":"2022-01-21"},{"lineNumber":89,"author":{"gitId":"darylhjd"},"content":"    public String getDesc() {","lastModifiedDate":"2022-01-21"},{"lineNumber":90,"author":{"gitId":"darylhjd"},"content":"        return this.desc;","lastModifiedDate":"2022-01-21"},{"lineNumber":91,"author":{"gitId":"darylhjd"},"content":"    }","lastModifiedDate":"2022-01-21"},{"lineNumber":92,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":93,"author":{"gitId":"darylhjd"},"content":"    /**","lastModifiedDate":"2022-01-21"},{"lineNumber":94,"author":{"gitId":"darylhjd"},"content":"     * Get the specified argument for this argument.","lastModifiedDate":"2022-01-28"},{"lineNumber":95,"author":{"gitId":"darylhjd"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":96,"author":{"gitId":"darylhjd"},"content":"     * @param arg The argument key.","lastModifiedDate":"2022-01-28"},{"lineNumber":97,"author":{"gitId":"darylhjd"},"content":"     * @return Argument value, or NULL if not present.","lastModifiedDate":"2022-01-28"},{"lineNumber":98,"author":{"gitId":"darylhjd"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":99,"author":{"gitId":"darylhjd"},"content":"    public String getArgument(String arg) {","lastModifiedDate":"2022-01-28"},{"lineNumber":100,"author":{"gitId":"darylhjd"},"content":"        return this.arguments.get(arg);","lastModifiedDate":"2022-01-28"},{"lineNumber":101,"author":{"gitId":"darylhjd"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":102,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":103,"author":{"gitId":"darylhjd"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":104,"author":{"gitId":"darylhjd"},"content":"     * Useful for debugging purposes.","lastModifiedDate":"2022-01-28"},{"lineNumber":105,"author":{"gitId":"darylhjd"},"content":"     *","lastModifiedDate":"2022-01-21"},{"lineNumber":106,"author":{"gitId":"darylhjd"},"content":"     * @return String representation of a parsed command.","lastModifiedDate":"2022-01-28"},{"lineNumber":107,"author":{"gitId":"darylhjd"},"content":"     */","lastModifiedDate":"2022-01-21"},{"lineNumber":108,"author":{"gitId":"darylhjd"},"content":"    @Override","lastModifiedDate":"2022-01-28"},{"lineNumber":109,"author":{"gitId":"darylhjd"},"content":"    public String toString() {","lastModifiedDate":"2022-01-28"},{"lineNumber":110,"author":{"gitId":"darylhjd"},"content":"        return String.format(\"Command(\" +","lastModifiedDate":"2022-01-28"},{"lineNumber":111,"author":{"gitId":"darylhjd"},"content":"                        \"command: %s, desc: %s, arguments: %s)\",","lastModifiedDate":"2022-01-28"},{"lineNumber":112,"author":{"gitId":"darylhjd"},"content":"                this.command, this.desc, this.arguments);","lastModifiedDate":"2022-01-28"},{"lineNumber":113,"author":{"gitId":"darylhjd"},"content":"    }","lastModifiedDate":"2022-01-21"},{"lineNumber":114,"author":{"gitId":"darylhjd"},"content":"}","lastModifiedDate":"2022-01-21"}],"authorContributionMap":{"darylhjd":114}},{"path":"src/main/java/bot/SailfishUI.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"darylhjd"},"content":"package bot;","lastModifiedDate":"2022-01-21"},{"lineNumber":2,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":3,"author":{"gitId":"darylhjd"},"content":"import tasks.Deadline;","lastModifiedDate":"2022-02-02"},{"lineNumber":4,"author":{"gitId":"darylhjd"},"content":"import tasks.Event;","lastModifiedDate":"2022-02-02"},{"lineNumber":5,"author":{"gitId":"darylhjd"},"content":"import tasks.Task;","lastModifiedDate":"2022-02-02"},{"lineNumber":6,"author":{"gitId":"darylhjd"},"content":"import tasks.Todo;","lastModifiedDate":"2022-02-02"},{"lineNumber":7,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":8,"author":{"gitId":"darylhjd"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-05"},{"lineNumber":9,"author":{"gitId":"darylhjd"},"content":"import java.util.List;","lastModifiedDate":"2022-02-11"},{"lineNumber":10,"author":{"gitId":"darylhjd"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-01-21"},{"lineNumber":11,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":12,"author":{"gitId":"darylhjd"},"content":"/**","lastModifiedDate":"2022-01-28"},{"lineNumber":13,"author":{"gitId":"darylhjd"},"content":" * The bot.","lastModifiedDate":"2022-01-28"},{"lineNumber":14,"author":{"gitId":"darylhjd"},"content":" */","lastModifiedDate":"2022-01-28"},{"lineNumber":15,"author":{"gitId":"darylhjd"},"content":"public final class SailfishUI {","lastModifiedDate":"2022-02-11"},{"lineNumber":16,"author":{"gitId":"darylhjd"},"content":"    /**","lastModifiedDate":"2022-01-21"},{"lineNumber":17,"author":{"gitId":"darylhjd"},"content":"     * The width for the screen.","lastModifiedDate":"2022-01-21"},{"lineNumber":18,"author":{"gitId":"darylhjd"},"content":"     */","lastModifiedDate":"2022-01-21"},{"lineNumber":19,"author":{"gitId":"darylhjd"},"content":"    private static final int WIDTH \u003d 20;","lastModifiedDate":"2022-01-28"},{"lineNumber":20,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":21,"author":{"gitId":"darylhjd"},"content":"    /**","lastModifiedDate":"2022-01-21"},{"lineNumber":22,"author":{"gitId":"darylhjd"},"content":"     * Scanner object provided to the bot.","lastModifiedDate":"2022-01-21"},{"lineNumber":23,"author":{"gitId":"darylhjd"},"content":"     */","lastModifiedDate":"2022-01-21"},{"lineNumber":24,"author":{"gitId":"darylhjd"},"content":"    private final Scanner scanner;","lastModifiedDate":"2022-01-21"},{"lineNumber":25,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":26,"author":{"gitId":"darylhjd"},"content":"    /**","lastModifiedDate":"2022-01-21"},{"lineNumber":27,"author":{"gitId":"darylhjd"},"content":"     * The list of tasks stored by the bot.","lastModifiedDate":"2022-01-21"},{"lineNumber":28,"author":{"gitId":"darylhjd"},"content":"     */","lastModifiedDate":"2022-01-21"},{"lineNumber":29,"author":{"gitId":"darylhjd"},"content":"    private final TaskManager manager;","lastModifiedDate":"2022-02-11"},{"lineNumber":30,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":31,"author":{"gitId":"darylhjd"},"content":"    /**","lastModifiedDate":"2022-01-21"},{"lineNumber":32,"author":{"gitId":"darylhjd"},"content":"     * Creates the bot.","lastModifiedDate":"2022-01-21"},{"lineNumber":33,"author":{"gitId":"darylhjd"},"content":"     */","lastModifiedDate":"2022-01-21"},{"lineNumber":34,"author":{"gitId":"darylhjd"},"content":"    public SailfishUI() throws IOException {","lastModifiedDate":"2022-02-11"},{"lineNumber":35,"author":{"gitId":"darylhjd"},"content":"        this.scanner \u003d new Scanner(System.in);","lastModifiedDate":"2022-01-21"},{"lineNumber":36,"author":{"gitId":"darylhjd"},"content":"        this.manager \u003d new TaskManager();","lastModifiedDate":"2022-02-11"},{"lineNumber":37,"author":{"gitId":"darylhjd"},"content":"    }","lastModifiedDate":"2022-01-21"},{"lineNumber":38,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":39,"author":{"gitId":"darylhjd"},"content":"    /**","lastModifiedDate":"2022-01-21"},{"lineNumber":40,"author":{"gitId":"darylhjd"},"content":"     * Makes the bot take control of the application.","lastModifiedDate":"2022-01-21"},{"lineNumber":41,"author":{"gitId":"darylhjd"},"content":"     * \u003cp\u003e","lastModifiedDate":"2022-01-21"},{"lineNumber":42,"author":{"gitId":"darylhjd"},"content":"     * This method shows the welcome message and then waits for input.","lastModifiedDate":"2022-01-21"},{"lineNumber":43,"author":{"gitId":"darylhjd"},"content":"     *","lastModifiedDate":"2022-02-05"},{"lineNumber":44,"author":{"gitId":"darylhjd"},"content":"     * @throws IOException Error saving data.","lastModifiedDate":"2022-02-05"},{"lineNumber":45,"author":{"gitId":"darylhjd"},"content":"     */","lastModifiedDate":"2022-01-21"},{"lineNumber":46,"author":{"gitId":"darylhjd"},"content":"    public void takeControl() throws IOException {","lastModifiedDate":"2022-02-05"},{"lineNumber":47,"author":{"gitId":"darylhjd"},"content":"        // Prints the welcome text.","lastModifiedDate":"2022-01-21"},{"lineNumber":48,"author":{"gitId":"darylhjd"},"content":"        this.printWelcome();","lastModifiedDate":"2022-01-21"},{"lineNumber":49,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":50,"author":{"gitId":"darylhjd"},"content":"        // Input loop.","lastModifiedDate":"2022-01-21"},{"lineNumber":51,"author":{"gitId":"darylhjd"},"content":"        while (true) {","lastModifiedDate":"2022-01-21"},{"lineNumber":52,"author":{"gitId":"darylhjd"},"content":"            System.out.println(\"-\".repeat(WIDTH));","lastModifiedDate":"2022-01-28"},{"lineNumber":53,"author":{"gitId":"darylhjd"},"content":"            // Get input from the user.","lastModifiedDate":"2022-01-21"},{"lineNumber":54,"author":{"gitId":"darylhjd"},"content":"            CommandParser commandParser \u003d CommandParser.fromString(this.scanner.nextLine());","lastModifiedDate":"2022-02-11"},{"lineNumber":55,"author":{"gitId":"darylhjd"},"content":"            System.out.println(\"-\".repeat(WIDTH));","lastModifiedDate":"2022-01-28"},{"lineNumber":56,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":57,"author":{"gitId":"darylhjd"},"content":"            // Switch the command.","lastModifiedDate":"2022-01-21"},{"lineNumber":58,"author":{"gitId":"darylhjd"},"content":"            switch (commandParser.getCommand()) {","lastModifiedDate":"2022-02-11"},{"lineNumber":59,"author":{"gitId":"darylhjd"},"content":"            case \"list\": // List all tasks.","lastModifiedDate":"2022-01-21"},{"lineNumber":60,"author":{"gitId":"darylhjd"},"content":"                this.list();","lastModifiedDate":"2022-01-21"},{"lineNumber":61,"author":{"gitId":"darylhjd"},"content":"                break;","lastModifiedDate":"2022-01-21"},{"lineNumber":62,"author":{"gitId":"darylhjd"},"content":"            case \"mark\": // Mark a task as done.","lastModifiedDate":"2022-01-28"},{"lineNumber":63,"author":{"gitId":"darylhjd"},"content":"                this.mark(commandParser);","lastModifiedDate":"2022-02-11"},{"lineNumber":64,"author":{"gitId":"darylhjd"},"content":"                break;","lastModifiedDate":"2022-01-21"},{"lineNumber":65,"author":{"gitId":"darylhjd"},"content":"            case \"unmark\": // Mark a task as not done.","lastModifiedDate":"2022-01-28"},{"lineNumber":66,"author":{"gitId":"darylhjd"},"content":"                this.unMark(commandParser);","lastModifiedDate":"2022-02-11"},{"lineNumber":67,"author":{"gitId":"darylhjd"},"content":"                break;","lastModifiedDate":"2022-01-21"},{"lineNumber":68,"author":{"gitId":"darylhjd"},"content":"            case \"delete\":","lastModifiedDate":"2022-02-04"},{"lineNumber":69,"author":{"gitId":"darylhjd"},"content":"                this.delete(commandParser);","lastModifiedDate":"2022-02-11"},{"lineNumber":70,"author":{"gitId":"darylhjd"},"content":"                break;","lastModifiedDate":"2022-02-04"},{"lineNumber":71,"author":{"gitId":"darylhjd"},"content":"            case \"find\":","lastModifiedDate":"2022-02-11"},{"lineNumber":72,"author":{"gitId":"darylhjd"},"content":"                this.find(commandParser);","lastModifiedDate":"2022-02-11"},{"lineNumber":73,"author":{"gitId":"darylhjd"},"content":"                break;","lastModifiedDate":"2022-02-11"},{"lineNumber":74,"author":{"gitId":"darylhjd"},"content":"            case \"bye\": // Exit the app.","lastModifiedDate":"2022-01-21"},{"lineNumber":75,"author":{"gitId":"darylhjd"},"content":"                this.bye();","lastModifiedDate":"2022-02-05"},{"lineNumber":76,"author":{"gitId":"darylhjd"},"content":"                return;","lastModifiedDate":"2022-01-21"},{"lineNumber":77,"author":{"gitId":"darylhjd"},"content":"            default: // By default, we assume that the user is using a command that adds a task.","lastModifiedDate":"2022-01-28"},{"lineNumber":78,"author":{"gitId":"darylhjd"},"content":"                this.addTask(commandParser);","lastModifiedDate":"2022-02-11"},{"lineNumber":79,"author":{"gitId":"darylhjd"},"content":"                break;","lastModifiedDate":"2022-01-21"},{"lineNumber":80,"author":{"gitId":"darylhjd"},"content":"            }","lastModifiedDate":"2022-01-21"},{"lineNumber":81,"author":{"gitId":"darylhjd"},"content":"        }","lastModifiedDate":"2022-01-21"},{"lineNumber":82,"author":{"gitId":"darylhjd"},"content":"    }","lastModifiedDate":"2022-01-21"},{"lineNumber":83,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":84,"author":{"gitId":"darylhjd"},"content":"    /**","lastModifiedDate":"2022-01-21"},{"lineNumber":85,"author":{"gitId":"darylhjd"},"content":"     * Prints the welcome for the first time to the user.","lastModifiedDate":"2022-01-21"},{"lineNumber":86,"author":{"gitId":"darylhjd"},"content":"     */","lastModifiedDate":"2022-01-21"},{"lineNumber":87,"author":{"gitId":"darylhjd"},"content":"    private void printWelcome() {","lastModifiedDate":"2022-01-21"},{"lineNumber":88,"author":{"gitId":"darylhjd"},"content":"        System.out.println(\"░██████╗░█████╗░██╗██╗░░░░░███████╗██╗░██████╗██╗░░██╗\\n\" +","lastModifiedDate":"2022-01-21"},{"lineNumber":89,"author":{"gitId":"darylhjd"},"content":"                \"██╔════╝██╔══██╗██║██║░░░░░██╔════╝██║██╔════╝██║░░██║\\n\" +","lastModifiedDate":"2022-01-21"},{"lineNumber":90,"author":{"gitId":"darylhjd"},"content":"                \"╚█████╗░███████║██║██║░░░░░█████╗░░██║╚█████╗░███████║\\n\" +","lastModifiedDate":"2022-01-21"},{"lineNumber":91,"author":{"gitId":"darylhjd"},"content":"                \"░╚═══██╗██╔══██║██║██║░░░░░██╔══╝░░██║░╚═══██╗██╔══██║\\n\" +","lastModifiedDate":"2022-01-21"},{"lineNumber":92,"author":{"gitId":"darylhjd"},"content":"                \"██████╔╝██║░░██║██║███████╗██║░░░░░██║██████╔╝██║░░██║\\n\" +","lastModifiedDate":"2022-01-21"},{"lineNumber":93,"author":{"gitId":"darylhjd"},"content":"                \"╚═════╝░╚═╝░░╚═╝╚═╝╚══════╝╚═╝░░░░░╚═╝╚═════╝░╚═╝░░╚═╝\\n\" +","lastModifiedDate":"2022-01-21"},{"lineNumber":94,"author":{"gitId":"darylhjd"},"content":"                \"Commanding the seas since 2022.\\n\" +","lastModifiedDate":"2022-01-21"},{"lineNumber":95,"author":{"gitId":"darylhjd"},"content":"                \"What can Poseidon do for you today?\");","lastModifiedDate":"2022-01-21"},{"lineNumber":96,"author":{"gitId":"darylhjd"},"content":"    }","lastModifiedDate":"2022-01-21"},{"lineNumber":97,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":98,"author":{"gitId":"darylhjd"},"content":"    /**","lastModifiedDate":"2022-01-21"},{"lineNumber":99,"author":{"gitId":"darylhjd"},"content":"     * List all stored tasks.","lastModifiedDate":"2022-01-21"},{"lineNumber":100,"author":{"gitId":"darylhjd"},"content":"     */","lastModifiedDate":"2022-01-21"},{"lineNumber":101,"author":{"gitId":"darylhjd"},"content":"    private void list() {","lastModifiedDate":"2022-01-21"},{"lineNumber":102,"author":{"gitId":"darylhjd"},"content":"        if (this.manager.getNumTasks() \u003d\u003d 0) {","lastModifiedDate":"2022-02-05"},{"lineNumber":103,"author":{"gitId":"darylhjd"},"content":"            System.out.println(\"No tasks!\");","lastModifiedDate":"2022-01-21"},{"lineNumber":104,"author":{"gitId":"darylhjd"},"content":"            return;","lastModifiedDate":"2022-01-21"},{"lineNumber":105,"author":{"gitId":"darylhjd"},"content":"        }","lastModifiedDate":"2022-01-21"},{"lineNumber":106,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":107,"author":{"gitId":"darylhjd"},"content":"        StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2022-01-21"},{"lineNumber":108,"author":{"gitId":"darylhjd"},"content":"        builder.append(\"Here are the tasks in your list:\\n\");","lastModifiedDate":"2022-01-21"},{"lineNumber":109,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":110,"author":{"gitId":"darylhjd"},"content":"        // Add each task.","lastModifiedDate":"2022-01-28"},{"lineNumber":111,"author":{"gitId":"darylhjd"},"content":"        for (int i \u003d 0; i \u003c this.manager.getNumTasks(); i++) {","lastModifiedDate":"2022-02-05"},{"lineNumber":112,"author":{"gitId":"darylhjd"},"content":"            builder.append(String.format(\"%d. %s\\n\", i + 1, this.manager.getTask(i)));","lastModifiedDate":"2022-02-05"},{"lineNumber":113,"author":{"gitId":"darylhjd"},"content":"        }","lastModifiedDate":"2022-01-21"},{"lineNumber":114,"author":{"gitId":"darylhjd"},"content":"        builder.deleteCharAt(builder.length() - 1);  // Remove last newline.","lastModifiedDate":"2022-01-28"},{"lineNumber":115,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":116,"author":{"gitId":"darylhjd"},"content":"        // Print the tasks.","lastModifiedDate":"2022-01-21"},{"lineNumber":117,"author":{"gitId":"darylhjd"},"content":"        System.out.println(builder);","lastModifiedDate":"2022-01-21"},{"lineNumber":118,"author":{"gitId":"darylhjd"},"content":"    }","lastModifiedDate":"2022-01-21"},{"lineNumber":119,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":120,"author":{"gitId":"darylhjd"},"content":"    /**","lastModifiedDate":"2022-01-21"},{"lineNumber":121,"author":{"gitId":"darylhjd"},"content":"     * Mark a task as done.","lastModifiedDate":"2022-01-21"},{"lineNumber":122,"author":{"gitId":"darylhjd"},"content":"     *","lastModifiedDate":"2022-01-21"},{"lineNumber":123,"author":{"gitId":"darylhjd"},"content":"     * @param commandParser Command object containing parsed information.","lastModifiedDate":"2022-02-11"},{"lineNumber":124,"author":{"gitId":"darylhjd"},"content":"     */","lastModifiedDate":"2022-01-21"},{"lineNumber":125,"author":{"gitId":"darylhjd"},"content":"    private void mark(CommandParser commandParser) {","lastModifiedDate":"2022-02-11"},{"lineNumber":126,"author":{"gitId":"darylhjd"},"content":"        // Get the index of the task to mark.","lastModifiedDate":"2022-01-21"},{"lineNumber":127,"author":{"gitId":"darylhjd"},"content":"        Task task;","lastModifiedDate":"2022-01-21"},{"lineNumber":128,"author":{"gitId":"darylhjd"},"content":"        try {","lastModifiedDate":"2022-01-21"},{"lineNumber":129,"author":{"gitId":"darylhjd"},"content":"            task \u003d this.manager.getTask(commandParser);","lastModifiedDate":"2022-02-11"},{"lineNumber":130,"author":{"gitId":"darylhjd"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2022-01-21"},{"lineNumber":131,"author":{"gitId":"darylhjd"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2022-01-28"},{"lineNumber":132,"author":{"gitId":"darylhjd"},"content":"            return;","lastModifiedDate":"2022-01-21"},{"lineNumber":133,"author":{"gitId":"darylhjd"},"content":"        }","lastModifiedDate":"2022-01-21"},{"lineNumber":134,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":135,"author":{"gitId":"darylhjd"},"content":"        // Set the required task as marked.","lastModifiedDate":"2022-01-21"},{"lineNumber":136,"author":{"gitId":"darylhjd"},"content":"        task.setDone(true);","lastModifiedDate":"2022-01-28"},{"lineNumber":137,"author":{"gitId":"darylhjd"},"content":"        System.out.printf(\"Nice! I have marked this task as done:\\n%s\\n\", task);","lastModifiedDate":"2022-01-21"},{"lineNumber":138,"author":{"gitId":"darylhjd"},"content":"    }","lastModifiedDate":"2022-01-21"},{"lineNumber":139,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":140,"author":{"gitId":"darylhjd"},"content":"    /**","lastModifiedDate":"2022-01-21"},{"lineNumber":141,"author":{"gitId":"darylhjd"},"content":"     * Mark a task as undone.","lastModifiedDate":"2022-01-21"},{"lineNumber":142,"author":{"gitId":"darylhjd"},"content":"     *","lastModifiedDate":"2022-01-21"},{"lineNumber":143,"author":{"gitId":"darylhjd"},"content":"     * @param commandParser Command object containing parsed information.","lastModifiedDate":"2022-02-11"},{"lineNumber":144,"author":{"gitId":"darylhjd"},"content":"     */","lastModifiedDate":"2022-01-21"},{"lineNumber":145,"author":{"gitId":"darylhjd"},"content":"    private void unMark(CommandParser commandParser) {","lastModifiedDate":"2022-02-11"},{"lineNumber":146,"author":{"gitId":"darylhjd"},"content":"        Task task;","lastModifiedDate":"2022-01-21"},{"lineNumber":147,"author":{"gitId":"darylhjd"},"content":"        try {","lastModifiedDate":"2022-01-21"},{"lineNumber":148,"author":{"gitId":"darylhjd"},"content":"            task \u003d this.manager.getTask(commandParser);","lastModifiedDate":"2022-02-11"},{"lineNumber":149,"author":{"gitId":"darylhjd"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2022-01-21"},{"lineNumber":150,"author":{"gitId":"darylhjd"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2022-01-28"},{"lineNumber":151,"author":{"gitId":"darylhjd"},"content":"            return;","lastModifiedDate":"2022-01-21"},{"lineNumber":152,"author":{"gitId":"darylhjd"},"content":"        }","lastModifiedDate":"2022-01-21"},{"lineNumber":153,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":154,"author":{"gitId":"darylhjd"},"content":"        // Set the required task as undone.","lastModifiedDate":"2022-01-21"},{"lineNumber":155,"author":{"gitId":"darylhjd"},"content":"        task.setDone(false);","lastModifiedDate":"2022-01-28"},{"lineNumber":156,"author":{"gitId":"darylhjd"},"content":"        System.out.printf(\"Ok, I\u0027ve marked this task as not done yet:\\n%s\\n\", task);","lastModifiedDate":"2022-01-21"},{"lineNumber":157,"author":{"gitId":"darylhjd"},"content":"    }","lastModifiedDate":"2022-01-21"},{"lineNumber":158,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":159,"author":{"gitId":"darylhjd"},"content":"    /**","lastModifiedDate":"2022-02-11"},{"lineNumber":160,"author":{"gitId":"darylhjd"},"content":"     * Find tasks with description matching provided keyword.","lastModifiedDate":"2022-02-11"},{"lineNumber":161,"author":{"gitId":"darylhjd"},"content":"     *","lastModifiedDate":"2022-02-11"},{"lineNumber":162,"author":{"gitId":"darylhjd"},"content":"     * @param commandParser Command object containing parsed information.","lastModifiedDate":"2022-02-11"},{"lineNumber":163,"author":{"gitId":"darylhjd"},"content":"     */","lastModifiedDate":"2022-02-11"},{"lineNumber":164,"author":{"gitId":"darylhjd"},"content":"    private void find(CommandParser commandParser) {","lastModifiedDate":"2022-02-11"},{"lineNumber":165,"author":{"gitId":"darylhjd"},"content":"        // Do not allow search with empty search string.","lastModifiedDate":"2022-02-18"},{"lineNumber":166,"author":{"gitId":"darylhjd"},"content":"        if (commandParser.getDesc().isEmpty()) {","lastModifiedDate":"2022-02-18"},{"lineNumber":167,"author":{"gitId":"darylhjd"},"content":"            System.out.println(\"Search parameter cannot be blank!\");","lastModifiedDate":"2022-02-18"},{"lineNumber":168,"author":{"gitId":"darylhjd"},"content":"            return;","lastModifiedDate":"2022-02-18"},{"lineNumber":169,"author":{"gitId":"darylhjd"},"content":"        }","lastModifiedDate":"2022-02-18"},{"lineNumber":170,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":171,"author":{"gitId":"darylhjd"},"content":"        List\u003cTask\u003e tasks \u003d this.manager.findTasks(commandParser.getDesc());","lastModifiedDate":"2022-02-11"},{"lineNumber":172,"author":{"gitId":"darylhjd"},"content":"        if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2022-02-11"},{"lineNumber":173,"author":{"gitId":"darylhjd"},"content":"            System.out.println(\"No tasks matched your keyword!\");","lastModifiedDate":"2022-02-11"},{"lineNumber":174,"author":{"gitId":"darylhjd"},"content":"            return;","lastModifiedDate":"2022-02-11"},{"lineNumber":175,"author":{"gitId":"darylhjd"},"content":"        }","lastModifiedDate":"2022-02-11"},{"lineNumber":176,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":177,"author":{"gitId":"darylhjd"},"content":"        StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2022-02-11"},{"lineNumber":178,"author":{"gitId":"darylhjd"},"content":"        builder.append(\"We found the following tasks:\\n\");","lastModifiedDate":"2022-02-11"},{"lineNumber":179,"author":{"gitId":"darylhjd"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2022-02-11"},{"lineNumber":180,"author":{"gitId":"darylhjd"},"content":"            builder.append(String.format(\"%d. %s\\n\", i + 1, tasks.get(i)));","lastModifiedDate":"2022-02-11"},{"lineNumber":181,"author":{"gitId":"darylhjd"},"content":"        }","lastModifiedDate":"2022-02-11"},{"lineNumber":182,"author":{"gitId":"darylhjd"},"content":"        builder.deleteCharAt(builder.length() - 1);","lastModifiedDate":"2022-02-11"},{"lineNumber":183,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":184,"author":{"gitId":"darylhjd"},"content":"        // Print found tasks.","lastModifiedDate":"2022-02-11"},{"lineNumber":185,"author":{"gitId":"darylhjd"},"content":"        System.out.println(builder);","lastModifiedDate":"2022-02-11"},{"lineNumber":186,"author":{"gitId":"darylhjd"},"content":"    }","lastModifiedDate":"2022-02-11"},{"lineNumber":187,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":188,"author":{"gitId":"darylhjd"},"content":"    /**","lastModifiedDate":"2022-02-05"},{"lineNumber":189,"author":{"gitId":"darylhjd"},"content":"     * Exit the application.","lastModifiedDate":"2022-02-05"},{"lineNumber":190,"author":{"gitId":"darylhjd"},"content":"     *","lastModifiedDate":"2022-02-05"},{"lineNumber":191,"author":{"gitId":"darylhjd"},"content":"     * @throws IOException Error saving data.","lastModifiedDate":"2022-02-05"},{"lineNumber":192,"author":{"gitId":"darylhjd"},"content":"     */","lastModifiedDate":"2022-02-05"},{"lineNumber":193,"author":{"gitId":"darylhjd"},"content":"    private void bye() throws IOException {","lastModifiedDate":"2022-02-05"},{"lineNumber":194,"author":{"gitId":"darylhjd"},"content":"        System.out.println(\"Farewell, sailor!\");","lastModifiedDate":"2022-02-05"},{"lineNumber":195,"author":{"gitId":"darylhjd"},"content":"        this.manager.saveData();","lastModifiedDate":"2022-02-05"},{"lineNumber":196,"author":{"gitId":"darylhjd"},"content":"    }","lastModifiedDate":"2022-02-05"},{"lineNumber":197,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":198,"author":{"gitId":"darylhjd"},"content":"    /**","lastModifiedDate":"2022-02-04"},{"lineNumber":199,"author":{"gitId":"darylhjd"},"content":"     * Delete a task by index.","lastModifiedDate":"2022-02-04"},{"lineNumber":200,"author":{"gitId":"darylhjd"},"content":"     *","lastModifiedDate":"2022-02-04"},{"lineNumber":201,"author":{"gitId":"darylhjd"},"content":"     * @param commandParser Command object containing parsed information.","lastModifiedDate":"2022-02-11"},{"lineNumber":202,"author":{"gitId":"darylhjd"},"content":"     */","lastModifiedDate":"2022-02-04"},{"lineNumber":203,"author":{"gitId":"darylhjd"},"content":"    private void delete(CommandParser commandParser) {","lastModifiedDate":"2022-02-11"},{"lineNumber":204,"author":{"gitId":"darylhjd"},"content":"        Task task;","lastModifiedDate":"2022-02-04"},{"lineNumber":205,"author":{"gitId":"darylhjd"},"content":"        try {","lastModifiedDate":"2022-02-04"},{"lineNumber":206,"author":{"gitId":"darylhjd"},"content":"            task \u003d this.manager.getTask(commandParser);","lastModifiedDate":"2022-02-11"},{"lineNumber":207,"author":{"gitId":"darylhjd"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2022-02-04"},{"lineNumber":208,"author":{"gitId":"darylhjd"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2022-02-04"},{"lineNumber":209,"author":{"gitId":"darylhjd"},"content":"            return;","lastModifiedDate":"2022-02-04"},{"lineNumber":210,"author":{"gitId":"darylhjd"},"content":"        }","lastModifiedDate":"2022-02-04"},{"lineNumber":211,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":212,"author":{"gitId":"darylhjd"},"content":"        // Remove this task.","lastModifiedDate":"2022-02-04"},{"lineNumber":213,"author":{"gitId":"darylhjd"},"content":"        this.manager.deleteTask(task);","lastModifiedDate":"2022-02-11"},{"lineNumber":214,"author":{"gitId":"darylhjd"},"content":"        System.out.printf(\"Noted. I\u0027ve removed this task:\\n\\t%s\\n\" +","lastModifiedDate":"2022-02-04"},{"lineNumber":215,"author":{"gitId":"darylhjd"},"content":"                \"Now you have %d tasks in the list.\\n\", task, this.manager.getNumTasks());","lastModifiedDate":"2022-02-11"},{"lineNumber":216,"author":{"gitId":"darylhjd"},"content":"    }","lastModifiedDate":"2022-02-04"},{"lineNumber":217,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-02-04"},{"lineNumber":218,"author":{"gitId":"darylhjd"},"content":"    /**","lastModifiedDate":"2022-01-21"},{"lineNumber":219,"author":{"gitId":"darylhjd"},"content":"     * Add a new task.","lastModifiedDate":"2022-01-28"},{"lineNumber":220,"author":{"gitId":"darylhjd"},"content":"     *","lastModifiedDate":"2022-01-21"},{"lineNumber":221,"author":{"gitId":"darylhjd"},"content":"     * @param commandParser Command object containing parsed information.","lastModifiedDate":"2022-02-11"},{"lineNumber":222,"author":{"gitId":"darylhjd"},"content":"     */","lastModifiedDate":"2022-01-21"},{"lineNumber":223,"author":{"gitId":"darylhjd"},"content":"    private void addTask(CommandParser commandParser) {","lastModifiedDate":"2022-02-11"},{"lineNumber":224,"author":{"gitId":"darylhjd"},"content":"        // Create the required task.","lastModifiedDate":"2022-01-28"},{"lineNumber":225,"author":{"gitId":"darylhjd"},"content":"        Task newTask;","lastModifiedDate":"2022-01-28"},{"lineNumber":226,"author":{"gitId":"darylhjd"},"content":"        try {","lastModifiedDate":"2022-01-28"},{"lineNumber":227,"author":{"gitId":"darylhjd"},"content":"            switch (commandParser.getCommand()) {","lastModifiedDate":"2022-02-11"},{"lineNumber":228,"author":{"gitId":"darylhjd"},"content":"            case \"todo\":","lastModifiedDate":"2022-01-28"},{"lineNumber":229,"author":{"gitId":"darylhjd"},"content":"                newTask \u003d new Todo(commandParser.getDesc(), false);","lastModifiedDate":"2022-02-11"},{"lineNumber":230,"author":{"gitId":"darylhjd"},"content":"                break;","lastModifiedDate":"2022-01-28"},{"lineNumber":231,"author":{"gitId":"darylhjd"},"content":"            case \"deadline\":","lastModifiedDate":"2022-01-28"},{"lineNumber":232,"author":{"gitId":"darylhjd"},"content":"                newTask \u003d new Deadline(commandParser.getDesc(), false, commandParser.getArgument(Deadline.REQ_ARG));","lastModifiedDate":"2022-02-11"},{"lineNumber":233,"author":{"gitId":"darylhjd"},"content":"                break;","lastModifiedDate":"2022-01-28"},{"lineNumber":234,"author":{"gitId":"darylhjd"},"content":"            case \"event\":","lastModifiedDate":"2022-01-28"},{"lineNumber":235,"author":{"gitId":"darylhjd"},"content":"                newTask \u003d new Event(commandParser.getDesc(), false, commandParser.getArgument(Event.REQ_ARG));","lastModifiedDate":"2022-02-11"},{"lineNumber":236,"author":{"gitId":"darylhjd"},"content":"                break;","lastModifiedDate":"2022-01-28"},{"lineNumber":237,"author":{"gitId":"darylhjd"},"content":"            default:","lastModifiedDate":"2022-01-28"},{"lineNumber":238,"author":{"gitId":"darylhjd"},"content":"                throw new IllegalArgumentException(\"Unknown command!\");","lastModifiedDate":"2022-01-28"},{"lineNumber":239,"author":{"gitId":"darylhjd"},"content":"            }","lastModifiedDate":"2022-01-21"},{"lineNumber":240,"author":{"gitId":"darylhjd"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2022-01-28"},{"lineNumber":241,"author":{"gitId":"darylhjd"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2022-01-28"},{"lineNumber":242,"author":{"gitId":"darylhjd"},"content":"            return;","lastModifiedDate":"2022-01-28"},{"lineNumber":243,"author":{"gitId":"darylhjd"},"content":"        }","lastModifiedDate":"2022-01-21"},{"lineNumber":244,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-01-21"},{"lineNumber":245,"author":{"gitId":"darylhjd"},"content":"        // Really add it now!","lastModifiedDate":"2022-01-28"},{"lineNumber":246,"author":{"gitId":"darylhjd"},"content":"        this.manager.addTask(newTask);","lastModifiedDate":"2022-02-05"},{"lineNumber":247,"author":{"gitId":"darylhjd"},"content":"        System.out.printf(\"Got it. I\u0027ve added this task:\\n\\t%s\\n\" +","lastModifiedDate":"2022-01-28"},{"lineNumber":248,"author":{"gitId":"darylhjd"},"content":"                \"Now you have %d tasks in the list.\\n\", newTask, this.manager.getNumTasks());","lastModifiedDate":"2022-02-05"},{"lineNumber":249,"author":{"gitId":"darylhjd"},"content":"    }","lastModifiedDate":"2022-01-21"},{"lineNumber":250,"author":{"gitId":"darylhjd"},"content":"}","lastModifiedDate":"2022-01-21"}],"authorContributionMap":{"darylhjd":250}},{"path":"src/main/java/bot/StorageManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"darylhjd"},"content":"package bot;","lastModifiedDate":"2022-02-11"},{"lineNumber":2,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":3,"author":{"gitId":"darylhjd"},"content":"import tasks.Deadline;","lastModifiedDate":"2022-02-11"},{"lineNumber":4,"author":{"gitId":"darylhjd"},"content":"import tasks.Event;","lastModifiedDate":"2022-02-11"},{"lineNumber":5,"author":{"gitId":"darylhjd"},"content":"import tasks.Task;","lastModifiedDate":"2022-02-11"},{"lineNumber":6,"author":{"gitId":"darylhjd"},"content":"import tasks.Todo;","lastModifiedDate":"2022-02-11"},{"lineNumber":7,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":8,"author":{"gitId":"darylhjd"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-11"},{"lineNumber":9,"author":{"gitId":"darylhjd"},"content":"import java.nio.file.FileAlreadyExistsException;","lastModifiedDate":"2022-02-11"},{"lineNumber":10,"author":{"gitId":"darylhjd"},"content":"import java.nio.file.Files;","lastModifiedDate":"2022-02-11"},{"lineNumber":11,"author":{"gitId":"darylhjd"},"content":"import java.nio.file.Path;","lastModifiedDate":"2022-02-11"},{"lineNumber":12,"author":{"gitId":"darylhjd"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-02-11"},{"lineNumber":13,"author":{"gitId":"darylhjd"},"content":"import java.util.List;","lastModifiedDate":"2022-02-11"},{"lineNumber":14,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":15,"author":{"gitId":"darylhjd"},"content":"/**","lastModifiedDate":"2022-02-11"},{"lineNumber":16,"author":{"gitId":"darylhjd"},"content":" * StorageManager class provides convenience methods for working with the computer\u0027s file system.","lastModifiedDate":"2022-02-11"},{"lineNumber":17,"author":{"gitId":"darylhjd"},"content":" *","lastModifiedDate":"2022-02-11"},{"lineNumber":18,"author":{"gitId":"darylhjd"},"content":" * This is required to store and load the list of tasks kept by the bot.","lastModifiedDate":"2022-02-11"},{"lineNumber":19,"author":{"gitId":"darylhjd"},"content":" */","lastModifiedDate":"2022-02-11"},{"lineNumber":20,"author":{"gitId":"darylhjd"},"content":"public class StorageManager {","lastModifiedDate":"2022-02-11"},{"lineNumber":21,"author":{"gitId":"darylhjd"},"content":"    /**","lastModifiedDate":"2022-02-11"},{"lineNumber":22,"author":{"gitId":"darylhjd"},"content":"     * The directory to save the database file.","lastModifiedDate":"2022-02-11"},{"lineNumber":23,"author":{"gitId":"darylhjd"},"content":"     */","lastModifiedDate":"2022-02-11"},{"lineNumber":24,"author":{"gitId":"darylhjd"},"content":"    private static final Path SAVE_PATH \u003d Path.of(\"data\", \"sailfish.txt\");","lastModifiedDate":"2022-02-11"},{"lineNumber":25,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":26,"author":{"gitId":"darylhjd"},"content":"    /**","lastModifiedDate":"2022-02-11"},{"lineNumber":27,"author":{"gitId":"darylhjd"},"content":"     * Ensure any directories and files associated with storing the database exists.","lastModifiedDate":"2022-02-11"},{"lineNumber":28,"author":{"gitId":"darylhjd"},"content":"     *","lastModifiedDate":"2022-02-11"},{"lineNumber":29,"author":{"gitId":"darylhjd"},"content":"     * @throws IOException Any reading/writing error.","lastModifiedDate":"2022-02-11"},{"lineNumber":30,"author":{"gitId":"darylhjd"},"content":"     */","lastModifiedDate":"2022-02-11"},{"lineNumber":31,"author":{"gitId":"darylhjd"},"content":"    private static void ensureDatabaseExists() throws IOException {","lastModifiedDate":"2022-02-11"},{"lineNumber":32,"author":{"gitId":"darylhjd"},"content":"        // Ensure that the directory actually exists.","lastModifiedDate":"2022-02-11"},{"lineNumber":33,"author":{"gitId":"darylhjd"},"content":"        Files.createDirectories(SAVE_PATH.getParent());","lastModifiedDate":"2022-02-11"},{"lineNumber":34,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":35,"author":{"gitId":"darylhjd"},"content":"        // Attempt to create the actual database file.","lastModifiedDate":"2022-02-11"},{"lineNumber":36,"author":{"gitId":"darylhjd"},"content":"        try {","lastModifiedDate":"2022-02-11"},{"lineNumber":37,"author":{"gitId":"darylhjd"},"content":"            Files.createFile(SAVE_PATH);","lastModifiedDate":"2022-02-11"},{"lineNumber":38,"author":{"gitId":"darylhjd"},"content":"        } catch (FileAlreadyExistsException ignored) {","lastModifiedDate":"2022-02-11"},{"lineNumber":39,"author":{"gitId":"darylhjd"},"content":"        }","lastModifiedDate":"2022-02-11"},{"lineNumber":40,"author":{"gitId":"darylhjd"},"content":"    }","lastModifiedDate":"2022-02-11"},{"lineNumber":41,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":42,"author":{"gitId":"darylhjd"},"content":"    /**","lastModifiedDate":"2022-02-11"},{"lineNumber":43,"author":{"gitId":"darylhjd"},"content":"     * Loads database. If no current database exists, then it creates a new one.","lastModifiedDate":"2022-02-11"},{"lineNumber":44,"author":{"gitId":"darylhjd"},"content":"     *","lastModifiedDate":"2022-02-11"},{"lineNumber":45,"author":{"gitId":"darylhjd"},"content":"     * @throws IOException Any reading/writing error.","lastModifiedDate":"2022-02-11"},{"lineNumber":46,"author":{"gitId":"darylhjd"},"content":"     */","lastModifiedDate":"2022-02-11"},{"lineNumber":47,"author":{"gitId":"darylhjd"},"content":"    protected static void loadData(List\u003cTask\u003e taskList) throws IOException {","lastModifiedDate":"2022-02-11"},{"lineNumber":48,"author":{"gitId":"darylhjd"},"content":"        ensureDatabaseExists();","lastModifiedDate":"2022-02-11"},{"lineNumber":49,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":50,"author":{"gitId":"darylhjd"},"content":"        // Read contents of file.","lastModifiedDate":"2022-02-11"},{"lineNumber":51,"author":{"gitId":"darylhjd"},"content":"        List\u003cString\u003e lines \u003d Files.readAllLines(SAVE_PATH);","lastModifiedDate":"2022-02-11"},{"lineNumber":52,"author":{"gitId":"darylhjd"},"content":"        for (String line : lines) {","lastModifiedDate":"2022-02-11"},{"lineNumber":53,"author":{"gitId":"darylhjd"},"content":"            // Split the line by delimiter.","lastModifiedDate":"2022-02-11"},{"lineNumber":54,"author":{"gitId":"darylhjd"},"content":"            String[] parts \u003d Arrays.stream(line.split(\"\\\\|\")).map(String::trim).toArray(String[]::new);","lastModifiedDate":"2022-02-11"},{"lineNumber":55,"author":{"gitId":"darylhjd"},"content":"            try {","lastModifiedDate":"2022-02-11"},{"lineNumber":56,"author":{"gitId":"darylhjd"},"content":"                if (parts.length \u003c 1) {","lastModifiedDate":"2022-02-11"},{"lineNumber":57,"author":{"gitId":"darylhjd"},"content":"                    throw new IllegalArgumentException();","lastModifiedDate":"2022-02-11"},{"lineNumber":58,"author":{"gitId":"darylhjd"},"content":"                }","lastModifiedDate":"2022-02-11"},{"lineNumber":59,"author":{"gitId":"darylhjd"},"content":"                Task t;","lastModifiedDate":"2022-02-11"},{"lineNumber":60,"author":{"gitId":"darylhjd"},"content":"                switch (parts[0]) {","lastModifiedDate":"2022-02-11"},{"lineNumber":61,"author":{"gitId":"darylhjd"},"content":"                case \"T\":","lastModifiedDate":"2022-02-11"},{"lineNumber":62,"author":{"gitId":"darylhjd"},"content":"                    t \u003d Todo.unMarshal(parts);","lastModifiedDate":"2022-02-11"},{"lineNumber":63,"author":{"gitId":"darylhjd"},"content":"                    break;","lastModifiedDate":"2022-02-11"},{"lineNumber":64,"author":{"gitId":"darylhjd"},"content":"                case \"D\":","lastModifiedDate":"2022-02-11"},{"lineNumber":65,"author":{"gitId":"darylhjd"},"content":"                    t \u003d Deadline.unMarshal(parts);","lastModifiedDate":"2022-02-11"},{"lineNumber":66,"author":{"gitId":"darylhjd"},"content":"                    break;","lastModifiedDate":"2022-02-11"},{"lineNumber":67,"author":{"gitId":"darylhjd"},"content":"                case \"E\":","lastModifiedDate":"2022-02-11"},{"lineNumber":68,"author":{"gitId":"darylhjd"},"content":"                    t \u003d Event.unMarshal(parts);","lastModifiedDate":"2022-02-11"},{"lineNumber":69,"author":{"gitId":"darylhjd"},"content":"                    break;","lastModifiedDate":"2022-02-11"},{"lineNumber":70,"author":{"gitId":"darylhjd"},"content":"                default:","lastModifiedDate":"2022-02-11"},{"lineNumber":71,"author":{"gitId":"darylhjd"},"content":"                    throw new IndexOutOfBoundsException();","lastModifiedDate":"2022-02-11"},{"lineNumber":72,"author":{"gitId":"darylhjd"},"content":"                }","lastModifiedDate":"2022-02-11"},{"lineNumber":73,"author":{"gitId":"darylhjd"},"content":"                taskList.add(t);","lastModifiedDate":"2022-02-11"},{"lineNumber":74,"author":{"gitId":"darylhjd"},"content":"            } catch (Exception e) {","lastModifiedDate":"2022-02-11"},{"lineNumber":75,"author":{"gitId":"darylhjd"},"content":"                System.out.printf(\"Suspicious entry found: [%s]. Skipping!\\n\", line);","lastModifiedDate":"2022-02-11"},{"lineNumber":76,"author":{"gitId":"darylhjd"},"content":"            }","lastModifiedDate":"2022-02-11"},{"lineNumber":77,"author":{"gitId":"darylhjd"},"content":"        }","lastModifiedDate":"2022-02-11"},{"lineNumber":78,"author":{"gitId":"darylhjd"},"content":"    }","lastModifiedDate":"2022-02-11"},{"lineNumber":79,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":80,"author":{"gitId":"darylhjd"},"content":"    /**","lastModifiedDate":"2022-02-11"},{"lineNumber":81,"author":{"gitId":"darylhjd"},"content":"     * Saves tasks into database file.","lastModifiedDate":"2022-02-11"},{"lineNumber":82,"author":{"gitId":"darylhjd"},"content":"     *","lastModifiedDate":"2022-02-11"},{"lineNumber":83,"author":{"gitId":"darylhjd"},"content":"     * @throws IOException Error saving data.","lastModifiedDate":"2022-02-11"},{"lineNumber":84,"author":{"gitId":"darylhjd"},"content":"     */","lastModifiedDate":"2022-02-11"},{"lineNumber":85,"author":{"gitId":"darylhjd"},"content":"    protected static void saveData(List\u003cTask\u003e taskList) throws IOException {","lastModifiedDate":"2022-02-11"},{"lineNumber":86,"author":{"gitId":"darylhjd"},"content":"        ensureDatabaseExists();","lastModifiedDate":"2022-02-11"},{"lineNumber":87,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":88,"author":{"gitId":"darylhjd"},"content":"        StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2022-02-11"},{"lineNumber":89,"author":{"gitId":"darylhjd"},"content":"        for (Task t : taskList) {","lastModifiedDate":"2022-02-11"},{"lineNumber":90,"author":{"gitId":"darylhjd"},"content":"            builder.append(t.marshal());","lastModifiedDate":"2022-02-11"},{"lineNumber":91,"author":{"gitId":"darylhjd"},"content":"            builder.append(\"\\n\");","lastModifiedDate":"2022-02-11"},{"lineNumber":92,"author":{"gitId":"darylhjd"},"content":"        }","lastModifiedDate":"2022-02-11"},{"lineNumber":93,"author":{"gitId":"darylhjd"},"content":"        Files.write(SAVE_PATH, builder.toString().getBytes());","lastModifiedDate":"2022-02-11"},{"lineNumber":94,"author":{"gitId":"darylhjd"},"content":"    }","lastModifiedDate":"2022-02-11"},{"lineNumber":95,"author":{"gitId":"darylhjd"},"content":"}","lastModifiedDate":"2022-02-11"}],"authorContributionMap":{"darylhjd":95}},{"path":"src/main/java/bot/TaskManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"darylhjd"},"content":"package bot;","lastModifiedDate":"2022-02-11"},{"lineNumber":2,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":3,"author":{"gitId":"darylhjd"},"content":"import tasks.Task;","lastModifiedDate":"2022-02-11"},{"lineNumber":4,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":5,"author":{"gitId":"darylhjd"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-11"},{"lineNumber":6,"author":{"gitId":"darylhjd"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-11"},{"lineNumber":7,"author":{"gitId":"darylhjd"},"content":"import java.util.List;","lastModifiedDate":"2022-02-11"},{"lineNumber":8,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":9,"author":{"gitId":"darylhjd"},"content":"/**","lastModifiedDate":"2022-02-11"},{"lineNumber":10,"author":{"gitId":"darylhjd"},"content":" * TaskManager is a wrapper around the list of tasks kept by the bot.","lastModifiedDate":"2022-02-11"},{"lineNumber":11,"author":{"gitId":"darylhjd"},"content":" */","lastModifiedDate":"2022-02-11"},{"lineNumber":12,"author":{"gitId":"darylhjd"},"content":"public class TaskManager {","lastModifiedDate":"2022-02-11"},{"lineNumber":13,"author":{"gitId":"darylhjd"},"content":"    /**","lastModifiedDate":"2022-02-11"},{"lineNumber":14,"author":{"gitId":"darylhjd"},"content":"     * The list of tasks stored by the bot.","lastModifiedDate":"2022-02-11"},{"lineNumber":15,"author":{"gitId":"darylhjd"},"content":"     */","lastModifiedDate":"2022-02-11"},{"lineNumber":16,"author":{"gitId":"darylhjd"},"content":"    private final List\u003cTask\u003e tasks;","lastModifiedDate":"2022-02-11"},{"lineNumber":17,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":18,"author":{"gitId":"darylhjd"},"content":"    /**","lastModifiedDate":"2022-02-11"},{"lineNumber":19,"author":{"gitId":"darylhjd"},"content":"     * Creates a new Sailfish task manager.","lastModifiedDate":"2022-02-11"},{"lineNumber":20,"author":{"gitId":"darylhjd"},"content":"     *","lastModifiedDate":"2022-02-11"},{"lineNumber":21,"author":{"gitId":"darylhjd"},"content":"     * @throws IOException If error reading database.","lastModifiedDate":"2022-02-11"},{"lineNumber":22,"author":{"gitId":"darylhjd"},"content":"     */","lastModifiedDate":"2022-02-11"},{"lineNumber":23,"author":{"gitId":"darylhjd"},"content":"    protected TaskManager() throws IOException {","lastModifiedDate":"2022-02-11"},{"lineNumber":24,"author":{"gitId":"darylhjd"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-02-11"},{"lineNumber":25,"author":{"gitId":"darylhjd"},"content":"        // Load the database.","lastModifiedDate":"2022-02-11"},{"lineNumber":26,"author":{"gitId":"darylhjd"},"content":"        StorageManager.loadData(this.tasks);","lastModifiedDate":"2022-02-11"},{"lineNumber":27,"author":{"gitId":"darylhjd"},"content":"    }","lastModifiedDate":"2022-02-11"},{"lineNumber":28,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":29,"author":{"gitId":"darylhjd"},"content":"    /**","lastModifiedDate":"2022-02-11"},{"lineNumber":30,"author":{"gitId":"darylhjd"},"content":"     * Save the current task list into a database.","lastModifiedDate":"2022-02-11"},{"lineNumber":31,"author":{"gitId":"darylhjd"},"content":"     *","lastModifiedDate":"2022-02-11"},{"lineNumber":32,"author":{"gitId":"darylhjd"},"content":"     * @throws IOException If error writing into database.","lastModifiedDate":"2022-02-11"},{"lineNumber":33,"author":{"gitId":"darylhjd"},"content":"     */","lastModifiedDate":"2022-02-11"},{"lineNumber":34,"author":{"gitId":"darylhjd"},"content":"    protected void saveData() throws IOException {","lastModifiedDate":"2022-02-11"},{"lineNumber":35,"author":{"gitId":"darylhjd"},"content":"        StorageManager.saveData(this.tasks);","lastModifiedDate":"2022-02-11"},{"lineNumber":36,"author":{"gitId":"darylhjd"},"content":"    }","lastModifiedDate":"2022-02-11"},{"lineNumber":37,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":38,"author":{"gitId":"darylhjd"},"content":"    /**","lastModifiedDate":"2022-02-11"},{"lineNumber":39,"author":{"gitId":"darylhjd"},"content":"     * Helper method to get a task at a particular index from a parsed command.","lastModifiedDate":"2022-02-11"},{"lineNumber":40,"author":{"gitId":"darylhjd"},"content":"     *","lastModifiedDate":"2022-02-11"},{"lineNumber":41,"author":{"gitId":"darylhjd"},"content":"     * @param commandParser Command object containing parsed information.","lastModifiedDate":"2022-02-11"},{"lineNumber":42,"author":{"gitId":"darylhjd"},"content":"     * @return Task object.","lastModifiedDate":"2022-02-11"},{"lineNumber":43,"author":{"gitId":"darylhjd"},"content":"     * @throws NumberFormatException For invalid index.","lastModifiedDate":"2022-02-11"},{"lineNumber":44,"author":{"gitId":"darylhjd"},"content":"     */","lastModifiedDate":"2022-02-11"},{"lineNumber":45,"author":{"gitId":"darylhjd"},"content":"    protected Task getTask(CommandParser commandParser) throws NumberFormatException {","lastModifiedDate":"2022-02-11"},{"lineNumber":46,"author":{"gitId":"darylhjd"},"content":"        int index \u003d Integer.parseInt(commandParser.getDesc()) - 1;","lastModifiedDate":"2022-02-11"},{"lineNumber":47,"author":{"gitId":"darylhjd"},"content":"        if (index \u003c 0 || index \u003e\u003d this.tasks.size()) {","lastModifiedDate":"2022-02-11"},{"lineNumber":48,"author":{"gitId":"darylhjd"},"content":"            throw new NumberFormatException(\"Please specify a integer for the index and range!\");","lastModifiedDate":"2022-02-11"},{"lineNumber":49,"author":{"gitId":"darylhjd"},"content":"        }","lastModifiedDate":"2022-02-11"},{"lineNumber":50,"author":{"gitId":"darylhjd"},"content":"        return this.getTask(index);","lastModifiedDate":"2022-02-11"},{"lineNumber":51,"author":{"gitId":"darylhjd"},"content":"    }","lastModifiedDate":"2022-02-11"},{"lineNumber":52,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":53,"author":{"gitId":"darylhjd"},"content":"    /**","lastModifiedDate":"2022-02-11"},{"lineNumber":54,"author":{"gitId":"darylhjd"},"content":"     * Get a task at a particular index. User must ensure that index is valid. Otherwise,","lastModifiedDate":"2022-02-11"},{"lineNumber":55,"author":{"gitId":"darylhjd"},"content":"     * they must be ready to catch a possible IndexOutOfBoundsException.","lastModifiedDate":"2022-02-11"},{"lineNumber":56,"author":{"gitId":"darylhjd"},"content":"     *","lastModifiedDate":"2022-02-11"},{"lineNumber":57,"author":{"gitId":"darylhjd"},"content":"     * @param index Index of the task in the list.","lastModifiedDate":"2022-02-11"},{"lineNumber":58,"author":{"gitId":"darylhjd"},"content":"     * @return Task object.","lastModifiedDate":"2022-02-11"},{"lineNumber":59,"author":{"gitId":"darylhjd"},"content":"     * @throws IndexOutOfBoundsException If index is out of bounds.","lastModifiedDate":"2022-02-11"},{"lineNumber":60,"author":{"gitId":"darylhjd"},"content":"     */","lastModifiedDate":"2022-02-11"},{"lineNumber":61,"author":{"gitId":"darylhjd"},"content":"    protected Task getTask(int index) throws IndexOutOfBoundsException {","lastModifiedDate":"2022-02-11"},{"lineNumber":62,"author":{"gitId":"darylhjd"},"content":"        return this.tasks.get(index);","lastModifiedDate":"2022-02-11"},{"lineNumber":63,"author":{"gitId":"darylhjd"},"content":"    }","lastModifiedDate":"2022-02-11"},{"lineNumber":64,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":65,"author":{"gitId":"darylhjd"},"content":"    /**","lastModifiedDate":"2022-02-11"},{"lineNumber":66,"author":{"gitId":"darylhjd"},"content":"     * Add a new task into the list.","lastModifiedDate":"2022-02-11"},{"lineNumber":67,"author":{"gitId":"darylhjd"},"content":"     *","lastModifiedDate":"2022-02-11"},{"lineNumber":68,"author":{"gitId":"darylhjd"},"content":"     * @param task Task object to add.","lastModifiedDate":"2022-02-11"},{"lineNumber":69,"author":{"gitId":"darylhjd"},"content":"     */","lastModifiedDate":"2022-02-11"},{"lineNumber":70,"author":{"gitId":"darylhjd"},"content":"    protected void addTask(Task task) {","lastModifiedDate":"2022-02-11"},{"lineNumber":71,"author":{"gitId":"darylhjd"},"content":"        this.tasks.add(task);","lastModifiedDate":"2022-02-11"},{"lineNumber":72,"author":{"gitId":"darylhjd"},"content":"    }","lastModifiedDate":"2022-02-11"},{"lineNumber":73,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":74,"author":{"gitId":"darylhjd"},"content":"    /**","lastModifiedDate":"2022-02-11"},{"lineNumber":75,"author":{"gitId":"darylhjd"},"content":"     * Remove a task from the list.","lastModifiedDate":"2022-02-11"},{"lineNumber":76,"author":{"gitId":"darylhjd"},"content":"     *","lastModifiedDate":"2022-02-11"},{"lineNumber":77,"author":{"gitId":"darylhjd"},"content":"     * @param task Task object to remove.","lastModifiedDate":"2022-02-11"},{"lineNumber":78,"author":{"gitId":"darylhjd"},"content":"     */","lastModifiedDate":"2022-02-11"},{"lineNumber":79,"author":{"gitId":"darylhjd"},"content":"    protected void deleteTask(Task task) {","lastModifiedDate":"2022-02-11"},{"lineNumber":80,"author":{"gitId":"darylhjd"},"content":"        this.tasks.remove(task);","lastModifiedDate":"2022-02-11"},{"lineNumber":81,"author":{"gitId":"darylhjd"},"content":"    }","lastModifiedDate":"2022-02-11"},{"lineNumber":82,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":83,"author":{"gitId":"darylhjd"},"content":"    /**","lastModifiedDate":"2022-02-18"},{"lineNumber":84,"author":{"gitId":"darylhjd"},"content":"     * Find tasks using keywords.","lastModifiedDate":"2022-02-18"},{"lineNumber":85,"author":{"gitId":"darylhjd"},"content":"     *","lastModifiedDate":"2022-02-18"},{"lineNumber":86,"author":{"gitId":"darylhjd"},"content":"     * @param input Keyword string from user.","lastModifiedDate":"2022-02-18"},{"lineNumber":87,"author":{"gitId":"darylhjd"},"content":"     * @return List of tasks that match keywords.","lastModifiedDate":"2022-02-18"},{"lineNumber":88,"author":{"gitId":"darylhjd"},"content":"     */","lastModifiedDate":"2022-02-18"},{"lineNumber":89,"author":{"gitId":"darylhjd"},"content":"    protected List\u003cTask\u003e findTasks(String input) {","lastModifiedDate":"2022-02-18"},{"lineNumber":90,"author":{"gitId":"darylhjd"},"content":"        // Split the keywords by space.","lastModifiedDate":"2022-02-18"},{"lineNumber":91,"author":{"gitId":"darylhjd"},"content":"        String[] keywords \u003d input.toLowerCase().split(\" \");","lastModifiedDate":"2022-02-18"},{"lineNumber":92,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":93,"author":{"gitId":"darylhjd"},"content":"        List\u003cTask\u003e matched \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-02-18"},{"lineNumber":94,"author":{"gitId":"darylhjd"},"content":"        for (Task task: this.tasks) {","lastModifiedDate":"2022-02-18"},{"lineNumber":95,"author":{"gitId":"darylhjd"},"content":"            for (String word: keywords) {","lastModifiedDate":"2022-02-18"},{"lineNumber":96,"author":{"gitId":"darylhjd"},"content":"                if (task.taskDescription.toLowerCase().contains(word)) {","lastModifiedDate":"2022-02-18"},{"lineNumber":97,"author":{"gitId":"darylhjd"},"content":"                    matched.add(task);","lastModifiedDate":"2022-02-18"},{"lineNumber":98,"author":{"gitId":"darylhjd"},"content":"                }","lastModifiedDate":"2022-02-18"},{"lineNumber":99,"author":{"gitId":"darylhjd"},"content":"            }","lastModifiedDate":"2022-02-18"},{"lineNumber":100,"author":{"gitId":"darylhjd"},"content":"        }","lastModifiedDate":"2022-02-18"},{"lineNumber":101,"author":{"gitId":"darylhjd"},"content":"        return matched;","lastModifiedDate":"2022-02-18"},{"lineNumber":102,"author":{"gitId":"darylhjd"},"content":"    }","lastModifiedDate":"2022-02-11"},{"lineNumber":103,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":104,"author":{"gitId":"darylhjd"},"content":"    /**","lastModifiedDate":"2022-02-11"},{"lineNumber":105,"author":{"gitId":"darylhjd"},"content":"     * Get the number of current tasks stored by the bot.","lastModifiedDate":"2022-02-11"},{"lineNumber":106,"author":{"gitId":"darylhjd"},"content":"     *","lastModifiedDate":"2022-02-11"},{"lineNumber":107,"author":{"gitId":"darylhjd"},"content":"     * @return Number of tasks.","lastModifiedDate":"2022-02-11"},{"lineNumber":108,"author":{"gitId":"darylhjd"},"content":"     */","lastModifiedDate":"2022-02-11"},{"lineNumber":109,"author":{"gitId":"darylhjd"},"content":"    protected int getNumTasks() {","lastModifiedDate":"2022-02-11"},{"lineNumber":110,"author":{"gitId":"darylhjd"},"content":"        return this.tasks.size();","lastModifiedDate":"2022-02-11"},{"lineNumber":111,"author":{"gitId":"darylhjd"},"content":"    }","lastModifiedDate":"2022-02-11"},{"lineNumber":112,"author":{"gitId":"darylhjd"},"content":"}","lastModifiedDate":"2022-02-11"}],"authorContributionMap":{"darylhjd":112}},{"path":"src/main/java/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"darylhjd"},"content":"package tasks;","lastModifiedDate":"2022-02-02"},{"lineNumber":2,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":3,"author":{"gitId":"darylhjd"},"content":"/**","lastModifiedDate":"2022-01-28"},{"lineNumber":4,"author":{"gitId":"darylhjd"},"content":" * Deadline task is a specialisation of the Task class that tracks","lastModifiedDate":"2022-01-28"},{"lineNumber":5,"author":{"gitId":"darylhjd"},"content":" * tasks that need to be done by a specific date and time.","lastModifiedDate":"2022-01-28"},{"lineNumber":6,"author":{"gitId":"darylhjd"},"content":" */","lastModifiedDate":"2022-01-28"},{"lineNumber":7,"author":{"gitId":"darylhjd"},"content":"public final class Deadline extends Task {","lastModifiedDate":"2022-01-28"},{"lineNumber":8,"author":{"gitId":"darylhjd"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":9,"author":{"gitId":"darylhjd"},"content":"     * Specifies the required argument to create a Deadline.","lastModifiedDate":"2022-01-28"},{"lineNumber":10,"author":{"gitId":"darylhjd"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":11,"author":{"gitId":"darylhjd"},"content":"    public static String REQ_ARG \u003d \"by\";","lastModifiedDate":"2022-01-28"},{"lineNumber":12,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":13,"author":{"gitId":"darylhjd"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":14,"author":{"gitId":"darylhjd"},"content":"     * When the deadline is.","lastModifiedDate":"2022-01-28"},{"lineNumber":15,"author":{"gitId":"darylhjd"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":16,"author":{"gitId":"darylhjd"},"content":"    public String completeBy;","lastModifiedDate":"2022-02-03"},{"lineNumber":17,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":18,"author":{"gitId":"darylhjd"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":19,"author":{"gitId":"darylhjd"},"content":"     * Creates a new Deadline.","lastModifiedDate":"2022-01-28"},{"lineNumber":20,"author":{"gitId":"darylhjd"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":21,"author":{"gitId":"darylhjd"},"content":"     * @param task       The task to complete.","lastModifiedDate":"2022-01-28"},{"lineNumber":22,"author":{"gitId":"darylhjd"},"content":"     * @param isDone     Whether the task is done.","lastModifiedDate":"2022-02-05"},{"lineNumber":23,"author":{"gitId":"darylhjd"},"content":"     * @param completeBy When the task is due by.","lastModifiedDate":"2022-02-03"},{"lineNumber":24,"author":{"gitId":"darylhjd"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":25,"author":{"gitId":"darylhjd"},"content":"    public Deadline(String task, boolean isDone, String completeBy) {","lastModifiedDate":"2022-02-05"},{"lineNumber":26,"author":{"gitId":"darylhjd"},"content":"        super(\"D\", isDone, task);","lastModifiedDate":"2022-02-05"},{"lineNumber":27,"author":{"gitId":"darylhjd"},"content":"        if (completeBy \u003d\u003d null) {","lastModifiedDate":"2022-02-03"},{"lineNumber":28,"author":{"gitId":"darylhjd"},"content":"            throw new IllegalArgumentException(String.format(\"No `%s` argument specified!\", REQ_ARG));","lastModifiedDate":"2022-01-28"},{"lineNumber":29,"author":{"gitId":"darylhjd"},"content":"        }","lastModifiedDate":"2022-01-28"},{"lineNumber":30,"author":{"gitId":"darylhjd"},"content":"        this.completeBy \u003d completeBy;","lastModifiedDate":"2022-02-03"},{"lineNumber":31,"author":{"gitId":"darylhjd"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":32,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":33,"author":{"gitId":"darylhjd"},"content":"    /**","lastModifiedDate":"2022-02-05"},{"lineNumber":34,"author":{"gitId":"darylhjd"},"content":"     * Attempts to unmarshal a storage-friendly parts string into a Deadline object.","lastModifiedDate":"2022-02-05"},{"lineNumber":35,"author":{"gitId":"darylhjd"},"content":"     *","lastModifiedDate":"2022-02-05"},{"lineNumber":36,"author":{"gitId":"darylhjd"},"content":"     * @param parts A storage-friendly string split into parts.","lastModifiedDate":"2022-02-05"},{"lineNumber":37,"author":{"gitId":"darylhjd"},"content":"     * @return Parsed Deadline object.","lastModifiedDate":"2022-02-05"},{"lineNumber":38,"author":{"gitId":"darylhjd"},"content":"     */","lastModifiedDate":"2022-02-05"},{"lineNumber":39,"author":{"gitId":"darylhjd"},"content":"    public static Deadline unMarshal(String[] parts) {","lastModifiedDate":"2022-02-05"},{"lineNumber":40,"author":{"gitId":"darylhjd"},"content":"        return new Deadline(parts[2], Boolean.parseBoolean(parts[1]), parts[3]);","lastModifiedDate":"2022-02-05"},{"lineNumber":41,"author":{"gitId":"darylhjd"},"content":"    }","lastModifiedDate":"2022-02-05"},{"lineNumber":42,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":43,"author":{"gitId":"darylhjd"},"content":"    @Override","lastModifiedDate":"2022-02-05"},{"lineNumber":44,"author":{"gitId":"darylhjd"},"content":"    public String marshal() {","lastModifiedDate":"2022-02-05"},{"lineNumber":45,"author":{"gitId":"darylhjd"},"content":"        return String.format(\"%s | %s\", super.marshal(), this.completeBy);","lastModifiedDate":"2022-02-05"},{"lineNumber":46,"author":{"gitId":"darylhjd"},"content":"    }","lastModifiedDate":"2022-02-05"},{"lineNumber":47,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":48,"author":{"gitId":"darylhjd"},"content":"    @Override","lastModifiedDate":"2022-01-28"},{"lineNumber":49,"author":{"gitId":"darylhjd"},"content":"    public String toString() {","lastModifiedDate":"2022-01-28"},{"lineNumber":50,"author":{"gitId":"darylhjd"},"content":"        return String.format(\"%s (by: %s)\", super.toString(), this.completeBy);","lastModifiedDate":"2022-02-03"},{"lineNumber":51,"author":{"gitId":"darylhjd"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":52,"author":{"gitId":"darylhjd"},"content":"}","lastModifiedDate":"2022-01-28"}],"authorContributionMap":{"darylhjd":52}},{"path":"src/main/java/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"darylhjd"},"content":"package tasks;","lastModifiedDate":"2022-02-02"},{"lineNumber":2,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":3,"author":{"gitId":"darylhjd"},"content":"/**","lastModifiedDate":"2022-01-28"},{"lineNumber":4,"author":{"gitId":"darylhjd"},"content":" * Event class is a specialisation of the Task class that tracks","lastModifiedDate":"2022-01-28"},{"lineNumber":5,"author":{"gitId":"darylhjd"},"content":" * tasks that start and end at a specific time.","lastModifiedDate":"2022-01-28"},{"lineNumber":6,"author":{"gitId":"darylhjd"},"content":" */","lastModifiedDate":"2022-01-28"},{"lineNumber":7,"author":{"gitId":"darylhjd"},"content":"public final class Event extends Task {","lastModifiedDate":"2022-01-28"},{"lineNumber":8,"author":{"gitId":"darylhjd"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":9,"author":{"gitId":"darylhjd"},"content":"     * Specifies the required argument to create an Event.","lastModifiedDate":"2022-01-28"},{"lineNumber":10,"author":{"gitId":"darylhjd"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":11,"author":{"gitId":"darylhjd"},"content":"    public static String REQ_ARG \u003d \"at\";","lastModifiedDate":"2022-01-28"},{"lineNumber":12,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":13,"author":{"gitId":"darylhjd"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":14,"author":{"gitId":"darylhjd"},"content":"     * When the event will take place.","lastModifiedDate":"2022-01-28"},{"lineNumber":15,"author":{"gitId":"darylhjd"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":16,"author":{"gitId":"darylhjd"},"content":"    public String occursAt;","lastModifiedDate":"2022-02-03"},{"lineNumber":17,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":18,"author":{"gitId":"darylhjd"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":19,"author":{"gitId":"darylhjd"},"content":"     * Creates a new Event object.","lastModifiedDate":"2022-01-28"},{"lineNumber":20,"author":{"gitId":"darylhjd"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":21,"author":{"gitId":"darylhjd"},"content":"     * @param event    Event description.","lastModifiedDate":"2022-01-28"},{"lineNumber":22,"author":{"gitId":"darylhjd"},"content":"     * @param isDone   Whether the task is done.","lastModifiedDate":"2022-02-05"},{"lineNumber":23,"author":{"gitId":"darylhjd"},"content":"     * @param occursAt When the event will take place.","lastModifiedDate":"2022-02-03"},{"lineNumber":24,"author":{"gitId":"darylhjd"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":25,"author":{"gitId":"darylhjd"},"content":"    public Event(String event, boolean isDone, String occursAt) throws IllegalArgumentException {","lastModifiedDate":"2022-02-05"},{"lineNumber":26,"author":{"gitId":"darylhjd"},"content":"        super(\"E\", isDone, event);","lastModifiedDate":"2022-02-05"},{"lineNumber":27,"author":{"gitId":"darylhjd"},"content":"        if (occursAt \u003d\u003d null) {","lastModifiedDate":"2022-02-03"},{"lineNumber":28,"author":{"gitId":"darylhjd"},"content":"            throw new IllegalArgumentException(String.format(\"No `%s` argument specified!\", REQ_ARG));","lastModifiedDate":"2022-01-28"},{"lineNumber":29,"author":{"gitId":"darylhjd"},"content":"        }","lastModifiedDate":"2022-01-28"},{"lineNumber":30,"author":{"gitId":"darylhjd"},"content":"        this.occursAt \u003d occursAt;","lastModifiedDate":"2022-02-03"},{"lineNumber":31,"author":{"gitId":"darylhjd"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":32,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":33,"author":{"gitId":"darylhjd"},"content":"    /**","lastModifiedDate":"2022-02-05"},{"lineNumber":34,"author":{"gitId":"darylhjd"},"content":"     * Attempts to unmarshal a storage-friendly parts string into an Event object.","lastModifiedDate":"2022-02-05"},{"lineNumber":35,"author":{"gitId":"darylhjd"},"content":"     *","lastModifiedDate":"2022-02-05"},{"lineNumber":36,"author":{"gitId":"darylhjd"},"content":"     * @param parts A storage-friendly string split into parts.","lastModifiedDate":"2022-02-05"},{"lineNumber":37,"author":{"gitId":"darylhjd"},"content":"     * @return Parsed Deadline object.","lastModifiedDate":"2022-02-05"},{"lineNumber":38,"author":{"gitId":"darylhjd"},"content":"     */","lastModifiedDate":"2022-02-05"},{"lineNumber":39,"author":{"gitId":"darylhjd"},"content":"    public static Event unMarshal(String[] parts) {","lastModifiedDate":"2022-02-05"},{"lineNumber":40,"author":{"gitId":"darylhjd"},"content":"        return new Event(parts[2], Boolean.parseBoolean(parts[1]), parts[3]);","lastModifiedDate":"2022-02-05"},{"lineNumber":41,"author":{"gitId":"darylhjd"},"content":"    }","lastModifiedDate":"2022-02-05"},{"lineNumber":42,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":43,"author":{"gitId":"darylhjd"},"content":"    @Override","lastModifiedDate":"2022-02-05"},{"lineNumber":44,"author":{"gitId":"darylhjd"},"content":"    public String marshal() {","lastModifiedDate":"2022-02-05"},{"lineNumber":45,"author":{"gitId":"darylhjd"},"content":"        return String.format(\"%s | %s\", super.marshal(), this.occursAt);","lastModifiedDate":"2022-02-05"},{"lineNumber":46,"author":{"gitId":"darylhjd"},"content":"    }","lastModifiedDate":"2022-02-05"},{"lineNumber":47,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":48,"author":{"gitId":"darylhjd"},"content":"    @Override","lastModifiedDate":"2022-01-28"},{"lineNumber":49,"author":{"gitId":"darylhjd"},"content":"    public String toString() {","lastModifiedDate":"2022-01-28"},{"lineNumber":50,"author":{"gitId":"darylhjd"},"content":"        return String.format(\"%s (at: %s)\", super.toString(), this.occursAt);","lastModifiedDate":"2022-02-03"},{"lineNumber":51,"author":{"gitId":"darylhjd"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":52,"author":{"gitId":"darylhjd"},"content":"}","lastModifiedDate":"2022-01-28"}],"authorContributionMap":{"darylhjd":52}},{"path":"src/main/java/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"darylhjd"},"content":"package tasks;","lastModifiedDate":"2022-02-02"},{"lineNumber":2,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":3,"author":{"gitId":"darylhjd"},"content":"/**","lastModifiedDate":"2022-01-28"},{"lineNumber":4,"author":{"gitId":"darylhjd"},"content":" * Base abstract class for storing all kinds of tasks.","lastModifiedDate":"2022-01-28"},{"lineNumber":5,"author":{"gitId":"darylhjd"},"content":" */","lastModifiedDate":"2022-01-28"},{"lineNumber":6,"author":{"gitId":"darylhjd"},"content":"public abstract class Task {","lastModifiedDate":"2022-01-28"},{"lineNumber":7,"author":{"gitId":"darylhjd"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":8,"author":{"gitId":"darylhjd"},"content":"     * The type of task.","lastModifiedDate":"2022-01-28"},{"lineNumber":9,"author":{"gitId":"darylhjd"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":10,"author":{"gitId":"darylhjd"},"content":"    public final String type;","lastModifiedDate":"2022-01-28"},{"lineNumber":11,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":12,"author":{"gitId":"darylhjd"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":13,"author":{"gitId":"darylhjd"},"content":"     * The actual task description.","lastModifiedDate":"2022-01-28"},{"lineNumber":14,"author":{"gitId":"darylhjd"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":15,"author":{"gitId":"darylhjd"},"content":"    public final String taskDescription;","lastModifiedDate":"2022-02-03"},{"lineNumber":16,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":17,"author":{"gitId":"darylhjd"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":18,"author":{"gitId":"darylhjd"},"content":"     * Checks whether the item is done.","lastModifiedDate":"2022-01-28"},{"lineNumber":19,"author":{"gitId":"darylhjd"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":20,"author":{"gitId":"darylhjd"},"content":"    public boolean isDone;","lastModifiedDate":"2022-01-28"},{"lineNumber":21,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":22,"author":{"gitId":"darylhjd"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":23,"author":{"gitId":"darylhjd"},"content":"     * Creates a Task object.","lastModifiedDate":"2022-01-28"},{"lineNumber":24,"author":{"gitId":"darylhjd"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":25,"author":{"gitId":"darylhjd"},"content":"     * @param type            Type of task.","lastModifiedDate":"2022-02-05"},{"lineNumber":26,"author":{"gitId":"darylhjd"},"content":"     * @param isDone          Whether the task is done.","lastModifiedDate":"2022-02-05"},{"lineNumber":27,"author":{"gitId":"darylhjd"},"content":"     * @param taskDescription Task description.","lastModifiedDate":"2022-02-03"},{"lineNumber":28,"author":{"gitId":"darylhjd"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":29,"author":{"gitId":"darylhjd"},"content":"    public Task(String type, boolean isDone, String taskDescription) throws IllegalArgumentException {","lastModifiedDate":"2022-02-05"},{"lineNumber":30,"author":{"gitId":"darylhjd"},"content":"        this.type \u003d type;","lastModifiedDate":"2022-01-28"},{"lineNumber":31,"author":{"gitId":"darylhjd"},"content":"        if (taskDescription \u003d\u003d null || taskDescription.isEmpty()) {","lastModifiedDate":"2022-02-03"},{"lineNumber":32,"author":{"gitId":"darylhjd"},"content":"            throw new IllegalArgumentException(\"Task description cannot be empty!\");","lastModifiedDate":"2022-01-28"},{"lineNumber":33,"author":{"gitId":"darylhjd"},"content":"        }","lastModifiedDate":"2022-01-28"},{"lineNumber":34,"author":{"gitId":"darylhjd"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2022-02-05"},{"lineNumber":35,"author":{"gitId":"darylhjd"},"content":"        this.taskDescription \u003d taskDescription;","lastModifiedDate":"2022-02-03"},{"lineNumber":36,"author":{"gitId":"darylhjd"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":37,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":38,"author":{"gitId":"darylhjd"},"content":"    /**","lastModifiedDate":"2022-01-28"},{"lineNumber":39,"author":{"gitId":"darylhjd"},"content":"     * Sets whether the task is marked as done or not.","lastModifiedDate":"2022-01-28"},{"lineNumber":40,"author":{"gitId":"darylhjd"},"content":"     *","lastModifiedDate":"2022-01-28"},{"lineNumber":41,"author":{"gitId":"darylhjd"},"content":"     * @param done New marked status.","lastModifiedDate":"2022-01-28"},{"lineNumber":42,"author":{"gitId":"darylhjd"},"content":"     */","lastModifiedDate":"2022-01-28"},{"lineNumber":43,"author":{"gitId":"darylhjd"},"content":"    public void setDone(boolean done) {","lastModifiedDate":"2022-01-28"},{"lineNumber":44,"author":{"gitId":"darylhjd"},"content":"        this.isDone \u003d done;","lastModifiedDate":"2022-01-28"},{"lineNumber":45,"author":{"gitId":"darylhjd"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":46,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":47,"author":{"gitId":"darylhjd"},"content":"    /**","lastModifiedDate":"2022-02-05"},{"lineNumber":48,"author":{"gitId":"darylhjd"},"content":"     * Returns a storage-friendly string representation of the task object.","lastModifiedDate":"2022-02-05"},{"lineNumber":49,"author":{"gitId":"darylhjd"},"content":"     *","lastModifiedDate":"2022-02-05"},{"lineNumber":50,"author":{"gitId":"darylhjd"},"content":"     * @return Storage-friendly string representation of object.","lastModifiedDate":"2022-02-05"},{"lineNumber":51,"author":{"gitId":"darylhjd"},"content":"     */","lastModifiedDate":"2022-02-05"},{"lineNumber":52,"author":{"gitId":"darylhjd"},"content":"    public String marshal() {","lastModifiedDate":"2022-02-05"},{"lineNumber":53,"author":{"gitId":"darylhjd"},"content":"        return String.format(\"%s | %b | %s\", this.type, this.isDone, this.taskDescription);","lastModifiedDate":"2022-02-05"},{"lineNumber":54,"author":{"gitId":"darylhjd"},"content":"    }","lastModifiedDate":"2022-02-05"},{"lineNumber":55,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":56,"author":{"gitId":"darylhjd"},"content":"    @Override","lastModifiedDate":"2022-01-28"},{"lineNumber":57,"author":{"gitId":"darylhjd"},"content":"    public String toString() {","lastModifiedDate":"2022-01-28"},{"lineNumber":58,"author":{"gitId":"darylhjd"},"content":"        return String.format(\"[%s][%s] %s\", this.type, this.isDone ? \"X\" : \" \", this.taskDescription);","lastModifiedDate":"2022-02-03"},{"lineNumber":59,"author":{"gitId":"darylhjd"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":60,"author":{"gitId":"darylhjd"},"content":"}","lastModifiedDate":"2022-01-28"}],"authorContributionMap":{"darylhjd":60}},{"path":"src/main/java/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"darylhjd"},"content":"package tasks;","lastModifiedDate":"2022-02-02"},{"lineNumber":2,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":3,"author":{"gitId":"darylhjd"},"content":"/**","lastModifiedDate":"2022-01-28"},{"lineNumber":4,"author":{"gitId":"darylhjd"},"content":" * Todo class is a specialisation of the Task class that only stores a task.","lastModifiedDate":"2022-01-28"},{"lineNumber":5,"author":{"gitId":"darylhjd"},"content":" */","lastModifiedDate":"2022-01-28"},{"lineNumber":6,"author":{"gitId":"darylhjd"},"content":"public final class Todo extends Task {","lastModifiedDate":"2022-01-28"},{"lineNumber":7,"author":{"gitId":"darylhjd"},"content":"    /**","lastModifiedDate":"2022-02-05"},{"lineNumber":8,"author":{"gitId":"darylhjd"},"content":"     * Creates a new Todo object.","lastModifiedDate":"2022-02-05"},{"lineNumber":9,"author":{"gitId":"darylhjd"},"content":"     *","lastModifiedDate":"2022-02-05"},{"lineNumber":10,"author":{"gitId":"darylhjd"},"content":"     * @param task   Todo task.","lastModifiedDate":"2022-02-05"},{"lineNumber":11,"author":{"gitId":"darylhjd"},"content":"     * @param isDone Whether the task is done.","lastModifiedDate":"2022-02-05"},{"lineNumber":12,"author":{"gitId":"darylhjd"},"content":"     */","lastModifiedDate":"2022-02-05"},{"lineNumber":13,"author":{"gitId":"darylhjd"},"content":"    public Todo(String task, boolean isDone) {","lastModifiedDate":"2022-02-05"},{"lineNumber":14,"author":{"gitId":"darylhjd"},"content":"        super(\"T\", isDone, task);","lastModifiedDate":"2022-02-05"},{"lineNumber":15,"author":{"gitId":"darylhjd"},"content":"    }","lastModifiedDate":"2022-02-05"},{"lineNumber":16,"author":{"gitId":"darylhjd"},"content":"","lastModifiedDate":"2022-02-05"},{"lineNumber":17,"author":{"gitId":"darylhjd"},"content":"    /**","lastModifiedDate":"2022-02-05"},{"lineNumber":18,"author":{"gitId":"darylhjd"},"content":"     * Attempts to unmarshal a storage-friendly parts string into a Todo object.","lastModifiedDate":"2022-02-05"},{"lineNumber":19,"author":{"gitId":"darylhjd"},"content":"     *","lastModifiedDate":"2022-02-05"},{"lineNumber":20,"author":{"gitId":"darylhjd"},"content":"     * @param parts A storage-friendly string split into parts.","lastModifiedDate":"2022-02-05"},{"lineNumber":21,"author":{"gitId":"darylhjd"},"content":"     * @return Parsed Deadline object.","lastModifiedDate":"2022-02-05"},{"lineNumber":22,"author":{"gitId":"darylhjd"},"content":"     */","lastModifiedDate":"2022-02-05"},{"lineNumber":23,"author":{"gitId":"darylhjd"},"content":"    public static Todo unMarshal(String[] parts) {","lastModifiedDate":"2022-02-05"},{"lineNumber":24,"author":{"gitId":"darylhjd"},"content":"        return new Todo(parts[2], Boolean.parseBoolean(parts[1]));","lastModifiedDate":"2022-02-05"},{"lineNumber":25,"author":{"gitId":"darylhjd"},"content":"    }","lastModifiedDate":"2022-01-28"},{"lineNumber":26,"author":{"gitId":"darylhjd"},"content":"}","lastModifiedDate":"2022-01-28"}],"authorContributionMap":{"darylhjd":26}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"darylhjd"},"content":"list","lastModifiedDate":"2022-01-28"},{"lineNumber":2,"author":{"gitId":"darylhjd"},"content":"todo read book","lastModifiedDate":"2022-01-28"},{"lineNumber":3,"author":{"gitId":"darylhjd"},"content":"deadline return book /by Sunday","lastModifiedDate":"2022-01-28"},{"lineNumber":4,"author":{"gitId":"darylhjd"},"content":"event Project Meeting /at Mon 3-6pm","lastModifiedDate":"2022-01-28"},{"lineNumber":5,"author":{"gitId":"darylhjd"},"content":"list","lastModifiedDate":"2022-01-28"},{"lineNumber":6,"author":{"gitId":"darylhjd"},"content":"mark 2","lastModifiedDate":"2022-01-28"},{"lineNumber":7,"author":{"gitId":"darylhjd"},"content":"list","lastModifiedDate":"2022-01-28"},{"lineNumber":8,"author":{"gitId":"darylhjd"},"content":"deadline rcg wgr e ge rg tg t hc h  h  \\\\\\   /By Tuesday","lastModifiedDate":"2022-01-28"},{"lineNumber":9,"author":{"gitId":"darylhjd"},"content":"bye","lastModifiedDate":"2022-01-28"}],"authorContributionMap":{"darylhjd":9}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"darylhjd"},"content":"java -classpath ..\\bin Main \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2022-02-02"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"darylhjd":1,"-":20}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"darylhjd"},"content":"java -classpath ../bin Main \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2022-01-28"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"darylhjd":1,"-":37}}]
