[{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IncompetentDev"},"content":"package duke;","lastModifiedDate":"2022-02-11"},{"lineNumber":2,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":3,"author":{"gitId":"IncompetentDev"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-01-28"},{"lineNumber":4,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":5,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":6,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-01-28"},{"lineNumber":7,"author":{"gitId":"IncompetentDev"},"content":"    // Regex string to extract commands and flags","lastModifiedDate":"2022-02-07"},{"lineNumber":8,"author":{"gitId":"IncompetentDev"},"content":"    public static final String COMMAND_FORMAT \u003d \"(\\\\S+)(.*)\";","lastModifiedDate":"2022-01-30"},{"lineNumber":9,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":10,"author":{"gitId":"IncompetentDev"},"content":"    // Fixed string output for startup and exit","lastModifiedDate":"2022-02-07"},{"lineNumber":11,"author":{"gitId":"IncompetentDev"},"content":"    public static final String LOGO \u003d","lastModifiedDate":"2022-02-07"},{"lineNumber":12,"author":{"gitId":"IncompetentDev"},"content":"            \" ____        _        \\n\"","lastModifiedDate":"2022-02-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"            + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2019-07-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2019-07-29"},{"lineNumber":17,"author":{"gitId":"IncompetentDev"},"content":"    public static final String WELCOME_BANNER \u003d","lastModifiedDate":"2022-02-07"},{"lineNumber":18,"author":{"gitId":"IncompetentDev"},"content":"            \"____________________________________________________________\"","lastModifiedDate":"2022-02-07"},{"lineNumber":19,"author":{"gitId":"IncompetentDev"},"content":"            + \"\\nHello! I\u0027m Dook!\"","lastModifiedDate":"2022-01-28"},{"lineNumber":20,"author":{"gitId":"IncompetentDev"},"content":"            + \"\\nWhat can I do for you?\"","lastModifiedDate":"2022-01-28"},{"lineNumber":21,"author":{"gitId":"IncompetentDev"},"content":"            + \"\\n____________________________________________________________\";","lastModifiedDate":"2022-02-07"},{"lineNumber":22,"author":{"gitId":"IncompetentDev"},"content":"    public static final String EXIT_MESSAGE \u003d","lastModifiedDate":"2022-02-07"},{"lineNumber":23,"author":{"gitId":"IncompetentDev"},"content":"            \"____________________________________________________________\"","lastModifiedDate":"2022-02-07"},{"lineNumber":24,"author":{"gitId":"IncompetentDev"},"content":"            + \"\\nBye. Hope to see you again soon!\"","lastModifiedDate":"2022-02-07"},{"lineNumber":25,"author":{"gitId":"IncompetentDev"},"content":"            + \"\\n____________________________________________________________\";","lastModifiedDate":"2022-02-07"},{"lineNumber":26,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":27,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-07"},{"lineNumber":28,"author":{"gitId":"IncompetentDev"},"content":"     * Prints introduction message","lastModifiedDate":"2022-02-07"},{"lineNumber":29,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-07"},{"lineNumber":30,"author":{"gitId":"IncompetentDev"},"content":"    public static void printIntro() {","lastModifiedDate":"2022-02-07"},{"lineNumber":31,"author":{"gitId":"IncompetentDev"},"content":"        System.out.println(\"Hello from\\n\" + LOGO);","lastModifiedDate":"2022-02-07"},{"lineNumber":32,"author":{"gitId":"IncompetentDev"},"content":"        System.out.println(WELCOME_BANNER);","lastModifiedDate":"2022-02-07"},{"lineNumber":33,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":34,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":35,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-10"},{"lineNumber":36,"author":{"gitId":"IncompetentDev"},"content":"     * Prints exit message","lastModifiedDate":"2022-02-10"},{"lineNumber":37,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-10"},{"lineNumber":38,"author":{"gitId":"IncompetentDev"},"content":"    public static void printExit() {","lastModifiedDate":"2022-02-10"},{"lineNumber":39,"author":{"gitId":"IncompetentDev"},"content":"        System.out.println(EXIT_MESSAGE);","lastModifiedDate":"2022-02-10"},{"lineNumber":40,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-10"},{"lineNumber":41,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":42,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-10"},{"lineNumber":43,"author":{"gitId":"IncompetentDev"},"content":"     * Runs function to start up application","lastModifiedDate":"2022-02-10"},{"lineNumber":44,"author":{"gitId":"IncompetentDev"},"content":"     * @param args not used","lastModifiedDate":"2022-02-10"},{"lineNumber":45,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-10"},{"lineNumber":46,"author":{"gitId":"IncompetentDev"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2022-02-10"},{"lineNumber":47,"author":{"gitId":"IncompetentDev"},"content":"        printIntro();","lastModifiedDate":"2022-02-07"},{"lineNumber":48,"author":{"gitId":"IncompetentDev"},"content":"        loopWhileInput();","lastModifiedDate":"2022-02-10"},{"lineNumber":49,"author":{"gitId":"IncompetentDev"},"content":"        printExit();","lastModifiedDate":"2022-02-10"},{"lineNumber":50,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-10"},{"lineNumber":51,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":52,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-10"},{"lineNumber":53,"author":{"gitId":"IncompetentDev"},"content":"     * Takes in input and passes input to a Parser.","lastModifiedDate":"2022-02-10"},{"lineNumber":54,"author":{"gitId":"IncompetentDev"},"content":"     * Subsequently, passes the Parser object to a Handler, which executes the commands.","lastModifiedDate":"2022-02-10"},{"lineNumber":55,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-10"},{"lineNumber":56,"author":{"gitId":"IncompetentDev"},"content":"    public static void loopWhileInput() {","lastModifiedDate":"2022-02-10"},{"lineNumber":57,"author":{"gitId":"IncompetentDev"},"content":"        boolean hasInput \u003d true;","lastModifiedDate":"2022-02-07"},{"lineNumber":58,"author":{"gitId":"IncompetentDev"},"content":"        Scanner scannerInput \u003d new Scanner(System.in);","lastModifiedDate":"2022-02-10"},{"lineNumber":59,"author":{"gitId":"IncompetentDev"},"content":"        Handler handler \u003d new Handler();","lastModifiedDate":"2022-02-10"},{"lineNumber":60,"author":{"gitId":"IncompetentDev"},"content":"        while (hasInput) {","lastModifiedDate":"2022-02-07"},{"lineNumber":61,"author":{"gitId":"IncompetentDev"},"content":"            String userInput \u003d scannerInput.nextLine();","lastModifiedDate":"2022-01-28"},{"lineNumber":62,"author":{"gitId":"IncompetentDev"},"content":"            Parser argumentParser \u003d new Parser();","lastModifiedDate":"2022-02-10"},{"lineNumber":63,"author":{"gitId":"IncompetentDev"},"content":"            argumentParser.parseInput(userInput);","lastModifiedDate":"2022-02-10"},{"lineNumber":64,"author":{"gitId":"IncompetentDev"},"content":"            if (argumentParser.isBye()) {","lastModifiedDate":"2022-02-10"},{"lineNumber":65,"author":{"gitId":"IncompetentDev"},"content":"                break;","lastModifiedDate":"2022-02-10"},{"lineNumber":66,"author":{"gitId":"IncompetentDev"},"content":"            }","lastModifiedDate":"2022-01-28"},{"lineNumber":67,"author":{"gitId":"IncompetentDev"},"content":"            handler.execute(argumentParser);","lastModifiedDate":"2022-02-10"},{"lineNumber":68,"author":{"gitId":"IncompetentDev"},"content":"        }","lastModifiedDate":"2022-01-28"},{"lineNumber":69,"author":{"gitId":"IncompetentDev"},"content":"        scannerInput.close();","lastModifiedDate":"2022-01-28"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":71,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-10"},{"lineNumber":72,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"IncompetentDev":65,"-":7}},{"path":"src/main/java/duke/Handler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IncompetentDev"},"content":"package duke;","lastModifiedDate":"2022-02-11"},{"lineNumber":2,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":3,"author":{"gitId":"IncompetentDev"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2022-02-11"},{"lineNumber":4,"author":{"gitId":"IncompetentDev"},"content":"import duke.tasks.Event;","lastModifiedDate":"2022-02-11"},{"lineNumber":5,"author":{"gitId":"IncompetentDev"},"content":"import duke.tasks.Task;","lastModifiedDate":"2022-02-11"},{"lineNumber":6,"author":{"gitId":"IncompetentDev"},"content":"import duke.tasks.Todo;","lastModifiedDate":"2022-02-11"},{"lineNumber":7,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":8,"author":{"gitId":"IncompetentDev"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-07"},{"lineNumber":9,"author":{"gitId":"IncompetentDev"},"content":"import java.util.Map;","lastModifiedDate":"2022-02-07"},{"lineNumber":10,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":11,"author":{"gitId":"IncompetentDev"},"content":"public class Handler {","lastModifiedDate":"2022-02-07"},{"lineNumber":12,"author":{"gitId":"IncompetentDev"},"content":"    // Output message format for various actions","lastModifiedDate":"2022-02-07"},{"lineNumber":13,"author":{"gitId":"IncompetentDev"},"content":"    public static final String TASK_ADDED_MESSAGE_FORMAT \u003d","lastModifiedDate":"2022-02-07"},{"lineNumber":14,"author":{"gitId":"IncompetentDev"},"content":"            \"____________________________________________________________\"","lastModifiedDate":"2022-02-07"},{"lineNumber":15,"author":{"gitId":"IncompetentDev"},"content":"            + \"\\nadded: %s\"","lastModifiedDate":"2022-02-07"},{"lineNumber":16,"author":{"gitId":"IncompetentDev"},"content":"            + \"\\n____________________________________________________________\";","lastModifiedDate":"2022-02-07"},{"lineNumber":17,"author":{"gitId":"IncompetentDev"},"content":"    public static final String TASK_MARKED_MESSAGE_FORMAT \u003d","lastModifiedDate":"2022-02-07"},{"lineNumber":18,"author":{"gitId":"IncompetentDev"},"content":"            \"____________________________________________________________\"","lastModifiedDate":"2022-02-07"},{"lineNumber":19,"author":{"gitId":"IncompetentDev"},"content":"            + \"\\nNice! I\u0027ve marked this task as done:\"","lastModifiedDate":"2022-02-07"},{"lineNumber":20,"author":{"gitId":"IncompetentDev"},"content":"            + \"\\n %s\"","lastModifiedDate":"2022-02-07"},{"lineNumber":21,"author":{"gitId":"IncompetentDev"},"content":"            + \"\\n____________________________________________________________\";","lastModifiedDate":"2022-02-07"},{"lineNumber":22,"author":{"gitId":"IncompetentDev"},"content":"    public static final String TASK_UNMARKED_MESSAGE_FORMAT \u003d","lastModifiedDate":"2022-02-07"},{"lineNumber":23,"author":{"gitId":"IncompetentDev"},"content":"            \"____________________________________________________________\"","lastModifiedDate":"2022-02-07"},{"lineNumber":24,"author":{"gitId":"IncompetentDev"},"content":"            + \"\\nOK, I\u0027ve marked this task as not done yet:\"","lastModifiedDate":"2022-02-07"},{"lineNumber":25,"author":{"gitId":"IncompetentDev"},"content":"            + \"\\n %s\"","lastModifiedDate":"2022-02-07"},{"lineNumber":26,"author":{"gitId":"IncompetentDev"},"content":"            + \"\\n____________________________________________________________\";","lastModifiedDate":"2022-02-07"},{"lineNumber":27,"author":{"gitId":"IncompetentDev"},"content":"    public static final String LIST_PRE_MESSAGE_FORMAT \u003d","lastModifiedDate":"2022-02-07"},{"lineNumber":28,"author":{"gitId":"IncompetentDev"},"content":"            \"____________________________________________________________\"","lastModifiedDate":"2022-02-07"},{"lineNumber":29,"author":{"gitId":"IncompetentDev"},"content":"            + \"\\nHere are the tasks in your list\";","lastModifiedDate":"2022-02-07"},{"lineNumber":30,"author":{"gitId":"IncompetentDev"},"content":"    public static final String LIST_MESSAGE_FORMAT \u003d","lastModifiedDate":"2022-02-10"},{"lineNumber":31,"author":{"gitId":"IncompetentDev"},"content":"            \"%d. %s\";","lastModifiedDate":"2022-02-10"},{"lineNumber":32,"author":{"gitId":"IncompetentDev"},"content":"    public static final String LIST_POST_MESSAGE_FORMAT \u003d","lastModifiedDate":"2022-02-07"},{"lineNumber":33,"author":{"gitId":"IncompetentDev"},"content":"            \"____________________________________________________________\";","lastModifiedDate":"2022-02-07"},{"lineNumber":34,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":35,"author":{"gitId":"IncompetentDev"},"content":"    protected ArrayList\u003cTask\u003e taskList;","lastModifiedDate":"2022-02-07"},{"lineNumber":36,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":37,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-10"},{"lineNumber":38,"author":{"gitId":"IncompetentDev"},"content":"     * Initialises a Handler instance with an empty lists of task","lastModifiedDate":"2022-02-10"},{"lineNumber":39,"author":{"gitId":"IncompetentDev"},"content":"     * Functions as a singleton class (without the appropriate code), instantiate only one","lastModifiedDate":"2022-02-10"},{"lineNumber":40,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-10"},{"lineNumber":41,"author":{"gitId":"IncompetentDev"},"content":"    public Handler() {","lastModifiedDate":"2022-02-07"},{"lineNumber":42,"author":{"gitId":"IncompetentDev"},"content":"        this.taskList \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2022-02-07"},{"lineNumber":43,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":44,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":45,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-07"},{"lineNumber":46,"author":{"gitId":"IncompetentDev"},"content":"     * Execute a command based on user input. Passes off control to relevant functions","lastModifiedDate":"2022-02-10"},{"lineNumber":47,"author":{"gitId":"IncompetentDev"},"content":"     *","lastModifiedDate":"2022-02-07"},{"lineNumber":48,"author":{"gitId":"IncompetentDev"},"content":"     * @param parser the Parser object contained parsed user command data","lastModifiedDate":"2022-02-10"},{"lineNumber":49,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-07"},{"lineNumber":50,"author":{"gitId":"IncompetentDev"},"content":"    public void execute(Parser parser) {","lastModifiedDate":"2022-02-10"},{"lineNumber":51,"author":{"gitId":"IncompetentDev"},"content":"        String userCommand;","lastModifiedDate":"2022-02-10"},{"lineNumber":52,"author":{"gitId":"IncompetentDev"},"content":"        userCommand \u003d parser.getUserCommand();","lastModifiedDate":"2022-02-10"},{"lineNumber":53,"author":{"gitId":"IncompetentDev"},"content":"        Map\u003cString, String\u003e argumentList;","lastModifiedDate":"2022-02-10"},{"lineNumber":54,"author":{"gitId":"IncompetentDev"},"content":"        argumentList \u003d parser.getArgumentList();","lastModifiedDate":"2022-02-10"},{"lineNumber":55,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-10"},{"lineNumber":56,"author":{"gitId":"IncompetentDev"},"content":"        switch (userCommand) {","lastModifiedDate":"2022-02-07"},{"lineNumber":57,"author":{"gitId":"IncompetentDev"},"content":"        case \"list\":","lastModifiedDate":"2022-02-07"},{"lineNumber":58,"author":{"gitId":"IncompetentDev"},"content":"            executeList(argumentList);","lastModifiedDate":"2022-02-10"},{"lineNumber":59,"author":{"gitId":"IncompetentDev"},"content":"            break;","lastModifiedDate":"2022-02-07"},{"lineNumber":60,"author":{"gitId":"IncompetentDev"},"content":"        case \"mark\":","lastModifiedDate":"2022-02-07"},{"lineNumber":61,"author":{"gitId":"IncompetentDev"},"content":"            executeMark(argumentList);","lastModifiedDate":"2022-02-10"},{"lineNumber":62,"author":{"gitId":"IncompetentDev"},"content":"            break;","lastModifiedDate":"2022-02-07"},{"lineNumber":63,"author":{"gitId":"IncompetentDev"},"content":"        case \"unmark\":","lastModifiedDate":"2022-02-07"},{"lineNumber":64,"author":{"gitId":"IncompetentDev"},"content":"            executeUnmark(argumentList);","lastModifiedDate":"2022-02-10"},{"lineNumber":65,"author":{"gitId":"IncompetentDev"},"content":"            break;","lastModifiedDate":"2022-02-07"},{"lineNumber":66,"author":{"gitId":"IncompetentDev"},"content":"        case \"todo\":","lastModifiedDate":"2022-02-07"},{"lineNumber":67,"author":{"gitId":"IncompetentDev"},"content":"            executeTodo(argumentList);","lastModifiedDate":"2022-02-10"},{"lineNumber":68,"author":{"gitId":"IncompetentDev"},"content":"            break;","lastModifiedDate":"2022-02-07"},{"lineNumber":69,"author":{"gitId":"IncompetentDev"},"content":"        case \"deadline\":","lastModifiedDate":"2022-02-07"},{"lineNumber":70,"author":{"gitId":"IncompetentDev"},"content":"            executeDeadline(argumentList);","lastModifiedDate":"2022-02-10"},{"lineNumber":71,"author":{"gitId":"IncompetentDev"},"content":"            break;","lastModifiedDate":"2022-02-07"},{"lineNumber":72,"author":{"gitId":"IncompetentDev"},"content":"        case \"event\":","lastModifiedDate":"2022-02-07"},{"lineNumber":73,"author":{"gitId":"IncompetentDev"},"content":"            executeEvent(argumentList);","lastModifiedDate":"2022-02-10"},{"lineNumber":74,"author":{"gitId":"IncompetentDev"},"content":"            break;","lastModifiedDate":"2022-02-07"},{"lineNumber":75,"author":{"gitId":"IncompetentDev"},"content":"        }","lastModifiedDate":"2022-02-07"},{"lineNumber":76,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-10"},{"lineNumber":77,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-10"},{"lineNumber":78,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-10"},{"lineNumber":79,"author":{"gitId":"IncompetentDev"},"content":"     * Lists out all tasks and their corresponding information.","lastModifiedDate":"2022-02-10"},{"lineNumber":80,"author":{"gitId":"IncompetentDev"},"content":"     * Private function, internal use within Handler only.","lastModifiedDate":"2022-02-10"},{"lineNumber":81,"author":{"gitId":"IncompetentDev"},"content":"     *","lastModifiedDate":"2022-02-10"},{"lineNumber":82,"author":{"gitId":"IncompetentDev"},"content":"     * @param argumentList arguments passed in by the user, as inherited from public execute() function","lastModifiedDate":"2022-02-10"},{"lineNumber":83,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-10"},{"lineNumber":84,"author":{"gitId":"IncompetentDev"},"content":"    private void executeList(Map\u003cString, String\u003e argumentList) {","lastModifiedDate":"2022-02-10"},{"lineNumber":85,"author":{"gitId":"IncompetentDev"},"content":"        System.out.println(LIST_PRE_MESSAGE_FORMAT);","lastModifiedDate":"2022-02-10"},{"lineNumber":86,"author":{"gitId":"IncompetentDev"},"content":"        for (int i \u003d 0; i\u003ctaskList.size(); i++) {","lastModifiedDate":"2022-02-10"},{"lineNumber":87,"author":{"gitId":"IncompetentDev"},"content":"            String taskInfo \u003d taskList.get(i).toString();","lastModifiedDate":"2022-02-10"},{"lineNumber":88,"author":{"gitId":"IncompetentDev"},"content":"            String formattedTaskInfo \u003d String.format(LIST_MESSAGE_FORMAT, i+1, taskInfo);","lastModifiedDate":"2022-02-10"},{"lineNumber":89,"author":{"gitId":"IncompetentDev"},"content":"            System.out.println(formattedTaskInfo);","lastModifiedDate":"2022-02-10"},{"lineNumber":90,"author":{"gitId":"IncompetentDev"},"content":"        }","lastModifiedDate":"2022-02-10"},{"lineNumber":91,"author":{"gitId":"IncompetentDev"},"content":"        System.out.println(LIST_POST_MESSAGE_FORMAT);","lastModifiedDate":"2022-02-10"},{"lineNumber":92,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-10"},{"lineNumber":93,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-10"},{"lineNumber":94,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-10"},{"lineNumber":95,"author":{"gitId":"IncompetentDev"},"content":"     * Marks a task as done, whose index is in argumentList.","lastModifiedDate":"2022-02-10"},{"lineNumber":96,"author":{"gitId":"IncompetentDev"},"content":"     * Private function, internal use within Handler only.","lastModifiedDate":"2022-02-10"},{"lineNumber":97,"author":{"gitId":"IncompetentDev"},"content":"     *","lastModifiedDate":"2022-02-10"},{"lineNumber":98,"author":{"gitId":"IncompetentDev"},"content":"     * @param argumentList arguments passed in by the user, as inherited from public execute() function","lastModifiedDate":"2022-02-10"},{"lineNumber":99,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-10"},{"lineNumber":100,"author":{"gitId":"IncompetentDev"},"content":"    private void executeMark(Map\u003cString, String\u003e argumentList) throws IndexOutOfBoundsException {","lastModifiedDate":"2022-02-11"},{"lineNumber":101,"author":{"gitId":"IncompetentDev"},"content":"        int index \u003d Integer.parseInt(argumentList.get(\"\"));","lastModifiedDate":"2022-02-10"},{"lineNumber":102,"author":{"gitId":"IncompetentDev"},"content":"        index \u003d index - 1;","lastModifiedDate":"2022-02-10"},{"lineNumber":103,"author":{"gitId":"IncompetentDev"},"content":"        Task taskToMark \u003d taskList.get(index);","lastModifiedDate":"2022-02-10"},{"lineNumber":104,"author":{"gitId":"IncompetentDev"},"content":"        taskToMark.setStatusIcon(true);","lastModifiedDate":"2022-02-10"},{"lineNumber":105,"author":{"gitId":"IncompetentDev"},"content":"        System.out.println(String.format(TASK_MARKED_MESSAGE_FORMAT, taskToMark.toString()));","lastModifiedDate":"2022-02-10"},{"lineNumber":106,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-10"},{"lineNumber":107,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-10"},{"lineNumber":108,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-10"},{"lineNumber":109,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-10"},{"lineNumber":110,"author":{"gitId":"IncompetentDev"},"content":"     * Marks a task as not done, whose index is in argumentList.","lastModifiedDate":"2022-02-10"},{"lineNumber":111,"author":{"gitId":"IncompetentDev"},"content":"     * Private function, internal use within Handler only.","lastModifiedDate":"2022-02-10"},{"lineNumber":112,"author":{"gitId":"IncompetentDev"},"content":"     *","lastModifiedDate":"2022-02-10"},{"lineNumber":113,"author":{"gitId":"IncompetentDev"},"content":"     * @param argumentList arguments passed in by the user, as inherited from public execute() function","lastModifiedDate":"2022-02-10"},{"lineNumber":114,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-10"},{"lineNumber":115,"author":{"gitId":"IncompetentDev"},"content":"    private void executeUnmark(Map\u003cString, String\u003e argumentList) throws IndexOutOfBoundsException {","lastModifiedDate":"2022-02-11"},{"lineNumber":116,"author":{"gitId":"IncompetentDev"},"content":"        int index \u003d Integer.parseInt(argumentList.get(\"\"));","lastModifiedDate":"2022-02-10"},{"lineNumber":117,"author":{"gitId":"IncompetentDev"},"content":"        index \u003d index - 1;","lastModifiedDate":"2022-02-10"},{"lineNumber":118,"author":{"gitId":"IncompetentDev"},"content":"        Task taskToMark \u003d taskList.get(index);","lastModifiedDate":"2022-02-10"},{"lineNumber":119,"author":{"gitId":"IncompetentDev"},"content":"        taskToMark.setStatusIcon(false);","lastModifiedDate":"2022-02-10"},{"lineNumber":120,"author":{"gitId":"IncompetentDev"},"content":"        System.out.println(String.format(TASK_UNMARKED_MESSAGE_FORMAT, taskToMark.toString()));","lastModifiedDate":"2022-02-10"},{"lineNumber":121,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-10"},{"lineNumber":122,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-10"},{"lineNumber":123,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-10"},{"lineNumber":124,"author":{"gitId":"IncompetentDev"},"content":"     * Creates a Todo and adds it to the list. The description is provided in argumentList.","lastModifiedDate":"2022-02-10"},{"lineNumber":125,"author":{"gitId":"IncompetentDev"},"content":"     * Private function, internal use within Handler only.","lastModifiedDate":"2022-02-10"},{"lineNumber":126,"author":{"gitId":"IncompetentDev"},"content":"     *","lastModifiedDate":"2022-02-10"},{"lineNumber":127,"author":{"gitId":"IncompetentDev"},"content":"     * @param argumentList arguments passed in by the user, as inherited from public execute() function","lastModifiedDate":"2022-02-10"},{"lineNumber":128,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-10"},{"lineNumber":129,"author":{"gitId":"IncompetentDev"},"content":"    private void executeTodo(Map\u003cString, String\u003e argumentList) {","lastModifiedDate":"2022-02-10"},{"lineNumber":130,"author":{"gitId":"IncompetentDev"},"content":"        String description \u003d argumentList.get(\"\");","lastModifiedDate":"2022-02-10"},{"lineNumber":131,"author":{"gitId":"IncompetentDev"},"content":"        Todo todoTask \u003d new Todo(argumentList.get(\"\"));","lastModifiedDate":"2022-02-10"},{"lineNumber":132,"author":{"gitId":"IncompetentDev"},"content":"        taskList.add(todoTask);","lastModifiedDate":"2022-02-10"},{"lineNumber":133,"author":{"gitId":"IncompetentDev"},"content":"        System.out.println(String.format(TASK_ADDED_MESSAGE_FORMAT, todoTask.toString()));","lastModifiedDate":"2022-02-10"},{"lineNumber":134,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-10"},{"lineNumber":135,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-10"},{"lineNumber":136,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-10"},{"lineNumber":137,"author":{"gitId":"IncompetentDev"},"content":"     * Creates a Deadline and adds it to the list. The description and byDate is provided in argumentList.","lastModifiedDate":"2022-02-10"},{"lineNumber":138,"author":{"gitId":"IncompetentDev"},"content":"     * Private function, internal use within Handler only.","lastModifiedDate":"2022-02-10"},{"lineNumber":139,"author":{"gitId":"IncompetentDev"},"content":"     *","lastModifiedDate":"2022-02-10"},{"lineNumber":140,"author":{"gitId":"IncompetentDev"},"content":"     * @param argumentList arguments passed in by the user, as inherited from public execute() function","lastModifiedDate":"2022-02-10"},{"lineNumber":141,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-10"},{"lineNumber":142,"author":{"gitId":"IncompetentDev"},"content":"    private void executeDeadline(Map\u003cString, String\u003e argumentList) {","lastModifiedDate":"2022-02-10"},{"lineNumber":143,"author":{"gitId":"IncompetentDev"},"content":"        String description \u003d argumentList.get(\"\");","lastModifiedDate":"2022-02-10"},{"lineNumber":144,"author":{"gitId":"IncompetentDev"},"content":"        String byDate \u003d argumentList.get(\"by\");","lastModifiedDate":"2022-02-10"},{"lineNumber":145,"author":{"gitId":"IncompetentDev"},"content":"        Deadline deadlineTask \u003d new Deadline(description, byDate);","lastModifiedDate":"2022-02-10"},{"lineNumber":146,"author":{"gitId":"IncompetentDev"},"content":"        taskList.add(deadlineTask);","lastModifiedDate":"2022-02-10"},{"lineNumber":147,"author":{"gitId":"IncompetentDev"},"content":"        System.out.println(String.format(TASK_ADDED_MESSAGE_FORMAT, deadlineTask.toString()));","lastModifiedDate":"2022-02-10"},{"lineNumber":148,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-10"},{"lineNumber":149,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-10"},{"lineNumber":150,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-10"},{"lineNumber":151,"author":{"gitId":"IncompetentDev"},"content":"     * Creates an Event and adds it to the list. The description and atDate is provided in argumentList.","lastModifiedDate":"2022-02-10"},{"lineNumber":152,"author":{"gitId":"IncompetentDev"},"content":"     * Private function, internal use within Handler only.","lastModifiedDate":"2022-02-10"},{"lineNumber":153,"author":{"gitId":"IncompetentDev"},"content":"     *","lastModifiedDate":"2022-02-10"},{"lineNumber":154,"author":{"gitId":"IncompetentDev"},"content":"     * @param argumentList arguments passed in by the user, as inherited from public execute() function","lastModifiedDate":"2022-02-10"},{"lineNumber":155,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-10"},{"lineNumber":156,"author":{"gitId":"IncompetentDev"},"content":"    private void executeEvent(Map\u003cString, String\u003e argumentList) {","lastModifiedDate":"2022-02-10"},{"lineNumber":157,"author":{"gitId":"IncompetentDev"},"content":"        String description \u003d argumentList.get(\"\");","lastModifiedDate":"2022-02-10"},{"lineNumber":158,"author":{"gitId":"IncompetentDev"},"content":"        String byDate \u003d argumentList.get(\"at\");","lastModifiedDate":"2022-02-10"},{"lineNumber":159,"author":{"gitId":"IncompetentDev"},"content":"        Event eventTask \u003d new Event(description, byDate);","lastModifiedDate":"2022-02-10"},{"lineNumber":160,"author":{"gitId":"IncompetentDev"},"content":"        taskList.add(eventTask);","lastModifiedDate":"2022-02-10"},{"lineNumber":161,"author":{"gitId":"IncompetentDev"},"content":"        System.out.println(String.format(TASK_ADDED_MESSAGE_FORMAT, eventTask.toString()));","lastModifiedDate":"2022-02-10"},{"lineNumber":162,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":163,"author":{"gitId":"IncompetentDev"},"content":"}","lastModifiedDate":"2022-02-07"}],"authorContributionMap":{"IncompetentDev":163}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IncompetentDev"},"content":"package duke;","lastModifiedDate":"2022-02-11"},{"lineNumber":2,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":3,"author":{"gitId":"IncompetentDev"},"content":"import duke.exceptions.EmptyCommandException;","lastModifiedDate":"2022-02-11"},{"lineNumber":4,"author":{"gitId":"IncompetentDev"},"content":"import duke.exceptions.InvalidArgumentException;","lastModifiedDate":"2022-02-11"},{"lineNumber":5,"author":{"gitId":"IncompetentDev"},"content":"import duke.exceptions.InvalidCommandException;","lastModifiedDate":"2022-02-11"},{"lineNumber":6,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":7,"author":{"gitId":"IncompetentDev"},"content":"import java.util.Map;","lastModifiedDate":"2022-02-07"},{"lineNumber":8,"author":{"gitId":"IncompetentDev"},"content":"import static java.util.Map.entry;","lastModifiedDate":"2022-02-07"},{"lineNumber":9,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":10,"author":{"gitId":"IncompetentDev"},"content":"import java.util.Set;","lastModifiedDate":"2022-02-11"},{"lineNumber":11,"author":{"gitId":"IncompetentDev"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2022-02-07"},{"lineNumber":12,"author":{"gitId":"IncompetentDev"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2022-02-07"},{"lineNumber":13,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":14,"author":{"gitId":"IncompetentDev"},"content":"public class Parser {","lastModifiedDate":"2022-02-07"},{"lineNumber":15,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":16,"author":{"gitId":"IncompetentDev"},"content":"    // Dictionary storing mappings of command -\u003e regex string to extract parameters","lastModifiedDate":"2022-02-07"},{"lineNumber":17,"author":{"gitId":"IncompetentDev"},"content":"    public static final Map\u003cString, Pattern\u003e MAP_COMMAND_FORMAT \u003d Map.ofEntries(","lastModifiedDate":"2022-02-07"},{"lineNumber":18,"author":{"gitId":"IncompetentDev"},"content":"            entry(\"bye\", Pattern.compile(\"(.?)\")),","lastModifiedDate":"2022-02-07"},{"lineNumber":19,"author":{"gitId":"IncompetentDev"},"content":"            entry(\"list\", Pattern.compile(\"(.?)\")),","lastModifiedDate":"2022-02-07"},{"lineNumber":20,"author":{"gitId":"IncompetentDev"},"content":"            entry(\"mark\", Pattern.compile(\"(\\\\d+)\")),","lastModifiedDate":"2022-02-07"},{"lineNumber":21,"author":{"gitId":"IncompetentDev"},"content":"            entry(\"unmark\", Pattern.compile(\"(\\\\d+)\")),","lastModifiedDate":"2022-02-07"},{"lineNumber":22,"author":{"gitId":"IncompetentDev"},"content":"            entry(\"todo\", Pattern.compile(\"(.+)\")),","lastModifiedDate":"2022-02-07"},{"lineNumber":23,"author":{"gitId":"IncompetentDev"},"content":"            entry(\"deadline\", Pattern.compile(\"(.+)\\\\s\\\\/by\\\\s(.+)\")),","lastModifiedDate":"2022-02-11"},{"lineNumber":24,"author":{"gitId":"IncompetentDev"},"content":"            entry(\"event\", Pattern.compile(\"(.+)\\\\s\\\\/at\\\\s(.+)\")));","lastModifiedDate":"2022-02-11"},{"lineNumber":25,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":26,"author":{"gitId":"IncompetentDev"},"content":"    // Used to extract initial command","lastModifiedDate":"2022-02-07"},{"lineNumber":27,"author":{"gitId":"IncompetentDev"},"content":"    public static final Pattern COMMAND_FORMAT \u003d Pattern.compile(\"(\\\\S+)(.*)\");","lastModifiedDate":"2022-02-07"},{"lineNumber":28,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":29,"author":{"gitId":"IncompetentDev"},"content":"    // Data fields to store command arguments","lastModifiedDate":"2022-02-07"},{"lineNumber":30,"author":{"gitId":"IncompetentDev"},"content":"    private String userCommand;","lastModifiedDate":"2022-02-11"},{"lineNumber":31,"author":{"gitId":"IncompetentDev"},"content":"    private Map\u003cString, String\u003e argumentList;","lastModifiedDate":"2022-02-11"},{"lineNumber":32,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":33,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-07"},{"lineNumber":34,"author":{"gitId":"IncompetentDev"},"content":"     * Initialises this Parser with empty userCommand and empty argumentList","lastModifiedDate":"2022-02-07"},{"lineNumber":35,"author":{"gitId":"IncompetentDev"},"content":"     * Functions as a singleton class (without the appropriate code), instantiate only one","lastModifiedDate":"2022-02-10"},{"lineNumber":36,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-07"},{"lineNumber":37,"author":{"gitId":"IncompetentDev"},"content":"    public Parser() {","lastModifiedDate":"2022-02-07"},{"lineNumber":38,"author":{"gitId":"IncompetentDev"},"content":"        this.userCommand \u003d \"\";","lastModifiedDate":"2022-02-07"},{"lineNumber":39,"author":{"gitId":"IncompetentDev"},"content":"        argumentList \u003d null;","lastModifiedDate":"2022-02-07"},{"lineNumber":40,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":41,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":42,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-07"},{"lineNumber":43,"author":{"gitId":"IncompetentDev"},"content":"     * Parses user input, storing results in this class\u0027s userCommand and argumentList fields","lastModifiedDate":"2022-02-11"},{"lineNumber":44,"author":{"gitId":"IncompetentDev"},"content":"     * @param userInput input from user","lastModifiedDate":"2022-02-11"},{"lineNumber":45,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-07"},{"lineNumber":46,"author":{"gitId":"IncompetentDev"},"content":"    public void parseInput(String userInput)  {","lastModifiedDate":"2022-02-10"},{"lineNumber":47,"author":{"gitId":"IncompetentDev"},"content":"        try {","lastModifiedDate":"2022-02-11"},{"lineNumber":48,"author":{"gitId":"IncompetentDev"},"content":"            // Initiate search, while checking if command is empty","lastModifiedDate":"2022-02-11"},{"lineNumber":49,"author":{"gitId":"IncompetentDev"},"content":"            Matcher commandMatcher \u003d COMMAND_FORMAT.matcher(userInput);","lastModifiedDate":"2022-02-07"},{"lineNumber":50,"author":{"gitId":"IncompetentDev"},"content":"            searchCommand(commandMatcher);","lastModifiedDate":"2022-02-11"},{"lineNumber":51,"author":{"gitId":"IncompetentDev"},"content":"            // Check if entered command is valid","lastModifiedDate":"2022-02-11"},{"lineNumber":52,"author":{"gitId":"IncompetentDev"},"content":"            String inputCommand \u003d commandMatcher.group(1);","lastModifiedDate":"2022-02-11"},{"lineNumber":53,"author":{"gitId":"IncompetentDev"},"content":"            parseCommand(inputCommand);","lastModifiedDate":"2022-02-11"},{"lineNumber":54,"author":{"gitId":"IncompetentDev"},"content":"            // Check if arguments are valid","lastModifiedDate":"2022-02-11"},{"lineNumber":55,"author":{"gitId":"IncompetentDev"},"content":"            String inputArguments \u003d commandMatcher.group(2).trim();","lastModifiedDate":"2022-02-11"},{"lineNumber":56,"author":{"gitId":"IncompetentDev"},"content":"            parseArguments(inputCommand, inputArguments);","lastModifiedDate":"2022-02-11"},{"lineNumber":57,"author":{"gitId":"IncompetentDev"},"content":"        } catch (EmptyCommandException e) {","lastModifiedDate":"2022-02-11"},{"lineNumber":58,"author":{"gitId":"IncompetentDev"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2022-02-11"},{"lineNumber":59,"author":{"gitId":"IncompetentDev"},"content":"        } catch (InvalidCommandException e) {","lastModifiedDate":"2022-02-11"},{"lineNumber":60,"author":{"gitId":"IncompetentDev"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2022-02-11"},{"lineNumber":61,"author":{"gitId":"IncompetentDev"},"content":"        } catch (InvalidArgumentException e) {","lastModifiedDate":"2022-02-11"},{"lineNumber":62,"author":{"gitId":"IncompetentDev"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2022-02-11"},{"lineNumber":63,"author":{"gitId":"IncompetentDev"},"content":"        }","lastModifiedDate":"2022-02-07"},{"lineNumber":64,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":65,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":66,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":67,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-07"},{"lineNumber":68,"author":{"gitId":"IncompetentDev"},"content":"     * Returns parsed command from user input","lastModifiedDate":"2022-02-07"},{"lineNumber":69,"author":{"gitId":"IncompetentDev"},"content":"     *","lastModifiedDate":"2022-02-07"},{"lineNumber":70,"author":{"gitId":"IncompetentDev"},"content":"     * @return parsed command form user input","lastModifiedDate":"2022-02-07"},{"lineNumber":71,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-07"},{"lineNumber":72,"author":{"gitId":"IncompetentDev"},"content":"    public String getUserCommand() {","lastModifiedDate":"2022-02-07"},{"lineNumber":73,"author":{"gitId":"IncompetentDev"},"content":"        return this.userCommand;","lastModifiedDate":"2022-02-07"},{"lineNumber":74,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":75,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":76,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-07"},{"lineNumber":77,"author":{"gitId":"IncompetentDev"},"content":"     * Get all arguments","lastModifiedDate":"2022-02-07"},{"lineNumber":78,"author":{"gitId":"IncompetentDev"},"content":"     *","lastModifiedDate":"2022-02-07"},{"lineNumber":79,"author":{"gitId":"IncompetentDev"},"content":"     * @return command given by user","lastModifiedDate":"2022-02-07"},{"lineNumber":80,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-07"},{"lineNumber":81,"author":{"gitId":"IncompetentDev"},"content":"    public Map\u003cString, String\u003e getArgumentList() {","lastModifiedDate":"2022-02-07"},{"lineNumber":82,"author":{"gitId":"IncompetentDev"},"content":"        return this.argumentList;","lastModifiedDate":"2022-02-07"},{"lineNumber":83,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":84,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-10"},{"lineNumber":85,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-10"},{"lineNumber":86,"author":{"gitId":"IncompetentDev"},"content":"     * Returns boolean indicating if command is bye","lastModifiedDate":"2022-02-10"},{"lineNumber":87,"author":{"gitId":"IncompetentDev"},"content":"     *","lastModifiedDate":"2022-02-10"},{"lineNumber":88,"author":{"gitId":"IncompetentDev"},"content":"     * @return boolean indicating userCommand is \"bye\"","lastModifiedDate":"2022-02-10"},{"lineNumber":89,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-10"},{"lineNumber":90,"author":{"gitId":"IncompetentDev"},"content":"    public Boolean isBye() {","lastModifiedDate":"2022-02-10"},{"lineNumber":91,"author":{"gitId":"IncompetentDev"},"content":"        return (this.userCommand.equals(\"bye\"));","lastModifiedDate":"2022-02-10"},{"lineNumber":92,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-10"},{"lineNumber":93,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":94,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-11"},{"lineNumber":95,"author":{"gitId":"IncompetentDev"},"content":"     * Checks if the userInput in CommandMatcher matches the regex command format","lastModifiedDate":"2022-02-11"},{"lineNumber":96,"author":{"gitId":"IncompetentDev"},"content":"     * @param commandMatcher the matcher object to search on","lastModifiedDate":"2022-02-11"},{"lineNumber":97,"author":{"gitId":"IncompetentDev"},"content":"     * @throws EmptyCommandException if command is empty","lastModifiedDate":"2022-02-11"},{"lineNumber":98,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-11"},{"lineNumber":99,"author":{"gitId":"IncompetentDev"},"content":"    private void searchCommand(Matcher commandMatcher) throws EmptyCommandException {","lastModifiedDate":"2022-02-11"},{"lineNumber":100,"author":{"gitId":"IncompetentDev"},"content":"        if (!commandMatcher.matches()) {","lastModifiedDate":"2022-02-11"},{"lineNumber":101,"author":{"gitId":"IncompetentDev"},"content":"            throw new EmptyCommandException();","lastModifiedDate":"2022-02-11"},{"lineNumber":102,"author":{"gitId":"IncompetentDev"},"content":"        }","lastModifiedDate":"2022-02-11"},{"lineNumber":103,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-11"},{"lineNumber":104,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":105,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-11"},{"lineNumber":106,"author":{"gitId":"IncompetentDev"},"content":"     * Checks if the command entered is valid","lastModifiedDate":"2022-02-11"},{"lineNumber":107,"author":{"gitId":"IncompetentDev"},"content":"     * @param inputCommand the extracted user command","lastModifiedDate":"2022-02-11"},{"lineNumber":108,"author":{"gitId":"IncompetentDev"},"content":"     * @throws InvalidCommandException if command does not match any known commands","lastModifiedDate":"2022-02-11"},{"lineNumber":109,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-11"},{"lineNumber":110,"author":{"gitId":"IncompetentDev"},"content":"    private void parseCommand(String inputCommand) throws InvalidCommandException {","lastModifiedDate":"2022-02-11"},{"lineNumber":111,"author":{"gitId":"IncompetentDev"},"content":"        Set\u003cString\u003e keys \u003d MAP_COMMAND_FORMAT.keySet();","lastModifiedDate":"2022-02-11"},{"lineNumber":112,"author":{"gitId":"IncompetentDev"},"content":"        Boolean isValidCommand \u003d keys.contains(inputCommand);","lastModifiedDate":"2022-02-11"},{"lineNumber":113,"author":{"gitId":"IncompetentDev"},"content":"        if (!isValidCommand) {","lastModifiedDate":"2022-02-11"},{"lineNumber":114,"author":{"gitId":"IncompetentDev"},"content":"            throw new InvalidCommandException(inputCommand);","lastModifiedDate":"2022-02-11"},{"lineNumber":115,"author":{"gitId":"IncompetentDev"},"content":"        }","lastModifiedDate":"2022-02-11"},{"lineNumber":116,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-11"},{"lineNumber":117,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":118,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-11"},{"lineNumber":119,"author":{"gitId":"IncompetentDev"},"content":"     * Checks if the arguments entered matches the regex for the given command and sets userCommand and argumentList accordingly","lastModifiedDate":"2022-02-11"},{"lineNumber":120,"author":{"gitId":"IncompetentDev"},"content":"     * @param inputArguments the extracted user arguments","lastModifiedDate":"2022-02-11"},{"lineNumber":121,"author":{"gitId":"IncompetentDev"},"content":"     * @throws InvalidArgumentException if argument does not follow format given by input command","lastModifiedDate":"2022-02-11"},{"lineNumber":122,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-11"},{"lineNumber":123,"author":{"gitId":"IncompetentDev"},"content":"    private void parseArguments(String inputCommand, String inputArguments) throws InvalidArgumentException {","lastModifiedDate":"2022-02-11"},{"lineNumber":124,"author":{"gitId":"IncompetentDev"},"content":"        // Get associated regex with inputCommand","lastModifiedDate":"2022-02-11"},{"lineNumber":125,"author":{"gitId":"IncompetentDev"},"content":"        Pattern argumentPattern \u003d MAP_COMMAND_FORMAT.get(inputCommand);","lastModifiedDate":"2022-02-11"},{"lineNumber":126,"author":{"gitId":"IncompetentDev"},"content":"        Matcher argumentMatcher \u003d argumentPattern.matcher(inputArguments);","lastModifiedDate":"2022-02-11"},{"lineNumber":127,"author":{"gitId":"IncompetentDev"},"content":"        if (!argumentMatcher.matches()) {","lastModifiedDate":"2022-02-11"},{"lineNumber":128,"author":{"gitId":"IncompetentDev"},"content":"            throw new InvalidArgumentException(inputCommand);","lastModifiedDate":"2022-02-11"},{"lineNumber":129,"author":{"gitId":"IncompetentDev"},"content":"        }","lastModifiedDate":"2022-02-11"},{"lineNumber":130,"author":{"gitId":"IncompetentDev"},"content":"        this.userCommand \u003d inputCommand;","lastModifiedDate":"2022-02-11"},{"lineNumber":131,"author":{"gitId":"IncompetentDev"},"content":"        switch (inputCommand) {","lastModifiedDate":"2022-02-11"},{"lineNumber":132,"author":{"gitId":"IncompetentDev"},"content":"        case \"deadline\":","lastModifiedDate":"2022-02-11"},{"lineNumber":133,"author":{"gitId":"IncompetentDev"},"content":"            this.argumentList \u003d Map.ofEntries(","lastModifiedDate":"2022-02-11"},{"lineNumber":134,"author":{"gitId":"IncompetentDev"},"content":"                    entry(\"\", argumentMatcher.group(1).trim()),","lastModifiedDate":"2022-02-11"},{"lineNumber":135,"author":{"gitId":"IncompetentDev"},"content":"                    entry(\"by\", argumentMatcher.group(2).trim()));","lastModifiedDate":"2022-02-11"},{"lineNumber":136,"author":{"gitId":"IncompetentDev"},"content":"            break;","lastModifiedDate":"2022-02-11"},{"lineNumber":137,"author":{"gitId":"IncompetentDev"},"content":"        case \"event\":","lastModifiedDate":"2022-02-11"},{"lineNumber":138,"author":{"gitId":"IncompetentDev"},"content":"            this.argumentList \u003d Map.ofEntries(","lastModifiedDate":"2022-02-11"},{"lineNumber":139,"author":{"gitId":"IncompetentDev"},"content":"                    entry(\"\", argumentMatcher.group(1).trim()),","lastModifiedDate":"2022-02-11"},{"lineNumber":140,"author":{"gitId":"IncompetentDev"},"content":"                    entry(\"at\", argumentMatcher.group(2).trim()));","lastModifiedDate":"2022-02-11"},{"lineNumber":141,"author":{"gitId":"IncompetentDev"},"content":"            break;","lastModifiedDate":"2022-02-11"},{"lineNumber":142,"author":{"gitId":"IncompetentDev"},"content":"        default:","lastModifiedDate":"2022-02-11"},{"lineNumber":143,"author":{"gitId":"IncompetentDev"},"content":"            this.argumentList \u003d Map.ofEntries(entry(\"\", argumentMatcher.group(1).trim()));","lastModifiedDate":"2022-02-11"},{"lineNumber":144,"author":{"gitId":"IncompetentDev"},"content":"            break;","lastModifiedDate":"2022-02-11"},{"lineNumber":145,"author":{"gitId":"IncompetentDev"},"content":"        }","lastModifiedDate":"2022-02-11"},{"lineNumber":146,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-11"},{"lineNumber":147,"author":{"gitId":"IncompetentDev"},"content":"}","lastModifiedDate":"2022-02-07"}],"authorContributionMap":{"IncompetentDev":147}},{"path":"src/main/java/duke/exceptions/EmptyCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IncompetentDev"},"content":"package duke.exceptions;","lastModifiedDate":"2022-02-11"},{"lineNumber":2,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":3,"author":{"gitId":"IncompetentDev"},"content":"public class EmptyCommandException extends Exception{","lastModifiedDate":"2022-02-11"},{"lineNumber":4,"author":{"gitId":"IncompetentDev"},"content":"    private static final String EMPTY_COMMAND_MESSAGE \u003d","lastModifiedDate":"2022-02-11"},{"lineNumber":5,"author":{"gitId":"IncompetentDev"},"content":"            \"____________________________________________________________\"","lastModifiedDate":"2022-02-11"},{"lineNumber":6,"author":{"gitId":"IncompetentDev"},"content":"            + \"\\n☹ OOPS!!! I\u0027m sorry, but command cannot be empty!\"","lastModifiedDate":"2022-02-11"},{"lineNumber":7,"author":{"gitId":"IncompetentDev"},"content":"            + \"\\n____________________________________________________________\";","lastModifiedDate":"2022-02-11"},{"lineNumber":8,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":9,"author":{"gitId":"IncompetentDev"},"content":"    public EmptyCommandException() {","lastModifiedDate":"2022-02-11"},{"lineNumber":10,"author":{"gitId":"IncompetentDev"},"content":"        super(EMPTY_COMMAND_MESSAGE);","lastModifiedDate":"2022-02-11"},{"lineNumber":11,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-11"},{"lineNumber":12,"author":{"gitId":"IncompetentDev"},"content":"}","lastModifiedDate":"2022-02-11"}],"authorContributionMap":{"IncompetentDev":12}},{"path":"src/main/java/duke/exceptions/InvalidArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IncompetentDev"},"content":"package duke.exceptions;","lastModifiedDate":"2022-02-11"},{"lineNumber":2,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":3,"author":{"gitId":"IncompetentDev"},"content":"public class InvalidArgumentException extends Exception {","lastModifiedDate":"2022-02-11"},{"lineNumber":4,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":5,"author":{"gitId":"IncompetentDev"},"content":"    private static final String INVALID_COMMAND_MESSAGE \u003d","lastModifiedDate":"2022-02-11"},{"lineNumber":6,"author":{"gitId":"IncompetentDev"},"content":"            \"____________________________________________________________\"","lastModifiedDate":"2022-02-11"},{"lineNumber":7,"author":{"gitId":"IncompetentDev"},"content":"            + \"\\n☹ OOPS!!! The command entered for %s does not match (empty or mistyped).\"","lastModifiedDate":"2022-02-11"},{"lineNumber":8,"author":{"gitId":"IncompetentDev"},"content":"            + \"\\n____________________________________________________________\";","lastModifiedDate":"2022-02-11"},{"lineNumber":9,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":10,"author":{"gitId":"IncompetentDev"},"content":"    public InvalidArgumentException(String inputCommand) {","lastModifiedDate":"2022-02-11"},{"lineNumber":11,"author":{"gitId":"IncompetentDev"},"content":"        super(String.format(INVALID_COMMAND_MESSAGE,inputCommand));","lastModifiedDate":"2022-02-11"},{"lineNumber":12,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-11"},{"lineNumber":13,"author":{"gitId":"IncompetentDev"},"content":"}","lastModifiedDate":"2022-02-11"}],"authorContributionMap":{"IncompetentDev":13}},{"path":"src/main/java/duke/exceptions/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IncompetentDev"},"content":"package duke.exceptions;","lastModifiedDate":"2022-02-11"},{"lineNumber":2,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":3,"author":{"gitId":"IncompetentDev"},"content":"public class InvalidCommandException extends Exception {","lastModifiedDate":"2022-02-11"},{"lineNumber":4,"author":{"gitId":"IncompetentDev"},"content":"    private static final String INVALID_COMMAND_MESSAGE \u003d","lastModifiedDate":"2022-02-11"},{"lineNumber":5,"author":{"gitId":"IncompetentDev"},"content":"            \"____________________________________________________________\"","lastModifiedDate":"2022-02-11"},{"lineNumber":6,"author":{"gitId":"IncompetentDev"},"content":"            + \"\\n☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what \u0027%s\u0027 means :-(\"","lastModifiedDate":"2022-02-11"},{"lineNumber":7,"author":{"gitId":"IncompetentDev"},"content":"            + \"\\n____________________________________________________________\";","lastModifiedDate":"2022-02-11"},{"lineNumber":8,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":9,"author":{"gitId":"IncompetentDev"},"content":"    public InvalidCommandException(String errorCommand) {","lastModifiedDate":"2022-02-11"},{"lineNumber":10,"author":{"gitId":"IncompetentDev"},"content":"        super(String.format(INVALID_COMMAND_MESSAGE, errorCommand));","lastModifiedDate":"2022-02-11"},{"lineNumber":11,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-11"},{"lineNumber":12,"author":{"gitId":"IncompetentDev"},"content":"}","lastModifiedDate":"2022-02-11"}],"authorContributionMap":{"IncompetentDev":12}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IncompetentDev"},"content":"package duke.tasks;","lastModifiedDate":"2022-02-11"},{"lineNumber":2,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":3,"author":{"gitId":"IncompetentDev"},"content":"public class Deadline extends Task {","lastModifiedDate":"2022-02-07"},{"lineNumber":4,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":5,"author":{"gitId":"IncompetentDev"},"content":"    // toString format string","lastModifiedDate":"2022-02-07"},{"lineNumber":6,"author":{"gitId":"IncompetentDev"},"content":"    public static final String FORMAT_STRING \u003d \"[D][%c] %s (by: %s)\";","lastModifiedDate":"2022-02-07"},{"lineNumber":7,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":8,"author":{"gitId":"IncompetentDev"},"content":"    protected String byDate;","lastModifiedDate":"2022-02-07"},{"lineNumber":9,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":10,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-07"},{"lineNumber":11,"author":{"gitId":"IncompetentDev"},"content":"     * Create a Deadline with isDone set to false, description of choice and byDate of choice","lastModifiedDate":"2022-02-07"},{"lineNumber":12,"author":{"gitId":"IncompetentDev"},"content":"     *","lastModifiedDate":"2022-02-07"},{"lineNumber":13,"author":{"gitId":"IncompetentDev"},"content":"     * @param description Description of the Task to be created","lastModifiedDate":"2022-02-07"},{"lineNumber":14,"author":{"gitId":"IncompetentDev"},"content":"     * @param byDate String representing deadline","lastModifiedDate":"2022-02-07"},{"lineNumber":15,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-07"},{"lineNumber":16,"author":{"gitId":"IncompetentDev"},"content":"    public Deadline(String description, String byDate) {","lastModifiedDate":"2022-02-07"},{"lineNumber":17,"author":{"gitId":"IncompetentDev"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-02-11"},{"lineNumber":18,"author":{"gitId":"IncompetentDev"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-02-11"},{"lineNumber":19,"author":{"gitId":"IncompetentDev"},"content":"        this.byDate \u003d byDate;","lastModifiedDate":"2022-02-07"},{"lineNumber":20,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":21,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":22,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-07"},{"lineNumber":23,"author":{"gitId":"IncompetentDev"},"content":"     * Returns the byDate associated with deadline","lastModifiedDate":"2022-02-07"},{"lineNumber":24,"author":{"gitId":"IncompetentDev"},"content":"     *","lastModifiedDate":"2022-02-07"},{"lineNumber":25,"author":{"gitId":"IncompetentDev"},"content":"     * @return byDate","lastModifiedDate":"2022-02-07"},{"lineNumber":26,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-07"},{"lineNumber":27,"author":{"gitId":"IncompetentDev"},"content":"    public String getByDate() {","lastModifiedDate":"2022-02-07"},{"lineNumber":28,"author":{"gitId":"IncompetentDev"},"content":"        return this.byDate;","lastModifiedDate":"2022-02-11"},{"lineNumber":29,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":30,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":31,"author":{"gitId":"IncompetentDev"},"content":"    @Override","lastModifiedDate":"2022-02-07"},{"lineNumber":32,"author":{"gitId":"IncompetentDev"},"content":"    public String toString() {","lastModifiedDate":"2022-02-07"},{"lineNumber":33,"author":{"gitId":"IncompetentDev"},"content":"        return String.format(FORMAT_STRING, this.getStatusIcon(), this.getDescription(), this.getByDate());","lastModifiedDate":"2022-02-07"},{"lineNumber":34,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":35,"author":{"gitId":"IncompetentDev"},"content":"}","lastModifiedDate":"2022-02-07"}],"authorContributionMap":{"IncompetentDev":35}},{"path":"src/main/java/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IncompetentDev"},"content":"package duke.tasks;","lastModifiedDate":"2022-02-11"},{"lineNumber":2,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":3,"author":{"gitId":"IncompetentDev"},"content":"public class Event extends Task {","lastModifiedDate":"2022-02-07"},{"lineNumber":4,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":5,"author":{"gitId":"IncompetentDev"},"content":"    // toString format string","lastModifiedDate":"2022-02-07"},{"lineNumber":6,"author":{"gitId":"IncompetentDev"},"content":"    public static final String FORMAT_STRING \u003d \"[E][%c] %s (at: %s)\";","lastModifiedDate":"2022-02-07"},{"lineNumber":7,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":8,"author":{"gitId":"IncompetentDev"},"content":"    protected String atDate;","lastModifiedDate":"2022-02-07"},{"lineNumber":9,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":10,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-07"},{"lineNumber":11,"author":{"gitId":"IncompetentDev"},"content":"     * Create an Event with isDone set to false, description of choice and atDate of choice","lastModifiedDate":"2022-02-07"},{"lineNumber":12,"author":{"gitId":"IncompetentDev"},"content":"     *","lastModifiedDate":"2022-02-07"},{"lineNumber":13,"author":{"gitId":"IncompetentDev"},"content":"     * @param description Description of the Task to be created","lastModifiedDate":"2022-02-07"},{"lineNumber":14,"author":{"gitId":"IncompetentDev"},"content":"     * @param atDate String representing event time","lastModifiedDate":"2022-02-07"},{"lineNumber":15,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-07"},{"lineNumber":16,"author":{"gitId":"IncompetentDev"},"content":"    public Event(String description, String atDate) {","lastModifiedDate":"2022-02-07"},{"lineNumber":17,"author":{"gitId":"IncompetentDev"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-02-11"},{"lineNumber":18,"author":{"gitId":"IncompetentDev"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-02-11"},{"lineNumber":19,"author":{"gitId":"IncompetentDev"},"content":"        this.atDate \u003d atDate;","lastModifiedDate":"2022-02-07"},{"lineNumber":20,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":21,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":22,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-07"},{"lineNumber":23,"author":{"gitId":"IncompetentDev"},"content":"     * Returns the atDate associated with event","lastModifiedDate":"2022-02-07"},{"lineNumber":24,"author":{"gitId":"IncompetentDev"},"content":"     *","lastModifiedDate":"2022-02-07"},{"lineNumber":25,"author":{"gitId":"IncompetentDev"},"content":"     * @return byDate","lastModifiedDate":"2022-02-07"},{"lineNumber":26,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-07"},{"lineNumber":27,"author":{"gitId":"IncompetentDev"},"content":"    public String getAtDate() {","lastModifiedDate":"2022-02-07"},{"lineNumber":28,"author":{"gitId":"IncompetentDev"},"content":"        return this.atDate;","lastModifiedDate":"2022-02-11"},{"lineNumber":29,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":30,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":31,"author":{"gitId":"IncompetentDev"},"content":"    @Override","lastModifiedDate":"2022-02-07"},{"lineNumber":32,"author":{"gitId":"IncompetentDev"},"content":"    public String toString() {","lastModifiedDate":"2022-02-07"},{"lineNumber":33,"author":{"gitId":"IncompetentDev"},"content":"        return String.format(FORMAT_STRING, this.getStatusIcon(), this.getDescription(), this.getAtDate());","lastModifiedDate":"2022-02-07"},{"lineNumber":34,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":35,"author":{"gitId":"IncompetentDev"},"content":"}","lastModifiedDate":"2022-02-07"}],"authorContributionMap":{"IncompetentDev":35}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IncompetentDev"},"content":"package duke.tasks;","lastModifiedDate":"2022-02-11"},{"lineNumber":2,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":3,"author":{"gitId":"IncompetentDev"},"content":"public abstract class Task {","lastModifiedDate":"2022-02-11"},{"lineNumber":4,"author":{"gitId":"IncompetentDev"},"content":"    protected String description;","lastModifiedDate":"2022-01-30"},{"lineNumber":5,"author":{"gitId":"IncompetentDev"},"content":"    protected boolean isDone;","lastModifiedDate":"2022-01-30"},{"lineNumber":6,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":7,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-07"},{"lineNumber":8,"author":{"gitId":"IncompetentDev"},"content":"     * Returns a String representing the description for the Task.","lastModifiedDate":"2022-02-07"},{"lineNumber":9,"author":{"gitId":"IncompetentDev"},"content":"     *","lastModifiedDate":"2022-02-07"},{"lineNumber":10,"author":{"gitId":"IncompetentDev"},"content":"     * @return Description of Task","lastModifiedDate":"2022-02-07"},{"lineNumber":11,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-07"},{"lineNumber":12,"author":{"gitId":"IncompetentDev"},"content":"    public String getDescription() {","lastModifiedDate":"2022-01-30"},{"lineNumber":13,"author":{"gitId":"IncompetentDev"},"content":"        return this.description;","lastModifiedDate":"2022-02-11"},{"lineNumber":14,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":15,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":16,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-07"},{"lineNumber":17,"author":{"gitId":"IncompetentDev"},"content":"     * Returns a character that appropriately represents the state of Task completion","lastModifiedDate":"2022-02-07"},{"lineNumber":18,"author":{"gitId":"IncompetentDev"},"content":"     *","lastModifiedDate":"2022-02-07"},{"lineNumber":19,"author":{"gitId":"IncompetentDev"},"content":"     * @return char \u0027X\u0027 if done, \u0027 \u0027 if not done.","lastModifiedDate":"2022-02-07"},{"lineNumber":20,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-07"},{"lineNumber":21,"author":{"gitId":"IncompetentDev"},"content":"    public char getStatusIcon() {","lastModifiedDate":"2022-01-30"},{"lineNumber":22,"author":{"gitId":"IncompetentDev"},"content":"        return (this.isDone ? \u0027X\u0027 : \u0027 \u0027);","lastModifiedDate":"2022-02-11"},{"lineNumber":23,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":24,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":25,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-07"},{"lineNumber":26,"author":{"gitId":"IncompetentDev"},"content":"     * Sets a boolean value for isDone","lastModifiedDate":"2022-02-07"},{"lineNumber":27,"author":{"gitId":"IncompetentDev"},"content":"     *","lastModifiedDate":"2022-02-07"},{"lineNumber":28,"author":{"gitId":"IncompetentDev"},"content":"     * @param isDone boolean value representing completion of Task","lastModifiedDate":"2022-02-07"},{"lineNumber":29,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-07"},{"lineNumber":30,"author":{"gitId":"IncompetentDev"},"content":"    public void setStatusIcon(boolean isDone) {","lastModifiedDate":"2022-02-07"},{"lineNumber":31,"author":{"gitId":"IncompetentDev"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2022-02-07"},{"lineNumber":32,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":33,"author":{"gitId":"IncompetentDev"},"content":"}","lastModifiedDate":"2022-01-30"}],"authorContributionMap":{"IncompetentDev":33}},{"path":"src/main/java/duke/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IncompetentDev"},"content":"package duke.tasks;","lastModifiedDate":"2022-02-11"},{"lineNumber":2,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":3,"author":{"gitId":"IncompetentDev"},"content":"public class Todo extends Task {","lastModifiedDate":"2022-02-07"},{"lineNumber":4,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":5,"author":{"gitId":"IncompetentDev"},"content":"    // toString format string","lastModifiedDate":"2022-02-07"},{"lineNumber":6,"author":{"gitId":"IncompetentDev"},"content":"    public static final String FORMAT_STRING \u003d \"[T][%c] %s\";","lastModifiedDate":"2022-02-07"},{"lineNumber":7,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":8,"author":{"gitId":"IncompetentDev"},"content":"    /**","lastModifiedDate":"2022-02-07"},{"lineNumber":9,"author":{"gitId":"IncompetentDev"},"content":"     * Create a Todo with isDone set to false and description of choice","lastModifiedDate":"2022-02-07"},{"lineNumber":10,"author":{"gitId":"IncompetentDev"},"content":"     *","lastModifiedDate":"2022-02-07"},{"lineNumber":11,"author":{"gitId":"IncompetentDev"},"content":"     * @param description Description of the Task to be created","lastModifiedDate":"2022-02-07"},{"lineNumber":12,"author":{"gitId":"IncompetentDev"},"content":"     */","lastModifiedDate":"2022-02-07"},{"lineNumber":13,"author":{"gitId":"IncompetentDev"},"content":"    public Todo(String description) {","lastModifiedDate":"2022-02-07"},{"lineNumber":14,"author":{"gitId":"IncompetentDev"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-02-11"},{"lineNumber":15,"author":{"gitId":"IncompetentDev"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-02-11"},{"lineNumber":16,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":17,"author":{"gitId":"IncompetentDev"},"content":"","lastModifiedDate":"2022-02-07"},{"lineNumber":18,"author":{"gitId":"IncompetentDev"},"content":"    @Override","lastModifiedDate":"2022-02-07"},{"lineNumber":19,"author":{"gitId":"IncompetentDev"},"content":"    public String toString() {","lastModifiedDate":"2022-02-07"},{"lineNumber":20,"author":{"gitId":"IncompetentDev"},"content":"        return String.format(FORMAT_STRING, this.getStatusIcon(), this.getDescription());","lastModifiedDate":"2022-02-07"},{"lineNumber":21,"author":{"gitId":"IncompetentDev"},"content":"    }","lastModifiedDate":"2022-02-07"},{"lineNumber":22,"author":{"gitId":"IncompetentDev"},"content":"}","lastModifiedDate":"2022-02-07"}],"authorContributionMap":{"IncompetentDev":22}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"IncompetentDev"},"content":"todo asdasd","lastModifiedDate":"2022-02-07"},{"lineNumber":2,"author":{"gitId":"IncompetentDev"},"content":"deadline asdasd /by test","lastModifiedDate":"2022-02-07"},{"lineNumber":3,"author":{"gitId":"IncompetentDev"},"content":"event asdasdasd /at test","lastModifiedDate":"2022-02-07"},{"lineNumber":4,"author":{"gitId":"IncompetentDev"},"content":"list","lastModifiedDate":"2022-02-07"},{"lineNumber":5,"author":{"gitId":"IncompetentDev"},"content":"mark 3","lastModifiedDate":"2022-02-10"},{"lineNumber":6,"author":{"gitId":"IncompetentDev"},"content":"list","lastModifiedDate":"2022-02-07"},{"lineNumber":7,"author":{"gitId":"IncompetentDev"},"content":"unmark 3","lastModifiedDate":"2022-02-10"},{"lineNumber":8,"author":{"gitId":"IncompetentDev"},"content":"list","lastModifiedDate":"2022-02-07"},{"lineNumber":9,"author":{"gitId":"IncompetentDev"},"content":"mark 3","lastModifiedDate":"2022-02-10"},{"lineNumber":10,"author":{"gitId":"IncompetentDev"},"content":"list","lastModifiedDate":"2022-02-07"},{"lineNumber":11,"author":{"gitId":"IncompetentDev"},"content":"mark 2","lastModifiedDate":"2022-02-10"},{"lineNumber":12,"author":{"gitId":"IncompetentDev"},"content":"list","lastModifiedDate":"2022-02-07"},{"lineNumber":13,"author":{"gitId":"IncompetentDev"},"content":"invalidcommand","lastModifiedDate":"2022-02-11"},{"lineNumber":14,"author":{"gitId":"IncompetentDev"},"content":"todo","lastModifiedDate":"2022-02-11"},{"lineNumber":15,"author":{"gitId":"IncompetentDev"},"content":"todo","lastModifiedDate":"2022-02-11"},{"lineNumber":16,"author":{"gitId":"IncompetentDev"},"content":"deadline asdasd","lastModifiedDate":"2022-02-11"},{"lineNumber":17,"author":{"gitId":"IncompetentDev"},"content":"deadline asdasd /at test","lastModifiedDate":"2022-02-11"},{"lineNumber":18,"author":{"gitId":"IncompetentDev"},"content":"deadline /by test","lastModifiedDate":"2022-02-11"},{"lineNumber":19,"author":{"gitId":"IncompetentDev"},"content":"event asdads","lastModifiedDate":"2022-02-11"},{"lineNumber":20,"author":{"gitId":"IncompetentDev"},"content":"event asdasd /by test","lastModifiedDate":"2022-02-11"},{"lineNumber":21,"author":{"gitId":"IncompetentDev"},"content":"event /at test","lastModifiedDate":"2022-02-11"},{"lineNumber":22,"author":{"gitId":"IncompetentDev"},"content":"bye","lastModifiedDate":"2022-02-07"}],"authorContributionMap":{"IncompetentDev":22}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"IncompetentDev"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java ..\\src\\main\\java\\duke\\exceptions\\*.java ..\\src\\main\\java\\duke\\tasks\\*.java","lastModifiedDate":"2022-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"IncompetentDev"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2022-02-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"IncompetentDev":2,"-":19}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"IncompetentDev"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/duke/*.java ../src/main/java/duke/exceptions/*.java ../src/main/java/duke/tasks/*.java","lastModifiedDate":"2022-02-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"IncompetentDev"},"content":"java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2022-02-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"IncompetentDev":2,"-":36}}]
