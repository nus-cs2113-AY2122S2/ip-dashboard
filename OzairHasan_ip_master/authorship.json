[{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2022-03-03"},{"lineNumber":2,"author":{"gitId":"OzairHasan"},"content":"This application is designed to help a user manage his or her tasks, optimized for use via a ","lastModifiedDate":"2022-03-03"},{"lineNumber":3,"author":{"gitId":"OzairHasan"},"content":"Command Line Interface (CLI). ","lastModifiedDate":"2022-03-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"OzairHasan"},"content":"Notes: ","lastModifiedDate":"2022-03-03"},{"lineNumber":6,"author":{"gitId":"OzairHasan"},"content":"- Words in UPPER_CASE are the parameters to be supplied by the user.","lastModifiedDate":"2022-03-03"},{"lineNumber":7,"author":{"gitId":"OzairHasan"},"content":"- Most of the example expected outcomes demonstrated for each feature follow the demonstrated outcomes before it.","lastModifiedDate":"2022-03-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":9,"author":{"gitId":"OzairHasan"},"content":"## Features","lastModifiedDate":"2022-03-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":11,"author":{"gitId":"OzairHasan"},"content":"### Adding a task: ","lastModifiedDate":"2022-03-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":13,"author":{"gitId":"OzairHasan"},"content":"Adds a task to the list of tasks. Tasks can be of 3 types.","lastModifiedDate":"2022-03-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":15,"author":{"gitId":"OzairHasan"},"content":"#### 1. Todo: `todo`","lastModifiedDate":"2022-03-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":17,"author":{"gitId":"OzairHasan"},"content":"Adds a \"Todo\" type task to the list of tasks. ","lastModifiedDate":"2022-03-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":19,"author":{"gitId":"OzairHasan"},"content":"Format: `todo DESCRIPTION`","lastModifiedDate":"2022-03-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":21,"author":{"gitId":"OzairHasan"},"content":"Examples of usage:","lastModifiedDate":"2022-03-03"},{"lineNumber":22,"author":{"gitId":"OzairHasan"},"content":"- `todo Homework`","lastModifiedDate":"2022-03-03"},{"lineNumber":23,"author":{"gitId":"OzairHasan"},"content":"- `todo Geography assignment`","lastModifiedDate":"2022-03-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":25,"author":{"gitId":"OzairHasan"},"content":"Example expected outcome of adding a todo:","lastModifiedDate":"2022-03-03"},{"lineNumber":26,"author":{"gitId":"OzairHasan"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":27,"author":{"gitId":"OzairHasan"},"content":"Noted. I\u0027ve added:","lastModifiedDate":"2022-03-03"},{"lineNumber":28,"author":{"gitId":"OzairHasan"},"content":"[T][ ] Homework","lastModifiedDate":"2022-03-03"},{"lineNumber":29,"author":{"gitId":"OzairHasan"},"content":"Now you have 1 tasks in the list.","lastModifiedDate":"2022-03-03"},{"lineNumber":30,"author":{"gitId":"OzairHasan"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":31,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":32,"author":{"gitId":"OzairHasan"},"content":"#### 2. Event: `event`","lastModifiedDate":"2022-03-03"},{"lineNumber":33,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":34,"author":{"gitId":"OzairHasan"},"content":"Adds an \"Event\" type task to the list of tasks. ","lastModifiedDate":"2022-03-03"},{"lineNumber":35,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":36,"author":{"gitId":"OzairHasan"},"content":"Format: `event DESCRIPTION /at TIME`","lastModifiedDate":"2022-03-03"},{"lineNumber":37,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":38,"author":{"gitId":"OzairHasan"},"content":"Examples of usage:","lastModifiedDate":"2022-03-03"},{"lineNumber":39,"author":{"gitId":"OzairHasan"},"content":"- `event meeting with boss /at 3pm Monday`","lastModifiedDate":"2022-03-03"},{"lineNumber":40,"author":{"gitId":"OzairHasan"},"content":"- `event lunch with Richard Hendricks /at 2pm to 3pm 21st December `","lastModifiedDate":"2022-03-03"},{"lineNumber":41,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":42,"author":{"gitId":"OzairHasan"},"content":"Example expected outcome of adding an event:","lastModifiedDate":"2022-03-03"},{"lineNumber":43,"author":{"gitId":"OzairHasan"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":44,"author":{"gitId":"OzairHasan"},"content":"Noted. I\u0027ve added:","lastModifiedDate":"2022-03-03"},{"lineNumber":45,"author":{"gitId":"OzairHasan"},"content":"[E][ ] meeting with boss (at: 3pm Monday)","lastModifiedDate":"2022-03-03"},{"lineNumber":46,"author":{"gitId":"OzairHasan"},"content":"Now you have 2 tasks in the list.","lastModifiedDate":"2022-03-03"},{"lineNumber":47,"author":{"gitId":"OzairHasan"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":48,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":49,"author":{"gitId":"OzairHasan"},"content":"#### 3. Deadline: `deadline`","lastModifiedDate":"2022-03-03"},{"lineNumber":50,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":51,"author":{"gitId":"OzairHasan"},"content":"Adds a \"Deadline\" type task to the list of tasks.","lastModifiedDate":"2022-03-03"},{"lineNumber":52,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":53,"author":{"gitId":"OzairHasan"},"content":"Format: `deadline DESCRIPTION /at DUE_DATE_OR_TIME`","lastModifiedDate":"2022-03-03"},{"lineNumber":54,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":55,"author":{"gitId":"OzairHasan"},"content":"Examples of usage:","lastModifiedDate":"2022-03-03"},{"lineNumber":56,"author":{"gitId":"OzairHasan"},"content":"- `deadline finish homework /by tomorrow`","lastModifiedDate":"2022-03-03"},{"lineNumber":57,"author":{"gitId":"OzairHasan"},"content":"- `deadline take the dog out for a walk /by 12am Midnight`","lastModifiedDate":"2022-03-03"},{"lineNumber":58,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":59,"author":{"gitId":"OzairHasan"},"content":"Example expected outcome of adding a deadline:","lastModifiedDate":"2022-03-03"},{"lineNumber":60,"author":{"gitId":"OzairHasan"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":61,"author":{"gitId":"OzairHasan"},"content":"Noted. I\u0027ve added:","lastModifiedDate":"2022-03-03"},{"lineNumber":62,"author":{"gitId":"OzairHasan"},"content":"[D][ ] take the dog out for a walk (by: 12am Midnight)","lastModifiedDate":"2022-03-03"},{"lineNumber":63,"author":{"gitId":"OzairHasan"},"content":"Now you have 3 tasks in the list.","lastModifiedDate":"2022-03-03"},{"lineNumber":64,"author":{"gitId":"OzairHasan"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":65,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":66,"author":{"gitId":"OzairHasan"},"content":"### Viewing tasks currently in list: `list`","lastModifiedDate":"2022-03-03"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":68,"author":{"gitId":"OzairHasan"},"content":"Allows user to view the tasks that are currently in the list. ","lastModifiedDate":"2022-03-03"},{"lineNumber":69,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":70,"author":{"gitId":"OzairHasan"},"content":"Format: `list`","lastModifiedDate":"2022-03-03"},{"lineNumber":71,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":72,"author":{"gitId":"OzairHasan"},"content":"Example of usage:","lastModifiedDate":"2022-03-03"},{"lineNumber":73,"author":{"gitId":"OzairHasan"},"content":"- `list`","lastModifiedDate":"2022-03-03"},{"lineNumber":74,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":75,"author":{"gitId":"OzairHasan"},"content":"Example expected outcome:","lastModifiedDate":"2022-03-03"},{"lineNumber":76,"author":{"gitId":"OzairHasan"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":77,"author":{"gitId":"OzairHasan"},"content":"Here are the tasks in your list:","lastModifiedDate":"2022-03-03"},{"lineNumber":78,"author":{"gitId":"OzairHasan"},"content":"1. [T][ ] Homework","lastModifiedDate":"2022-03-03"},{"lineNumber":79,"author":{"gitId":"OzairHasan"},"content":"2. [E][ ] meeting with boss (at: 3pm Monday)","lastModifiedDate":"2022-03-03"},{"lineNumber":80,"author":{"gitId":"OzairHasan"},"content":"3. [D][ ] take the dog out for a walk (by: 12am Midnight)","lastModifiedDate":"2022-03-03"},{"lineNumber":81,"author":{"gitId":"OzairHasan"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":82,"author":{"gitId":"OzairHasan"},"content":"`T`, `E` and `D` signify a \"Todo\" task, an \"Event\" task and a \"Deadline\" task respectively.","lastModifiedDate":"2022-03-03"},{"lineNumber":83,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":84,"author":{"gitId":"OzairHasan"},"content":"### Marking tasks currently in list as done: `mark`","lastModifiedDate":"2022-03-03"},{"lineNumber":85,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":86,"author":{"gitId":"OzairHasan"},"content":"Allows user to mark tasks that are currently in the list as completed.","lastModifiedDate":"2022-03-03"},{"lineNumber":87,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":88,"author":{"gitId":"OzairHasan"},"content":"Format: `mark TASK_NUMBER`","lastModifiedDate":"2022-03-03"},{"lineNumber":89,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":90,"author":{"gitId":"OzairHasan"},"content":"Example of usage:","lastModifiedDate":"2022-03-03"},{"lineNumber":91,"author":{"gitId":"OzairHasan"},"content":"- `mark 3`","lastModifiedDate":"2022-03-03"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":93,"author":{"gitId":"-"},"content":"Expected outcome:","lastModifiedDate":"2022-03-03"},{"lineNumber":94,"author":{"gitId":"OzairHasan"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":95,"author":{"gitId":"OzairHasan"},"content":"Great Job! I\u0027ve marked the following task as done:","lastModifiedDate":"2022-03-03"},{"lineNumber":96,"author":{"gitId":"OzairHasan"},"content":"[D][X] take the dog out for a walk (by: 12am Midnight)","lastModifiedDate":"2022-03-03"},{"lineNumber":97,"author":{"gitId":"OzairHasan"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":98,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":99,"author":{"gitId":"OzairHasan"},"content":"Expected outcome when `list` is used after marking a task as done:","lastModifiedDate":"2022-03-03"},{"lineNumber":100,"author":{"gitId":"OzairHasan"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":101,"author":{"gitId":"OzairHasan"},"content":"Here are the tasks in your list:","lastModifiedDate":"2022-03-03"},{"lineNumber":102,"author":{"gitId":"OzairHasan"},"content":"1. [T][ ] Homework","lastModifiedDate":"2022-03-03"},{"lineNumber":103,"author":{"gitId":"OzairHasan"},"content":"2. [E][ ] meeting with boss (at: 3pm Monday)","lastModifiedDate":"2022-03-03"},{"lineNumber":104,"author":{"gitId":"OzairHasan"},"content":"3. [D][X] take the dog out for a walk (by: 12am Midnight)","lastModifiedDate":"2022-03-03"},{"lineNumber":105,"author":{"gitId":"OzairHasan"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":106,"author":{"gitId":"OzairHasan"},"content":"We can see here that task 3 is marked with an `X` indicated it is completed.","lastModifiedDate":"2022-03-03"},{"lineNumber":107,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":108,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":109,"author":{"gitId":"OzairHasan"},"content":"### Marking tasks currently in list as not yet done: `unmark`","lastModifiedDate":"2022-03-03"},{"lineNumber":110,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":111,"author":{"gitId":"OzairHasan"},"content":"Allows user to mark tasks that are currently in the list as completed.","lastModifiedDate":"2022-03-03"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":113,"author":{"gitId":"OzairHasan"},"content":"Format: `unmark TASK_NUMBER`","lastModifiedDate":"2022-03-03"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":115,"author":{"gitId":"OzairHasan"},"content":"Example of usage:","lastModifiedDate":"2022-03-03"},{"lineNumber":116,"author":{"gitId":"OzairHasan"},"content":"- `mark 3`","lastModifiedDate":"2022-03-03"},{"lineNumber":117,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":118,"author":{"gitId":"OzairHasan"},"content":"Expected outcome:","lastModifiedDate":"2022-03-03"},{"lineNumber":119,"author":{"gitId":"OzairHasan"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":120,"author":{"gitId":"OzairHasan"},"content":"Ok, I\u0027ve marked the following task as yet to be done:","lastModifiedDate":"2022-03-03"},{"lineNumber":121,"author":{"gitId":"OzairHasan"},"content":"[D][ ] take the dog out for a walk (by: 12am Midnight)","lastModifiedDate":"2022-03-03"},{"lineNumber":122,"author":{"gitId":"OzairHasan"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":123,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":124,"author":{"gitId":"OzairHasan"},"content":"Expected outcome when `list` is used after marking a task as not yet done:","lastModifiedDate":"2022-03-03"},{"lineNumber":125,"author":{"gitId":"OzairHasan"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":126,"author":{"gitId":"OzairHasan"},"content":"Here are the tasks in your list:","lastModifiedDate":"2022-03-03"},{"lineNumber":127,"author":{"gitId":"OzairHasan"},"content":"1. [T][ ] Homework","lastModifiedDate":"2022-03-03"},{"lineNumber":128,"author":{"gitId":"OzairHasan"},"content":"2. [E][ ] meeting with boss (at: 3pm Monday)","lastModifiedDate":"2022-03-03"},{"lineNumber":129,"author":{"gitId":"OzairHasan"},"content":"3. [D][ ] take the dog out for a walk (by: 12am Midnight)","lastModifiedDate":"2022-03-03"},{"lineNumber":130,"author":{"gitId":"OzairHasan"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":131,"author":{"gitId":"OzairHasan"},"content":"Task 3 that used to be marked with an `X` is no longer marked as done. ","lastModifiedDate":"2022-03-03"},{"lineNumber":132,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":133,"author":{"gitId":"OzairHasan"},"content":"### Finding tasks currently in list: `find`","lastModifiedDate":"2022-03-03"},{"lineNumber":134,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":135,"author":{"gitId":"OzairHasan"},"content":"Allows user to find tasks are currently in the list that match with keyword provided.","lastModifiedDate":"2022-03-03"},{"lineNumber":136,"author":{"gitId":"OzairHasan"},"content":"If there are multiple tasks with the user-provided keyword in their description, all such tasks be displayed. ","lastModifiedDate":"2022-03-03"},{"lineNumber":137,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":138,"author":{"gitId":"OzairHasan"},"content":"Format: `find KEYWORD`","lastModifiedDate":"2022-03-03"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":140,"author":{"gitId":"-"},"content":"Example of usage:","lastModifiedDate":"2019-07-29"},{"lineNumber":141,"author":{"gitId":"OzairHasan"},"content":"- `find meeting`","lastModifiedDate":"2022-03-03"},{"lineNumber":142,"author":{"gitId":"OzairHasan"},"content":"- `find take`","lastModifiedDate":"2022-03-03"},{"lineNumber":143,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":144,"author":{"gitId":"OzairHasan"},"content":"Example expected outcome:","lastModifiedDate":"2022-03-03"},{"lineNumber":145,"author":{"gitId":"OzairHasan"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":146,"author":{"gitId":"OzairHasan"},"content":"Here are the matching tasks in your list:","lastModifiedDate":"2022-03-03"},{"lineNumber":147,"author":{"gitId":"OzairHasan"},"content":"2. [E][ ] meeting with boss (at: 3pm Monday)","lastModifiedDate":"2022-03-03"},{"lineNumber":148,"author":{"gitId":"OzairHasan"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":149,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":150,"author":{"gitId":"OzairHasan"},"content":"### Deleting tasks currently in list: `delete`","lastModifiedDate":"2022-03-03"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":152,"author":{"gitId":"OzairHasan"},"content":"Allows user to delete tasks that are currently in the list.","lastModifiedDate":"2022-03-03"},{"lineNumber":153,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":154,"author":{"gitId":"OzairHasan"},"content":"Format: `delete TASK_NUMBER`","lastModifiedDate":"2022-03-03"},{"lineNumber":155,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":156,"author":{"gitId":"OzairHasan"},"content":"Example of usage:","lastModifiedDate":"2022-03-03"},{"lineNumber":157,"author":{"gitId":"OzairHasan"},"content":"- `delete 3`","lastModifiedDate":"2022-03-03"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":159,"author":{"gitId":"-"},"content":"Expected outcome:","lastModifiedDate":"2019-07-29"},{"lineNumber":160,"author":{"gitId":"OzairHasan"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":161,"author":{"gitId":"OzairHasan"},"content":"Noted. I\u0027ve removed:","lastModifiedDate":"2022-03-03"},{"lineNumber":162,"author":{"gitId":"OzairHasan"},"content":"[D][ ] take the dog out for a walk (by: 12am Midnight)","lastModifiedDate":"2022-03-03"},{"lineNumber":163,"author":{"gitId":"OzairHasan"},"content":"Now you have 2 tasks in the list.","lastModifiedDate":"2022-03-03"},{"lineNumber":164,"author":{"gitId":"OzairHasan"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":165,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":166,"author":{"gitId":"OzairHasan"},"content":"Expected outcome when `list` is used after deleting a task:","lastModifiedDate":"2022-03-03"},{"lineNumber":167,"author":{"gitId":"OzairHasan"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":168,"author":{"gitId":"OzairHasan"},"content":"Here are the tasks in your list:","lastModifiedDate":"2022-03-03"},{"lineNumber":169,"author":{"gitId":"OzairHasan"},"content":"1. [T][ ] Homework","lastModifiedDate":"2022-03-03"},{"lineNumber":170,"author":{"gitId":"OzairHasan"},"content":"2. [E][ ] meeting with boss (at: 3pm Monday)","lastModifiedDate":"2022-03-03"},{"lineNumber":171,"author":{"gitId":"OzairHasan"},"content":"```","lastModifiedDate":"2022-03-03"},{"lineNumber":172,"author":{"gitId":"OzairHasan"},"content":"Task 3 that used to be present in the list is no longer there as it has been deleted.","lastModifiedDate":"2022-03-03"},{"lineNumber":173,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":174,"author":{"gitId":"OzairHasan"},"content":"### Saving and loading the data:","lastModifiedDate":"2022-03-03"},{"lineNumber":175,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":176,"author":{"gitId":"OzairHasan"},"content":"Data in the list is saved automatically every time it is updated and loaded automatically when the program is launched.","lastModifiedDate":"2022-03-03"},{"lineNumber":177,"author":{"gitId":"OzairHasan"},"content":"There is no need to do anything manually. ","lastModifiedDate":"2022-03-03"},{"lineNumber":178,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":179,"author":{"gitId":"OzairHasan"},"content":"### Terminating the program: `bye`","lastModifiedDate":"2022-03-03"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":181,"author":{"gitId":"OzairHasan"},"content":"Allows user to properly terminate the program. ","lastModifiedDate":"2022-03-03"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":183,"author":{"gitId":"OzairHasan"},"content":"Format: `bye`","lastModifiedDate":"2022-03-03"},{"lineNumber":184,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":185,"author":{"gitId":"OzairHasan"},"content":"Example of usage:","lastModifiedDate":"2022-03-03"},{"lineNumber":186,"author":{"gitId":"OzairHasan"},"content":"- `bye`","lastModifiedDate":"2022-03-03"},{"lineNumber":187,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-03-03"},{"lineNumber":188,"author":{"gitId":"OzairHasan"},"content":"Expected outcome:","lastModifiedDate":"2022-03-03"},{"lineNumber":189,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":190,"author":{"gitId":"OzairHasan"},"content":"Goodbye. See you in the funny papers.","lastModifiedDate":"2022-03-03"},{"lineNumber":191,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"}],"authorContributionMap":{"-":24,"OzairHasan":167}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"OzairHasan"},"content":"package duke;","lastModifiedDate":"2022-02-09"},{"lineNumber":2,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":3,"author":{"gitId":"OzairHasan"},"content":"import duke.task.*;","lastModifiedDate":"2022-02-17"},{"lineNumber":4,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":6,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":7,"author":{"gitId":"OzairHasan"},"content":"    public static final int MINIMUM_LENGTH_OF_TODO_STATEMENT \u003d 4;","lastModifiedDate":"2022-02-17"},{"lineNumber":8,"author":{"gitId":"OzairHasan"},"content":"    public static final int MINIMUM_LENGTH_OF_DEADLINE_STATEMENT \u003d 8;","lastModifiedDate":"2022-02-17"},{"lineNumber":9,"author":{"gitId":"OzairHasan"},"content":"    public static final int MINIMUM_LENGTH_OF_EVENT_STATEMENT \u003d 5;","lastModifiedDate":"2022-02-17"},{"lineNumber":10,"author":{"gitId":"OzairHasan"},"content":"    public static final int MINIMUM_LENGTH_OF_MARK_STATEMENT \u003d 4;","lastModifiedDate":"2022-02-17"},{"lineNumber":11,"author":{"gitId":"OzairHasan"},"content":"    public static final int MINIMUM_LENGTH_OF_FIND_STATEMENT \u003d 4;","lastModifiedDate":"2022-02-28"},{"lineNumber":12,"author":{"gitId":"OzairHasan"},"content":"    public static final int MINIMUM_LENGTH_OF_UNMARK_STATEMENT \u003d 6;","lastModifiedDate":"2022-02-17"},{"lineNumber":13,"author":{"gitId":"OzairHasan"},"content":"    public static final int MINIMUM_LENGTH_OF_DELETE_STATEMENT \u003d 6;","lastModifiedDate":"2022-02-17"},{"lineNumber":14,"author":{"gitId":"OzairHasan"},"content":"    public static final String DATAFILE_RELATIVE_PATH \u003d \"data\\\\duke.txt\";","lastModifiedDate":"2022-02-17"},{"lineNumber":15,"author":{"gitId":"OzairHasan"},"content":"    public static final String PROJECT_PATH \u003d System.getProperty(\"user.dir\");","lastModifiedDate":"2022-02-17"},{"lineNumber":16,"author":{"gitId":"OzairHasan"},"content":"    public static final int INVALID_TASKNUMBER \u003d -1;","lastModifiedDate":"2022-02-17"},{"lineNumber":17,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":18,"author":{"gitId":"OzairHasan"},"content":"    static TaskList taskList \u003d new TaskList();","lastModifiedDate":"2022-02-28"},{"lineNumber":19,"author":{"gitId":"OzairHasan"},"content":"    static boolean isModified \u003d false;      // isModified refers to whether taskList is modified or not.","lastModifiedDate":"2022-02-17"},{"lineNumber":20,"author":{"gitId":"OzairHasan"},"content":"    static Ui ui \u003d new Ui();","lastModifiedDate":"2022-02-28"},{"lineNumber":21,"author":{"gitId":"OzairHasan"},"content":"    static Storage storage \u003d new Storage();","lastModifiedDate":"2022-02-28"},{"lineNumber":22,"author":{"gitId":"OzairHasan"},"content":"    static Parser parser \u003d new Parser();","lastModifiedDate":"2022-02-28"},{"lineNumber":23,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":24,"author":{"gitId":"OzairHasan"},"content":"    /**","lastModifiedDate":"2022-03-01"},{"lineNumber":25,"author":{"gitId":"OzairHasan"},"content":"     * This method adds a new \u003ccode\u003eTodo\u003c/code\u003e to \u003ccode\u003etaskList\u003c/code\u003e.","lastModifiedDate":"2022-03-01"},{"lineNumber":26,"author":{"gitId":"OzairHasan"},"content":"     *","lastModifiedDate":"2022-03-01"},{"lineNumber":27,"author":{"gitId":"OzairHasan"},"content":"     * @param todoDescription Description of event.","lastModifiedDate":"2022-03-01"},{"lineNumber":28,"author":{"gitId":"OzairHasan"},"content":"     * @return Nothing.","lastModifiedDate":"2022-03-01"},{"lineNumber":29,"author":{"gitId":"OzairHasan"},"content":"     */","lastModifiedDate":"2022-03-01"},{"lineNumber":30,"author":{"gitId":"OzairHasan"},"content":"    public static void addTodoToList(String todoDescription) {","lastModifiedDate":"2022-02-01"},{"lineNumber":31,"author":{"gitId":"OzairHasan"},"content":"        Todo newTodo \u003d new Todo(todoDescription);","lastModifiedDate":"2022-02-01"},{"lineNumber":32,"author":{"gitId":"OzairHasan"},"content":"        //add the new object to taskList.","lastModifiedDate":"2022-02-01"},{"lineNumber":33,"author":{"gitId":"OzairHasan"},"content":"        taskList.add(newTodo);","lastModifiedDate":"2022-02-28"},{"lineNumber":34,"author":{"gitId":"OzairHasan"},"content":"        ui.printAddedTask(taskList);","lastModifiedDate":"2022-02-28"},{"lineNumber":35,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":36,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":37,"author":{"gitId":"OzairHasan"},"content":"    /**","lastModifiedDate":"2022-03-01"},{"lineNumber":38,"author":{"gitId":"OzairHasan"},"content":"     * This method overloads \u003ccode\u003eaddTodoToList(String todoDescription)\u003c/code\u003e","lastModifiedDate":"2022-03-01"},{"lineNumber":39,"author":{"gitId":"OzairHasan"},"content":"     * and has essentially the same functionality. This method is called when data is being loaded.","lastModifiedDate":"2022-03-01"},{"lineNumber":40,"author":{"gitId":"OzairHasan"},"content":"     *","lastModifiedDate":"2022-03-01"},{"lineNumber":41,"author":{"gitId":"OzairHasan"},"content":"     * @param todoDescription Description of todo.","lastModifiedDate":"2022-03-01"},{"lineNumber":42,"author":{"gitId":"OzairHasan"},"content":"     * @param isUserMode Unused.","lastModifiedDate":"2022-03-01"},{"lineNumber":43,"author":{"gitId":"OzairHasan"},"content":"     * @return Nothing.","lastModifiedDate":"2022-03-01"},{"lineNumber":44,"author":{"gitId":"OzairHasan"},"content":"     */","lastModifiedDate":"2022-03-01"},{"lineNumber":45,"author":{"gitId":"OzairHasan"},"content":"    public static void addTodoToList(String todoDescription, boolean isUserMode) {","lastModifiedDate":"2022-02-17"},{"lineNumber":46,"author":{"gitId":"OzairHasan"},"content":"        Todo newTodo \u003d new Todo(todoDescription);","lastModifiedDate":"2022-02-17"},{"lineNumber":47,"author":{"gitId":"OzairHasan"},"content":"        //add the new object to taskList.","lastModifiedDate":"2022-02-17"},{"lineNumber":48,"author":{"gitId":"OzairHasan"},"content":"        taskList.add(newTodo);","lastModifiedDate":"2022-02-28"},{"lineNumber":49,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":50,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":51,"author":{"gitId":"OzairHasan"},"content":"    /**","lastModifiedDate":"2022-03-01"},{"lineNumber":52,"author":{"gitId":"OzairHasan"},"content":"     * This method adds a new \u003ccode\u003eEvent\u003c/code\u003e to \u003ccode\u003etaskList\u003c/code\u003e.","lastModifiedDate":"2022-03-01"},{"lineNumber":53,"author":{"gitId":"OzairHasan"},"content":"     *","lastModifiedDate":"2022-03-01"},{"lineNumber":54,"author":{"gitId":"OzairHasan"},"content":"     * @param eventDescription Description of event.","lastModifiedDate":"2022-03-01"},{"lineNumber":55,"author":{"gitId":"OzairHasan"},"content":"     * @param eventTime Event time associated to event.","lastModifiedDate":"2022-03-01"},{"lineNumber":56,"author":{"gitId":"OzairHasan"},"content":"     * @return Nothing.","lastModifiedDate":"2022-03-01"},{"lineNumber":57,"author":{"gitId":"OzairHasan"},"content":"     */","lastModifiedDate":"2022-03-01"},{"lineNumber":58,"author":{"gitId":"OzairHasan"},"content":"    public static void addEventToList(String eventDescription, String eventTime) {","lastModifiedDate":"2022-02-01"},{"lineNumber":59,"author":{"gitId":"OzairHasan"},"content":"        Event newEvent \u003d new Event(eventDescription, eventTime);","lastModifiedDate":"2022-02-01"},{"lineNumber":60,"author":{"gitId":"OzairHasan"},"content":"        // add the new object to taskList.","lastModifiedDate":"2022-02-01"},{"lineNumber":61,"author":{"gitId":"OzairHasan"},"content":"        taskList.add(newEvent);","lastModifiedDate":"2022-02-28"},{"lineNumber":62,"author":{"gitId":"OzairHasan"},"content":"        ui.printAddedTask(taskList);","lastModifiedDate":"2022-02-28"},{"lineNumber":63,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":64,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":65,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":66,"author":{"gitId":"OzairHasan"},"content":"    /**","lastModifiedDate":"2022-03-01"},{"lineNumber":67,"author":{"gitId":"OzairHasan"},"content":"     * This method overloads \u003ccode\u003eaddEventToList(String eventDescription, String eventTime)\u003c/code\u003e","lastModifiedDate":"2022-03-01"},{"lineNumber":68,"author":{"gitId":"OzairHasan"},"content":"     * and has essentially the same functionality. This method is called when data is being loaded.","lastModifiedDate":"2022-03-01"},{"lineNumber":69,"author":{"gitId":"OzairHasan"},"content":"     *","lastModifiedDate":"2022-03-01"},{"lineNumber":70,"author":{"gitId":"OzairHasan"},"content":"     * @param eventDescription Description of event.","lastModifiedDate":"2022-03-01"},{"lineNumber":71,"author":{"gitId":"OzairHasan"},"content":"     * @param eventTime Event time associated to event.","lastModifiedDate":"2022-03-01"},{"lineNumber":72,"author":{"gitId":"OzairHasan"},"content":"     * @param isUserMode Unused.","lastModifiedDate":"2022-03-01"},{"lineNumber":73,"author":{"gitId":"OzairHasan"},"content":"     * @return Nothing.","lastModifiedDate":"2022-03-01"},{"lineNumber":74,"author":{"gitId":"OzairHasan"},"content":"     */","lastModifiedDate":"2022-03-01"},{"lineNumber":75,"author":{"gitId":"OzairHasan"},"content":"    public static void addEventToList(String eventDescription, String eventTime, boolean isUserMode) {","lastModifiedDate":"2022-02-17"},{"lineNumber":76,"author":{"gitId":"OzairHasan"},"content":"        Event newEvent \u003d new Event(eventDescription, eventTime);","lastModifiedDate":"2022-02-17"},{"lineNumber":77,"author":{"gitId":"OzairHasan"},"content":"        // add the new object to taskList.","lastModifiedDate":"2022-02-17"},{"lineNumber":78,"author":{"gitId":"OzairHasan"},"content":"        taskList.add(newEvent);","lastModifiedDate":"2022-02-28"},{"lineNumber":79,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":80,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":81,"author":{"gitId":"OzairHasan"},"content":"    /**","lastModifiedDate":"2022-03-01"},{"lineNumber":82,"author":{"gitId":"OzairHasan"},"content":"     * This method adds a new \u003ccode\u003eDeadline\u003c/code\u003e to \u003ccode\u003etaskList\u003c/code\u003e.","lastModifiedDate":"2022-03-01"},{"lineNumber":83,"author":{"gitId":"OzairHasan"},"content":"     *","lastModifiedDate":"2022-03-01"},{"lineNumber":84,"author":{"gitId":"OzairHasan"},"content":"     * @param deadlineDescription Description of deadline.","lastModifiedDate":"2022-03-01"},{"lineNumber":85,"author":{"gitId":"OzairHasan"},"content":"     * @param dueDate Due date associated to deadline.","lastModifiedDate":"2022-03-01"},{"lineNumber":86,"author":{"gitId":"OzairHasan"},"content":"     * @return Nothing.","lastModifiedDate":"2022-03-01"},{"lineNumber":87,"author":{"gitId":"OzairHasan"},"content":"     */","lastModifiedDate":"2022-03-01"},{"lineNumber":88,"author":{"gitId":"OzairHasan"},"content":"    public static void addDeadlineToList(String deadlineDescription, String dueDate) {","lastModifiedDate":"2022-02-01"},{"lineNumber":89,"author":{"gitId":"OzairHasan"},"content":"        Deadline newDeadline \u003d new Deadline(deadlineDescription, dueDate);","lastModifiedDate":"2022-02-01"},{"lineNumber":90,"author":{"gitId":"OzairHasan"},"content":"        // add the new object to taskList.","lastModifiedDate":"2022-02-01"},{"lineNumber":91,"author":{"gitId":"OzairHasan"},"content":"        taskList.add(newDeadline);","lastModifiedDate":"2022-02-28"},{"lineNumber":92,"author":{"gitId":"OzairHasan"},"content":"        ui.printAddedTask(taskList);","lastModifiedDate":"2022-02-28"},{"lineNumber":93,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":94,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":95,"author":{"gitId":"OzairHasan"},"content":"    /**","lastModifiedDate":"2022-03-01"},{"lineNumber":96,"author":{"gitId":"OzairHasan"},"content":"     * This method overloads \u003ccode\u003eaddDeadlineToList(String deadlineDescription, String dueDate)\u003c/code\u003e","lastModifiedDate":"2022-03-01"},{"lineNumber":97,"author":{"gitId":"OzairHasan"},"content":"     * and has essentially the same functionality. This method is called when data is being loaded.","lastModifiedDate":"2022-03-01"},{"lineNumber":98,"author":{"gitId":"OzairHasan"},"content":"     *","lastModifiedDate":"2022-03-01"},{"lineNumber":99,"author":{"gitId":"OzairHasan"},"content":"     * @param deadlineDescription Description of deadline.","lastModifiedDate":"2022-03-01"},{"lineNumber":100,"author":{"gitId":"OzairHasan"},"content":"     * @param dueDate Due date associated to deadline.","lastModifiedDate":"2022-03-01"},{"lineNumber":101,"author":{"gitId":"OzairHasan"},"content":"     * @param isUserMode Unused.","lastModifiedDate":"2022-03-01"},{"lineNumber":102,"author":{"gitId":"OzairHasan"},"content":"     * @return Nothing.","lastModifiedDate":"2022-03-01"},{"lineNumber":103,"author":{"gitId":"OzairHasan"},"content":"     */","lastModifiedDate":"2022-03-01"},{"lineNumber":104,"author":{"gitId":"OzairHasan"},"content":"    public static void addDeadlineToList(String deadlineDescription, String dueDate, boolean isUserMode) {","lastModifiedDate":"2022-02-17"},{"lineNumber":105,"author":{"gitId":"OzairHasan"},"content":"        Deadline newDeadline \u003d new Deadline(deadlineDescription, dueDate);","lastModifiedDate":"2022-02-17"},{"lineNumber":106,"author":{"gitId":"OzairHasan"},"content":"        // add the new object to taskList.","lastModifiedDate":"2022-02-17"},{"lineNumber":107,"author":{"gitId":"OzairHasan"},"content":"        taskList.add(newDeadline);","lastModifiedDate":"2022-02-28"},{"lineNumber":108,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-09"},{"lineNumber":109,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":110,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":111,"author":{"gitId":"OzairHasan"},"content":"    /**","lastModifiedDate":"2022-03-01"},{"lineNumber":112,"author":{"gitId":"OzairHasan"},"content":"     * This method adds \u003ccode\u003eTask\u003c/code\u003e to \u003ccode\u003etaskList\u003c/code\u003e.","lastModifiedDate":"2022-03-01"},{"lineNumber":113,"author":{"gitId":"OzairHasan"},"content":"     *","lastModifiedDate":"2022-03-01"},{"lineNumber":114,"author":{"gitId":"OzairHasan"},"content":"     * @param userInput String containing user input with add command.","lastModifiedDate":"2022-03-01"},{"lineNumber":115,"author":{"gitId":"OzairHasan"},"content":"     * @return Nothing.","lastModifiedDate":"2022-03-01"},{"lineNumber":116,"author":{"gitId":"OzairHasan"},"content":"     */","lastModifiedDate":"2022-03-01"},{"lineNumber":117,"author":{"gitId":"OzairHasan"},"content":"    public static void addTaskToList(String userInput) {","lastModifiedDate":"2022-02-01"},{"lineNumber":118,"author":{"gitId":"OzairHasan"},"content":"        if (parser.isTodo(userInput)) {","lastModifiedDate":"2022-02-28"},{"lineNumber":119,"author":{"gitId":"OzairHasan"},"content":"            if (parser.isInvalidTodo(userInput)) {","lastModifiedDate":"2022-02-28"},{"lineNumber":120,"author":{"gitId":"OzairHasan"},"content":"                ui.printInvalidTodo();","lastModifiedDate":"2022-02-28"},{"lineNumber":121,"author":{"gitId":"OzairHasan"},"content":"                return;","lastModifiedDate":"2022-02-09"},{"lineNumber":122,"author":{"gitId":"OzairHasan"},"content":"            }","lastModifiedDate":"2022-02-09"},{"lineNumber":123,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":124,"author":{"gitId":"OzairHasan"},"content":"            String todoDescription \u003d parser.getTodoDescription(userInput);","lastModifiedDate":"2022-02-28"},{"lineNumber":125,"author":{"gitId":"OzairHasan"},"content":"            addTodoToList(todoDescription);","lastModifiedDate":"2022-02-01"},{"lineNumber":126,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":127,"author":{"gitId":"OzairHasan"},"content":"        } else if (parser.isEvent(userInput)) {","lastModifiedDate":"2022-02-28"},{"lineNumber":128,"author":{"gitId":"OzairHasan"},"content":"            if (parser.isInvalidEvent(userInput)) {","lastModifiedDate":"2022-02-28"},{"lineNumber":129,"author":{"gitId":"OzairHasan"},"content":"                ui.printInvalidEvent();","lastModifiedDate":"2022-02-28"},{"lineNumber":130,"author":{"gitId":"OzairHasan"},"content":"                return;","lastModifiedDate":"2022-02-09"},{"lineNumber":131,"author":{"gitId":"OzairHasan"},"content":"            }","lastModifiedDate":"2022-02-09"},{"lineNumber":132,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":133,"author":{"gitId":"OzairHasan"},"content":"            StringPair pair \u003d parser.getEventDescriptionAndTime(userInput);","lastModifiedDate":"2022-02-28"},{"lineNumber":134,"author":{"gitId":"OzairHasan"},"content":"            String eventDescription \u003d pair.getFirst();","lastModifiedDate":"2022-02-28"},{"lineNumber":135,"author":{"gitId":"OzairHasan"},"content":"            String eventTime \u003d pair.getSecond();","lastModifiedDate":"2022-02-28"},{"lineNumber":136,"author":{"gitId":"OzairHasan"},"content":"            addEventToList(eventDescription, eventTime);","lastModifiedDate":"2022-02-01"},{"lineNumber":137,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":138,"author":{"gitId":"OzairHasan"},"content":"        } else if (parser.isDeadline(userInput)) {","lastModifiedDate":"2022-02-28"},{"lineNumber":139,"author":{"gitId":"OzairHasan"},"content":"            if (parser.isInvalidDeadline(userInput)) {","lastModifiedDate":"2022-02-28"},{"lineNumber":140,"author":{"gitId":"OzairHasan"},"content":"                ui.printInvalidDeadline();","lastModifiedDate":"2022-02-28"},{"lineNumber":141,"author":{"gitId":"OzairHasan"},"content":"                return;","lastModifiedDate":"2022-02-09"},{"lineNumber":142,"author":{"gitId":"OzairHasan"},"content":"            }","lastModifiedDate":"2022-02-09"},{"lineNumber":143,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":144,"author":{"gitId":"OzairHasan"},"content":"            StringPair pair \u003d parser.getDeadlineDescriptionAndTime(userInput);","lastModifiedDate":"2022-02-28"},{"lineNumber":145,"author":{"gitId":"OzairHasan"},"content":"            String deadlineDescription \u003d pair.getFirst();","lastModifiedDate":"2022-02-28"},{"lineNumber":146,"author":{"gitId":"OzairHasan"},"content":"            String dueDate \u003d pair.getSecond();","lastModifiedDate":"2022-02-28"},{"lineNumber":147,"author":{"gitId":"OzairHasan"},"content":"            addDeadlineToList(deadlineDescription, dueDate);","lastModifiedDate":"2022-02-01"},{"lineNumber":148,"author":{"gitId":"OzairHasan"},"content":"        }","lastModifiedDate":"2022-02-01"},{"lineNumber":149,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":150,"author":{"gitId":"OzairHasan"},"content":"        // If not a recognizable command, inform user","lastModifiedDate":"2022-02-09"},{"lineNumber":151,"author":{"gitId":"OzairHasan"},"content":"        else {","lastModifiedDate":"2022-02-09"},{"lineNumber":152,"author":{"gitId":"OzairHasan"},"content":"            ui.printInvalidCommand();","lastModifiedDate":"2022-02-28"},{"lineNumber":153,"author":{"gitId":"OzairHasan"},"content":"            return;","lastModifiedDate":"2022-02-17"},{"lineNumber":154,"author":{"gitId":"OzairHasan"},"content":"        }","lastModifiedDate":"2022-02-09"},{"lineNumber":155,"author":{"gitId":"OzairHasan"},"content":"        isModified \u003d true;","lastModifiedDate":"2022-02-17"},{"lineNumber":156,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":157,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":158,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":159,"author":{"gitId":"OzairHasan"},"content":"    /**","lastModifiedDate":"2022-03-01"},{"lineNumber":160,"author":{"gitId":"OzairHasan"},"content":"     * This method marks \u003ccode\u003etask\u003c/code\u003e in list with \u003ccode\u003etaskNumber\u003c/code\u003e as done.","lastModifiedDate":"2022-03-01"},{"lineNumber":161,"author":{"gitId":"OzairHasan"},"content":"     *","lastModifiedDate":"2022-03-01"},{"lineNumber":162,"author":{"gitId":"OzairHasan"},"content":"     * @param taskNumber Index at which the \u003ccode\u003eTask\u003c/code\u003e object is to be marked as yet to be done.","lastModifiedDate":"2022-03-01"},{"lineNumber":163,"author":{"gitId":"OzairHasan"},"content":"     * @return Nothing.","lastModifiedDate":"2022-03-01"},{"lineNumber":164,"author":{"gitId":"OzairHasan"},"content":"     */","lastModifiedDate":"2022-03-01"},{"lineNumber":165,"author":{"gitId":"OzairHasan"},"content":"    public static void markTaskAsDone(int taskNumber) {","lastModifiedDate":"2022-01-27"},{"lineNumber":166,"author":{"gitId":"OzairHasan"},"content":"        if (taskNumber \u003d\u003d INVALID_TASKNUMBER) {","lastModifiedDate":"2022-02-17"},{"lineNumber":167,"author":{"gitId":"OzairHasan"},"content":"            ui.printInvalidTaskNumber();","lastModifiedDate":"2022-02-28"},{"lineNumber":168,"author":{"gitId":"OzairHasan"},"content":"            return;","lastModifiedDate":"2022-02-17"},{"lineNumber":169,"author":{"gitId":"OzairHasan"},"content":"        }","lastModifiedDate":"2022-02-17"},{"lineNumber":170,"author":{"gitId":"OzairHasan"},"content":"        // mark task with taskNumber as done.","lastModifiedDate":"2022-02-01"},{"lineNumber":171,"author":{"gitId":"OzairHasan"},"content":"        taskList.get(taskNumber - 1).markAsDone();","lastModifiedDate":"2022-02-28"},{"lineNumber":172,"author":{"gitId":"OzairHasan"},"content":"        ui.printMarkTaskAsDone(taskList, taskNumber);","lastModifiedDate":"2022-02-28"},{"lineNumber":173,"author":{"gitId":"OzairHasan"},"content":"        isModified \u003d true;","lastModifiedDate":"2022-02-17"},{"lineNumber":174,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":175,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":176,"author":{"gitId":"OzairHasan"},"content":"    /**","lastModifiedDate":"2022-03-01"},{"lineNumber":177,"author":{"gitId":"OzairHasan"},"content":"     * This method marks \u003ccode\u003etask\u003c/code\u003e in list with \u003ccode\u003etaskNumber\u003c/code\u003e as not yet done.","lastModifiedDate":"2022-03-01"},{"lineNumber":178,"author":{"gitId":"OzairHasan"},"content":"     *","lastModifiedDate":"2022-03-01"},{"lineNumber":179,"author":{"gitId":"OzairHasan"},"content":"     * @param taskNumber Index at which the \u003ccode\u003eTask\u003c/code\u003e object is to be marked as yet to be done.","lastModifiedDate":"2022-03-01"},{"lineNumber":180,"author":{"gitId":"OzairHasan"},"content":"     * @return Nothing.","lastModifiedDate":"2022-03-01"},{"lineNumber":181,"author":{"gitId":"OzairHasan"},"content":"     */","lastModifiedDate":"2022-03-01"},{"lineNumber":182,"author":{"gitId":"OzairHasan"},"content":"    public static void unmarkTaskAsDone(int taskNumber) {","lastModifiedDate":"2022-01-27"},{"lineNumber":183,"author":{"gitId":"OzairHasan"},"content":"        if (taskNumber \u003d\u003d INVALID_TASKNUMBER) {","lastModifiedDate":"2022-02-17"},{"lineNumber":184,"author":{"gitId":"OzairHasan"},"content":"            ui.printInvalidTaskNumber();","lastModifiedDate":"2022-02-28"},{"lineNumber":185,"author":{"gitId":"OzairHasan"},"content":"            return;","lastModifiedDate":"2022-02-17"},{"lineNumber":186,"author":{"gitId":"OzairHasan"},"content":"        }","lastModifiedDate":"2022-02-17"},{"lineNumber":187,"author":{"gitId":"OzairHasan"},"content":"        // mark task with taskNumber as yet to be done.","lastModifiedDate":"2022-02-01"},{"lineNumber":188,"author":{"gitId":"OzairHasan"},"content":"        taskList.get(taskNumber - 1).unmarkAsDone();","lastModifiedDate":"2022-02-28"},{"lineNumber":189,"author":{"gitId":"OzairHasan"},"content":"        ui.printUnmarkTaskAsDone(taskList, taskNumber);","lastModifiedDate":"2022-02-28"},{"lineNumber":190,"author":{"gitId":"OzairHasan"},"content":"        isModified \u003d true;","lastModifiedDate":"2022-02-17"},{"lineNumber":191,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":192,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":193,"author":{"gitId":"OzairHasan"},"content":"    /**","lastModifiedDate":"2022-03-01"},{"lineNumber":194,"author":{"gitId":"OzairHasan"},"content":"     * This method deletes \u003ccode\u003eTask\u003c/code\u003e at \u003ccode\u003etaskNumber\u003c/code\u003e in \u003ccode\u003etaskList\u003c/code\u003e.","lastModifiedDate":"2022-03-01"},{"lineNumber":195,"author":{"gitId":"OzairHasan"},"content":"     *","lastModifiedDate":"2022-03-01"},{"lineNumber":196,"author":{"gitId":"OzairHasan"},"content":"     * @param taskNumber Index at which the \u003ccode\u003eTask\u003c/code\u003e object is to be deleted.","lastModifiedDate":"2022-03-01"},{"lineNumber":197,"author":{"gitId":"OzairHasan"},"content":"     * @return Nothing.","lastModifiedDate":"2022-03-01"},{"lineNumber":198,"author":{"gitId":"OzairHasan"},"content":"     */","lastModifiedDate":"2022-03-01"},{"lineNumber":199,"author":{"gitId":"OzairHasan"},"content":"    public static void deleteTask(int taskNumber) {","lastModifiedDate":"2022-02-17"},{"lineNumber":200,"author":{"gitId":"OzairHasan"},"content":"        if (taskNumber \u003d\u003d INVALID_TASKNUMBER) {","lastModifiedDate":"2022-02-17"},{"lineNumber":201,"author":{"gitId":"OzairHasan"},"content":"            ui.printInvalidTaskNumber();","lastModifiedDate":"2022-02-28"},{"lineNumber":202,"author":{"gitId":"OzairHasan"},"content":"            return;","lastModifiedDate":"2022-02-17"},{"lineNumber":203,"author":{"gitId":"OzairHasan"},"content":"        }","lastModifiedDate":"2022-02-17"},{"lineNumber":204,"author":{"gitId":"OzairHasan"},"content":"        ui.printDeletedTask(taskList, taskNumber);","lastModifiedDate":"2022-02-28"},{"lineNumber":205,"author":{"gitId":"OzairHasan"},"content":"        taskList.remove(taskNumber-1);","lastModifiedDate":"2022-02-28"},{"lineNumber":206,"author":{"gitId":"OzairHasan"},"content":"        isModified \u003d true;","lastModifiedDate":"2022-02-17"},{"lineNumber":207,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":208,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":209,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":210,"author":{"gitId":"OzairHasan"},"content":"    public static void loadData() {","lastModifiedDate":"2022-02-28"},{"lineNumber":211,"author":{"gitId":"OzairHasan"},"content":"        storage.loadData(taskList);","lastModifiedDate":"2022-02-28"},{"lineNumber":212,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":213,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":214,"author":{"gitId":"OzairHasan"},"content":"    public static void saveData(){","lastModifiedDate":"2022-02-17"},{"lineNumber":215,"author":{"gitId":"OzairHasan"},"content":"        storage.saveData(taskList);","lastModifiedDate":"2022-02-28"},{"lineNumber":216,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":217,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":218,"author":{"gitId":"OzairHasan"},"content":"    public static void printList(){","lastModifiedDate":"2022-02-28"},{"lineNumber":219,"author":{"gitId":"OzairHasan"},"content":"        ui.printList(taskList);","lastModifiedDate":"2022-02-28"},{"lineNumber":220,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":221,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":222,"author":{"gitId":"OzairHasan"},"content":"    public static void printTasksThatMatchWith(String keyword){","lastModifiedDate":"2022-02-28"},{"lineNumber":223,"author":{"gitId":"OzairHasan"},"content":"        if (keyword.length() \u003d\u003d 0){","lastModifiedDate":"2022-02-28"},{"lineNumber":224,"author":{"gitId":"OzairHasan"},"content":"            ui.printKeywordError();","lastModifiedDate":"2022-02-28"},{"lineNumber":225,"author":{"gitId":"OzairHasan"},"content":"            return;","lastModifiedDate":"2022-02-28"},{"lineNumber":226,"author":{"gitId":"OzairHasan"},"content":"        }","lastModifiedDate":"2022-02-28"},{"lineNumber":227,"author":{"gitId":"OzairHasan"},"content":"        ui.printSelectiveList(taskList, keyword);","lastModifiedDate":"2022-02-28"},{"lineNumber":228,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":229,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":230,"author":{"gitId":"OzairHasan"},"content":"    // method runs main echo functionality of duke.","lastModifiedDate":"2022-01-24"},{"lineNumber":231,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":232,"author":{"gitId":"OzairHasan"},"content":"    /**","lastModifiedDate":"2022-03-01"},{"lineNumber":233,"author":{"gitId":"OzairHasan"},"content":"     * This method runs main echo functionality of duke.","lastModifiedDate":"2022-03-01"},{"lineNumber":234,"author":{"gitId":"OzairHasan"},"content":"     *","lastModifiedDate":"2022-03-01"},{"lineNumber":235,"author":{"gitId":"OzairHasan"},"content":"     * @return Nothing.","lastModifiedDate":"2022-03-01"},{"lineNumber":236,"author":{"gitId":"OzairHasan"},"content":"     */","lastModifiedDate":"2022-03-01"},{"lineNumber":237,"author":{"gitId":"OzairHasan"},"content":"    public static void echo() {","lastModifiedDate":"2022-01-24"},{"lineNumber":238,"author":{"gitId":"OzairHasan"},"content":"        while (true) {","lastModifiedDate":"2022-01-24"},{"lineNumber":239,"author":{"gitId":"OzairHasan"},"content":"            isModified \u003d false;","lastModifiedDate":"2022-02-17"},{"lineNumber":240,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":241,"author":{"gitId":"OzairHasan"},"content":"            //read input from user.","lastModifiedDate":"2022-01-26"},{"lineNumber":242,"author":{"gitId":"OzairHasan"},"content":"            String userInput \u003d ui.getUserInput();","lastModifiedDate":"2022-02-28"},{"lineNumber":243,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":244,"author":{"gitId":"OzairHasan"},"content":"            // Check userInput for respective command.","lastModifiedDate":"2022-02-01"},{"lineNumber":245,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":246,"author":{"gitId":"OzairHasan"},"content":"            if (parser.isByeCommand(userInput)) {","lastModifiedDate":"2022-02-28"},{"lineNumber":247,"author":{"gitId":"OzairHasan"},"content":"                return;","lastModifiedDate":"2022-01-24"},{"lineNumber":248,"author":{"gitId":"OzairHasan"},"content":"            } else if (parser.isListCommand(userInput)) {","lastModifiedDate":"2022-02-28"},{"lineNumber":249,"author":{"gitId":"OzairHasan"},"content":"                printList();","lastModifiedDate":"2022-01-26"},{"lineNumber":250,"author":{"gitId":"OzairHasan"},"content":"            } else if(parser.isFindCommand(userInput)) {","lastModifiedDate":"2022-02-28"},{"lineNumber":251,"author":{"gitId":"OzairHasan"},"content":"                printTasksThatMatchWith(parser.getKeyword(userInput));","lastModifiedDate":"2022-02-28"},{"lineNumber":252,"author":{"gitId":"OzairHasan"},"content":"            } else if (parser.isMarkCommand(userInput)) {","lastModifiedDate":"2022-02-28"},{"lineNumber":253,"author":{"gitId":"OzairHasan"},"content":"                int taskNumber \u003d parser.getTaskNumber(taskList, userInput);","lastModifiedDate":"2022-02-28"},{"lineNumber":254,"author":{"gitId":"OzairHasan"},"content":"                markTaskAsDone(taskNumber);","lastModifiedDate":"2022-02-01"},{"lineNumber":255,"author":{"gitId":"OzairHasan"},"content":"            } else if (parser.isUnmarkCommand(userInput)) {","lastModifiedDate":"2022-02-28"},{"lineNumber":256,"author":{"gitId":"OzairHasan"},"content":"                int taskNumber \u003d parser.getTaskNumber(taskList, userInput);","lastModifiedDate":"2022-02-28"},{"lineNumber":257,"author":{"gitId":"OzairHasan"},"content":"                unmarkTaskAsDone(taskNumber);","lastModifiedDate":"2022-02-01"},{"lineNumber":258,"author":{"gitId":"OzairHasan"},"content":"            } else if (parser.isDeleteCommand(userInput)) {","lastModifiedDate":"2022-02-28"},{"lineNumber":259,"author":{"gitId":"OzairHasan"},"content":"                int taskNumber \u003d parser.getTaskNumber(taskList, userInput);","lastModifiedDate":"2022-02-28"},{"lineNumber":260,"author":{"gitId":"OzairHasan"},"content":"                deleteTask(taskNumber);","lastModifiedDate":"2022-02-17"},{"lineNumber":261,"author":{"gitId":"OzairHasan"},"content":"            }","lastModifiedDate":"2022-02-17"},{"lineNumber":262,"author":{"gitId":"OzairHasan"},"content":"            // else it is an addition command or some unknown command","lastModifiedDate":"2022-02-09"},{"lineNumber":263,"author":{"gitId":"OzairHasan"},"content":"            else {","lastModifiedDate":"2022-01-26"},{"lineNumber":264,"author":{"gitId":"OzairHasan"},"content":"                addTaskToList(userInput);","lastModifiedDate":"2022-01-27"},{"lineNumber":265,"author":{"gitId":"OzairHasan"},"content":"            }","lastModifiedDate":"2022-01-26"},{"lineNumber":266,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":267,"author":{"gitId":"OzairHasan"},"content":"            if (isModified) {","lastModifiedDate":"2022-02-17"},{"lineNumber":268,"author":{"gitId":"OzairHasan"},"content":"                saveData();","lastModifiedDate":"2022-02-17"},{"lineNumber":269,"author":{"gitId":"OzairHasan"},"content":"            }","lastModifiedDate":"2022-02-17"},{"lineNumber":270,"author":{"gitId":"OzairHasan"},"content":"        }","lastModifiedDate":"2022-01-24"},{"lineNumber":271,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-01-16"},{"lineNumber":272,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-01-16"},{"lineNumber":273,"author":{"gitId":"OzairHasan"},"content":"    /**","lastModifiedDate":"2022-03-01"},{"lineNumber":274,"author":{"gitId":"OzairHasan"},"content":"     * This method prints greeting.","lastModifiedDate":"2022-03-01"},{"lineNumber":275,"author":{"gitId":"OzairHasan"},"content":"     *","lastModifiedDate":"2022-03-01"},{"lineNumber":276,"author":{"gitId":"OzairHasan"},"content":"     * @return Nothing.","lastModifiedDate":"2022-03-01"},{"lineNumber":277,"author":{"gitId":"OzairHasan"},"content":"     */","lastModifiedDate":"2022-03-01"},{"lineNumber":278,"author":{"gitId":"OzairHasan"},"content":"    public static void greeting(){","lastModifiedDate":"2022-02-28"},{"lineNumber":279,"author":{"gitId":"OzairHasan"},"content":"        ui.greeting();","lastModifiedDate":"2022-02-28"},{"lineNumber":280,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":281,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":282,"author":{"gitId":"OzairHasan"},"content":"    /**","lastModifiedDate":"2022-03-01"},{"lineNumber":283,"author":{"gitId":"OzairHasan"},"content":"     * This method prints goodbye.","lastModifiedDate":"2022-03-01"},{"lineNumber":284,"author":{"gitId":"OzairHasan"},"content":"     *","lastModifiedDate":"2022-03-01"},{"lineNumber":285,"author":{"gitId":"OzairHasan"},"content":"     * @return Nothing.","lastModifiedDate":"2022-03-01"},{"lineNumber":286,"author":{"gitId":"OzairHasan"},"content":"     */","lastModifiedDate":"2022-03-01"},{"lineNumber":287,"author":{"gitId":"OzairHasan"},"content":"    public static void goodbye(){","lastModifiedDate":"2022-02-28"},{"lineNumber":288,"author":{"gitId":"OzairHasan"},"content":"        ui.goodbye();","lastModifiedDate":"2022-02-28"},{"lineNumber":289,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":290,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":291,"author":{"gitId":"OzairHasan"},"content":"    /**","lastModifiedDate":"2022-03-01"},{"lineNumber":292,"author":{"gitId":"OzairHasan"},"content":"     * This method executes greeting of Duke, before loading data and running main interactive loop functionality","lastModifiedDate":"2022-03-01"},{"lineNumber":293,"author":{"gitId":"OzairHasan"},"content":"     * and then terminating.","lastModifiedDate":"2022-03-01"},{"lineNumber":294,"author":{"gitId":"OzairHasan"},"content":"     *","lastModifiedDate":"2022-03-01"},{"lineNumber":295,"author":{"gitId":"OzairHasan"},"content":"     * @param args Unused.","lastModifiedDate":"2022-03-01"},{"lineNumber":296,"author":{"gitId":"OzairHasan"},"content":"     * @return Nothing.","lastModifiedDate":"2022-03-01"},{"lineNumber":297,"author":{"gitId":"OzairHasan"},"content":"     */","lastModifiedDate":"2022-03-01"},{"lineNumber":298,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":299,"author":{"gitId":"OzairHasan"},"content":"        greeting();","lastModifiedDate":"2022-01-16"},{"lineNumber":300,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":301,"author":{"gitId":"OzairHasan"},"content":"        loadData();","lastModifiedDate":"2022-02-17"},{"lineNumber":302,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":303,"author":{"gitId":"OzairHasan"},"content":"        echo();","lastModifiedDate":"2022-01-24"},{"lineNumber":304,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-01-24"},{"lineNumber":305,"author":{"gitId":"OzairHasan"},"content":"        goodbye();","lastModifiedDate":"2022-01-16"},{"lineNumber":306,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":307,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"OzairHasan":303,"-":4}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"OzairHasan"},"content":"package duke;","lastModifiedDate":"2022-02-28"},{"lineNumber":2,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":3,"author":{"gitId":"OzairHasan"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-02-28"},{"lineNumber":4,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":5,"author":{"gitId":"OzairHasan"},"content":"/**","lastModifiedDate":"2022-03-01"},{"lineNumber":6,"author":{"gitId":"OzairHasan"},"content":" * This class handles I/O interactions with the user. It comprises mainly of methods that print to command line","lastModifiedDate":"2022-03-01"},{"lineNumber":7,"author":{"gitId":"OzairHasan"},"content":" * or receive user input from command line.","lastModifiedDate":"2022-03-01"},{"lineNumber":8,"author":{"gitId":"OzairHasan"},"content":" */","lastModifiedDate":"2022-03-01"},{"lineNumber":9,"author":{"gitId":"OzairHasan"},"content":"public class Parser {","lastModifiedDate":"2022-02-28"},{"lineNumber":10,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":11,"author":{"gitId":"OzairHasan"},"content":"    public Parser() {}","lastModifiedDate":"2022-02-28"},{"lineNumber":12,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":13,"author":{"gitId":"OzairHasan"},"content":"    /**","lastModifiedDate":"2022-03-01"},{"lineNumber":14,"author":{"gitId":"OzairHasan"},"content":"     * This method returns a boolean determining whether user input command starts with the string \"deadline\".","lastModifiedDate":"2022-03-01"},{"lineNumber":15,"author":{"gitId":"OzairHasan"},"content":"     *","lastModifiedDate":"2022-03-01"},{"lineNumber":16,"author":{"gitId":"OzairHasan"},"content":"     * @param userInput String containing user input.","lastModifiedDate":"2022-03-01"},{"lineNumber":17,"author":{"gitId":"OzairHasan"},"content":"     * @return \u003ccode\u003etrue\u003c/code\u003e if user input starts with \"deadline\", else \u003ccode\u003efalse\u003c/code\u003e.","lastModifiedDate":"2022-03-01"},{"lineNumber":18,"author":{"gitId":"OzairHasan"},"content":"     */","lastModifiedDate":"2022-03-01"},{"lineNumber":19,"author":{"gitId":"OzairHasan"},"content":"    public boolean isDeadline(String userInput) {","lastModifiedDate":"2022-02-28"},{"lineNumber":20,"author":{"gitId":"OzairHasan"},"content":"        if (userInput.length() \u003e\u003d Duke.MINIMUM_LENGTH_OF_DEADLINE_STATEMENT) {","lastModifiedDate":"2022-02-28"},{"lineNumber":21,"author":{"gitId":"OzairHasan"},"content":"            // return true if first 8 letters of userInput spell \"deadline\", else false","lastModifiedDate":"2022-02-28"},{"lineNumber":22,"author":{"gitId":"OzairHasan"},"content":"            return userInput.substring(0, Duke.MINIMUM_LENGTH_OF_DEADLINE_STATEMENT).equals(\"deadline\");","lastModifiedDate":"2022-02-28"},{"lineNumber":23,"author":{"gitId":"OzairHasan"},"content":"        }","lastModifiedDate":"2022-02-28"},{"lineNumber":24,"author":{"gitId":"OzairHasan"},"content":"        return false;","lastModifiedDate":"2022-02-28"},{"lineNumber":25,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":26,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":27,"author":{"gitId":"OzairHasan"},"content":"    /**","lastModifiedDate":"2022-03-01"},{"lineNumber":28,"author":{"gitId":"OzairHasan"},"content":"     * This method returns a boolean determining whether user input command starts with the string \"todo\".","lastModifiedDate":"2022-03-01"},{"lineNumber":29,"author":{"gitId":"OzairHasan"},"content":"     *","lastModifiedDate":"2022-03-01"},{"lineNumber":30,"author":{"gitId":"OzairHasan"},"content":"     * @param userInput String containing user input.","lastModifiedDate":"2022-03-01"},{"lineNumber":31,"author":{"gitId":"OzairHasan"},"content":"     * @return \u003ccode\u003etrue\u003c/code\u003e if user input starts with \"todo\", else \u003ccode\u003efalse\u003c/code\u003e.","lastModifiedDate":"2022-03-01"},{"lineNumber":32,"author":{"gitId":"OzairHasan"},"content":"     */","lastModifiedDate":"2022-03-01"},{"lineNumber":33,"author":{"gitId":"OzairHasan"},"content":"    public boolean isTodo(String userInput) {","lastModifiedDate":"2022-02-28"},{"lineNumber":34,"author":{"gitId":"OzairHasan"},"content":"        if (userInput.length() \u003e\u003d Duke.MINIMUM_LENGTH_OF_TODO_STATEMENT) {","lastModifiedDate":"2022-02-28"},{"lineNumber":35,"author":{"gitId":"OzairHasan"},"content":"            // return true if first 4 letters of userInput spell \"todo\", else false","lastModifiedDate":"2022-02-28"},{"lineNumber":36,"author":{"gitId":"OzairHasan"},"content":"            return userInput.substring(0, Duke.MINIMUM_LENGTH_OF_TODO_STATEMENT).equals(\"todo\");","lastModifiedDate":"2022-02-28"},{"lineNumber":37,"author":{"gitId":"OzairHasan"},"content":"        }","lastModifiedDate":"2022-02-28"},{"lineNumber":38,"author":{"gitId":"OzairHasan"},"content":"        return false;","lastModifiedDate":"2022-02-28"},{"lineNumber":39,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":40,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":41,"author":{"gitId":"OzairHasan"},"content":"    /**","lastModifiedDate":"2022-03-01"},{"lineNumber":42,"author":{"gitId":"OzairHasan"},"content":"     * This method returns a boolean determining whether user input command starts with the string \"event\".","lastModifiedDate":"2022-03-01"},{"lineNumber":43,"author":{"gitId":"OzairHasan"},"content":"     *","lastModifiedDate":"2022-03-01"},{"lineNumber":44,"author":{"gitId":"OzairHasan"},"content":"     * @param userInput String containing user input.","lastModifiedDate":"2022-03-01"},{"lineNumber":45,"author":{"gitId":"OzairHasan"},"content":"     * @return \u003ccode\u003etrue\u003c/code\u003e if user input starts with \"event\", else \u003ccode\u003efalse\u003c/code\u003e.","lastModifiedDate":"2022-03-01"},{"lineNumber":46,"author":{"gitId":"OzairHasan"},"content":"     */","lastModifiedDate":"2022-03-01"},{"lineNumber":47,"author":{"gitId":"OzairHasan"},"content":"    public boolean isEvent(String userInput) {","lastModifiedDate":"2022-02-28"},{"lineNumber":48,"author":{"gitId":"OzairHasan"},"content":"        if (userInput.length() \u003e\u003d Duke.MINIMUM_LENGTH_OF_EVENT_STATEMENT) {","lastModifiedDate":"2022-02-28"},{"lineNumber":49,"author":{"gitId":"OzairHasan"},"content":"            // return true if first 5 letters of userInput spell \"event\", else false","lastModifiedDate":"2022-02-28"},{"lineNumber":50,"author":{"gitId":"OzairHasan"},"content":"            return userInput.substring(0, Duke.MINIMUM_LENGTH_OF_EVENT_STATEMENT).equals(\"event\");","lastModifiedDate":"2022-02-28"},{"lineNumber":51,"author":{"gitId":"OzairHasan"},"content":"        }","lastModifiedDate":"2022-02-28"},{"lineNumber":52,"author":{"gitId":"OzairHasan"},"content":"        return false;","lastModifiedDate":"2022-02-28"},{"lineNumber":53,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":54,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":55,"author":{"gitId":"OzairHasan"},"content":"    /**","lastModifiedDate":"2022-03-01"},{"lineNumber":56,"author":{"gitId":"OzairHasan"},"content":"     * This method returns the todo description from todo input.","lastModifiedDate":"2022-03-01"},{"lineNumber":57,"author":{"gitId":"OzairHasan"},"content":"     *","lastModifiedDate":"2022-03-01"},{"lineNumber":58,"author":{"gitId":"OzairHasan"},"content":"     * @param userInput Contains the user input todo command.","lastModifiedDate":"2022-03-01"},{"lineNumber":59,"author":{"gitId":"OzairHasan"},"content":"     * @return Todo description.","lastModifiedDate":"2022-03-01"},{"lineNumber":60,"author":{"gitId":"OzairHasan"},"content":"     */","lastModifiedDate":"2022-03-01"},{"lineNumber":61,"author":{"gitId":"OzairHasan"},"content":"    public String getTodoFromUserInput(String userInput) {","lastModifiedDate":"2022-02-28"},{"lineNumber":62,"author":{"gitId":"OzairHasan"},"content":"        return userInput.substring(Duke.MINIMUM_LENGTH_OF_TODO_STATEMENT + 1, userInput.length());","lastModifiedDate":"2022-02-28"},{"lineNumber":63,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":64,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":65,"author":{"gitId":"OzairHasan"},"content":"    /**","lastModifiedDate":"2022-03-01"},{"lineNumber":66,"author":{"gitId":"OzairHasan"},"content":"     * This method returns the event description from event input.","lastModifiedDate":"2022-03-01"},{"lineNumber":67,"author":{"gitId":"OzairHasan"},"content":"     *","lastModifiedDate":"2022-03-01"},{"lineNumber":68,"author":{"gitId":"OzairHasan"},"content":"     * @param userInput Contains the user input event command.","lastModifiedDate":"2022-03-01"},{"lineNumber":69,"author":{"gitId":"OzairHasan"},"content":"     * @param eventTimeIdx Index before which the description ends.","lastModifiedDate":"2022-03-01"},{"lineNumber":70,"author":{"gitId":"OzairHasan"},"content":"     * @return Event description.","lastModifiedDate":"2022-03-01"},{"lineNumber":71,"author":{"gitId":"OzairHasan"},"content":"     */","lastModifiedDate":"2022-03-01"},{"lineNumber":72,"author":{"gitId":"OzairHasan"},"content":"    public String getEventFromUserInput(String userInput, int eventTimeIdx) {","lastModifiedDate":"2022-02-28"},{"lineNumber":73,"author":{"gitId":"OzairHasan"},"content":"        return userInput.substring(Duke.MINIMUM_LENGTH_OF_EVENT_STATEMENT + 1, eventTimeIdx - 1);","lastModifiedDate":"2022-02-28"},{"lineNumber":74,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":75,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":76,"author":{"gitId":"OzairHasan"},"content":"    /**","lastModifiedDate":"2022-03-01"},{"lineNumber":77,"author":{"gitId":"OzairHasan"},"content":"     * This method returns the deadline description from deadline input.","lastModifiedDate":"2022-03-01"},{"lineNumber":78,"author":{"gitId":"OzairHasan"},"content":"     *","lastModifiedDate":"2022-03-01"},{"lineNumber":79,"author":{"gitId":"OzairHasan"},"content":"     * @param userInput Contains the user input deadline command.","lastModifiedDate":"2022-03-01"},{"lineNumber":80,"author":{"gitId":"OzairHasan"},"content":"     * @param dueDateIdx Index before which the description ends.","lastModifiedDate":"2022-03-01"},{"lineNumber":81,"author":{"gitId":"OzairHasan"},"content":"     * @return Deadline description.","lastModifiedDate":"2022-03-01"},{"lineNumber":82,"author":{"gitId":"OzairHasan"},"content":"     */","lastModifiedDate":"2022-03-01"},{"lineNumber":83,"author":{"gitId":"OzairHasan"},"content":"    public String getDeadlineFromUserInput(String userInput, int dueDateIdx) {","lastModifiedDate":"2022-02-28"},{"lineNumber":84,"author":{"gitId":"OzairHasan"},"content":"        return userInput.substring(Duke.MINIMUM_LENGTH_OF_DEADLINE_STATEMENT + 1, dueDateIdx - 1);","lastModifiedDate":"2022-02-28"},{"lineNumber":85,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":86,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":87,"author":{"gitId":"OzairHasan"},"content":"    public String getEventTimeFromUserInput(String userInput, int eventTimeIdx) {","lastModifiedDate":"2022-02-28"},{"lineNumber":88,"author":{"gitId":"OzairHasan"},"content":"        // ignore /by in the userInput","lastModifiedDate":"2022-02-28"},{"lineNumber":89,"author":{"gitId":"OzairHasan"},"content":"        return userInput.substring(eventTimeIdx + Duke.MINIMUM_LENGTH_OF_TODO_STATEMENT, userInput.length());","lastModifiedDate":"2022-02-28"},{"lineNumber":90,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":91,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":92,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":93,"author":{"gitId":"OzairHasan"},"content":"    public String getDueDateFromUserInput(String userInput, int dueDateIdx) {","lastModifiedDate":"2022-02-28"},{"lineNumber":94,"author":{"gitId":"OzairHasan"},"content":"        // ignore /at in the userInput","lastModifiedDate":"2022-02-28"},{"lineNumber":95,"author":{"gitId":"OzairHasan"},"content":"        return userInput.substring(dueDateIdx + Duke.MINIMUM_LENGTH_OF_TODO_STATEMENT, userInput.length());","lastModifiedDate":"2022-02-28"},{"lineNumber":96,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":97,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":98,"author":{"gitId":"OzairHasan"},"content":"    /**","lastModifiedDate":"2022-03-01"},{"lineNumber":99,"author":{"gitId":"OzairHasan"},"content":"     * This method returns a boolean determining whether a todo input command is valid or not.","lastModifiedDate":"2022-03-01"},{"lineNumber":100,"author":{"gitId":"OzairHasan"},"content":"     *","lastModifiedDate":"2022-03-01"},{"lineNumber":101,"author":{"gitId":"OzairHasan"},"content":"     * @param todo String containing todo command.","lastModifiedDate":"2022-03-01"},{"lineNumber":102,"author":{"gitId":"OzairHasan"},"content":"     * @return \u003ccode\u003etrue\u003c/code\u003e if todo is invalid, else \u003ccode\u003efalse\u003c/code\u003e.","lastModifiedDate":"2022-03-01"},{"lineNumber":103,"author":{"gitId":"OzairHasan"},"content":"     */","lastModifiedDate":"2022-03-01"},{"lineNumber":104,"author":{"gitId":"OzairHasan"},"content":"    public boolean isInvalidTodo(String todo) {","lastModifiedDate":"2022-02-28"},{"lineNumber":105,"author":{"gitId":"OzairHasan"},"content":"        int lengthOfTodoDescription \u003d todo.length() - Duke.MINIMUM_LENGTH_OF_TODO_STATEMENT - 1;","lastModifiedDate":"2022-02-28"},{"lineNumber":106,"author":{"gitId":"OzairHasan"},"content":"        return (lengthOfTodoDescription \u003c\u003d 0);","lastModifiedDate":"2022-02-28"},{"lineNumber":107,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":108,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":109,"author":{"gitId":"OzairHasan"},"content":"    /**","lastModifiedDate":"2022-03-01"},{"lineNumber":110,"author":{"gitId":"OzairHasan"},"content":"     * This method returns a boolean determining whether an event input command is valid or not.","lastModifiedDate":"2022-03-01"},{"lineNumber":111,"author":{"gitId":"OzairHasan"},"content":"     *","lastModifiedDate":"2022-03-01"},{"lineNumber":112,"author":{"gitId":"OzairHasan"},"content":"     * @param event String containing event command.","lastModifiedDate":"2022-03-01"},{"lineNumber":113,"author":{"gitId":"OzairHasan"},"content":"     * @return \u003ccode\u003etrue\u003c/code\u003e if event is invalid, else \u003ccode\u003efalse\u003c/code\u003e.","lastModifiedDate":"2022-03-01"},{"lineNumber":114,"author":{"gitId":"OzairHasan"},"content":"     */","lastModifiedDate":"2022-03-01"},{"lineNumber":115,"author":{"gitId":"OzairHasan"},"content":"    public boolean isInvalidEvent(String event) {","lastModifiedDate":"2022-02-28"},{"lineNumber":116,"author":{"gitId":"OzairHasan"},"content":"        int lengthOfEventDescription \u003d event.length() - Duke.MINIMUM_LENGTH_OF_EVENT_STATEMENT - 1;","lastModifiedDate":"2022-02-28"},{"lineNumber":117,"author":{"gitId":"OzairHasan"},"content":"        if (lengthOfEventDescription \u003c\u003d 0) {","lastModifiedDate":"2022-02-28"},{"lineNumber":118,"author":{"gitId":"OzairHasan"},"content":"            return true;","lastModifiedDate":"2022-02-28"},{"lineNumber":119,"author":{"gitId":"OzairHasan"},"content":"        }","lastModifiedDate":"2022-02-28"},{"lineNumber":120,"author":{"gitId":"OzairHasan"},"content":"        // invalid format","lastModifiedDate":"2022-02-28"},{"lineNumber":121,"author":{"gitId":"OzairHasan"},"content":"        if (event.indexOf(\"/\") \u003d\u003d -1) {","lastModifiedDate":"2022-02-28"},{"lineNumber":122,"author":{"gitId":"OzairHasan"},"content":"            return true;","lastModifiedDate":"2022-02-28"},{"lineNumber":123,"author":{"gitId":"OzairHasan"},"content":"        }","lastModifiedDate":"2022-02-28"},{"lineNumber":124,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":125,"author":{"gitId":"OzairHasan"},"content":"        // get string components after \"/\" in the event input.","lastModifiedDate":"2022-02-28"},{"lineNumber":126,"author":{"gitId":"OzairHasan"},"content":"        String[] eventTimeSplit \u003d event.substring(event.indexOf(\"/\"), event.length()).split(\" \");","lastModifiedDate":"2022-02-28"},{"lineNumber":127,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":128,"author":{"gitId":"OzairHasan"},"content":"        // invalid format or event time is not specified.","lastModifiedDate":"2022-02-28"},{"lineNumber":129,"author":{"gitId":"OzairHasan"},"content":"        if (eventTimeSplit.length \u003c 2 || !(eventTimeSplit[0].equals(\"/at\"))) {","lastModifiedDate":"2022-02-28"},{"lineNumber":130,"author":{"gitId":"OzairHasan"},"content":"            return true;","lastModifiedDate":"2022-02-28"},{"lineNumber":131,"author":{"gitId":"OzairHasan"},"content":"        }","lastModifiedDate":"2022-02-28"},{"lineNumber":132,"author":{"gitId":"OzairHasan"},"content":"        return false;","lastModifiedDate":"2022-02-28"},{"lineNumber":133,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":134,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":135,"author":{"gitId":"OzairHasan"},"content":"    /**","lastModifiedDate":"2022-03-01"},{"lineNumber":136,"author":{"gitId":"OzairHasan"},"content":"     * This method returns a boolean determining whether a deadline input command is valid or not.","lastModifiedDate":"2022-03-01"},{"lineNumber":137,"author":{"gitId":"OzairHasan"},"content":"     *","lastModifiedDate":"2022-03-01"},{"lineNumber":138,"author":{"gitId":"OzairHasan"},"content":"     * @param deadline String containing deadline command.","lastModifiedDate":"2022-03-01"},{"lineNumber":139,"author":{"gitId":"OzairHasan"},"content":"     * @return \u003ccode\u003etrue\u003c/code\u003e if deadline is invalid, else \u003ccode\u003efalse\u003c/code\u003e.","lastModifiedDate":"2022-03-01"},{"lineNumber":140,"author":{"gitId":"OzairHasan"},"content":"     */","lastModifiedDate":"2022-03-01"},{"lineNumber":141,"author":{"gitId":"OzairHasan"},"content":"    public boolean isInvalidDeadline(String deadline) {","lastModifiedDate":"2022-02-28"},{"lineNumber":142,"author":{"gitId":"OzairHasan"},"content":"        int lengthOfDeadlineDescription \u003d deadline.length() - Duke.MINIMUM_LENGTH_OF_DEADLINE_STATEMENT - 1;","lastModifiedDate":"2022-02-28"},{"lineNumber":143,"author":{"gitId":"OzairHasan"},"content":"        if (lengthOfDeadlineDescription \u003c\u003d 0) {","lastModifiedDate":"2022-02-28"},{"lineNumber":144,"author":{"gitId":"OzairHasan"},"content":"            return true;","lastModifiedDate":"2022-02-28"},{"lineNumber":145,"author":{"gitId":"OzairHasan"},"content":"        }","lastModifiedDate":"2022-02-28"},{"lineNumber":146,"author":{"gitId":"OzairHasan"},"content":"        // invalid format","lastModifiedDate":"2022-02-28"},{"lineNumber":147,"author":{"gitId":"OzairHasan"},"content":"        if (deadline.indexOf(\"/\") \u003d\u003d -1) {","lastModifiedDate":"2022-02-28"},{"lineNumber":148,"author":{"gitId":"OzairHasan"},"content":"            return true;","lastModifiedDate":"2022-02-28"},{"lineNumber":149,"author":{"gitId":"OzairHasan"},"content":"        }","lastModifiedDate":"2022-02-28"},{"lineNumber":150,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":151,"author":{"gitId":"OzairHasan"},"content":"        // get string components after \"/\" in the deadline input.","lastModifiedDate":"2022-02-28"},{"lineNumber":152,"author":{"gitId":"OzairHasan"},"content":"        String[] dueDateSplit \u003d deadline.substring(deadline.indexOf(\"/\"), deadline.length()).split(\" \");","lastModifiedDate":"2022-02-28"},{"lineNumber":153,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":154,"author":{"gitId":"OzairHasan"},"content":"        // invalid format or due date is not specified.","lastModifiedDate":"2022-02-28"},{"lineNumber":155,"author":{"gitId":"OzairHasan"},"content":"        if (dueDateSplit.length \u003c 2 || !(dueDateSplit[0].equals(\"/by\"))) {","lastModifiedDate":"2022-02-28"},{"lineNumber":156,"author":{"gitId":"OzairHasan"},"content":"            return true;","lastModifiedDate":"2022-02-28"},{"lineNumber":157,"author":{"gitId":"OzairHasan"},"content":"        }","lastModifiedDate":"2022-02-28"},{"lineNumber":158,"author":{"gitId":"OzairHasan"},"content":"        return false;","lastModifiedDate":"2022-02-28"},{"lineNumber":159,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":160,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":161,"author":{"gitId":"OzairHasan"},"content":"    /**","lastModifiedDate":"2022-03-01"},{"lineNumber":162,"author":{"gitId":"OzairHasan"},"content":"     * This method returns a string describing the todo task stored in the user input.","lastModifiedDate":"2022-03-01"},{"lineNumber":163,"author":{"gitId":"OzairHasan"},"content":"     *","lastModifiedDate":"2022-03-01"},{"lineNumber":164,"author":{"gitId":"OzairHasan"},"content":"     * @param userInput String containing user input.","lastModifiedDate":"2022-03-01"},{"lineNumber":165,"author":{"gitId":"OzairHasan"},"content":"     * @return String containing todo description.","lastModifiedDate":"2022-03-01"},{"lineNumber":166,"author":{"gitId":"OzairHasan"},"content":"     */","lastModifiedDate":"2022-03-01"},{"lineNumber":167,"author":{"gitId":"OzairHasan"},"content":"    public String getTodoDescription(String userInput) {","lastModifiedDate":"2022-02-28"},{"lineNumber":168,"author":{"gitId":"OzairHasan"},"content":"        return getTodoFromUserInput(userInput);","lastModifiedDate":"2022-02-28"},{"lineNumber":169,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":170,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":171,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":172,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":173,"author":{"gitId":"OzairHasan"},"content":"    public String getKeyword(String userInput) {","lastModifiedDate":"2022-02-28"},{"lineNumber":174,"author":{"gitId":"OzairHasan"},"content":"        String[] inputSplit \u003d userInput.split(\" \");","lastModifiedDate":"2022-02-28"},{"lineNumber":175,"author":{"gitId":"OzairHasan"},"content":"        if (inputSplit.length \u003c\u003d 1){","lastModifiedDate":"2022-02-28"},{"lineNumber":176,"author":{"gitId":"OzairHasan"},"content":"            return \"\";","lastModifiedDate":"2022-02-28"},{"lineNumber":177,"author":{"gitId":"OzairHasan"},"content":"        }","lastModifiedDate":"2022-02-28"},{"lineNumber":178,"author":{"gitId":"OzairHasan"},"content":"        return inputSplit[1];","lastModifiedDate":"2022-02-28"},{"lineNumber":179,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":180,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":181,"author":{"gitId":"OzairHasan"},"content":"    /**","lastModifiedDate":"2022-03-01"},{"lineNumber":182,"author":{"gitId":"OzairHasan"},"content":"     * This method returns a String Pair representing the event description and corresponding event time","lastModifiedDate":"2022-03-01"},{"lineNumber":183,"author":{"gitId":"OzairHasan"},"content":"     * stored in the user input.","lastModifiedDate":"2022-03-01"},{"lineNumber":184,"author":{"gitId":"OzairHasan"},"content":"     *","lastModifiedDate":"2022-03-01"},{"lineNumber":185,"author":{"gitId":"OzairHasan"},"content":"     * @param userInput String containing user input.","lastModifiedDate":"2022-03-01"},{"lineNumber":186,"author":{"gitId":"OzairHasan"},"content":"     * @return A pair of strings representing the event description and corresponding event time.","lastModifiedDate":"2022-03-01"},{"lineNumber":187,"author":{"gitId":"OzairHasan"},"content":"     */","lastModifiedDate":"2022-03-01"},{"lineNumber":188,"author":{"gitId":"OzairHasan"},"content":"    public StringPair getEventDescriptionAndTime(String userInput) {","lastModifiedDate":"2022-02-28"},{"lineNumber":189,"author":{"gitId":"OzairHasan"},"content":"        int eventTimeIdx \u003d userInput.indexOf(\"/\");","lastModifiedDate":"2022-02-28"},{"lineNumber":190,"author":{"gitId":"OzairHasan"},"content":"        String description \u003d getEventFromUserInput(userInput, eventTimeIdx);","lastModifiedDate":"2022-02-28"},{"lineNumber":191,"author":{"gitId":"OzairHasan"},"content":"        String eventTime \u003d getEventTimeFromUserInput(userInput, eventTimeIdx);","lastModifiedDate":"2022-02-28"},{"lineNumber":192,"author":{"gitId":"OzairHasan"},"content":"        return new StringPair(description, eventTime);","lastModifiedDate":"2022-02-28"},{"lineNumber":193,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":194,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":195,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":196,"author":{"gitId":"OzairHasan"},"content":"    /**","lastModifiedDate":"2022-03-01"},{"lineNumber":197,"author":{"gitId":"OzairHasan"},"content":"     * This method returns a String Pair representing the deadline description and corresponding due date.","lastModifiedDate":"2022-03-01"},{"lineNumber":198,"author":{"gitId":"OzairHasan"},"content":"     *","lastModifiedDate":"2022-03-01"},{"lineNumber":199,"author":{"gitId":"OzairHasan"},"content":"     * @param userInput String containing user input.","lastModifiedDate":"2022-03-01"},{"lineNumber":200,"author":{"gitId":"OzairHasan"},"content":"     * @return A pair of strings representing the deadline description and corresponding due date.","lastModifiedDate":"2022-03-01"},{"lineNumber":201,"author":{"gitId":"OzairHasan"},"content":"     */","lastModifiedDate":"2022-03-01"},{"lineNumber":202,"author":{"gitId":"OzairHasan"},"content":"    public StringPair getDeadlineDescriptionAndTime(String userInput){","lastModifiedDate":"2022-02-28"},{"lineNumber":203,"author":{"gitId":"OzairHasan"},"content":"        int dueDateIdx \u003d userInput.indexOf(\"/\");","lastModifiedDate":"2022-02-28"},{"lineNumber":204,"author":{"gitId":"OzairHasan"},"content":"        String description \u003d getDeadlineFromUserInput(userInput, dueDateIdx);","lastModifiedDate":"2022-02-28"},{"lineNumber":205,"author":{"gitId":"OzairHasan"},"content":"        String dueDate \u003d getDueDateFromUserInput(userInput, dueDateIdx);","lastModifiedDate":"2022-02-28"},{"lineNumber":206,"author":{"gitId":"OzairHasan"},"content":"        return new StringPair(description, dueDate);","lastModifiedDate":"2022-02-28"},{"lineNumber":207,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":208,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":209,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":210,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":211,"author":{"gitId":"OzairHasan"},"content":"    public boolean isFindCommand(String userInput) {","lastModifiedDate":"2022-02-28"},{"lineNumber":212,"author":{"gitId":"OzairHasan"},"content":"        if (userInput.length() \u003e\u003d Duke.MINIMUM_LENGTH_OF_FIND_STATEMENT) {","lastModifiedDate":"2022-02-28"},{"lineNumber":213,"author":{"gitId":"OzairHasan"},"content":"            // return true if first 4 letters of userInput spell \"mark\", else false","lastModifiedDate":"2022-02-28"},{"lineNumber":214,"author":{"gitId":"OzairHasan"},"content":"            return userInput.substring(0, Duke.MINIMUM_LENGTH_OF_FIND_STATEMENT).equals(\"find\");","lastModifiedDate":"2022-02-28"},{"lineNumber":215,"author":{"gitId":"OzairHasan"},"content":"        }","lastModifiedDate":"2022-02-28"},{"lineNumber":216,"author":{"gitId":"OzairHasan"},"content":"        return false;","lastModifiedDate":"2022-02-28"},{"lineNumber":217,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":218,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":219,"author":{"gitId":"OzairHasan"},"content":"    /**","lastModifiedDate":"2022-03-01"},{"lineNumber":220,"author":{"gitId":"OzairHasan"},"content":"     * This method checks whether \u003ccode\u003euserInput\u003c/code\u003e is a \"mark\" command or not.","lastModifiedDate":"2022-03-01"},{"lineNumber":221,"author":{"gitId":"OzairHasan"},"content":"     *","lastModifiedDate":"2022-03-01"},{"lineNumber":222,"author":{"gitId":"OzairHasan"},"content":"     * @param userInput String containing user input.","lastModifiedDate":"2022-03-01"},{"lineNumber":223,"author":{"gitId":"OzairHasan"},"content":"     * @return \u003ccode\u003etrue\u003c/code\u003e if is a \"mark\" command else \u003ccode\u003efalse\u003c/code\u003e.","lastModifiedDate":"2022-03-01"},{"lineNumber":224,"author":{"gitId":"OzairHasan"},"content":"     */","lastModifiedDate":"2022-03-01"},{"lineNumber":225,"author":{"gitId":"OzairHasan"},"content":"    public boolean isMarkCommand(String userInput) {","lastModifiedDate":"2022-02-28"},{"lineNumber":226,"author":{"gitId":"OzairHasan"},"content":"        if (userInput.length() \u003e\u003d Duke.MINIMUM_LENGTH_OF_MARK_STATEMENT) {","lastModifiedDate":"2022-02-28"},{"lineNumber":227,"author":{"gitId":"OzairHasan"},"content":"            // return true if first 4 letters of userInput spell \"mark\", else false","lastModifiedDate":"2022-02-28"},{"lineNumber":228,"author":{"gitId":"OzairHasan"},"content":"            return userInput.substring(0, Duke.MINIMUM_LENGTH_OF_MARK_STATEMENT).equals(\"mark\");","lastModifiedDate":"2022-02-28"},{"lineNumber":229,"author":{"gitId":"OzairHasan"},"content":"        }","lastModifiedDate":"2022-02-28"},{"lineNumber":230,"author":{"gitId":"OzairHasan"},"content":"        return false;","lastModifiedDate":"2022-02-28"},{"lineNumber":231,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":232,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":233,"author":{"gitId":"OzairHasan"},"content":"    /**","lastModifiedDate":"2022-03-01"},{"lineNumber":234,"author":{"gitId":"OzairHasan"},"content":"     * This method checks whether \u003ccode\u003euserInput\u003c/code\u003e is a \"unmark\" command or not.","lastModifiedDate":"2022-03-01"},{"lineNumber":235,"author":{"gitId":"OzairHasan"},"content":"     *","lastModifiedDate":"2022-03-01"},{"lineNumber":236,"author":{"gitId":"OzairHasan"},"content":"     * @param userInput String containing user input.","lastModifiedDate":"2022-03-01"},{"lineNumber":237,"author":{"gitId":"OzairHasan"},"content":"     * @return \u003ccode\u003etrue\u003c/code\u003e if is an \"unmark\" command else \u003ccode\u003efalse\u003c/code\u003e.","lastModifiedDate":"2022-03-01"},{"lineNumber":238,"author":{"gitId":"OzairHasan"},"content":"     */","lastModifiedDate":"2022-03-01"},{"lineNumber":239,"author":{"gitId":"OzairHasan"},"content":"    public boolean isUnmarkCommand(String userInput) {","lastModifiedDate":"2022-02-28"},{"lineNumber":240,"author":{"gitId":"OzairHasan"},"content":"        if (userInput.length() \u003e\u003d Duke.MINIMUM_LENGTH_OF_UNMARK_STATEMENT) {","lastModifiedDate":"2022-02-28"},{"lineNumber":241,"author":{"gitId":"OzairHasan"},"content":"            // return true if first 6 letters of userInput spell \"unmark\", else false","lastModifiedDate":"2022-02-28"},{"lineNumber":242,"author":{"gitId":"OzairHasan"},"content":"            return userInput.substring(0, Duke.MINIMUM_LENGTH_OF_UNMARK_STATEMENT).equals(\"unmark\");","lastModifiedDate":"2022-02-28"},{"lineNumber":243,"author":{"gitId":"OzairHasan"},"content":"        }","lastModifiedDate":"2022-02-28"},{"lineNumber":244,"author":{"gitId":"OzairHasan"},"content":"        return false;","lastModifiedDate":"2022-02-28"},{"lineNumber":245,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":246,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":247,"author":{"gitId":"OzairHasan"},"content":"    /**","lastModifiedDate":"2022-03-01"},{"lineNumber":248,"author":{"gitId":"OzairHasan"},"content":"     * This method checks whether \u003ccode\u003euserInput\u003c/code\u003e is a \"list command or not.","lastModifiedDate":"2022-03-01"},{"lineNumber":249,"author":{"gitId":"OzairHasan"},"content":"     *","lastModifiedDate":"2022-03-01"},{"lineNumber":250,"author":{"gitId":"OzairHasan"},"content":"     * @param userInput String containing user input.","lastModifiedDate":"2022-03-01"},{"lineNumber":251,"author":{"gitId":"OzairHasan"},"content":"     * @return \u003ccode\u003etrue\u003c/code\u003e if is a \"list\" command else \u003ccode\u003efalse\u003c/code\u003e.","lastModifiedDate":"2022-03-01"},{"lineNumber":252,"author":{"gitId":"OzairHasan"},"content":"     */","lastModifiedDate":"2022-03-01"},{"lineNumber":253,"author":{"gitId":"OzairHasan"},"content":"    public boolean isListCommand(String userInput) {","lastModifiedDate":"2022-02-28"},{"lineNumber":254,"author":{"gitId":"OzairHasan"},"content":"        return userInput.equals(\"list\");","lastModifiedDate":"2022-02-28"},{"lineNumber":255,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":256,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":257,"author":{"gitId":"OzairHasan"},"content":"    /**","lastModifiedDate":"2022-03-01"},{"lineNumber":258,"author":{"gitId":"OzairHasan"},"content":"     * This method checks whether \u003ccode\u003euserInput\u003c/code\u003e is a \"delete\" command or not.","lastModifiedDate":"2022-03-01"},{"lineNumber":259,"author":{"gitId":"OzairHasan"},"content":"     *","lastModifiedDate":"2022-03-01"},{"lineNumber":260,"author":{"gitId":"OzairHasan"},"content":"     * @param userInput String containing user input.","lastModifiedDate":"2022-03-01"},{"lineNumber":261,"author":{"gitId":"OzairHasan"},"content":"     * @return \u003ccode\u003etrue\u003c/code\u003e if is a \"delete\" command else \u003ccode\u003efalse\u003c/code\u003e.","lastModifiedDate":"2022-03-01"},{"lineNumber":262,"author":{"gitId":"OzairHasan"},"content":"     */","lastModifiedDate":"2022-03-01"},{"lineNumber":263,"author":{"gitId":"OzairHasan"},"content":"    public boolean isDeleteCommand(String userInput) {","lastModifiedDate":"2022-02-28"},{"lineNumber":264,"author":{"gitId":"OzairHasan"},"content":"        // return true if command is list, else false","lastModifiedDate":"2022-02-28"},{"lineNumber":265,"author":{"gitId":"OzairHasan"},"content":"        if (userInput.length() \u003e\u003d Duke.MINIMUM_LENGTH_OF_DELETE_STATEMENT) {","lastModifiedDate":"2022-02-28"},{"lineNumber":266,"author":{"gitId":"OzairHasan"},"content":"            return userInput.substring(0, Duke.MINIMUM_LENGTH_OF_DELETE_STATEMENT).equals(\"delete\");","lastModifiedDate":"2022-02-28"},{"lineNumber":267,"author":{"gitId":"OzairHasan"},"content":"        }","lastModifiedDate":"2022-02-28"},{"lineNumber":268,"author":{"gitId":"OzairHasan"},"content":"        return false;","lastModifiedDate":"2022-02-28"},{"lineNumber":269,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":270,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":271,"author":{"gitId":"OzairHasan"},"content":"    /**","lastModifiedDate":"2022-03-01"},{"lineNumber":272,"author":{"gitId":"OzairHasan"},"content":"     * This method checks whether \u003ccode\u003euserInput\u003c/code\u003e is a \"bye\" command or not.","lastModifiedDate":"2022-03-01"},{"lineNumber":273,"author":{"gitId":"OzairHasan"},"content":"     *","lastModifiedDate":"2022-03-01"},{"lineNumber":274,"author":{"gitId":"OzairHasan"},"content":"     * @param userInput String containing user input.","lastModifiedDate":"2022-03-01"},{"lineNumber":275,"author":{"gitId":"OzairHasan"},"content":"     * @return \u003ccode\u003etrue\u003c/code\u003e if is a \"bye\" command else \u003ccode\u003efalse\u003c/code\u003e.","lastModifiedDate":"2022-03-01"},{"lineNumber":276,"author":{"gitId":"OzairHasan"},"content":"     */","lastModifiedDate":"2022-03-01"},{"lineNumber":277,"author":{"gitId":"OzairHasan"},"content":"    public boolean isByeCommand(String userInput) {","lastModifiedDate":"2022-02-28"},{"lineNumber":278,"author":{"gitId":"OzairHasan"},"content":"        return userInput.equals(\"bye\");","lastModifiedDate":"2022-02-28"},{"lineNumber":279,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":280,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":281,"author":{"gitId":"OzairHasan"},"content":"    /**","lastModifiedDate":"2022-03-01"},{"lineNumber":282,"author":{"gitId":"OzairHasan"},"content":"     * This method returns task number else -1 if any errors are encountered.","lastModifiedDate":"2022-03-01"},{"lineNumber":283,"author":{"gitId":"OzairHasan"},"content":"     *","lastModifiedDate":"2022-03-01"},{"lineNumber":284,"author":{"gitId":"OzairHasan"},"content":"     * @param taskList ArrayList containing tasks.","lastModifiedDate":"2022-03-01"},{"lineNumber":285,"author":{"gitId":"OzairHasan"},"content":"     * @param userInput String containing user input.","lastModifiedDate":"2022-03-01"},{"lineNumber":286,"author":{"gitId":"OzairHasan"},"content":"     * @return Task number extracted from \u003ccode\u003euserInput\u003c/code\u003e.","lastModifiedDate":"2022-03-01"},{"lineNumber":287,"author":{"gitId":"OzairHasan"},"content":"     */","lastModifiedDate":"2022-03-01"},{"lineNumber":288,"author":{"gitId":"OzairHasan"},"content":"    public int getTaskNumber(TaskList taskList, String userInput) {","lastModifiedDate":"2022-02-28"},{"lineNumber":289,"author":{"gitId":"OzairHasan"},"content":"        if (taskList.getTaskCount() \u003d\u003d 0) {","lastModifiedDate":"2022-02-28"},{"lineNumber":290,"author":{"gitId":"OzairHasan"},"content":"            return Duke.INVALID_TASKNUMBER;","lastModifiedDate":"2022-02-28"},{"lineNumber":291,"author":{"gitId":"OzairHasan"},"content":"        }","lastModifiedDate":"2022-02-28"},{"lineNumber":292,"author":{"gitId":"OzairHasan"},"content":"        String[] splitInput \u003d userInput.split(\" \");","lastModifiedDate":"2022-02-28"},{"lineNumber":293,"author":{"gitId":"OzairHasan"},"content":"        if (splitInput.length \u003c\u003d 1) {","lastModifiedDate":"2022-02-28"},{"lineNumber":294,"author":{"gitId":"OzairHasan"},"content":"            return Duke.INVALID_TASKNUMBER;","lastModifiedDate":"2022-02-28"},{"lineNumber":295,"author":{"gitId":"OzairHasan"},"content":"        }","lastModifiedDate":"2022-02-28"},{"lineNumber":296,"author":{"gitId":"OzairHasan"},"content":"        try {","lastModifiedDate":"2022-02-28"},{"lineNumber":297,"author":{"gitId":"OzairHasan"},"content":"            int taskNumber \u003d Integer.parseInt(splitInput[1]);","lastModifiedDate":"2022-02-28"},{"lineNumber":298,"author":{"gitId":"OzairHasan"},"content":"            if (taskNumber\u003e taskList.getTaskCount()||taskNumber\u003c1){","lastModifiedDate":"2022-02-28"},{"lineNumber":299,"author":{"gitId":"OzairHasan"},"content":"                return Duke.INVALID_TASKNUMBER;","lastModifiedDate":"2022-02-28"},{"lineNumber":300,"author":{"gitId":"OzairHasan"},"content":"            }","lastModifiedDate":"2022-02-28"},{"lineNumber":301,"author":{"gitId":"OzairHasan"},"content":"            return taskNumber;","lastModifiedDate":"2022-02-28"},{"lineNumber":302,"author":{"gitId":"OzairHasan"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2022-02-28"},{"lineNumber":303,"author":{"gitId":"OzairHasan"},"content":"            return Duke.INVALID_TASKNUMBER;","lastModifiedDate":"2022-02-28"},{"lineNumber":304,"author":{"gitId":"OzairHasan"},"content":"        }","lastModifiedDate":"2022-02-28"},{"lineNumber":305,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":306,"author":{"gitId":"OzairHasan"},"content":"}","lastModifiedDate":"2022-02-28"}],"authorContributionMap":{"OzairHasan":306}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"OzairHasan"},"content":"package duke;","lastModifiedDate":"2022-02-28"},{"lineNumber":2,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":3,"author":{"gitId":"OzairHasan"},"content":"import duke.task.DynamicTask;","lastModifiedDate":"2022-02-28"},{"lineNumber":4,"author":{"gitId":"OzairHasan"},"content":"import duke.task.Task;","lastModifiedDate":"2022-02-28"},{"lineNumber":5,"author":{"gitId":"OzairHasan"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-02-28"},{"lineNumber":6,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":7,"author":{"gitId":"OzairHasan"},"content":"import java.io.File;","lastModifiedDate":"2022-02-28"},{"lineNumber":8,"author":{"gitId":"OzairHasan"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2022-02-28"},{"lineNumber":9,"author":{"gitId":"OzairHasan"},"content":"import java.io.FileWriter;","lastModifiedDate":"2022-02-28"},{"lineNumber":10,"author":{"gitId":"OzairHasan"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-28"},{"lineNumber":11,"author":{"gitId":"OzairHasan"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-02-28"},{"lineNumber":12,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":13,"author":{"gitId":"OzairHasan"},"content":"/**","lastModifiedDate":"2022-03-01"},{"lineNumber":14,"author":{"gitId":"OzairHasan"},"content":" * This class enables saving and loading functionality of data (specifically \u003ccode\u003eTask\u003c/code\u003e data stored in","lastModifiedDate":"2022-03-01"},{"lineNumber":15,"author":{"gitId":"OzairHasan"},"content":" * \u003ccode\u003etaskList\u003c/code\u003e.","lastModifiedDate":"2022-03-01"},{"lineNumber":16,"author":{"gitId":"OzairHasan"},"content":" */","lastModifiedDate":"2022-03-01"},{"lineNumber":17,"author":{"gitId":"OzairHasan"},"content":"public class Storage {","lastModifiedDate":"2022-02-28"},{"lineNumber":18,"author":{"gitId":"OzairHasan"},"content":"    private Ui ui \u003d new Ui();","lastModifiedDate":"2022-02-28"},{"lineNumber":19,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":20,"author":{"gitId":"OzairHasan"},"content":"    public void createDirectory() {","lastModifiedDate":"2022-02-28"},{"lineNumber":21,"author":{"gitId":"OzairHasan"},"content":"        String directory \u003d \"\\\\data\";","lastModifiedDate":"2022-02-28"},{"lineNumber":22,"author":{"gitId":"OzairHasan"},"content":"        String directoryPath \u003d Duke.PROJECT_PATH + directory;","lastModifiedDate":"2022-02-28"},{"lineNumber":23,"author":{"gitId":"OzairHasan"},"content":"        File dir \u003d new File(directoryPath);","lastModifiedDate":"2022-02-28"},{"lineNumber":24,"author":{"gitId":"OzairHasan"},"content":"        boolean isMade \u003d dir.mkdir();","lastModifiedDate":"2022-02-28"},{"lineNumber":25,"author":{"gitId":"OzairHasan"},"content":"        if (!isMade) {","lastModifiedDate":"2022-02-28"},{"lineNumber":26,"author":{"gitId":"OzairHasan"},"content":"            ui.printMkDirError();","lastModifiedDate":"2022-02-28"},{"lineNumber":27,"author":{"gitId":"OzairHasan"},"content":"        }","lastModifiedDate":"2022-02-28"},{"lineNumber":28,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":29,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":30,"author":{"gitId":"OzairHasan"},"content":"    /**","lastModifiedDate":"2022-03-01"},{"lineNumber":31,"author":{"gitId":"OzairHasan"},"content":"     * This method creates a file at path specified in \u003ccode\u003eDuke.DATAFILE_RELATIVE_PATH\u003c/code\u003e. A directory is","lastModifiedDate":"2022-03-01"},{"lineNumber":32,"author":{"gitId":"OzairHasan"},"content":"     * created first if it doesn\u0027t exist.","lastModifiedDate":"2022-03-01"},{"lineNumber":33,"author":{"gitId":"OzairHasan"},"content":"     *","lastModifiedDate":"2022-03-01"},{"lineNumber":34,"author":{"gitId":"OzairHasan"},"content":"     * @return Nothing.","lastModifiedDate":"2022-03-01"},{"lineNumber":35,"author":{"gitId":"OzairHasan"},"content":"     * @see IOException","lastModifiedDate":"2022-03-01"},{"lineNumber":36,"author":{"gitId":"OzairHasan"},"content":"     * @see File","lastModifiedDate":"2022-03-01"},{"lineNumber":37,"author":{"gitId":"OzairHasan"},"content":"     */","lastModifiedDate":"2022-03-01"},{"lineNumber":38,"author":{"gitId":"OzairHasan"},"content":"    public void createFile() {","lastModifiedDate":"2022-02-28"},{"lineNumber":39,"author":{"gitId":"OzairHasan"},"content":"        File dir \u003d new File(\"data\");","lastModifiedDate":"2022-02-28"},{"lineNumber":40,"author":{"gitId":"OzairHasan"},"content":"        // attempt to create directory if it does not exist.","lastModifiedDate":"2022-02-28"},{"lineNumber":41,"author":{"gitId":"OzairHasan"},"content":"        while (!dir.exists()) {","lastModifiedDate":"2022-02-28"},{"lineNumber":42,"author":{"gitId":"OzairHasan"},"content":"            createDirectory();","lastModifiedDate":"2022-02-28"},{"lineNumber":43,"author":{"gitId":"OzairHasan"},"content":"        }","lastModifiedDate":"2022-02-28"},{"lineNumber":44,"author":{"gitId":"OzairHasan"},"content":"        File f \u003d new File(Duke.PROJECT_PATH + \"\\\\\" + Duke.DATAFILE_RELATIVE_PATH);","lastModifiedDate":"2022-02-28"},{"lineNumber":45,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":46,"author":{"gitId":"OzairHasan"},"content":"        try {","lastModifiedDate":"2022-02-28"},{"lineNumber":47,"author":{"gitId":"OzairHasan"},"content":"            f.createNewFile();","lastModifiedDate":"2022-02-28"},{"lineNumber":48,"author":{"gitId":"OzairHasan"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-28"},{"lineNumber":49,"author":{"gitId":"OzairHasan"},"content":"            ui.printMkFileError();","lastModifiedDate":"2022-02-28"},{"lineNumber":50,"author":{"gitId":"OzairHasan"},"content":"        }","lastModifiedDate":"2022-02-28"},{"lineNumber":51,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":52,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":53,"author":{"gitId":"OzairHasan"},"content":"    /**","lastModifiedDate":"2022-03-01"},{"lineNumber":54,"author":{"gitId":"OzairHasan"},"content":"     * This method returns string encoding of \u003ccode\u003eTask\u003c/code\u003e object at specified \u003ccode\u003elistIndex\u003c/code\u003e in","lastModifiedDate":"2022-03-01"},{"lineNumber":55,"author":{"gitId":"OzairHasan"},"content":"     * \u003ccode\u003etaskList\u003c/code\u003e.","lastModifiedDate":"2022-03-01"},{"lineNumber":56,"author":{"gitId":"OzairHasan"},"content":"     *","lastModifiedDate":"2022-03-01"},{"lineNumber":57,"author":{"gitId":"OzairHasan"},"content":"     * @param taskList ArrayList containing tasks.","lastModifiedDate":"2022-03-01"},{"lineNumber":58,"author":{"gitId":"OzairHasan"},"content":"     * @param listIndex Integer depicting index of interest in \u003ccode\u003e\u003ctaskList\u003c/code\u003e.","lastModifiedDate":"2022-03-01"},{"lineNumber":59,"author":{"gitId":"OzairHasan"},"content":"     * @return string encoding of a \u003ccode\u003eTask\u003c/code\u003e object at specified index in \u003ccode\u003etaskList\u003c/code\u003e.","lastModifiedDate":"2022-03-01"},{"lineNumber":60,"author":{"gitId":"OzairHasan"},"content":"     */","lastModifiedDate":"2022-03-01"},{"lineNumber":61,"author":{"gitId":"OzairHasan"},"content":"    public String getTaskInFileFormat(TaskList taskList, int listIndex) {","lastModifiedDate":"2022-02-28"},{"lineNumber":62,"author":{"gitId":"OzairHasan"},"content":"        Task task \u003d taskList.get(listIndex);","lastModifiedDate":"2022-02-28"},{"lineNumber":63,"author":{"gitId":"OzairHasan"},"content":"        if (task.getTaskTypeSymbol() \u003d\u003d \"T\") {","lastModifiedDate":"2022-02-28"},{"lineNumber":64,"author":{"gitId":"OzairHasan"},"content":"            return task.getTaskTypeSymbol() + \"/\" + task.isDone() + \"/\" + task.getDescription();","lastModifiedDate":"2022-02-28"},{"lineNumber":65,"author":{"gitId":"OzairHasan"},"content":"        }","lastModifiedDate":"2022-02-28"},{"lineNumber":66,"author":{"gitId":"OzairHasan"},"content":"        DynamicTask dTask \u003d (DynamicTask) task;","lastModifiedDate":"2022-02-28"},{"lineNumber":67,"author":{"gitId":"OzairHasan"},"content":"        return dTask.getTaskTypeSymbol() + \"/\" + dTask.isDone() + \"/\" + dTask.getDescription()","lastModifiedDate":"2022-02-28"},{"lineNumber":68,"author":{"gitId":"OzairHasan"},"content":"                + \"/\" + dTask.getTime();","lastModifiedDate":"2022-02-28"},{"lineNumber":69,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":70,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":71,"author":{"gitId":"OzairHasan"},"content":"    /**","lastModifiedDate":"2022-03-01"},{"lineNumber":72,"author":{"gitId":"OzairHasan"},"content":"     * This method writes the content of \u003ccode\u003etaskList\u003c/code\u003e to file with path specified","lastModifiedDate":"2022-03-01"},{"lineNumber":73,"author":{"gitId":"OzairHasan"},"content":"     * by \u003ccode\u003eDuke.DATAFILE_RELATIVE_PATH\u003c/code\u003e.","lastModifiedDate":"2022-03-01"},{"lineNumber":74,"author":{"gitId":"OzairHasan"},"content":"     *","lastModifiedDate":"2022-03-01"},{"lineNumber":75,"author":{"gitId":"OzairHasan"},"content":"     * @param taskList ArrayList containing tasks.","lastModifiedDate":"2022-03-01"},{"lineNumber":76,"author":{"gitId":"OzairHasan"},"content":"     * @return Nothing.","lastModifiedDate":"2022-03-01"},{"lineNumber":77,"author":{"gitId":"OzairHasan"},"content":"     * @throws IOException","lastModifiedDate":"2022-03-01"},{"lineNumber":78,"author":{"gitId":"OzairHasan"},"content":"     * @see IOException","lastModifiedDate":"2022-03-01"},{"lineNumber":79,"author":{"gitId":"OzairHasan"},"content":"     */","lastModifiedDate":"2022-03-01"},{"lineNumber":80,"author":{"gitId":"OzairHasan"},"content":"    public void writeToFile(TaskList taskList) throws IOException {","lastModifiedDate":"2022-02-28"},{"lineNumber":81,"author":{"gitId":"OzairHasan"},"content":"        FileWriter fWrite \u003d new FileWriter(Duke.DATAFILE_RELATIVE_PATH);","lastModifiedDate":"2022-02-28"},{"lineNumber":82,"author":{"gitId":"OzairHasan"},"content":"        if (taskList.getTaskCount() \u003d\u003d 0) {","lastModifiedDate":"2022-02-28"},{"lineNumber":83,"author":{"gitId":"OzairHasan"},"content":"            fWrite.write(\"\");","lastModifiedDate":"2022-02-28"},{"lineNumber":84,"author":{"gitId":"OzairHasan"},"content":"            fWrite.close();","lastModifiedDate":"2022-02-28"},{"lineNumber":85,"author":{"gitId":"OzairHasan"},"content":"        } else {","lastModifiedDate":"2022-02-28"},{"lineNumber":86,"author":{"gitId":"OzairHasan"},"content":"            fWrite.write(getTaskInFileFormat(taskList,0) + \"\\n\");","lastModifiedDate":"2022-02-28"},{"lineNumber":87,"author":{"gitId":"OzairHasan"},"content":"            fWrite.close();","lastModifiedDate":"2022-02-28"},{"lineNumber":88,"author":{"gitId":"OzairHasan"},"content":"        }","lastModifiedDate":"2022-02-28"},{"lineNumber":89,"author":{"gitId":"OzairHasan"},"content":"        fWrite \u003d new FileWriter(Duke.DATAFILE_RELATIVE_PATH, true);","lastModifiedDate":"2022-02-28"},{"lineNumber":90,"author":{"gitId":"OzairHasan"},"content":"        for (int i \u003d 1; i \u003c taskList.getTaskCount(); i++) {","lastModifiedDate":"2022-02-28"},{"lineNumber":91,"author":{"gitId":"OzairHasan"},"content":"            fWrite.write(getTaskInFileFormat(taskList, i) + \"\\n\");","lastModifiedDate":"2022-02-28"},{"lineNumber":92,"author":{"gitId":"OzairHasan"},"content":"        }","lastModifiedDate":"2022-02-28"},{"lineNumber":93,"author":{"gitId":"OzairHasan"},"content":"        fWrite.close();","lastModifiedDate":"2022-02-28"},{"lineNumber":94,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":95,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":96,"author":{"gitId":"OzairHasan"},"content":"    /**","lastModifiedDate":"2022-03-01"},{"lineNumber":97,"author":{"gitId":"OzairHasan"},"content":"     * This method creates file for saving if it does not already and saved contents of \u003ccode\u003etaskList\u003c/code\u003e","lastModifiedDate":"2022-03-01"},{"lineNumber":98,"author":{"gitId":"OzairHasan"},"content":"     * to this file.","lastModifiedDate":"2022-03-01"},{"lineNumber":99,"author":{"gitId":"OzairHasan"},"content":"     *","lastModifiedDate":"2022-03-01"},{"lineNumber":100,"author":{"gitId":"OzairHasan"},"content":"     * @param taskList ArrayList containing tasks.","lastModifiedDate":"2022-03-01"},{"lineNumber":101,"author":{"gitId":"OzairHasan"},"content":"     * @return Nothing.","lastModifiedDate":"2022-03-01"},{"lineNumber":102,"author":{"gitId":"OzairHasan"},"content":"     */","lastModifiedDate":"2022-03-01"},{"lineNumber":103,"author":{"gitId":"OzairHasan"},"content":"    public void saveData(TaskList taskList) {","lastModifiedDate":"2022-02-28"},{"lineNumber":104,"author":{"gitId":"OzairHasan"},"content":"        File f \u003d new File(Duke.DATAFILE_RELATIVE_PATH);","lastModifiedDate":"2022-02-28"},{"lineNumber":105,"author":{"gitId":"OzairHasan"},"content":"        // attempt to create file if it does not exist.","lastModifiedDate":"2022-02-28"},{"lineNumber":106,"author":{"gitId":"OzairHasan"},"content":"        while (!f.exists()) {","lastModifiedDate":"2022-02-28"},{"lineNumber":107,"author":{"gitId":"OzairHasan"},"content":"            createFile();","lastModifiedDate":"2022-02-28"},{"lineNumber":108,"author":{"gitId":"OzairHasan"},"content":"        }","lastModifiedDate":"2022-02-28"},{"lineNumber":109,"author":{"gitId":"OzairHasan"},"content":"        try {","lastModifiedDate":"2022-02-28"},{"lineNumber":110,"author":{"gitId":"OzairHasan"},"content":"            writeToFile(taskList);","lastModifiedDate":"2022-02-28"},{"lineNumber":111,"author":{"gitId":"OzairHasan"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-28"},{"lineNumber":112,"author":{"gitId":"OzairHasan"},"content":"            ui.printWrFileError();","lastModifiedDate":"2022-02-28"},{"lineNumber":113,"author":{"gitId":"OzairHasan"},"content":"        }","lastModifiedDate":"2022-02-28"},{"lineNumber":114,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":115,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":116,"author":{"gitId":"OzairHasan"},"content":"    /**","lastModifiedDate":"2022-03-01"},{"lineNumber":117,"author":{"gitId":"OzairHasan"},"content":"     * This method parses the saved file and decodes each entry to restore \u003ccode\u003eTask\u003c/code\u003e","lastModifiedDate":"2022-03-01"},{"lineNumber":118,"author":{"gitId":"OzairHasan"},"content":"     * objects into \u003ccode\u003etaskList\u003c/code\u003e.","lastModifiedDate":"2022-03-01"},{"lineNumber":119,"author":{"gitId":"OzairHasan"},"content":"     *","lastModifiedDate":"2022-03-01"},{"lineNumber":120,"author":{"gitId":"OzairHasan"},"content":"     * @param taskList ArrayList containing tasks.","lastModifiedDate":"2022-03-01"},{"lineNumber":121,"author":{"gitId":"OzairHasan"},"content":"     * @return Nothing.","lastModifiedDate":"2022-03-01"},{"lineNumber":122,"author":{"gitId":"OzairHasan"},"content":"     * @throws FileNotFoundException","lastModifiedDate":"2022-03-01"},{"lineNumber":123,"author":{"gitId":"OzairHasan"},"content":"     * @see IOException","lastModifiedDate":"2022-03-01"},{"lineNumber":124,"author":{"gitId":"OzairHasan"},"content":"     */","lastModifiedDate":"2022-03-01"},{"lineNumber":125,"author":{"gitId":"OzairHasan"},"content":"    public void transferDataFromFileToList(TaskList taskList) throws FileNotFoundException {","lastModifiedDate":"2022-02-28"},{"lineNumber":126,"author":{"gitId":"OzairHasan"},"content":"        File f \u003d new File(Duke.DATAFILE_RELATIVE_PATH);","lastModifiedDate":"2022-02-28"},{"lineNumber":127,"author":{"gitId":"OzairHasan"},"content":"        Scanner fileReader \u003d new Scanner(f);","lastModifiedDate":"2022-02-28"},{"lineNumber":128,"author":{"gitId":"OzairHasan"},"content":"        while (fileReader.hasNext()) {","lastModifiedDate":"2022-02-28"},{"lineNumber":129,"author":{"gitId":"OzairHasan"},"content":"            String fileRow \u003d fileReader.nextLine();","lastModifiedDate":"2022-02-28"},{"lineNumber":130,"author":{"gitId":"OzairHasan"},"content":"            String[] taskArguments \u003d fileRow.split(\"/\", 5);","lastModifiedDate":"2022-02-28"},{"lineNumber":131,"author":{"gitId":"OzairHasan"},"content":"            if (taskArguments[0].equals(\"T\")) {","lastModifiedDate":"2022-02-28"},{"lineNumber":132,"author":{"gitId":"OzairHasan"},"content":"                Duke.addTodoToList(taskArguments[2], false);","lastModifiedDate":"2022-02-28"},{"lineNumber":133,"author":{"gitId":"OzairHasan"},"content":"            } else if (taskArguments[0].equals(\"D\")) {","lastModifiedDate":"2022-02-28"},{"lineNumber":134,"author":{"gitId":"OzairHasan"},"content":"                Duke.addDeadlineToList(taskArguments[2], taskArguments[3], false);","lastModifiedDate":"2022-02-28"},{"lineNumber":135,"author":{"gitId":"OzairHasan"},"content":"            } else if (taskArguments[0].equals(\"E\")) {","lastModifiedDate":"2022-02-28"},{"lineNumber":136,"author":{"gitId":"OzairHasan"},"content":"                Duke.addEventToList(taskArguments[2], taskArguments[3], false);","lastModifiedDate":"2022-02-28"},{"lineNumber":137,"author":{"gitId":"OzairHasan"},"content":"            } else {","lastModifiedDate":"2022-02-28"},{"lineNumber":138,"author":{"gitId":"OzairHasan"},"content":"                ui.printCorruptedFileError();","lastModifiedDate":"2022-02-28"},{"lineNumber":139,"author":{"gitId":"OzairHasan"},"content":"                continue;","lastModifiedDate":"2022-02-28"},{"lineNumber":140,"author":{"gitId":"OzairHasan"},"content":"            }","lastModifiedDate":"2022-02-28"},{"lineNumber":141,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":142,"author":{"gitId":"OzairHasan"},"content":"            // if task being loaded is done, mark as done.","lastModifiedDate":"2022-02-28"},{"lineNumber":143,"author":{"gitId":"OzairHasan"},"content":"            if (taskArguments[1].equals(\"true\")) {","lastModifiedDate":"2022-02-28"},{"lineNumber":144,"author":{"gitId":"OzairHasan"},"content":"                taskList.get(taskList.getTaskCount() - 1).markAsDone();","lastModifiedDate":"2022-02-28"},{"lineNumber":145,"author":{"gitId":"OzairHasan"},"content":"            }","lastModifiedDate":"2022-02-28"},{"lineNumber":146,"author":{"gitId":"OzairHasan"},"content":"        }","lastModifiedDate":"2022-02-28"},{"lineNumber":147,"author":{"gitId":"OzairHasan"},"content":"        ui.printNumOfLoadedTasks(taskList);","lastModifiedDate":"2022-02-28"},{"lineNumber":148,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":149,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":150,"author":{"gitId":"OzairHasan"},"content":"    /**","lastModifiedDate":"2022-03-01"},{"lineNumber":151,"author":{"gitId":"OzairHasan"},"content":"     * This method loads data into \u003ccode\u003etaskList\u003c/code\u003eif data file exists, else create file.","lastModifiedDate":"2022-03-01"},{"lineNumber":152,"author":{"gitId":"OzairHasan"},"content":"     * @param taskList ArrayList containing tasks.","lastModifiedDate":"2022-03-01"},{"lineNumber":153,"author":{"gitId":"OzairHasan"},"content":"     * @return Nothing.","lastModifiedDate":"2022-03-01"},{"lineNumber":154,"author":{"gitId":"OzairHasan"},"content":"     */","lastModifiedDate":"2022-03-01"},{"lineNumber":155,"author":{"gitId":"OzairHasan"},"content":"    public void loadData(TaskList taskList) {","lastModifiedDate":"2022-02-28"},{"lineNumber":156,"author":{"gitId":"OzairHasan"},"content":"        File f \u003d new File(Duke.DATAFILE_RELATIVE_PATH);","lastModifiedDate":"2022-02-28"},{"lineNumber":157,"author":{"gitId":"OzairHasan"},"content":"        try {","lastModifiedDate":"2022-02-28"},{"lineNumber":158,"author":{"gitId":"OzairHasan"},"content":"            transferDataFromFileToList(taskList);","lastModifiedDate":"2022-02-28"},{"lineNumber":159,"author":{"gitId":"OzairHasan"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2022-02-28"},{"lineNumber":160,"author":{"gitId":"OzairHasan"},"content":"            // attempt to create file till it is created.","lastModifiedDate":"2022-02-28"},{"lineNumber":161,"author":{"gitId":"OzairHasan"},"content":"            while (!f.exists()) {","lastModifiedDate":"2022-02-28"},{"lineNumber":162,"author":{"gitId":"OzairHasan"},"content":"                createFile();","lastModifiedDate":"2022-02-28"},{"lineNumber":163,"author":{"gitId":"OzairHasan"},"content":"            }","lastModifiedDate":"2022-02-28"},{"lineNumber":164,"author":{"gitId":"OzairHasan"},"content":"        }","lastModifiedDate":"2022-02-28"},{"lineNumber":165,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":166,"author":{"gitId":"OzairHasan"},"content":"}","lastModifiedDate":"2022-02-28"}],"authorContributionMap":{"OzairHasan":166}},{"path":"src/main/java/duke/StringPair.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"OzairHasan"},"content":"package duke;","lastModifiedDate":"2022-02-28"},{"lineNumber":2,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":3,"author":{"gitId":"OzairHasan"},"content":"public class StringPair {","lastModifiedDate":"2022-02-28"},{"lineNumber":4,"author":{"gitId":"OzairHasan"},"content":"    private String first;","lastModifiedDate":"2022-02-28"},{"lineNumber":5,"author":{"gitId":"OzairHasan"},"content":"    private String second;","lastModifiedDate":"2022-02-28"},{"lineNumber":6,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":7,"author":{"gitId":"OzairHasan"},"content":"    public StringPair(String first, String second) {","lastModifiedDate":"2022-02-28"},{"lineNumber":8,"author":{"gitId":"OzairHasan"},"content":"        this.first \u003d first;","lastModifiedDate":"2022-02-28"},{"lineNumber":9,"author":{"gitId":"OzairHasan"},"content":"        this.second \u003d second;","lastModifiedDate":"2022-02-28"},{"lineNumber":10,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":11,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":12,"author":{"gitId":"OzairHasan"},"content":"    public String getFirst() {","lastModifiedDate":"2022-02-28"},{"lineNumber":13,"author":{"gitId":"OzairHasan"},"content":"        return first;","lastModifiedDate":"2022-02-28"},{"lineNumber":14,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":15,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":16,"author":{"gitId":"OzairHasan"},"content":"    public void setFirst(String first) {","lastModifiedDate":"2022-02-28"},{"lineNumber":17,"author":{"gitId":"OzairHasan"},"content":"        this.first \u003d first;","lastModifiedDate":"2022-02-28"},{"lineNumber":18,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":19,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":20,"author":{"gitId":"OzairHasan"},"content":"    public String getSecond() {","lastModifiedDate":"2022-02-28"},{"lineNumber":21,"author":{"gitId":"OzairHasan"},"content":"        return second;","lastModifiedDate":"2022-02-28"},{"lineNumber":22,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":23,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":24,"author":{"gitId":"OzairHasan"},"content":"    public void setSecond(String second) {","lastModifiedDate":"2022-02-28"},{"lineNumber":25,"author":{"gitId":"OzairHasan"},"content":"        this.second \u003d second;","lastModifiedDate":"2022-02-28"},{"lineNumber":26,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":27,"author":{"gitId":"OzairHasan"},"content":"}","lastModifiedDate":"2022-02-28"}],"authorContributionMap":{"OzairHasan":27}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"OzairHasan"},"content":"package duke;","lastModifiedDate":"2022-02-28"},{"lineNumber":2,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":3,"author":{"gitId":"OzairHasan"},"content":"import duke.task.Task;","lastModifiedDate":"2022-02-28"},{"lineNumber":4,"author":{"gitId":"OzairHasan"},"content":"import duke.task.TaskList;","lastModifiedDate":"2022-02-28"},{"lineNumber":5,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":6,"author":{"gitId":"OzairHasan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-28"},{"lineNumber":7,"author":{"gitId":"OzairHasan"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-02-28"},{"lineNumber":8,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":9,"author":{"gitId":"OzairHasan"},"content":"public class Ui {","lastModifiedDate":"2022-02-28"},{"lineNumber":10,"author":{"gitId":"OzairHasan"},"content":"    private Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2022-02-28"},{"lineNumber":11,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":12,"author":{"gitId":"OzairHasan"},"content":"    public Ui() {}","lastModifiedDate":"2022-02-28"},{"lineNumber":13,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":14,"author":{"gitId":"OzairHasan"},"content":"    /**","lastModifiedDate":"2022-03-01"},{"lineNumber":15,"author":{"gitId":"OzairHasan"},"content":"     * This method prints Duke\u0027s greeting message.","lastModifiedDate":"2022-03-01"},{"lineNumber":16,"author":{"gitId":"OzairHasan"},"content":"     *","lastModifiedDate":"2022-03-01"},{"lineNumber":17,"author":{"gitId":"OzairHasan"},"content":"     * @return Nothing.","lastModifiedDate":"2022-03-01"},{"lineNumber":18,"author":{"gitId":"OzairHasan"},"content":"     */","lastModifiedDate":"2022-03-01"},{"lineNumber":19,"author":{"gitId":"OzairHasan"},"content":"    public void greeting() {","lastModifiedDate":"2022-02-28"},{"lineNumber":20,"author":{"gitId":"OzairHasan"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2022-02-28"},{"lineNumber":21,"author":{"gitId":"OzairHasan"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2022-02-28"},{"lineNumber":22,"author":{"gitId":"OzairHasan"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2022-02-28"},{"lineNumber":23,"author":{"gitId":"OzairHasan"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2022-02-28"},{"lineNumber":24,"author":{"gitId":"OzairHasan"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2022-02-28"},{"lineNumber":25,"author":{"gitId":"OzairHasan"},"content":"        System.out.println(\"You are entering the\\n\" + logo + \"\\nZone...\\n\");","lastModifiedDate":"2022-02-28"},{"lineNumber":26,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":27,"author":{"gitId":"OzairHasan"},"content":"        displayLine();","lastModifiedDate":"2022-02-28"},{"lineNumber":28,"author":{"gitId":"OzairHasan"},"content":"        System.out.println(\"Hey there! Duke here!\");","lastModifiedDate":"2022-02-28"},{"lineNumber":29,"author":{"gitId":"OzairHasan"},"content":"        System.out.println(\"How can I serve you today?\");","lastModifiedDate":"2022-02-28"},{"lineNumber":30,"author":{"gitId":"OzairHasan"},"content":"        displayLine();","lastModifiedDate":"2022-02-28"},{"lineNumber":31,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":32,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":33,"author":{"gitId":"OzairHasan"},"content":"    /**","lastModifiedDate":"2022-03-01"},{"lineNumber":34,"author":{"gitId":"OzairHasan"},"content":"     * This method prints Duke\u0027s termination message.","lastModifiedDate":"2022-03-01"},{"lineNumber":35,"author":{"gitId":"OzairHasan"},"content":"     *","lastModifiedDate":"2022-03-01"},{"lineNumber":36,"author":{"gitId":"OzairHasan"},"content":"     * @return Nothing.","lastModifiedDate":"2022-03-01"},{"lineNumber":37,"author":{"gitId":"OzairHasan"},"content":"     */","lastModifiedDate":"2022-03-01"},{"lineNumber":38,"author":{"gitId":"OzairHasan"},"content":"    public void goodbye() {","lastModifiedDate":"2022-02-28"},{"lineNumber":39,"author":{"gitId":"OzairHasan"},"content":"        System.out.println(\"Goodbye. See you in the funny papers.\");","lastModifiedDate":"2022-02-28"},{"lineNumber":40,"author":{"gitId":"OzairHasan"},"content":"        displayLine();","lastModifiedDate":"2022-02-28"},{"lineNumber":41,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":42,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":43,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":44,"author":{"gitId":"OzairHasan"},"content":"    public void printKeywordError(){","lastModifiedDate":"2022-02-28"},{"lineNumber":45,"author":{"gitId":"OzairHasan"},"content":"        System.out.println(\"Keyword is missing. Enter valid keyword.\");","lastModifiedDate":"2022-02-28"},{"lineNumber":46,"author":{"gitId":"OzairHasan"},"content":"        displayLine();","lastModifiedDate":"2022-02-28"},{"lineNumber":47,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":48,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":49,"author":{"gitId":"OzairHasan"},"content":"    /**","lastModifiedDate":"2022-03-01"},{"lineNumber":50,"author":{"gitId":"OzairHasan"},"content":"     * This method prints the tasks in \u003ccode\u003etaskList\u003c/code\u003e.","lastModifiedDate":"2022-03-01"},{"lineNumber":51,"author":{"gitId":"OzairHasan"},"content":"     *","lastModifiedDate":"2022-03-01"},{"lineNumber":52,"author":{"gitId":"OzairHasan"},"content":"     * @param taskList ArrayList containing tasks.","lastModifiedDate":"2022-03-01"},{"lineNumber":53,"author":{"gitId":"OzairHasan"},"content":"     * @return Nothing.","lastModifiedDate":"2022-03-01"},{"lineNumber":54,"author":{"gitId":"OzairHasan"},"content":"     */","lastModifiedDate":"2022-03-01"},{"lineNumber":55,"author":{"gitId":"OzairHasan"},"content":"    public void printList(TaskList taskList) {","lastModifiedDate":"2022-02-28"},{"lineNumber":56,"author":{"gitId":"OzairHasan"},"content":"        System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2022-02-28"},{"lineNumber":57,"author":{"gitId":"OzairHasan"},"content":"        for (int i \u003d 0; i \u003c taskList.getTaskCount(); i++) {","lastModifiedDate":"2022-02-28"},{"lineNumber":58,"author":{"gitId":"OzairHasan"},"content":"            System.out.print(String.format(\"%d. \", i + 1));","lastModifiedDate":"2022-02-28"},{"lineNumber":59,"author":{"gitId":"OzairHasan"},"content":"            System.out.println(taskList.get(i));","lastModifiedDate":"2022-02-28"},{"lineNumber":60,"author":{"gitId":"OzairHasan"},"content":"        }","lastModifiedDate":"2022-02-28"},{"lineNumber":61,"author":{"gitId":"OzairHasan"},"content":"        displayLine();","lastModifiedDate":"2022-02-28"},{"lineNumber":62,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":63,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":64,"author":{"gitId":"OzairHasan"},"content":"    public void printSelectiveList(TaskList taskList, String keyword) {","lastModifiedDate":"2022-02-28"},{"lineNumber":65,"author":{"gitId":"OzairHasan"},"content":"        System.out.println(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2022-02-28"},{"lineNumber":66,"author":{"gitId":"OzairHasan"},"content":"        for (int i \u003d 0; i \u003c taskList.getTaskCount(); i++) {","lastModifiedDate":"2022-02-28"},{"lineNumber":67,"author":{"gitId":"OzairHasan"},"content":"            if (taskList.get(i).getDescription().contains(keyword)) {","lastModifiedDate":"2022-02-28"},{"lineNumber":68,"author":{"gitId":"OzairHasan"},"content":"                System.out.print(String.format(\"%d. \", i + 1));","lastModifiedDate":"2022-02-28"},{"lineNumber":69,"author":{"gitId":"OzairHasan"},"content":"                System.out.println(taskList.get(i));","lastModifiedDate":"2022-02-28"},{"lineNumber":70,"author":{"gitId":"OzairHasan"},"content":"            }","lastModifiedDate":"2022-02-28"},{"lineNumber":71,"author":{"gitId":"OzairHasan"},"content":"        }","lastModifiedDate":"2022-02-28"},{"lineNumber":72,"author":{"gitId":"OzairHasan"},"content":"        displayLine();","lastModifiedDate":"2022-02-28"},{"lineNumber":73,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":74,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":75,"author":{"gitId":"OzairHasan"},"content":"    /**","lastModifiedDate":"2022-03-01"},{"lineNumber":76,"author":{"gitId":"OzairHasan"},"content":"     * This method prints a task once it is added to \u003ccode\u003etaskList\u003c/code\u003e.","lastModifiedDate":"2022-03-01"},{"lineNumber":77,"author":{"gitId":"OzairHasan"},"content":"     *","lastModifiedDate":"2022-03-01"},{"lineNumber":78,"author":{"gitId":"OzairHasan"},"content":"     * @param taskList ArrayList containing tasks.","lastModifiedDate":"2022-03-01"},{"lineNumber":79,"author":{"gitId":"OzairHasan"},"content":"     * @return Nothing.","lastModifiedDate":"2022-03-01"},{"lineNumber":80,"author":{"gitId":"OzairHasan"},"content":"     */","lastModifiedDate":"2022-03-01"},{"lineNumber":81,"author":{"gitId":"OzairHasan"},"content":"    public void printAddedTask(TaskList taskList) {","lastModifiedDate":"2022-02-28"},{"lineNumber":82,"author":{"gitId":"OzairHasan"},"content":"        System.out.println(\"Noted. I\u0027ve added:\");","lastModifiedDate":"2022-02-28"},{"lineNumber":83,"author":{"gitId":"OzairHasan"},"content":"        System.out.println(taskList.get(taskList.getTaskCount() - 1));","lastModifiedDate":"2022-02-28"},{"lineNumber":84,"author":{"gitId":"OzairHasan"},"content":"        System.out.println(\"Now you have \" + Integer.toString(taskList.getTaskCount()) + \" tasks in the list.\");","lastModifiedDate":"2022-02-28"},{"lineNumber":85,"author":{"gitId":"OzairHasan"},"content":"        displayLine();","lastModifiedDate":"2022-02-28"},{"lineNumber":86,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":87,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":88,"author":{"gitId":"OzairHasan"},"content":"    /**","lastModifiedDate":"2022-03-01"},{"lineNumber":89,"author":{"gitId":"OzairHasan"},"content":"     * This method prints a task once it is deleted from \u003ccode\u003etaskList\u003c/code\u003e.","lastModifiedDate":"2022-03-01"},{"lineNumber":90,"author":{"gitId":"OzairHasan"},"content":"     *","lastModifiedDate":"2022-03-01"},{"lineNumber":91,"author":{"gitId":"OzairHasan"},"content":"     * @param taskList ArrayList containing tasks.","lastModifiedDate":"2022-03-01"},{"lineNumber":92,"author":{"gitId":"OzairHasan"},"content":"     * @param taskNumber Task number to be deleted.","lastModifiedDate":"2022-03-01"},{"lineNumber":93,"author":{"gitId":"OzairHasan"},"content":"     * @return Nothing.","lastModifiedDate":"2022-03-01"},{"lineNumber":94,"author":{"gitId":"OzairHasan"},"content":"     */","lastModifiedDate":"2022-03-01"},{"lineNumber":95,"author":{"gitId":"OzairHasan"},"content":"    public void printDeletedTask(TaskList taskList, int taskNumber) {","lastModifiedDate":"2022-02-28"},{"lineNumber":96,"author":{"gitId":"OzairHasan"},"content":"        System.out.println(\"Noted. I\u0027ve removed:\");","lastModifiedDate":"2022-02-28"},{"lineNumber":97,"author":{"gitId":"OzairHasan"},"content":"        System.out.println(taskList.get(taskNumber - 1));","lastModifiedDate":"2022-02-28"},{"lineNumber":98,"author":{"gitId":"OzairHasan"},"content":"        System.out.println(\"Now you have \" + Integer.toString(taskList.getTaskCount() - 1) + \" tasks in the list.\");","lastModifiedDate":"2022-02-28"},{"lineNumber":99,"author":{"gitId":"OzairHasan"},"content":"        displayLine();","lastModifiedDate":"2022-02-28"},{"lineNumber":100,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":101,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":102,"author":{"gitId":"OzairHasan"},"content":"    /**","lastModifiedDate":"2022-03-01"},{"lineNumber":103,"author":{"gitId":"OzairHasan"},"content":"     * This method prints an error message when an invalid Todo command is entered by user.","lastModifiedDate":"2022-03-01"},{"lineNumber":104,"author":{"gitId":"OzairHasan"},"content":"     *","lastModifiedDate":"2022-03-01"},{"lineNumber":105,"author":{"gitId":"OzairHasan"},"content":"     * @return Nothing.","lastModifiedDate":"2022-03-01"},{"lineNumber":106,"author":{"gitId":"OzairHasan"},"content":"     */","lastModifiedDate":"2022-03-01"},{"lineNumber":107,"author":{"gitId":"OzairHasan"},"content":"    public void printInvalidTodo() {","lastModifiedDate":"2022-02-28"},{"lineNumber":108,"author":{"gitId":"OzairHasan"},"content":"        System.out.println(\"OOPS! The description for todo cannot be empty.\");","lastModifiedDate":"2022-02-28"},{"lineNumber":109,"author":{"gitId":"OzairHasan"},"content":"        displayLine();","lastModifiedDate":"2022-02-28"},{"lineNumber":110,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":111,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":112,"author":{"gitId":"OzairHasan"},"content":"    /**","lastModifiedDate":"2022-03-01"},{"lineNumber":113,"author":{"gitId":"OzairHasan"},"content":"     * This method prints an error message when an invalid Deadline command is entered by user.","lastModifiedDate":"2022-03-01"},{"lineNumber":114,"author":{"gitId":"OzairHasan"},"content":"     *","lastModifiedDate":"2022-03-01"},{"lineNumber":115,"author":{"gitId":"OzairHasan"},"content":"     * @return Nothing.","lastModifiedDate":"2022-03-01"},{"lineNumber":116,"author":{"gitId":"OzairHasan"},"content":"     */","lastModifiedDate":"2022-03-01"},{"lineNumber":117,"author":{"gitId":"OzairHasan"},"content":"    public void printInvalidDeadline() {","lastModifiedDate":"2022-02-28"},{"lineNumber":118,"author":{"gitId":"OzairHasan"},"content":"        System.out.println(\"OOPS! Either the description or due date or both are empty for this deadline. Please try again.\");","lastModifiedDate":"2022-02-28"},{"lineNumber":119,"author":{"gitId":"OzairHasan"},"content":"        displayLine();","lastModifiedDate":"2022-02-28"},{"lineNumber":120,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":121,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":122,"author":{"gitId":"OzairHasan"},"content":"    /**","lastModifiedDate":"2022-03-01"},{"lineNumber":123,"author":{"gitId":"OzairHasan"},"content":"     * This method prints an error message when an invalid Event command is entered by user.","lastModifiedDate":"2022-03-01"},{"lineNumber":124,"author":{"gitId":"OzairHasan"},"content":"     *","lastModifiedDate":"2022-03-01"},{"lineNumber":125,"author":{"gitId":"OzairHasan"},"content":"     * @return Nothing.","lastModifiedDate":"2022-03-01"},{"lineNumber":126,"author":{"gitId":"OzairHasan"},"content":"     */","lastModifiedDate":"2022-03-01"},{"lineNumber":127,"author":{"gitId":"OzairHasan"},"content":"    public void printInvalidEvent() {","lastModifiedDate":"2022-02-28"},{"lineNumber":128,"author":{"gitId":"OzairHasan"},"content":"        System.out.println(\"OOPS! Either the description or event time or both are empty for this event. Please try again.\");","lastModifiedDate":"2022-02-28"},{"lineNumber":129,"author":{"gitId":"OzairHasan"},"content":"        displayLine();","lastModifiedDate":"2022-02-28"},{"lineNumber":130,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":131,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":132,"author":{"gitId":"OzairHasan"},"content":"    /**","lastModifiedDate":"2022-03-01"},{"lineNumber":133,"author":{"gitId":"OzairHasan"},"content":"     * This method prints an error message when an invalid command is entered by user.","lastModifiedDate":"2022-03-01"},{"lineNumber":134,"author":{"gitId":"OzairHasan"},"content":"     *","lastModifiedDate":"2022-03-01"},{"lineNumber":135,"author":{"gitId":"OzairHasan"},"content":"     * @return Nothing.","lastModifiedDate":"2022-03-01"},{"lineNumber":136,"author":{"gitId":"OzairHasan"},"content":"     */","lastModifiedDate":"2022-03-01"},{"lineNumber":137,"author":{"gitId":"OzairHasan"},"content":"    public void printInvalidCommand() {","lastModifiedDate":"2022-02-28"},{"lineNumber":138,"author":{"gitId":"OzairHasan"},"content":"        System.out.println(\"OOPS! I\u0027m sorry but I don\u0027t know what you mean :(\");","lastModifiedDate":"2022-02-28"},{"lineNumber":139,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":140,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":141,"author":{"gitId":"OzairHasan"},"content":"    /**","lastModifiedDate":"2022-03-01"},{"lineNumber":142,"author":{"gitId":"OzairHasan"},"content":"     * This method prints a task once it is in \u003ccode\u003etaskList\u003c/code\u003e once it is marked as done.","lastModifiedDate":"2022-03-01"},{"lineNumber":143,"author":{"gitId":"OzairHasan"},"content":"     *","lastModifiedDate":"2022-03-01"},{"lineNumber":144,"author":{"gitId":"OzairHasan"},"content":"     * @param taskList ArrayList containing tasks.","lastModifiedDate":"2022-03-01"},{"lineNumber":145,"author":{"gitId":"OzairHasan"},"content":"     * @param taskNumber Task number to be deleted.","lastModifiedDate":"2022-03-01"},{"lineNumber":146,"author":{"gitId":"OzairHasan"},"content":"     * @return Nothing.","lastModifiedDate":"2022-03-01"},{"lineNumber":147,"author":{"gitId":"OzairHasan"},"content":"     */","lastModifiedDate":"2022-03-01"},{"lineNumber":148,"author":{"gitId":"OzairHasan"},"content":"    public void printMarkTaskAsDone(TaskList taskList, int taskNumber) {","lastModifiedDate":"2022-02-28"},{"lineNumber":149,"author":{"gitId":"OzairHasan"},"content":"        System.out.println(\"Great Job! I\u0027ve marked the following task as done:\");","lastModifiedDate":"2022-02-28"},{"lineNumber":150,"author":{"gitId":"OzairHasan"},"content":"        // display updated task entry in list.","lastModifiedDate":"2022-02-28"},{"lineNumber":151,"author":{"gitId":"OzairHasan"},"content":"        System.out.println(taskList.get(taskNumber - 1));","lastModifiedDate":"2022-02-28"},{"lineNumber":152,"author":{"gitId":"OzairHasan"},"content":"        displayLine();","lastModifiedDate":"2022-02-28"},{"lineNumber":153,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":154,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":155,"author":{"gitId":"OzairHasan"},"content":"    /**","lastModifiedDate":"2022-03-01"},{"lineNumber":156,"author":{"gitId":"OzairHasan"},"content":"     * This method prints an error message when an invalid task number is entered by user.","lastModifiedDate":"2022-03-01"},{"lineNumber":157,"author":{"gitId":"OzairHasan"},"content":"     *","lastModifiedDate":"2022-03-01"},{"lineNumber":158,"author":{"gitId":"OzairHasan"},"content":"     * @return Nothing.","lastModifiedDate":"2022-03-01"},{"lineNumber":159,"author":{"gitId":"OzairHasan"},"content":"     */","lastModifiedDate":"2022-03-01"},{"lineNumber":160,"author":{"gitId":"OzairHasan"},"content":"    public void printInvalidTaskNumber() {","lastModifiedDate":"2022-02-28"},{"lineNumber":161,"author":{"gitId":"OzairHasan"},"content":"        System.out.println(\"Please provide a valid task number\");","lastModifiedDate":"2022-02-28"},{"lineNumber":162,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":163,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":164,"author":{"gitId":"OzairHasan"},"content":"    /**","lastModifiedDate":"2022-03-01"},{"lineNumber":165,"author":{"gitId":"OzairHasan"},"content":"     * This method prints a task once it is in \u003ccode\u003etaskList\u003c/code\u003e once it is marked as not yet done.","lastModifiedDate":"2022-03-01"},{"lineNumber":166,"author":{"gitId":"OzairHasan"},"content":"     *","lastModifiedDate":"2022-03-01"},{"lineNumber":167,"author":{"gitId":"OzairHasan"},"content":"     * @param taskList ArrayList containing tasks.","lastModifiedDate":"2022-03-01"},{"lineNumber":168,"author":{"gitId":"OzairHasan"},"content":"     * @param taskNumber Task number to be deleted.","lastModifiedDate":"2022-03-01"},{"lineNumber":169,"author":{"gitId":"OzairHasan"},"content":"     * @return Nothing.","lastModifiedDate":"2022-03-01"},{"lineNumber":170,"author":{"gitId":"OzairHasan"},"content":"     */","lastModifiedDate":"2022-03-01"},{"lineNumber":171,"author":{"gitId":"OzairHasan"},"content":"    public void printUnmarkTaskAsDone(TaskList taskList, int taskNumber) {","lastModifiedDate":"2022-02-28"},{"lineNumber":172,"author":{"gitId":"OzairHasan"},"content":"        System.out.println(\"Ok, I\u0027ve marked the following task as yet to be done:\");","lastModifiedDate":"2022-02-28"},{"lineNumber":173,"author":{"gitId":"OzairHasan"},"content":"        // display updated task entry in list.","lastModifiedDate":"2022-02-28"},{"lineNumber":174,"author":{"gitId":"OzairHasan"},"content":"        System.out.println(taskList.get(taskNumber - 1));","lastModifiedDate":"2022-02-28"},{"lineNumber":175,"author":{"gitId":"OzairHasan"},"content":"        displayLine();","lastModifiedDate":"2022-02-28"},{"lineNumber":176,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":177,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":178,"author":{"gitId":"OzairHasan"},"content":"    public void printMkDirError() {","lastModifiedDate":"2022-02-28"},{"lineNumber":179,"author":{"gitId":"OzairHasan"},"content":"        System.out.println(\"Error making directory \\\"data\\\".\");","lastModifiedDate":"2022-02-28"},{"lineNumber":180,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":181,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":182,"author":{"gitId":"OzairHasan"},"content":"    public void printMkFileError() {","lastModifiedDate":"2022-02-28"},{"lineNumber":183,"author":{"gitId":"OzairHasan"},"content":"        System.out.println(\"An error occurred making file.\");","lastModifiedDate":"2022-02-28"},{"lineNumber":184,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":185,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":186,"author":{"gitId":"OzairHasan"},"content":"    public void printWrFileError() {","lastModifiedDate":"2022-02-28"},{"lineNumber":187,"author":{"gitId":"OzairHasan"},"content":"        System.out.println(\"Something went wrong writing to file.\");","lastModifiedDate":"2022-02-28"},{"lineNumber":188,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":189,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":190,"author":{"gitId":"OzairHasan"},"content":"    public void printNumOfLoadedTasks(TaskList taskList) {","lastModifiedDate":"2022-02-28"},{"lineNumber":191,"author":{"gitId":"OzairHasan"},"content":"        System.out.println(\"Now you have \" + Integer.toString(taskList.getTaskCount()) + \" tasks in the list.\");","lastModifiedDate":"2022-02-28"},{"lineNumber":192,"author":{"gitId":"OzairHasan"},"content":"        displayLine();","lastModifiedDate":"2022-02-28"},{"lineNumber":193,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":194,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":195,"author":{"gitId":"OzairHasan"},"content":"    public void printCorruptedFileError() {","lastModifiedDate":"2022-02-28"},{"lineNumber":196,"author":{"gitId":"OzairHasan"},"content":"        System.out.println(\"Corrupted entry detected in file.\");","lastModifiedDate":"2022-02-28"},{"lineNumber":197,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":198,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":199,"author":{"gitId":"OzairHasan"},"content":"    /**","lastModifiedDate":"2022-03-01"},{"lineNumber":200,"author":{"gitId":"OzairHasan"},"content":"     * This method displays a horizontal line.","lastModifiedDate":"2022-03-01"},{"lineNumber":201,"author":{"gitId":"OzairHasan"},"content":"     *","lastModifiedDate":"2022-03-01"},{"lineNumber":202,"author":{"gitId":"OzairHasan"},"content":"     * @return Nothing.","lastModifiedDate":"2022-03-01"},{"lineNumber":203,"author":{"gitId":"OzairHasan"},"content":"     */","lastModifiedDate":"2022-03-01"},{"lineNumber":204,"author":{"gitId":"OzairHasan"},"content":"    public void displayLine() {","lastModifiedDate":"2022-02-28"},{"lineNumber":205,"author":{"gitId":"OzairHasan"},"content":"        System.out.println(\"____________________________________________________________\");","lastModifiedDate":"2022-02-28"},{"lineNumber":206,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":207,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":208,"author":{"gitId":"OzairHasan"},"content":"    /**","lastModifiedDate":"2022-03-01"},{"lineNumber":209,"author":{"gitId":"OzairHasan"},"content":"     * This method gets user input from command line.","lastModifiedDate":"2022-03-01"},{"lineNumber":210,"author":{"gitId":"OzairHasan"},"content":"     *","lastModifiedDate":"2022-03-01"},{"lineNumber":211,"author":{"gitId":"OzairHasan"},"content":"     * @return String containing user input.","lastModifiedDate":"2022-03-01"},{"lineNumber":212,"author":{"gitId":"OzairHasan"},"content":"     */","lastModifiedDate":"2022-03-01"},{"lineNumber":213,"author":{"gitId":"OzairHasan"},"content":"    public String getUserInput() {","lastModifiedDate":"2022-02-28"},{"lineNumber":214,"author":{"gitId":"OzairHasan"},"content":"        String userInput \u003d in.nextLine();","lastModifiedDate":"2022-02-28"},{"lineNumber":215,"author":{"gitId":"OzairHasan"},"content":"        displayLine();","lastModifiedDate":"2022-02-28"},{"lineNumber":216,"author":{"gitId":"OzairHasan"},"content":"        return userInput;","lastModifiedDate":"2022-02-28"},{"lineNumber":217,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":218,"author":{"gitId":"OzairHasan"},"content":"}","lastModifiedDate":"2022-02-28"}],"authorContributionMap":{"OzairHasan":218}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"OzairHasan"},"content":"package duke.task;","lastModifiedDate":"2022-02-09"},{"lineNumber":2,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":3,"author":{"gitId":"OzairHasan"},"content":"/**","lastModifiedDate":"2022-03-01"},{"lineNumber":4,"author":{"gitId":"OzairHasan"},"content":" * Represents a task of type \"Deadline\". A \u003ccode\u003eDeadline\u003c/code\u003e object corresponds to","lastModifiedDate":"2022-03-01"},{"lineNumber":5,"author":{"gitId":"OzairHasan"},"content":" * a deadline represented by a deadline description and the due date of the deadline.","lastModifiedDate":"2022-03-01"},{"lineNumber":6,"author":{"gitId":"OzairHasan"},"content":" * e.g., \u003ccode\u003ehomework,7pm Monday\u003c/code\u003e","lastModifiedDate":"2022-03-01"},{"lineNumber":7,"author":{"gitId":"OzairHasan"},"content":" */","lastModifiedDate":"2022-03-01"},{"lineNumber":8,"author":{"gitId":"OzairHasan"},"content":"public class Deadline extends DynamicTask {","lastModifiedDate":"2022-02-17"},{"lineNumber":9,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":10,"author":{"gitId":"OzairHasan"},"content":"    public Deadline(String description, String dueDate) {","lastModifiedDate":"2022-02-01"},{"lineNumber":11,"author":{"gitId":"OzairHasan"},"content":"        super(description, \"D\", dueDate);","lastModifiedDate":"2022-02-17"},{"lineNumber":12,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":13,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":14,"author":{"gitId":"OzairHasan"},"content":"    public void setDueDate(String dueDate) {","lastModifiedDate":"2022-02-01"},{"lineNumber":15,"author":{"gitId":"OzairHasan"},"content":"        this.setTime(dueDate);","lastModifiedDate":"2022-02-17"},{"lineNumber":16,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":17,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":18,"author":{"gitId":"OzairHasan"},"content":"    public String getDueDate() {","lastModifiedDate":"2022-02-17"},{"lineNumber":19,"author":{"gitId":"OzairHasan"},"content":"        return this.getTime();","lastModifiedDate":"2022-02-17"},{"lineNumber":20,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":21,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":22,"author":{"gitId":"OzairHasan"},"content":"    // overriding method toString in Object class","lastModifiedDate":"2022-02-01"},{"lineNumber":23,"author":{"gitId":"OzairHasan"},"content":"    public String toString() {","lastModifiedDate":"2022-02-01"},{"lineNumber":24,"author":{"gitId":"OzairHasan"},"content":"        return super.toString() + \" (by: \" + this.getTime() + \")\";","lastModifiedDate":"2022-02-17"},{"lineNumber":25,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":26,"author":{"gitId":"OzairHasan"},"content":"}","lastModifiedDate":"2022-02-01"}],"authorContributionMap":{"OzairHasan":26}},{"path":"src/main/java/duke/task/DynamicTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"OzairHasan"},"content":"package duke.task;","lastModifiedDate":"2022-02-17"},{"lineNumber":2,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":3,"author":{"gitId":"OzairHasan"},"content":"public abstract class DynamicTask extends Task {","lastModifiedDate":"2022-02-17"},{"lineNumber":4,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":5,"author":{"gitId":"OzairHasan"},"content":"    private String time;","lastModifiedDate":"2022-02-17"},{"lineNumber":6,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":7,"author":{"gitId":"OzairHasan"},"content":"    public DynamicTask(String description, String taskTypeSymbol, String time) {","lastModifiedDate":"2022-02-17"},{"lineNumber":8,"author":{"gitId":"OzairHasan"},"content":"        super(description, taskTypeSymbol);","lastModifiedDate":"2022-02-17"},{"lineNumber":9,"author":{"gitId":"OzairHasan"},"content":"        this.time \u003d time;","lastModifiedDate":"2022-02-17"},{"lineNumber":10,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":11,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":12,"author":{"gitId":"OzairHasan"},"content":"    public String getTime() {","lastModifiedDate":"2022-02-17"},{"lineNumber":13,"author":{"gitId":"OzairHasan"},"content":"        return time;","lastModifiedDate":"2022-02-17"},{"lineNumber":14,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":15,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":16,"author":{"gitId":"OzairHasan"},"content":"    public void setTime(String time) {","lastModifiedDate":"2022-02-17"},{"lineNumber":17,"author":{"gitId":"OzairHasan"},"content":"        this.time \u003d time;","lastModifiedDate":"2022-02-17"},{"lineNumber":18,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":19,"author":{"gitId":"OzairHasan"},"content":"}","lastModifiedDate":"2022-02-17"}],"authorContributionMap":{"OzairHasan":19}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"OzairHasan"},"content":"package duke.task;","lastModifiedDate":"2022-02-09"},{"lineNumber":2,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":3,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":4,"author":{"gitId":"OzairHasan"},"content":"/**","lastModifiedDate":"2022-03-01"},{"lineNumber":5,"author":{"gitId":"OzairHasan"},"content":" * Represents a task of type \"Event\". An \u003ccode\u003eEvent\u003c/code\u003e object corresponds to","lastModifiedDate":"2022-03-01"},{"lineNumber":6,"author":{"gitId":"OzairHasan"},"content":" * an event represented by an event description and the event time period.  e.g., \u003ccode\u003emeeting,6pm\u003c/code\u003e","lastModifiedDate":"2022-03-01"},{"lineNumber":7,"author":{"gitId":"OzairHasan"},"content":" */","lastModifiedDate":"2022-03-01"},{"lineNumber":8,"author":{"gitId":"OzairHasan"},"content":"public class Event extends DynamicTask {","lastModifiedDate":"2022-02-17"},{"lineNumber":9,"author":{"gitId":"OzairHasan"},"content":"    public Event(String description, String eventTime) {","lastModifiedDate":"2022-02-01"},{"lineNumber":10,"author":{"gitId":"OzairHasan"},"content":"        super(description, \"E\", eventTime);","lastModifiedDate":"2022-02-17"},{"lineNumber":11,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":12,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":13,"author":{"gitId":"OzairHasan"},"content":"    public void setEventTime(String eventTime) {","lastModifiedDate":"2022-02-01"},{"lineNumber":14,"author":{"gitId":"OzairHasan"},"content":"        this.setTime(eventTime);","lastModifiedDate":"2022-02-17"},{"lineNumber":15,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":16,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":17,"author":{"gitId":"OzairHasan"},"content":"    public String getEventTime() {","lastModifiedDate":"2022-02-17"},{"lineNumber":18,"author":{"gitId":"OzairHasan"},"content":"        return this.getTime();","lastModifiedDate":"2022-02-17"},{"lineNumber":19,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":20,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":21,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":22,"author":{"gitId":"OzairHasan"},"content":"    // overriding method toString in Object class.","lastModifiedDate":"2022-02-01"},{"lineNumber":23,"author":{"gitId":"OzairHasan"},"content":"    public String toString() {","lastModifiedDate":"2022-02-01"},{"lineNumber":24,"author":{"gitId":"OzairHasan"},"content":"        return super.toString() + \" (at: \" + this.getTime() + \")\";","lastModifiedDate":"2022-02-17"},{"lineNumber":25,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":26,"author":{"gitId":"OzairHasan"},"content":"}","lastModifiedDate":"2022-02-01"}],"authorContributionMap":{"OzairHasan":26}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"OzairHasan"},"content":"package duke.task;","lastModifiedDate":"2022-02-09"},{"lineNumber":2,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":3,"author":{"gitId":"OzairHasan"},"content":"/**","lastModifiedDate":"2022-03-01"},{"lineNumber":4,"author":{"gitId":"OzairHasan"},"content":" * Represents a task. Subclasses of \u003ccode\u003eTask\u003c/code\u003e abstract class correspond to","lastModifiedDate":"2022-03-01"},{"lineNumber":5,"author":{"gitId":"OzairHasan"},"content":" * a task represented by at least a description, a boolean indicating whether the task is done and a task symbol.","lastModifiedDate":"2022-03-01"},{"lineNumber":6,"author":{"gitId":"OzairHasan"},"content":" * e.g., \u003ccode\u003emeeting, false, E\u003c/code\u003e","lastModifiedDate":"2022-03-01"},{"lineNumber":7,"author":{"gitId":"OzairHasan"},"content":" */","lastModifiedDate":"2022-03-01"},{"lineNumber":8,"author":{"gitId":"OzairHasan"},"content":"public abstract class Task {","lastModifiedDate":"2022-02-17"},{"lineNumber":9,"author":{"gitId":"OzairHasan"},"content":"    private String description;","lastModifiedDate":"2022-01-27"},{"lineNumber":10,"author":{"gitId":"OzairHasan"},"content":"    private boolean isDone;","lastModifiedDate":"2022-01-27"},{"lineNumber":11,"author":{"gitId":"OzairHasan"},"content":"    private String taskTypeSymbol;","lastModifiedDate":"2022-02-01"},{"lineNumber":12,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":13,"author":{"gitId":"OzairHasan"},"content":"    public Task(String description, String taskTypeSymbol) {","lastModifiedDate":"2022-02-01"},{"lineNumber":14,"author":{"gitId":"OzairHasan"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-01-27"},{"lineNumber":15,"author":{"gitId":"OzairHasan"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-01-27"},{"lineNumber":16,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-01"},{"lineNumber":17,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":18,"author":{"gitId":"OzairHasan"},"content":"        // taskTypeSymbol is either \"E\"(Event), \"D\"(Deadline) or \"T\"(Todo)","lastModifiedDate":"2022-02-17"},{"lineNumber":19,"author":{"gitId":"OzairHasan"},"content":"        this.taskTypeSymbol \u003d taskTypeSymbol;","lastModifiedDate":"2022-02-01"},{"lineNumber":20,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":21,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":22,"author":{"gitId":"OzairHasan"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2022-01-27"},{"lineNumber":23,"author":{"gitId":"OzairHasan"},"content":"        return (isDone ? \"X\" : \" \");","lastModifiedDate":"2022-01-27"},{"lineNumber":24,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":25,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":26,"author":{"gitId":"OzairHasan"},"content":"    public String getDescription() {","lastModifiedDate":"2022-02-17"},{"lineNumber":27,"author":{"gitId":"OzairHasan"},"content":"        return description;","lastModifiedDate":"2022-02-17"},{"lineNumber":28,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":29,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":30,"author":{"gitId":"OzairHasan"},"content":"    public boolean isDone() {","lastModifiedDate":"2022-02-17"},{"lineNumber":31,"author":{"gitId":"OzairHasan"},"content":"        return isDone;","lastModifiedDate":"2022-02-17"},{"lineNumber":32,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":33,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":34,"author":{"gitId":"OzairHasan"},"content":"    public String getTaskTypeSymbol() {","lastModifiedDate":"2022-02-17"},{"lineNumber":35,"author":{"gitId":"OzairHasan"},"content":"        return taskTypeSymbol;","lastModifiedDate":"2022-02-17"},{"lineNumber":36,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":37,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":38,"author":{"gitId":"OzairHasan"},"content":"    public void markAsDone() {","lastModifiedDate":"2022-01-27"},{"lineNumber":39,"author":{"gitId":"OzairHasan"},"content":"        isDone \u003d true;","lastModifiedDate":"2022-01-27"},{"lineNumber":40,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":41,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":42,"author":{"gitId":"OzairHasan"},"content":"    public void unmarkAsDone() {","lastModifiedDate":"2022-01-27"},{"lineNumber":43,"author":{"gitId":"OzairHasan"},"content":"        isDone \u003d false;","lastModifiedDate":"2022-01-27"},{"lineNumber":44,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":45,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-01-27"},{"lineNumber":46,"author":{"gitId":"OzairHasan"},"content":"    // overriding method toString in Object class","lastModifiedDate":"2022-02-01"},{"lineNumber":47,"author":{"gitId":"OzairHasan"},"content":"    public String toString() {","lastModifiedDate":"2022-02-01"},{"lineNumber":48,"author":{"gitId":"OzairHasan"},"content":"        return \"[\" + taskTypeSymbol + \"][\" + getStatusIcon() + \"] \" + description;","lastModifiedDate":"2022-02-01"},{"lineNumber":49,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-01-27"},{"lineNumber":50,"author":{"gitId":"OzairHasan"},"content":"}","lastModifiedDate":"2022-01-27"}],"authorContributionMap":{"OzairHasan":50}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"OzairHasan"},"content":"package duke.task;","lastModifiedDate":"2022-02-28"},{"lineNumber":2,"author":{"gitId":"OzairHasan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-28"},{"lineNumber":3,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":4,"author":{"gitId":"OzairHasan"},"content":"/**","lastModifiedDate":"2022-03-01"},{"lineNumber":5,"author":{"gitId":"OzairHasan"},"content":" * Represents a list which stores objects of type \u003ccode\u003eTask\u003c/code\u003e or its subclasses.","lastModifiedDate":"2022-03-01"},{"lineNumber":6,"author":{"gitId":"OzairHasan"},"content":" * A \u003ccode\u003eTaskList\u003c/code\u003e object corresponds to a","lastModifiedDate":"2022-03-01"},{"lineNumber":7,"author":{"gitId":"OzairHasan"},"content":" * data structure represented by an \u003ccode\u003eArrayList\u003c/code\u003e object that would contain the tasks recorded thus far","lastModifiedDate":"2022-03-01"},{"lineNumber":8,"author":{"gitId":"OzairHasan"},"content":" * and an integer \u003ccode\u003etaskCount\u003c/code\u003e that tracks the number of tasks recorded.","lastModifiedDate":"2022-03-01"},{"lineNumber":9,"author":{"gitId":"OzairHasan"},"content":" * e.g., \u003ccode\u003e{task1, task2, task3},3\u003c/code\u003e","lastModifiedDate":"2022-03-01"},{"lineNumber":10,"author":{"gitId":"OzairHasan"},"content":" */","lastModifiedDate":"2022-03-01"},{"lineNumber":11,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":12,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-03-01"},{"lineNumber":13,"author":{"gitId":"OzairHasan"},"content":"public class TaskList {","lastModifiedDate":"2022-02-28"},{"lineNumber":14,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":15,"author":{"gitId":"OzairHasan"},"content":"    private int taskCount \u003d 0;","lastModifiedDate":"2022-02-28"},{"lineNumber":16,"author":{"gitId":"OzairHasan"},"content":"    private ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003cTask\u003e(0);","lastModifiedDate":"2022-02-28"},{"lineNumber":17,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":18,"author":{"gitId":"OzairHasan"},"content":"    public TaskList() {","lastModifiedDate":"2022-02-28"},{"lineNumber":19,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":20,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":21,"author":{"gitId":"OzairHasan"},"content":"    public int getTaskCount() {","lastModifiedDate":"2022-02-28"},{"lineNumber":22,"author":{"gitId":"OzairHasan"},"content":"        return taskCount;","lastModifiedDate":"2022-02-28"},{"lineNumber":23,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":24,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":25,"author":{"gitId":"OzairHasan"},"content":"    public void setTaskCount(int taskCount) {","lastModifiedDate":"2022-02-28"},{"lineNumber":26,"author":{"gitId":"OzairHasan"},"content":"        this.taskCount\u003dtaskCount;","lastModifiedDate":"2022-02-28"},{"lineNumber":27,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":28,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":29,"author":{"gitId":"OzairHasan"},"content":"    public void add(Task task){","lastModifiedDate":"2022-02-28"},{"lineNumber":30,"author":{"gitId":"OzairHasan"},"content":"        taskList.add(task);","lastModifiedDate":"2022-02-28"},{"lineNumber":31,"author":{"gitId":"OzairHasan"},"content":"        taskCount++;","lastModifiedDate":"2022-02-28"},{"lineNumber":32,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":33,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":34,"author":{"gitId":"OzairHasan"},"content":"    public void remove(int index){","lastModifiedDate":"2022-02-28"},{"lineNumber":35,"author":{"gitId":"OzairHasan"},"content":"        taskList.remove(index);","lastModifiedDate":"2022-02-28"},{"lineNumber":36,"author":{"gitId":"OzairHasan"},"content":"        taskCount--;","lastModifiedDate":"2022-02-28"},{"lineNumber":37,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":38,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":39,"author":{"gitId":"OzairHasan"},"content":"    public Task get(int index){","lastModifiedDate":"2022-02-28"},{"lineNumber":40,"author":{"gitId":"OzairHasan"},"content":"        return taskList.get(index);","lastModifiedDate":"2022-02-28"},{"lineNumber":41,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-28"},{"lineNumber":42,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-28"},{"lineNumber":43,"author":{"gitId":"OzairHasan"},"content":"}","lastModifiedDate":"2022-02-28"}],"authorContributionMap":{"OzairHasan":43}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"OzairHasan"},"content":"package duke.task;","lastModifiedDate":"2022-02-09"},{"lineNumber":2,"author":{"gitId":"OzairHasan"},"content":"","lastModifiedDate":"2022-02-09"},{"lineNumber":3,"author":{"gitId":"OzairHasan"},"content":"/**","lastModifiedDate":"2022-03-01"},{"lineNumber":4,"author":{"gitId":"OzairHasan"},"content":" * Represents a task of type \"Todo\". A \u003ccode\u003eTodo\u003c/code\u003e object corresponds to","lastModifiedDate":"2022-03-01"},{"lineNumber":5,"author":{"gitId":"OzairHasan"},"content":" * a task represented by a description and has no assigned time period to adhere to.  e.g., \u003ccode\u003ehomework\u003c/code\u003e","lastModifiedDate":"2022-03-01"},{"lineNumber":6,"author":{"gitId":"OzairHasan"},"content":" */","lastModifiedDate":"2022-03-01"},{"lineNumber":7,"author":{"gitId":"OzairHasan"},"content":"public class Todo extends Task {","lastModifiedDate":"2022-02-01"},{"lineNumber":8,"author":{"gitId":"OzairHasan"},"content":"    public Todo(String description) {","lastModifiedDate":"2022-02-01"},{"lineNumber":9,"author":{"gitId":"OzairHasan"},"content":"        super(description, \"T\");","lastModifiedDate":"2022-02-01"},{"lineNumber":10,"author":{"gitId":"OzairHasan"},"content":"    }","lastModifiedDate":"2022-02-01"},{"lineNumber":11,"author":{"gitId":"OzairHasan"},"content":"}","lastModifiedDate":"2022-02-01"}],"authorContributionMap":{"OzairHasan":11}}]
