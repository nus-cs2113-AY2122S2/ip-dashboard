[{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"ivanaitzliddat"},"content":"Spooky is a **Personal Assistant Chatbot** that helps a person keep track of various things. ","lastModifiedDate":"2022-02-21"},{"lineNumber":3,"author":{"gitId":"ivanaitzliddat"},"content":"It can be accessed via a **Command Line Interface (CLI)**.","lastModifiedDate":"2022-02-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":5,"author":{"gitId":"ivanaitzliddat"},"content":"---","lastModifiedDate":"2022-02-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":7,"author":{"gitId":"ivanaitzliddat"},"content":"## Starting the program","lastModifiedDate":"2022-02-21"},{"lineNumber":8,"author":{"gitId":"ivanaitzliddat"},"content":"\u003e Follow these steps to download, set-up and run the program.","lastModifiedDate":"2022-02-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":10,"author":{"gitId":"ivanaitzliddat"},"content":"1. Download the JAR file from the releases.","lastModifiedDate":"2022-02-21"},{"lineNumber":11,"author":{"gitId":"ivanaitzliddat"},"content":"2. Place the JAR file in a folder of your choice.","lastModifiedDate":"2022-02-21"},{"lineNumber":12,"author":{"gitId":"ivanaitzliddat"},"content":"   - A text file will be created when you run the jar file to save your tasks for future uses.","lastModifiedDate":"2022-02-21"},{"lineNumber":13,"author":{"gitId":"ivanaitzliddat"},"content":"3. Download jdk 11 or update your current version to Java 11.","lastModifiedDate":"2022-02-21"},{"lineNumber":14,"author":{"gitId":"ivanaitzliddat"},"content":"   - You may wish to download the switchJava.bat file and change the file path to reflect the file path where ","lastModifiedDate":"2022-02-21"},{"lineNumber":15,"author":{"gitId":"ivanaitzliddat"},"content":"   jdk is stored at.","lastModifiedDate":"2022-02-21"},{"lineNumber":16,"author":{"gitId":"ivanaitzliddat"},"content":"   - Open Command Prompt in the folder which you have placed the switchJava.bat file.","lastModifiedDate":"2022-02-21"},{"lineNumber":17,"author":{"gitId":"ivanaitzliddat"},"content":"   - Run the switchJava.bat to make sure that Java 11 is activated by entering the follow command:","lastModifiedDate":"2022-02-21"},{"lineNumber":18,"author":{"gitId":"ivanaitzliddat"},"content":"     \u003cbr /\u003e```switchJava.bat```","lastModifiedDate":"2022-02-21"},{"lineNumber":19,"author":{"gitId":"ivanaitzliddat"},"content":"4. Open Command Prompt in the folder which you have placed the JAR file and enter the following command to ","lastModifiedDate":"2022-02-21"},{"lineNumber":20,"author":{"gitId":"ivanaitzliddat"},"content":"run the jar file:","lastModifiedDate":"2022-02-21"},{"lineNumber":21,"author":{"gitId":"ivanaitzliddat"},"content":"   \u003cbr /\u003e```java -jar spooky.jar```","lastModifiedDate":"2022-02-21"},{"lineNumber":22,"author":{"gitId":"ivanaitzliddat"},"content":"   \u003cbr /\u003e![Welcome](https://github.com/ivanaitzliddat/ip/blob/master/docs/images/welcome.png)","lastModifiedDate":"2022-02-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":24,"author":{"gitId":"ivanaitzliddat"},"content":"---","lastModifiedDate":"2022-02-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2019-07-29"},{"lineNumber":27,"author":{"gitId":"ivanaitzliddat"},"content":"\u003e In order for the features to be used, the format has to be followed strictly, else error will be thrown.","lastModifiedDate":"2022-02-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":29,"author":{"gitId":"ivanaitzliddat"},"content":"### Feature list","lastModifiedDate":"2022-02-21"},{"lineNumber":30,"author":{"gitId":"ivanaitzliddat"},"content":"1. Add a ToDo: `todo`","lastModifiedDate":"2022-02-21"},{"lineNumber":31,"author":{"gitId":"ivanaitzliddat"},"content":"2. Add a Deadline: `deadline`","lastModifiedDate":"2022-02-21"},{"lineNumber":32,"author":{"gitId":"ivanaitzliddat"},"content":"3. Add an Event: `event`","lastModifiedDate":"2022-02-21"},{"lineNumber":33,"author":{"gitId":"ivanaitzliddat"},"content":"4. List the tasks: `list`","lastModifiedDate":"2022-02-21"},{"lineNumber":34,"author":{"gitId":"ivanaitzliddat"},"content":"5. Delete a task: `delete`","lastModifiedDate":"2022-02-21"},{"lineNumber":35,"author":{"gitId":"ivanaitzliddat"},"content":"6. Mark a task as done: `mark`","lastModifiedDate":"2022-02-21"},{"lineNumber":36,"author":{"gitId":"ivanaitzliddat"},"content":"7. Mark a task as NOT done: `unmark`","lastModifiedDate":"2022-02-21"},{"lineNumber":37,"author":{"gitId":"ivanaitzliddat"},"content":"8. Find tasks using keyword: `find`","lastModifiedDate":"2022-02-21"},{"lineNumber":38,"author":{"gitId":"ivanaitzliddat"},"content":"9. Filters tasks using date: `date`","lastModifiedDate":"2022-02-21"},{"lineNumber":39,"author":{"gitId":"ivanaitzliddat"},"content":"10. Exit the program: `bye`","lastModifiedDate":"2022-02-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":41,"author":{"gitId":"ivanaitzliddat"},"content":"---","lastModifiedDate":"2022-02-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":43,"author":{"gitId":"ivanaitzliddat"},"content":"### Feature - Add a ToDo","lastModifiedDate":"2022-02-21"},{"lineNumber":44,"author":{"gitId":"ivanaitzliddat"},"content":"\u003e A ToDo is a task that is to be done and does not come with a deadline or a venue.","lastModifiedDate":"2022-02-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":46,"author":{"gitId":"ivanaitzliddat"},"content":"- Format: `todo [DESCRIPTION]`","lastModifiedDate":"2022-02-21"},{"lineNumber":47,"author":{"gitId":"ivanaitzliddat"},"content":"- Example: ","lastModifiedDate":"2022-02-21"},{"lineNumber":48,"author":{"gitId":"ivanaitzliddat"},"content":"  ```todo CS2113T ip```","lastModifiedDate":"2022-02-21"},{"lineNumber":49,"author":{"gitId":"ivanaitzliddat"},"content":"  \u003cbr /\u003e![Add ToDo](https://github.com/ivanaitzliddat/ip/blob/master/docs/images/add_todo.png)","lastModifiedDate":"2022-02-21"},{"lineNumber":50,"author":{"gitId":"ivanaitzliddat"},"content":"- Arguments:","lastModifiedDate":"2022-02-21"},{"lineNumber":51,"author":{"gitId":"ivanaitzliddat"},"content":"  - \\[DESCRIPTION\\]: The description of the ToDo.","lastModifiedDate":"2022-02-21"},{"lineNumber":52,"author":{"gitId":"ivanaitzliddat"},"content":"- Errors:","lastModifiedDate":"2022-02-21"},{"lineNumber":53,"author":{"gitId":"ivanaitzliddat"},"content":"  - If no description is provided, the following error message will be printed:","lastModifiedDate":"2022-02-21"},{"lineNumber":54,"author":{"gitId":"ivanaitzliddat"},"content":"  \u003cbr /\u003e***What are you going to do? LOL***","lastModifiedDate":"2022-02-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":56,"author":{"gitId":"ivanaitzliddat"},"content":"### Feature - Add a Deadline","lastModifiedDate":"2022-02-21"},{"lineNumber":57,"author":{"gitId":"ivanaitzliddat"},"content":"\u003e A Deadline is a task that is to be done by a certain date.","lastModifiedDate":"2022-02-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":59,"author":{"gitId":"ivanaitzliddat"},"content":"- Format: `deadline [DESCRIPTION] /by [DATE]`","lastModifiedDate":"2022-02-21"},{"lineNumber":60,"author":{"gitId":"ivanaitzliddat"},"content":"- Example:","lastModifiedDate":"2022-02-21"},{"lineNumber":61,"author":{"gitId":"ivanaitzliddat"},"content":"  ```deadline CS2113T ip /by 2022-03-04```","lastModifiedDate":"2022-02-21"},{"lineNumber":62,"author":{"gitId":"ivanaitzliddat"},"content":"  \u003cbr /\u003e![Add Deadline](https://github.com/ivanaitzliddat/ip/blob/master/docs/images/add_deadline.png)","lastModifiedDate":"2022-02-21"},{"lineNumber":63,"author":{"gitId":"ivanaitzliddat"},"content":"- Arguments:","lastModifiedDate":"2022-02-21"},{"lineNumber":64,"author":{"gitId":"ivanaitzliddat"},"content":"  - \\[DESCRIPTION\\]: The description of the ToDo.","lastModifiedDate":"2022-02-21"},{"lineNumber":65,"author":{"gitId":"ivanaitzliddat"},"content":"  - /by \\[DATE]\\: The date of the deadline. The format of the date has to be in the YYYY-MM-DD format.","lastModifiedDate":"2022-02-21"},{"lineNumber":66,"author":{"gitId":"ivanaitzliddat"},"content":"- Errors:","lastModifiedDate":"2022-02-21"},{"lineNumber":67,"author":{"gitId":"ivanaitzliddat"},"content":"  - If `/by` is missing, the following error message will be printed:","lastModifiedDate":"2022-02-21"},{"lineNumber":68,"author":{"gitId":"ivanaitzliddat"},"content":"    \u003cbr /\u003e***You don\u0027t know basic grammar or what?***","lastModifiedDate":"2022-02-21"},{"lineNumber":69,"author":{"gitId":"ivanaitzliddat"},"content":"  - If no description is provided, the following error message will be printed:","lastModifiedDate":"2022-02-21"},{"lineNumber":70,"author":{"gitId":"ivanaitzliddat"},"content":"    \u003cbr /\u003e***What is your deadline for..?***","lastModifiedDate":"2022-02-21"},{"lineNumber":71,"author":{"gitId":"ivanaitzliddat"},"content":"  - If no date is provided, the following error message will be printed:","lastModifiedDate":"2022-02-21"},{"lineNumber":72,"author":{"gitId":"ivanaitzliddat"},"content":"    \u003cbr /\u003e***You have a deadline but you don\u0027t have a deadline?***","lastModifiedDate":"2022-02-21"},{"lineNumber":73,"author":{"gitId":"ivanaitzliddat"},"content":"  - If the date is in the wrong format, the following error message will be printed:","lastModifiedDate":"2022-02-21"},{"lineNumber":74,"author":{"gitId":"ivanaitzliddat"},"content":"    \u003cbr /\u003e***Please input the date in the following format: yyyy-mm-dd***","lastModifiedDate":"2022-02-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":77,"author":{"gitId":"ivanaitzliddat"},"content":"### Feature - Add an Event","lastModifiedDate":"2022-02-21"},{"lineNumber":78,"author":{"gitId":"ivanaitzliddat"},"content":"\u003e An Event is a task that is to be done at a certain location on a certain date.","lastModifiedDate":"2022-02-21"},{"lineNumber":79,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":80,"author":{"gitId":"ivanaitzliddat"},"content":"- Format: `event [DESCRIPTION] /at [LOCATION] /on [DATE]`","lastModifiedDate":"2022-02-21"},{"lineNumber":81,"author":{"gitId":"ivanaitzliddat"},"content":"- Example:","lastModifiedDate":"2022-02-21"},{"lineNumber":82,"author":{"gitId":"ivanaitzliddat"},"content":"  ```event CS2113T Practical Exam /at NUS COM1 /on 2022-04-16```","lastModifiedDate":"2022-02-21"},{"lineNumber":83,"author":{"gitId":"ivanaitzliddat"},"content":"  \u003cbr /\u003e![Add Event](https://github.com/ivanaitzliddat/ip/blob/master/docs/images/add_event.png)","lastModifiedDate":"2022-02-21"},{"lineNumber":84,"author":{"gitId":"ivanaitzliddat"},"content":"- Arguments:","lastModifiedDate":"2022-02-21"},{"lineNumber":85,"author":{"gitId":"ivanaitzliddat"},"content":"  - \\[DESCRIPTION\\]: The description of the Event.","lastModifiedDate":"2022-02-21"},{"lineNumber":86,"author":{"gitId":"ivanaitzliddat"},"content":"  - /by \\[DATE]\\: The date of the Event. The format of the date has to be in the YYYY-MM-DD format.","lastModifiedDate":"2022-02-21"},{"lineNumber":87,"author":{"gitId":"ivanaitzliddat"},"content":"- Errors:","lastModifiedDate":"2022-02-21"},{"lineNumber":88,"author":{"gitId":"ivanaitzliddat"},"content":"  - If `/at` is missing, the following error message will be printed:","lastModifiedDate":"2022-02-21"},{"lineNumber":89,"author":{"gitId":"ivanaitzliddat"},"content":"    \u003cbr /\u003e***Yea... I know you don\u0027t have an event because you\u0027re a loner.***","lastModifiedDate":"2022-02-21"},{"lineNumber":90,"author":{"gitId":"ivanaitzliddat"},"content":"  - If no description is provided, the following error message will be printed:","lastModifiedDate":"2022-02-21"},{"lineNumber":91,"author":{"gitId":"ivanaitzliddat"},"content":"    \u003cbr /\u003e***What is your deadline for..?***","lastModifiedDate":"2022-02-21"},{"lineNumber":92,"author":{"gitId":"ivanaitzliddat"},"content":"  - If `/on` is missing, the following error messgae will be printed:","lastModifiedDate":"2022-02-21"},{"lineNumber":93,"author":{"gitId":"ivanaitzliddat"},"content":"    \u003cbr /\u003e***The event has to be ON a certain date right?***","lastModifiedDate":"2022-02-21"},{"lineNumber":94,"author":{"gitId":"ivanaitzliddat"},"content":"  - If no location is provided, the following message will be printed:","lastModifiedDate":"2022-02-21"},{"lineNumber":95,"author":{"gitId":"ivanaitzliddat"},"content":"    \u003cbr /\u003e***So your event is at nowhere-land?***","lastModifiedDate":"2022-02-21"},{"lineNumber":96,"author":{"gitId":"ivanaitzliddat"},"content":"  - If no date is provided, the following error message will be printed:","lastModifiedDate":"2022-02-21"},{"lineNumber":97,"author":{"gitId":"ivanaitzliddat"},"content":"    \u003cbr /\u003e***YAY! Your event is never going to happen :DDDD***","lastModifiedDate":"2022-02-21"},{"lineNumber":98,"author":{"gitId":"ivanaitzliddat"},"content":"  - If the date is in the wrong format, the following error message will be printed:","lastModifiedDate":"2022-02-21"},{"lineNumber":99,"author":{"gitId":"ivanaitzliddat"},"content":"    \u003cbr /\u003e***Please input the date in the following format: yyyy-mm-dd***","lastModifiedDate":"2022-02-21"},{"lineNumber":100,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":101,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":102,"author":{"gitId":"ivanaitzliddat"},"content":"---","lastModifiedDate":"2022-02-21"},{"lineNumber":103,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":104,"author":{"gitId":"ivanaitzliddat"},"content":"### Feature - List the tasks","lastModifiedDate":"2022-02-21"},{"lineNumber":105,"author":{"gitId":"ivanaitzliddat"},"content":"\u003e Lists all the tasks that is saved by the program.","lastModifiedDate":"2022-02-21"},{"lineNumber":106,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":107,"author":{"gitId":"ivanaitzliddat"},"content":"- Format: `list`","lastModifiedDate":"2022-02-21"},{"lineNumber":108,"author":{"gitId":"ivanaitzliddat"},"content":"- Example:","lastModifiedDate":"2022-02-21"},{"lineNumber":109,"author":{"gitId":"ivanaitzliddat"},"content":"  ```list```","lastModifiedDate":"2022-02-21"},{"lineNumber":110,"author":{"gitId":"ivanaitzliddat"},"content":"  \u003cbr /\u003e![List Tasks](https://github.com/ivanaitzliddat/ip/blob/master/docs/images/list_tasks.png)","lastModifiedDate":"2022-02-21"},{"lineNumber":111,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":112,"author":{"gitId":"ivanaitzliddat"},"content":"---","lastModifiedDate":"2022-02-21"},{"lineNumber":113,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":114,"author":{"gitId":"ivanaitzliddat"},"content":"### Feature - Delete a task","lastModifiedDate":"2022-02-21"},{"lineNumber":115,"author":{"gitId":"ivanaitzliddat"},"content":"\u003e Deletes a task based on the index of the task.","lastModifiedDate":"2022-02-21"},{"lineNumber":116,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":117,"author":{"gitId":"ivanaitzliddat"},"content":"- Format: `delete [INDEX]`","lastModifiedDate":"2022-02-21"},{"lineNumber":118,"author":{"gitId":"ivanaitzliddat"},"content":"- Example:","lastModifiedDate":"2022-02-21"},{"lineNumber":119,"author":{"gitId":"ivanaitzliddat"},"content":"  ```delete 1```","lastModifiedDate":"2022-02-21"},{"lineNumber":120,"author":{"gitId":"ivanaitzliddat"},"content":"  \u003cbr /\u003e![Delete Task](https://github.com/ivanaitzliddat/ip/blob/master/docs/images/delete_tasks.png)","lastModifiedDate":"2022-02-21"},{"lineNumber":121,"author":{"gitId":"ivanaitzliddat"},"content":"- Arguments:","lastModifiedDate":"2022-02-21"},{"lineNumber":122,"author":{"gitId":"ivanaitzliddat"},"content":"  - \\[INDEX\\]: The index of the task to be deleted.","lastModifiedDate":"2022-02-21"},{"lineNumber":123,"author":{"gitId":"ivanaitzliddat"},"content":"- Errors:","lastModifiedDate":"2022-02-21"},{"lineNumber":124,"author":{"gitId":"ivanaitzliddat"},"content":"  - If no index or more than 1 index is provided, the following error message will be printed:","lastModifiedDate":"2022-02-21"},{"lineNumber":125,"author":{"gitId":"ivanaitzliddat"},"content":"    \u003cbr /\u003e***Please input the index and only the index***","lastModifiedDate":"2022-02-21"},{"lineNumber":126,"author":{"gitId":"ivanaitzliddat"},"content":"  - If the index provided is out of range, the following error message will be printed:","lastModifiedDate":"2022-02-21"},{"lineNumber":127,"author":{"gitId":"ivanaitzliddat"},"content":"    \u003cbr /\u003e***The index is out of range, please try again.***","lastModifiedDate":"2022-02-21"},{"lineNumber":128,"author":{"gitId":"ivanaitzliddat"},"content":"  - If the index provided is not an integer, the following error message will be printed:","lastModifiedDate":"2022-02-21"},{"lineNumber":129,"author":{"gitId":"ivanaitzliddat"},"content":"    \u003cbr /\u003e***The index should be an integer, please try again.***","lastModifiedDate":"2022-02-21"},{"lineNumber":130,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":131,"author":{"gitId":"ivanaitzliddat"},"content":"---","lastModifiedDate":"2022-02-21"},{"lineNumber":132,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":133,"author":{"gitId":"ivanaitzliddat"},"content":"### Feature - Mark a task as done","lastModifiedDate":"2022-02-21"},{"lineNumber":134,"author":{"gitId":"ivanaitzliddat"},"content":"\u003e Marks a task, based on the index, as done.","lastModifiedDate":"2022-02-21"},{"lineNumber":135,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":136,"author":{"gitId":"ivanaitzliddat"},"content":"- Format: `mark [INDEX]`","lastModifiedDate":"2022-02-21"},{"lineNumber":137,"author":{"gitId":"ivanaitzliddat"},"content":"- Example:","lastModifiedDate":"2022-02-21"},{"lineNumber":138,"author":{"gitId":"ivanaitzliddat"},"content":"  ```mark 1```","lastModifiedDate":"2022-02-21"},{"lineNumber":139,"author":{"gitId":"ivanaitzliddat"},"content":"  \u003cbr /\u003e![Mark Task As Done](https://github.com/ivanaitzliddat/ip/blob/master/docs/images/mark_task_as_done.png)","lastModifiedDate":"2022-02-21"},{"lineNumber":140,"author":{"gitId":"ivanaitzliddat"},"content":"- Arguments:","lastModifiedDate":"2022-02-21"},{"lineNumber":141,"author":{"gitId":"ivanaitzliddat"},"content":"  - \\[INDEX\\]: The index of the task to be marked as done.","lastModifiedDate":"2022-02-21"},{"lineNumber":142,"author":{"gitId":"ivanaitzliddat"},"content":"- Errors:","lastModifiedDate":"2022-02-21"},{"lineNumber":143,"author":{"gitId":"ivanaitzliddat"},"content":"  - If no index or more than 1 index is provided, the following error message will be printed:","lastModifiedDate":"2022-02-21"},{"lineNumber":144,"author":{"gitId":"ivanaitzliddat"},"content":"    \u003cbr /\u003e***Please input the index and only the index***","lastModifiedDate":"2022-02-21"},{"lineNumber":145,"author":{"gitId":"ivanaitzliddat"},"content":"  - If the index provided is out of range, the following error message will be printed:","lastModifiedDate":"2022-02-21"},{"lineNumber":146,"author":{"gitId":"ivanaitzliddat"},"content":"    \u003cbr /\u003e***The index is out of range, please try again.***","lastModifiedDate":"2022-02-21"},{"lineNumber":147,"author":{"gitId":"ivanaitzliddat"},"content":"  - If the index provided is not an integer, the following error message will be printed:","lastModifiedDate":"2022-02-21"},{"lineNumber":148,"author":{"gitId":"ivanaitzliddat"},"content":"    \u003cbr /\u003e***The index should be an integer, please try again.***","lastModifiedDate":"2022-02-21"},{"lineNumber":149,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":150,"author":{"gitId":"ivanaitzliddat"},"content":"---","lastModifiedDate":"2022-02-21"},{"lineNumber":151,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":152,"author":{"gitId":"ivanaitzliddat"},"content":"### Feature - Mark a task as NOT done","lastModifiedDate":"2022-02-21"},{"lineNumber":153,"author":{"gitId":"ivanaitzliddat"},"content":"\u003e Marks a task, based on the index, as NOT done.","lastModifiedDate":"2022-02-21"},{"lineNumber":154,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":155,"author":{"gitId":"ivanaitzliddat"},"content":"- Format: `unmark [INDEX]`","lastModifiedDate":"2022-02-21"},{"lineNumber":156,"author":{"gitId":"ivanaitzliddat"},"content":"- Example:","lastModifiedDate":"2022-02-21"},{"lineNumber":157,"author":{"gitId":"ivanaitzliddat"},"content":"  ```unmark 1```","lastModifiedDate":"2022-02-21"},{"lineNumber":158,"author":{"gitId":"ivanaitzliddat"},"content":"  \u003cbr /\u003e![Mark Task As NOT Done](https://github.com/ivanaitzliddat/ip/blob/master/docs/images/mark_task_as_not_done.png)","lastModifiedDate":"2022-02-21"},{"lineNumber":159,"author":{"gitId":"ivanaitzliddat"},"content":"- Arguments:","lastModifiedDate":"2022-02-21"},{"lineNumber":160,"author":{"gitId":"ivanaitzliddat"},"content":"  - \\[INDEX\\]: The index of the task to be marked as NOT done.","lastModifiedDate":"2022-02-21"},{"lineNumber":161,"author":{"gitId":"ivanaitzliddat"},"content":"- Errors:","lastModifiedDate":"2022-02-21"},{"lineNumber":162,"author":{"gitId":"ivanaitzliddat"},"content":"  - If no index or more than 1 index is provided, the following error message will be printed:","lastModifiedDate":"2022-02-21"},{"lineNumber":163,"author":{"gitId":"ivanaitzliddat"},"content":"    \u003cbr /\u003e***Please input the index and only the index***","lastModifiedDate":"2022-02-21"},{"lineNumber":164,"author":{"gitId":"ivanaitzliddat"},"content":"  - If the index provided is out of range, the following error message will be printed:","lastModifiedDate":"2022-02-21"},{"lineNumber":165,"author":{"gitId":"ivanaitzliddat"},"content":"    \u003cbr /\u003e***The index is out of range, please try again.***","lastModifiedDate":"2022-02-21"},{"lineNumber":166,"author":{"gitId":"ivanaitzliddat"},"content":"  - If the index provided is not an integer, the following error message will be printed:","lastModifiedDate":"2022-02-21"},{"lineNumber":167,"author":{"gitId":"ivanaitzliddat"},"content":"    \u003cbr /\u003e***The index should be an integer, please try again.***","lastModifiedDate":"2022-02-21"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":170,"author":{"gitId":"ivanaitzliddat"},"content":"---","lastModifiedDate":"2022-02-21"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":172,"author":{"gitId":"ivanaitzliddat"},"content":"### Feature - Find tasks using keyword","lastModifiedDate":"2022-02-21"},{"lineNumber":173,"author":{"gitId":"ivanaitzliddat"},"content":"\u003e Finds the tasks in the list of tasks that contains the keyword provided.","lastModifiedDate":"2022-02-21"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":175,"author":{"gitId":"ivanaitzliddat"},"content":"- Format: `find [KEYWORD]`","lastModifiedDate":"2022-02-21"},{"lineNumber":176,"author":{"gitId":"ivanaitzliddat"},"content":"- Example:","lastModifiedDate":"2022-02-21"},{"lineNumber":177,"author":{"gitId":"ivanaitzliddat"},"content":"  ```find CS2113T```","lastModifiedDate":"2022-02-21"},{"lineNumber":178,"author":{"gitId":"ivanaitzliddat"},"content":"  \u003cbr /\u003e![Find Tasks](https://github.com/ivanaitzliddat/ip/blob/master/docs/images/find_tasks.png)","lastModifiedDate":"2022-02-21"},{"lineNumber":179,"author":{"gitId":"ivanaitzliddat"},"content":"- Arguments:","lastModifiedDate":"2022-02-21"},{"lineNumber":180,"author":{"gitId":"ivanaitzliddat"},"content":"  - \\[KEYWORD\\]: The keyword to be searched for among the list of tasks.","lastModifiedDate":"2022-02-21"},{"lineNumber":181,"author":{"gitId":"ivanaitzliddat"},"content":"- Errors:","lastModifiedDate":"2022-02-21"},{"lineNumber":182,"author":{"gitId":"ivanaitzliddat"},"content":"  - If no keyword is provided, the following error message will be printed:","lastModifiedDate":"2022-02-21"},{"lineNumber":183,"author":{"gitId":"ivanaitzliddat"},"content":"    \u003cbr /\u003e***You want me to find nothing or everything...?***","lastModifiedDate":"2022-02-21"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":185,"author":{"gitId":"ivanaitzliddat"},"content":"---","lastModifiedDate":"2022-02-21"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":187,"author":{"gitId":"ivanaitzliddat"},"content":"### Feature - Filters tasks using date","lastModifiedDate":"2022-02-21"},{"lineNumber":188,"author":{"gitId":"ivanaitzliddat"},"content":"\u003e Filters the tasks in the list of tasks according to the date provided.","lastModifiedDate":"2022-02-21"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":190,"author":{"gitId":"ivanaitzliddat"},"content":"- Format: `date [DATE]`","lastModifiedDate":"2022-02-21"},{"lineNumber":191,"author":{"gitId":"ivanaitzliddat"},"content":"- Example:","lastModifiedDate":"2022-02-21"},{"lineNumber":192,"author":{"gitId":"ivanaitzliddat"},"content":"  ```date 2022-03-04```","lastModifiedDate":"2022-02-21"},{"lineNumber":193,"author":{"gitId":"ivanaitzliddat"},"content":"  \u003cbr /\u003e![Filter Tasks](https://github.com/ivanaitzliddat/ip/blob/master/docs/images/filter_tasks.png)","lastModifiedDate":"2022-02-21"},{"lineNumber":194,"author":{"gitId":"ivanaitzliddat"},"content":"- Arguments:","lastModifiedDate":"2022-02-21"},{"lineNumber":195,"author":{"gitId":"ivanaitzliddat"},"content":"  - \\[DATE\\]: The date used to filter the tasks. The format of the date has to be in the YYYY-MM-DD format.","lastModifiedDate":"2022-02-21"},{"lineNumber":196,"author":{"gitId":"ivanaitzliddat"},"content":"- Errors:","lastModifiedDate":"2022-02-21"},{"lineNumber":197,"author":{"gitId":"ivanaitzliddat"},"content":"  - If no date is provided or more than one 1 date is provided, the following error will be printed:","lastModifiedDate":"2022-02-21"},{"lineNumber":198,"author":{"gitId":"ivanaitzliddat"},"content":"    \u003cbr /\u003e***Please input the date in the correct format and only the date***","lastModifiedDate":"2022-02-21"},{"lineNumber":199,"author":{"gitId":"ivanaitzliddat"},"content":"  - If the date provided is in the wrong format, the following error will be printed:","lastModifiedDate":"2022-02-21"},{"lineNumber":200,"author":{"gitId":"ivanaitzliddat"},"content":"    \u003cbr /\u003e***Please input the date in the following format: yyyy-mm-dd***","lastModifiedDate":"2022-02-21"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":202,"author":{"gitId":"ivanaitzliddat"},"content":"---","lastModifiedDate":"2022-02-21"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":204,"author":{"gitId":"ivanaitzliddat"},"content":"### Feature - Exit the program","lastModifiedDate":"2022-02-21"},{"lineNumber":205,"author":{"gitId":"ivanaitzliddat"},"content":"\u003e Exits the program and prints the goodbye message.","lastModifiedDate":"2022-02-21"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":207,"author":{"gitId":"ivanaitzliddat"},"content":"- Format: `bye`","lastModifiedDate":"2022-02-21"},{"lineNumber":208,"author":{"gitId":"ivanaitzliddat"},"content":"- Example:","lastModifiedDate":"2022-02-21"},{"lineNumber":209,"author":{"gitId":"ivanaitzliddat"},"content":"  ```bye```","lastModifiedDate":"2022-02-21"},{"lineNumber":210,"author":{"gitId":"ivanaitzliddat"},"content":"  \u003cbr /\u003e![Exit Program](https://github.com/ivanaitzliddat/ip/blob/master/docs/images/exit_program.png)","lastModifiedDate":"2022-02-21"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":212,"author":{"gitId":"ivanaitzliddat"},"content":"---","lastModifiedDate":"2022-02-21"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":214,"author":{"gitId":"ivanaitzliddat"},"content":"## Command Summary","lastModifiedDate":"2022-02-21"},{"lineNumber":215,"author":{"gitId":"ivanaitzliddat"},"content":"\u003e The summary of all the commands and their respective formats.","lastModifiedDate":"2022-02-21"},{"lineNumber":216,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":217,"author":{"gitId":"ivanaitzliddat"},"content":"|        **Action**        |                   **Format**                    |","lastModifiedDate":"2022-02-21"},{"lineNumber":218,"author":{"gitId":"ivanaitzliddat"},"content":"|:------------------------:|:-----------------------------------------------:|","lastModifiedDate":"2022-02-21"},{"lineNumber":219,"author":{"gitId":"ivanaitzliddat"},"content":"|        Add a ToDo        |              `todo [DESCRIPTION]`               |","lastModifiedDate":"2022-02-21"},{"lineNumber":220,"author":{"gitId":"ivanaitzliddat"},"content":"|      Add a Deadline      |       `deadline [DESCRIPTION] /by [DATE]`       |","lastModifiedDate":"2022-02-21"},{"lineNumber":221,"author":{"gitId":"ivanaitzliddat"},"content":"|       Add an Event       | `event [DESCRIPTION] /at [LOCATION] /on [DATE]` |","lastModifiedDate":"2022-02-21"},{"lineNumber":222,"author":{"gitId":"ivanaitzliddat"},"content":"|      List the tasks      |                     `list`                      |","lastModifiedDate":"2022-02-21"},{"lineNumber":223,"author":{"gitId":"ivanaitzliddat"},"content":"|      Delete a task       |                `delete [INDEX]`                 |","lastModifiedDate":"2022-02-21"},{"lineNumber":224,"author":{"gitId":"ivanaitzliddat"},"content":"|   Mark a task as done    |                 `mark [INDEX]`                  |","lastModifiedDate":"2022-02-21"},{"lineNumber":225,"author":{"gitId":"ivanaitzliddat"},"content":"| Mark a task as NOT done  |                `unmark [INDEX]`                 |","lastModifiedDate":"2022-02-21"},{"lineNumber":226,"author":{"gitId":"ivanaitzliddat"},"content":"| Find tasks using keyword |                `find [KEYWORD]`                 |","lastModifiedDate":"2022-02-21"},{"lineNumber":227,"author":{"gitId":"ivanaitzliddat"},"content":"| Filters tasks using date |                  `date [DATE]`                  |","lastModifiedDate":"2022-02-21"},{"lineNumber":228,"author":{"gitId":"ivanaitzliddat"},"content":"|     Exit the program     |                      `bye`                      |","lastModifiedDate":"2022-02-21"}],"authorContributionMap":{"ivanaitzliddat":201,"-":27}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivanaitzliddat"},"content":"package duke;","lastModifiedDate":"2022-02-10"},{"lineNumber":2,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-10"},{"lineNumber":3,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.command.Command;","lastModifiedDate":"2022-02-20"},{"lineNumber":4,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.exception.AdditionalException;","lastModifiedDate":"2022-02-20"},{"lineNumber":5,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.parser.Parser;","lastModifiedDate":"2022-02-20"},{"lineNumber":6,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-02-20"},{"lineNumber":7,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":8,"author":{"gitId":"ivanaitzliddat"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2022-02-20"},{"lineNumber":9,"author":{"gitId":"ivanaitzliddat"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-20"},{"lineNumber":10,"author":{"gitId":"ivanaitzliddat"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-02-20"},{"lineNumber":11,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":12,"author":{"gitId":"ivanaitzliddat"},"content":"/**","lastModifiedDate":"2022-02-20"},{"lineNumber":13,"author":{"gitId":"ivanaitzliddat"},"content":" * Represents a Personal Assistant Chat bot that helps a person to keep track of various things.","lastModifiedDate":"2022-02-20"},{"lineNumber":14,"author":{"gitId":"ivanaitzliddat"},"content":" */","lastModifiedDate":"2022-02-20"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":16,"author":{"gitId":"ivanaitzliddat"},"content":"    private Storage storage;","lastModifiedDate":"2022-02-20"},{"lineNumber":17,"author":{"gitId":"ivanaitzliddat"},"content":"    private TaskList tasks;","lastModifiedDate":"2022-02-20"},{"lineNumber":18,"author":{"gitId":"ivanaitzliddat"},"content":"    private Ui ui;","lastModifiedDate":"2022-02-20"},{"lineNumber":19,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":20,"author":{"gitId":"ivanaitzliddat"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2022-02-20"},{"lineNumber":21,"author":{"gitId":"ivanaitzliddat"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2022-02-20"},{"lineNumber":22,"author":{"gitId":"ivanaitzliddat"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2022-02-20"},{"lineNumber":23,"author":{"gitId":"ivanaitzliddat"},"content":"        ui.printGreeting();","lastModifiedDate":"2022-02-20"},{"lineNumber":24,"author":{"gitId":"ivanaitzliddat"},"content":"        try {","lastModifiedDate":"2022-02-20"},{"lineNumber":25,"author":{"gitId":"ivanaitzliddat"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2022-02-20"},{"lineNumber":26,"author":{"gitId":"ivanaitzliddat"},"content":"        } catch (FileNotFoundException | AdditionalException error) {","lastModifiedDate":"2022-02-20"},{"lineNumber":27,"author":{"gitId":"ivanaitzliddat"},"content":"            ui.showLoadingError();","lastModifiedDate":"2022-02-20"},{"lineNumber":28,"author":{"gitId":"ivanaitzliddat"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2022-02-20"},{"lineNumber":29,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-02-20"},{"lineNumber":30,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":31,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":32,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":33,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the run method that starts accepting user inputs.","lastModifiedDate":"2022-02-20"},{"lineNumber":34,"author":{"gitId":"ivanaitzliddat"},"content":"     * The method will pass the user inputs to the runFullCommand method to execute the command.","lastModifiedDate":"2022-02-20"},{"lineNumber":35,"author":{"gitId":"ivanaitzliddat"},"content":"     * The method will stop accepting user inputs when the user inputs \"bye\" and prints a goodbye message.","lastModifiedDate":"2022-02-20"},{"lineNumber":36,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":37,"author":{"gitId":"ivanaitzliddat"},"content":"    public void run() {","lastModifiedDate":"2022-02-20"},{"lineNumber":38,"author":{"gitId":"ivanaitzliddat"},"content":"        boolean isBye \u003d false;","lastModifiedDate":"2022-02-20"},{"lineNumber":39,"author":{"gitId":"ivanaitzliddat"},"content":"        while (!isBye) {","lastModifiedDate":"2022-02-20"},{"lineNumber":40,"author":{"gitId":"ivanaitzliddat"},"content":"            String fullCommand \u003d ui.readCommand();","lastModifiedDate":"2022-02-20"},{"lineNumber":41,"author":{"gitId":"ivanaitzliddat"},"content":"            isBye \u003d runFullCommand(fullCommand);","lastModifiedDate":"2022-02-20"},{"lineNumber":42,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-02-20"},{"lineNumber":43,"author":{"gitId":"ivanaitzliddat"},"content":"        ui.printGoodbye();","lastModifiedDate":"2022-02-20"},{"lineNumber":44,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":45,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":46,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the runFullCommand method that passes the user input to the parser and checks if the input is \"bye\".","lastModifiedDate":"2022-02-20"},{"lineNumber":47,"author":{"gitId":"ivanaitzliddat"},"content":"     * It returns true when the user input is \"bye\"","lastModifiedDate":"2022-02-20"},{"lineNumber":48,"author":{"gitId":"ivanaitzliddat"},"content":"     * Using the command object returned from the parser, it will the run the execute method.","lastModifiedDate":"2022-02-20"},{"lineNumber":49,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":50,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param fullCommand The full command which is the user input.","lastModifiedDate":"2022-02-21"},{"lineNumber":51,"author":{"gitId":"ivanaitzliddat"},"content":"     * @return true if user input is \"bye\".","lastModifiedDate":"2022-02-21"},{"lineNumber":52,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":53,"author":{"gitId":"ivanaitzliddat"},"content":"    private boolean runFullCommand(String fullCommand) {","lastModifiedDate":"2022-02-20"},{"lineNumber":54,"author":{"gitId":"ivanaitzliddat"},"content":"        boolean isBye \u003d false;","lastModifiedDate":"2022-02-20"},{"lineNumber":55,"author":{"gitId":"ivanaitzliddat"},"content":"        try {","lastModifiedDate":"2022-02-20"},{"lineNumber":56,"author":{"gitId":"ivanaitzliddat"},"content":"            Command c \u003d Parser.parse(fullCommand);","lastModifiedDate":"2022-02-20"},{"lineNumber":57,"author":{"gitId":"ivanaitzliddat"},"content":"            c.execute(tasks, ui, storage);","lastModifiedDate":"2022-02-20"},{"lineNumber":58,"author":{"gitId":"ivanaitzliddat"},"content":"            isBye \u003d c.isBye();","lastModifiedDate":"2022-02-20"},{"lineNumber":59,"author":{"gitId":"ivanaitzliddat"},"content":"        } catch (AdditionalException | IOException e) {","lastModifiedDate":"2022-02-20"},{"lineNumber":60,"author":{"gitId":"ivanaitzliddat"},"content":"            ui.showError(e.getMessage());","lastModifiedDate":"2022-02-20"},{"lineNumber":61,"author":{"gitId":"ivanaitzliddat"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2022-02-20"},{"lineNumber":62,"author":{"gitId":"ivanaitzliddat"},"content":"            ui.showIndexError();","lastModifiedDate":"2022-02-20"},{"lineNumber":63,"author":{"gitId":"ivanaitzliddat"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2022-02-20"},{"lineNumber":64,"author":{"gitId":"ivanaitzliddat"},"content":"            ui.showFormatError();","lastModifiedDate":"2022-02-20"},{"lineNumber":65,"author":{"gitId":"ivanaitzliddat"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2022-02-20"},{"lineNumber":66,"author":{"gitId":"ivanaitzliddat"},"content":"            ui.showDateError();","lastModifiedDate":"2022-02-20"},{"lineNumber":67,"author":{"gitId":"ivanaitzliddat"},"content":"        } finally {","lastModifiedDate":"2022-02-20"},{"lineNumber":68,"author":{"gitId":"ivanaitzliddat"},"content":"            ui.showLine();","lastModifiedDate":"2022-02-20"},{"lineNumber":69,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-02-20"},{"lineNumber":70,"author":{"gitId":"ivanaitzliddat"},"content":"        return isBye;","lastModifiedDate":"2022-02-20"},{"lineNumber":71,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":72,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":73,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":74,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the main method which creates a new Duke object with a filePath and calls the method run.","lastModifiedDate":"2022-02-20"},{"lineNumber":75,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param args Unused.","lastModifiedDate":"2022-02-20"},{"lineNumber":76,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":77,"author":{"gitId":"ivanaitzliddat"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2022-02-20"},{"lineNumber":78,"author":{"gitId":"ivanaitzliddat"},"content":"        new Duke(\"./duke.txt\").run();","lastModifiedDate":"2022-02-20"},{"lineNumber":79,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":80,"author":{"gitId":"ivanaitzliddat"},"content":"}","lastModifiedDate":"2022-01-25"}],"authorContributionMap":{"ivanaitzliddat":79,"-":1}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivanaitzliddat"},"content":"package duke;","lastModifiedDate":"2022-02-20"},{"lineNumber":2,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":3,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.exception.AdditionalException;","lastModifiedDate":"2022-02-20"},{"lineNumber":4,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.task.Deadline;","lastModifiedDate":"2022-02-20"},{"lineNumber":5,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.task.Event;","lastModifiedDate":"2022-02-20"},{"lineNumber":6,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.task.Task;","lastModifiedDate":"2022-02-20"},{"lineNumber":7,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":8,"author":{"gitId":"ivanaitzliddat"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-02-20"},{"lineNumber":9,"author":{"gitId":"ivanaitzliddat"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-20"},{"lineNumber":10,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":11,"author":{"gitId":"ivanaitzliddat"},"content":"/**","lastModifiedDate":"2022-02-20"},{"lineNumber":12,"author":{"gitId":"ivanaitzliddat"},"content":" * Represents a list of tasks and has operations that add and delete tasks to the list.","lastModifiedDate":"2022-02-21"},{"lineNumber":13,"author":{"gitId":"ivanaitzliddat"},"content":" */","lastModifiedDate":"2022-02-20"},{"lineNumber":14,"author":{"gitId":"ivanaitzliddat"},"content":"public class TaskList {","lastModifiedDate":"2022-02-20"},{"lineNumber":15,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":16,"author":{"gitId":"ivanaitzliddat"},"content":"    private ArrayList\u003cTask\u003e listOfTasks;","lastModifiedDate":"2022-02-20"},{"lineNumber":17,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":18,"author":{"gitId":"ivanaitzliddat"},"content":"    public TaskList() {","lastModifiedDate":"2022-02-20"},{"lineNumber":19,"author":{"gitId":"ivanaitzliddat"},"content":"        listOfTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-02-20"},{"lineNumber":20,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":21,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":22,"author":{"gitId":"ivanaitzliddat"},"content":"    public TaskList(ArrayList\u003cTask\u003e listOfTasks) {","lastModifiedDate":"2022-02-20"},{"lineNumber":23,"author":{"gitId":"ivanaitzliddat"},"content":"        this.listOfTasks \u003d listOfTasks;","lastModifiedDate":"2022-02-20"},{"lineNumber":24,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":25,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":26,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":27,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the getList method that returns this TaskList\u0027s list of tasks.","lastModifiedDate":"2022-02-20"},{"lineNumber":28,"author":{"gitId":"ivanaitzliddat"},"content":"     * If the list is empty, an AdditionalException will be raised.","lastModifiedDate":"2022-02-20"},{"lineNumber":29,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":30,"author":{"gitId":"ivanaitzliddat"},"content":"     * @return This TaskList\u0027s list of tasks.","lastModifiedDate":"2022-02-20"},{"lineNumber":31,"author":{"gitId":"ivanaitzliddat"},"content":"     * @throws AdditionalException if list is empty.","lastModifiedDate":"2022-02-21"},{"lineNumber":32,"author":{"gitId":"ivanaitzliddat"},"content":"     * @see AdditionalException","lastModifiedDate":"2022-02-20"},{"lineNumber":33,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":34,"author":{"gitId":"ivanaitzliddat"},"content":"    public ArrayList\u003cTask\u003e getList() throws AdditionalException {","lastModifiedDate":"2022-02-20"},{"lineNumber":35,"author":{"gitId":"ivanaitzliddat"},"content":"        if (listOfTasks.isEmpty()) {","lastModifiedDate":"2022-02-20"},{"lineNumber":36,"author":{"gitId":"ivanaitzliddat"},"content":"            throw new AdditionalException(\"YAY!!! you do not have any tasks at the moment hehe\");","lastModifiedDate":"2022-02-20"},{"lineNumber":37,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-02-20"},{"lineNumber":38,"author":{"gitId":"ivanaitzliddat"},"content":"        return listOfTasks;","lastModifiedDate":"2022-02-20"},{"lineNumber":39,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":40,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":41,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":42,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the getTask method that returns the task stored a particular index.","lastModifiedDate":"2022-02-21"},{"lineNumber":43,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":44,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param index the index of the task to be returned from the list of tasks.","lastModifiedDate":"2022-02-21"},{"lineNumber":45,"author":{"gitId":"ivanaitzliddat"},"content":"     * @return The task stored at a particular index.","lastModifiedDate":"2022-02-21"},{"lineNumber":46,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":47,"author":{"gitId":"ivanaitzliddat"},"content":"    public Task getTask(int index) {","lastModifiedDate":"2022-02-20"},{"lineNumber":48,"author":{"gitId":"ivanaitzliddat"},"content":"        return listOfTasks.get(index);","lastModifiedDate":"2022-02-20"},{"lineNumber":49,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":50,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":51,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":52,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the getSize method that returns the number of tasks stored in the list of tasks.","lastModifiedDate":"2022-02-21"},{"lineNumber":53,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":54,"author":{"gitId":"ivanaitzliddat"},"content":"     * @return The number of tasks stored in the list of tasks.","lastModifiedDate":"2022-02-21"},{"lineNumber":55,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":56,"author":{"gitId":"ivanaitzliddat"},"content":"    public int getSize() {","lastModifiedDate":"2022-02-20"},{"lineNumber":57,"author":{"gitId":"ivanaitzliddat"},"content":"        return listOfTasks.size();","lastModifiedDate":"2022-02-20"},{"lineNumber":58,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":59,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":60,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":61,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is deleteTask method that deletes the task stored at a particular index.","lastModifiedDate":"2022-02-21"},{"lineNumber":62,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":63,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param indexToDelete The index of the task to be deleted from the list of tasks.","lastModifiedDate":"2022-02-21"},{"lineNumber":64,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":65,"author":{"gitId":"ivanaitzliddat"},"content":"    public void deleteTask(int indexToDelete) {","lastModifiedDate":"2022-02-20"},{"lineNumber":66,"author":{"gitId":"ivanaitzliddat"},"content":"        listOfTasks.remove(indexToDelete);","lastModifiedDate":"2022-02-20"},{"lineNumber":67,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":68,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":69,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":70,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the addTask method that adds a task at the end of the list of tasks.","lastModifiedDate":"2022-02-21"},{"lineNumber":71,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":72,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param task The task to be added to the list of tasks.","lastModifiedDate":"2022-02-21"},{"lineNumber":73,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":74,"author":{"gitId":"ivanaitzliddat"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2022-02-20"},{"lineNumber":75,"author":{"gitId":"ivanaitzliddat"},"content":"        listOfTasks.add(task);","lastModifiedDate":"2022-02-20"},{"lineNumber":76,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":77,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":78,"author":{"gitId":"ivanaitzliddat"},"content":"}","lastModifiedDate":"2022-02-20"}],"authorContributionMap":{"ivanaitzliddat":78}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivanaitzliddat"},"content":"package duke;","lastModifiedDate":"2022-02-18"},{"lineNumber":2,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":3,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.task.Task;","lastModifiedDate":"2022-02-20"},{"lineNumber":4,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":5,"author":{"gitId":"ivanaitzliddat"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-20"},{"lineNumber":6,"author":{"gitId":"ivanaitzliddat"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-02-18"},{"lineNumber":7,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":8,"author":{"gitId":"ivanaitzliddat"},"content":"/**","lastModifiedDate":"2022-02-20"},{"lineNumber":9,"author":{"gitId":"ivanaitzliddat"},"content":" * Represents a user interface that prints and read users input to and from the command line respectively.","lastModifiedDate":"2022-02-20"},{"lineNumber":10,"author":{"gitId":"ivanaitzliddat"},"content":" */","lastModifiedDate":"2022-02-20"},{"lineNumber":11,"author":{"gitId":"ivanaitzliddat"},"content":"public class Ui {","lastModifiedDate":"2022-02-18"},{"lineNumber":12,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":13,"author":{"gitId":"ivanaitzliddat"},"content":"    private static final String LOGO \u003d \"\\n\" +","lastModifiedDate":"2022-02-18"},{"lineNumber":14,"author":{"gitId":"ivanaitzliddat"},"content":"            \"  .-\u0027)     _ (`-.                           .-. .-\u0027)               \\n\" +","lastModifiedDate":"2022-02-18"},{"lineNumber":15,"author":{"gitId":"ivanaitzliddat"},"content":"            \" ( OO ).  ( (OO  )                          \\\\  ( OO )              \\n\" +","lastModifiedDate":"2022-02-18"},{"lineNumber":16,"author":{"gitId":"ivanaitzliddat"},"content":"            \"(_)---\\\\_)_.`     \\\\ .-\u0027),-----.  .-\u0027),-----. ,--. ,--.   ,--.   ,--.\\n\" +","lastModifiedDate":"2022-02-18"},{"lineNumber":17,"author":{"gitId":"ivanaitzliddat"},"content":"            \"/    _ |(__...--\u0027\u0027( OO\u0027  .-.  \u0027( OO\u0027  .-.  \u0027|  .\u0027   /    \\\\  `.\u0027  / \\n\" +","lastModifiedDate":"2022-02-18"},{"lineNumber":18,"author":{"gitId":"ivanaitzliddat"},"content":"            \"\\\\  :` `. |  /  | |/   |  | |  |/   |  | |  ||      /,  .-\u0027)     /  \\n\" +","lastModifiedDate":"2022-02-18"},{"lineNumber":19,"author":{"gitId":"ivanaitzliddat"},"content":"            \" \u0027..`\u0027\u0027.)|  |_.\u0027 |\\\\_) |  |\\\\|  |\\\\_) |  |\\\\|  ||     \u0027 _)(OO  \\\\   /   \\n\" +","lastModifiedDate":"2022-02-18"},{"lineNumber":20,"author":{"gitId":"ivanaitzliddat"},"content":"            \".-._)   \\\\|  .___.\u0027  \\\\ |  | |  |  \\\\ |  | |  ||  .   \\\\   |   /  /\\\\_  \\n\" +","lastModifiedDate":"2022-02-18"},{"lineNumber":21,"author":{"gitId":"ivanaitzliddat"},"content":"            \"\\\\       /|  |        `\u0027  \u0027-\u0027  \u0027   `\u0027  \u0027-\u0027  \u0027|  |\\\\   \\\\  `-./  /.__) \\n\" +","lastModifiedDate":"2022-02-18"},{"lineNumber":22,"author":{"gitId":"ivanaitzliddat"},"content":"            \" `-----\u0027 `--\u0027          `-----\u0027      `-----\u0027 `--\u0027 \u0027--\u0027    `--\u0027      \\n\";","lastModifiedDate":"2022-02-18"},{"lineNumber":23,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":24,"author":{"gitId":"ivanaitzliddat"},"content":"    private static Scanner in;","lastModifiedDate":"2022-02-20"},{"lineNumber":25,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":26,"author":{"gitId":"ivanaitzliddat"},"content":"    public Ui() {","lastModifiedDate":"2022-02-18"},{"lineNumber":27,"author":{"gitId":"ivanaitzliddat"},"content":"        in \u003d new Scanner(System.in);","lastModifiedDate":"2022-02-20"},{"lineNumber":28,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":29,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":30,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":31,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the showLoadingError method that prints the error message when the file to be read from does not","lastModifiedDate":"2022-02-20"},{"lineNumber":32,"author":{"gitId":"ivanaitzliddat"},"content":"     * exist.","lastModifiedDate":"2022-02-20"},{"lineNumber":33,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":34,"author":{"gitId":"ivanaitzliddat"},"content":"    public void showLoadingError() {","lastModifiedDate":"2022-02-20"},{"lineNumber":35,"author":{"gitId":"ivanaitzliddat"},"content":"        System.out.println(\"Duke.txt doesn\u0027t exist so I\u0027M GOING TO CREATE ONE FOR YOU LATER\");","lastModifiedDate":"2022-02-20"},{"lineNumber":36,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":37,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":38,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":39,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the printGreeting method that prints out greeting message and the logo of Duke.","lastModifiedDate":"2022-02-20"},{"lineNumber":40,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":41,"author":{"gitId":"ivanaitzliddat"},"content":"    public void printGreeting() {","lastModifiedDate":"2022-02-20"},{"lineNumber":42,"author":{"gitId":"ivanaitzliddat"},"content":"        System.out.println(\"Hello from\\n\" + LOGO);","lastModifiedDate":"2022-02-20"},{"lineNumber":43,"author":{"gitId":"ivanaitzliddat"},"content":"        showLine();","lastModifiedDate":"2022-02-20"},{"lineNumber":44,"author":{"gitId":"ivanaitzliddat"},"content":"        System.out.println(\"Hi there! I\u0027m Spooky :D\");","lastModifiedDate":"2022-02-20"},{"lineNumber":45,"author":{"gitId":"ivanaitzliddat"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2022-02-20"},{"lineNumber":46,"author":{"gitId":"ivanaitzliddat"},"content":"        showLine();","lastModifiedDate":"2022-02-20"},{"lineNumber":47,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":48,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":49,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":50,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the readCommand method that reads the user input from the command line.","lastModifiedDate":"2022-02-20"},{"lineNumber":51,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":52,"author":{"gitId":"ivanaitzliddat"},"content":"     * @return The user input as a String.","lastModifiedDate":"2022-02-21"},{"lineNumber":53,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":54,"author":{"gitId":"ivanaitzliddat"},"content":"    public String readCommand() {","lastModifiedDate":"2022-02-20"},{"lineNumber":55,"author":{"gitId":"ivanaitzliddat"},"content":"        return in.nextLine();","lastModifiedDate":"2022-02-20"},{"lineNumber":56,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":57,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":58,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":59,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the printGoodbye method that prints the goodbye message.","lastModifiedDate":"2022-02-20"},{"lineNumber":60,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":61,"author":{"gitId":"ivanaitzliddat"},"content":"    public void printGoodbye() {","lastModifiedDate":"2022-02-20"},{"lineNumber":62,"author":{"gitId":"ivanaitzliddat"},"content":"        System.out.println(\"Bye! Hope to see you soon :D\");","lastModifiedDate":"2022-02-20"},{"lineNumber":63,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":64,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":65,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":66,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the showLine method that prints a line.","lastModifiedDate":"2022-02-20"},{"lineNumber":67,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":68,"author":{"gitId":"ivanaitzliddat"},"content":"    public void showLine() {","lastModifiedDate":"2022-02-20"},{"lineNumber":69,"author":{"gitId":"ivanaitzliddat"},"content":"        System.out.println(\"-----------------------------\");","lastModifiedDate":"2022-02-20"},{"lineNumber":70,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":71,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":72,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":73,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the showError method that prints the error message.","lastModifiedDate":"2022-02-20"},{"lineNumber":74,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":75,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param message The error message to be printed.","lastModifiedDate":"2022-02-20"},{"lineNumber":76,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":77,"author":{"gitId":"ivanaitzliddat"},"content":"    public void showError(String message) {","lastModifiedDate":"2022-02-20"},{"lineNumber":78,"author":{"gitId":"ivanaitzliddat"},"content":"        System.out.println(message);","lastModifiedDate":"2022-02-20"},{"lineNumber":79,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":80,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":81,"author":{"gitId":"ivanaitzliddat"},"content":"    public void showList(ArrayList\u003cTask\u003e listOfTasks) {","lastModifiedDate":"2022-02-20"},{"lineNumber":82,"author":{"gitId":"ivanaitzliddat"},"content":"        for (int i \u003d 0; i \u003c listOfTasks.size(); i++) {","lastModifiedDate":"2022-02-20"},{"lineNumber":83,"author":{"gitId":"ivanaitzliddat"},"content":"            int numbering \u003d i + 1;","lastModifiedDate":"2022-02-20"},{"lineNumber":84,"author":{"gitId":"ivanaitzliddat"},"content":"            System.out.println(numbering + \". \" + listOfTasks.get(i));","lastModifiedDate":"2022-02-20"},{"lineNumber":85,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-02-20"},{"lineNumber":86,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":87,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":88,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":89,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the showMarkCompleted method that prints the confirmation that a task has been marked as done.","lastModifiedDate":"2022-02-21"},{"lineNumber":90,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":91,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param taskMarked The task that is marked as done.","lastModifiedDate":"2022-02-20"},{"lineNumber":92,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":93,"author":{"gitId":"ivanaitzliddat"},"content":"    public void showMarkCompleted(Task taskMarked) {","lastModifiedDate":"2022-02-21"},{"lineNumber":94,"author":{"gitId":"ivanaitzliddat"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2022-02-20"},{"lineNumber":95,"author":{"gitId":"ivanaitzliddat"},"content":"        System.out.println(taskMarked);","lastModifiedDate":"2022-02-20"},{"lineNumber":96,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":97,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":98,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":99,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the showUnmarkCompleted method that prints the confirmation that a task has been marked as NOT done.","lastModifiedDate":"2022-02-20"},{"lineNumber":100,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":101,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param taskUnmarked The task that is marked as NOT done.","lastModifiedDate":"2022-02-20"},{"lineNumber":102,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":103,"author":{"gitId":"ivanaitzliddat"},"content":"    public void showUnmarkCompleted(Task taskUnmarked) {","lastModifiedDate":"2022-02-20"},{"lineNumber":104,"author":{"gitId":"ivanaitzliddat"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as NOT done:\");","lastModifiedDate":"2022-02-20"},{"lineNumber":105,"author":{"gitId":"ivanaitzliddat"},"content":"        System.out.println(taskUnmarked);","lastModifiedDate":"2022-02-20"},{"lineNumber":106,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":107,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":108,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":109,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the showDeleteDone method that prints the confirmation that a task has been deleted.","lastModifiedDate":"2022-02-20"},{"lineNumber":110,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":111,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param taskDeleted The task that is deleted.","lastModifiedDate":"2022-02-20"},{"lineNumber":112,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param numberOfTasks The number of tasks left in the list of tasks.","lastModifiedDate":"2022-02-20"},{"lineNumber":113,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":114,"author":{"gitId":"ivanaitzliddat"},"content":"    public void showDeleteDone(Task taskDeleted, int numberOfTasks) {","lastModifiedDate":"2022-02-20"},{"lineNumber":115,"author":{"gitId":"ivanaitzliddat"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task: \");","lastModifiedDate":"2022-02-20"},{"lineNumber":116,"author":{"gitId":"ivanaitzliddat"},"content":"        System.out.println(taskDeleted);","lastModifiedDate":"2022-02-20"},{"lineNumber":117,"author":{"gitId":"ivanaitzliddat"},"content":"        System.out.println(\"Now you have \" + numberOfTasks + \" tasks in the list.\");","lastModifiedDate":"2022-02-20"},{"lineNumber":118,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":119,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":120,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":121,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the showAddDone method that prints the confirmation that a task has been added.","lastModifiedDate":"2022-02-20"},{"lineNumber":122,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":123,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param task The task that is added.","lastModifiedDate":"2022-02-20"},{"lineNumber":124,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param numberOfTasks The number of tasks in the list of tasks.","lastModifiedDate":"2022-02-20"},{"lineNumber":125,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":126,"author":{"gitId":"ivanaitzliddat"},"content":"    public void showAddDone(Task task, int numberOfTasks) {","lastModifiedDate":"2022-02-20"},{"lineNumber":127,"author":{"gitId":"ivanaitzliddat"},"content":"        System.out.println(\"Got it. I have added this task: \");","lastModifiedDate":"2022-02-20"},{"lineNumber":128,"author":{"gitId":"ivanaitzliddat"},"content":"        System.out.println(task);","lastModifiedDate":"2022-02-20"},{"lineNumber":129,"author":{"gitId":"ivanaitzliddat"},"content":"        System.out.println(\"Now you have \" + numberOfTasks + \" tasks in the list.\");","lastModifiedDate":"2022-02-20"},{"lineNumber":130,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":131,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":132,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":133,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the showIndexError method that prints the error message when the index is out of range.","lastModifiedDate":"2022-02-20"},{"lineNumber":134,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":135,"author":{"gitId":"ivanaitzliddat"},"content":"    public void showIndexError() {","lastModifiedDate":"2022-02-20"},{"lineNumber":136,"author":{"gitId":"ivanaitzliddat"},"content":"        System.out.println(\"The index is out of range, please try again.\");","lastModifiedDate":"2022-02-20"},{"lineNumber":137,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":138,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":139,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":140,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the showFormatError method that prints the error message when the user input should be an integer","lastModifiedDate":"2022-02-20"},{"lineNumber":141,"author":{"gitId":"ivanaitzliddat"},"content":"     * rather than a String.","lastModifiedDate":"2022-02-20"},{"lineNumber":142,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":143,"author":{"gitId":"ivanaitzliddat"},"content":"    public void showFormatError() {","lastModifiedDate":"2022-02-20"},{"lineNumber":144,"author":{"gitId":"ivanaitzliddat"},"content":"        System.out.println(\"The index should be an integer, please try again.\");","lastModifiedDate":"2022-02-20"},{"lineNumber":145,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":146,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":147,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":148,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the showNoResults method that prints the error message when the keyword cannot be found in any of the","lastModifiedDate":"2022-02-21"},{"lineNumber":149,"author":{"gitId":"ivanaitzliddat"},"content":"     * tasks.","lastModifiedDate":"2022-02-21"},{"lineNumber":150,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":151,"author":{"gitId":"ivanaitzliddat"},"content":"    public void showNoResults() {","lastModifiedDate":"2022-02-21"},{"lineNumber":152,"author":{"gitId":"ivanaitzliddat"},"content":"        System.out.println(\"I\u0027m afraid that it is a 404 not found kinda scenario\");","lastModifiedDate":"2022-02-20"},{"lineNumber":153,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":154,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":155,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":156,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the showDateError method that prints the error message when the date which the user input is in the","lastModifiedDate":"2022-02-21"},{"lineNumber":157,"author":{"gitId":"ivanaitzliddat"},"content":"     * incorrect format.","lastModifiedDate":"2022-02-21"},{"lineNumber":158,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":159,"author":{"gitId":"ivanaitzliddat"},"content":"    public void showDateError() {","lastModifiedDate":"2022-02-20"},{"lineNumber":160,"author":{"gitId":"ivanaitzliddat"},"content":"        System.out.println(\"Please input the date in the following format: yyyy-mm-dd\");","lastModifiedDate":"2022-02-20"},{"lineNumber":161,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":162,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":163,"author":{"gitId":"ivanaitzliddat"},"content":"}","lastModifiedDate":"2022-02-18"}],"authorContributionMap":{"ivanaitzliddat":163}},{"path":"src/main/java/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivanaitzliddat"},"content":"package duke.command;","lastModifiedDate":"2022-02-20"},{"lineNumber":2,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":3,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.TaskList;","lastModifiedDate":"2022-02-20"},{"lineNumber":4,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.Ui;","lastModifiedDate":"2022-02-20"},{"lineNumber":5,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-02-20"},{"lineNumber":6,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.task.Task;","lastModifiedDate":"2022-02-20"},{"lineNumber":7,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":8,"author":{"gitId":"ivanaitzliddat"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-20"},{"lineNumber":9,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":10,"author":{"gitId":"ivanaitzliddat"},"content":"/**","lastModifiedDate":"2022-02-20"},{"lineNumber":11,"author":{"gitId":"ivanaitzliddat"},"content":" * Represents the bye command which is to be executed.","lastModifiedDate":"2022-02-20"},{"lineNumber":12,"author":{"gitId":"ivanaitzliddat"},"content":" */","lastModifiedDate":"2022-02-20"},{"lineNumber":13,"author":{"gitId":"ivanaitzliddat"},"content":"public class ByeCommand extends Command {","lastModifiedDate":"2022-02-20"},{"lineNumber":14,"author":{"gitId":"ivanaitzliddat"},"content":"    @Override","lastModifiedDate":"2022-02-20"},{"lineNumber":15,"author":{"gitId":"ivanaitzliddat"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2022-02-20"},{"lineNumber":16,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":17,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":18,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":19,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the isBye method that returns whether the command is \"bye\".","lastModifiedDate":"2022-02-20"},{"lineNumber":20,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":21,"author":{"gitId":"ivanaitzliddat"},"content":"     * @return True because the command is \"bye\".","lastModifiedDate":"2022-02-20"},{"lineNumber":22,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":23,"author":{"gitId":"ivanaitzliddat"},"content":"    @Override","lastModifiedDate":"2022-02-20"},{"lineNumber":24,"author":{"gitId":"ivanaitzliddat"},"content":"    public boolean isBye() {","lastModifiedDate":"2022-02-20"},{"lineNumber":25,"author":{"gitId":"ivanaitzliddat"},"content":"        return true;","lastModifiedDate":"2022-02-20"},{"lineNumber":26,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":27,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":28,"author":{"gitId":"ivanaitzliddat"},"content":"    @Override","lastModifiedDate":"2022-02-20"},{"lineNumber":29,"author":{"gitId":"ivanaitzliddat"},"content":"    public void executeFromFile(ArrayList\u003cTask\u003e listOfTasks) {","lastModifiedDate":"2022-02-20"},{"lineNumber":30,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":31,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":32,"author":{"gitId":"ivanaitzliddat"},"content":"}","lastModifiedDate":"2022-02-20"}],"authorContributionMap":{"ivanaitzliddat":32}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivanaitzliddat"},"content":"package duke.command;","lastModifiedDate":"2022-02-20"},{"lineNumber":2,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":3,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.TaskList;","lastModifiedDate":"2022-02-20"},{"lineNumber":4,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.Ui;","lastModifiedDate":"2022-02-20"},{"lineNumber":5,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.exception.AdditionalException;","lastModifiedDate":"2022-02-20"},{"lineNumber":6,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-02-20"},{"lineNumber":7,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.task.Task;","lastModifiedDate":"2022-02-20"},{"lineNumber":8,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":9,"author":{"gitId":"ivanaitzliddat"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-20"},{"lineNumber":10,"author":{"gitId":"ivanaitzliddat"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-20"},{"lineNumber":11,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":12,"author":{"gitId":"ivanaitzliddat"},"content":"/**","lastModifiedDate":"2022-02-20"},{"lineNumber":13,"author":{"gitId":"ivanaitzliddat"},"content":" * Represents the command which is to be executed.","lastModifiedDate":"2022-02-20"},{"lineNumber":14,"author":{"gitId":"ivanaitzliddat"},"content":" */","lastModifiedDate":"2022-02-20"},{"lineNumber":15,"author":{"gitId":"ivanaitzliddat"},"content":"public abstract class Command {","lastModifiedDate":"2022-02-20"},{"lineNumber":16,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":17,"author":{"gitId":"ivanaitzliddat"},"content":"    public abstract boolean isBye();","lastModifiedDate":"2022-02-20"},{"lineNumber":18,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":19,"author":{"gitId":"ivanaitzliddat"},"content":"    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws AdditionalException, IOException;","lastModifiedDate":"2022-02-21"},{"lineNumber":20,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":21,"author":{"gitId":"ivanaitzliddat"},"content":"    public abstract void executeFromFile(ArrayList\u003cTask\u003e listOfTasks) throws AdditionalException;","lastModifiedDate":"2022-02-20"},{"lineNumber":22,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":23,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":24,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the getDescription function that is used to get the description for todo commands.","lastModifiedDate":"2022-02-21"},{"lineNumber":25,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":26,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param typeOfTask This is the type of task.","lastModifiedDate":"2022-02-21"},{"lineNumber":27,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param fullCommand This is the full command that the user input","lastModifiedDate":"2022-02-21"},{"lineNumber":28,"author":{"gitId":"ivanaitzliddat"},"content":"     * @return The description of the tasks.","lastModifiedDate":"2022-02-21"},{"lineNumber":29,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":30,"author":{"gitId":"ivanaitzliddat"},"content":"    public String getDescription(String typeOfTask, String fullCommand) {","lastModifiedDate":"2022-02-21"},{"lineNumber":31,"author":{"gitId":"ivanaitzliddat"},"content":"        int lowerBound \u003d typeOfTask.length();","lastModifiedDate":"2022-02-21"},{"lineNumber":32,"author":{"gitId":"ivanaitzliddat"},"content":"        int upperBound \u003d fullCommand.length();","lastModifiedDate":"2022-02-21"},{"lineNumber":33,"author":{"gitId":"ivanaitzliddat"},"content":"        String description \u003d fullCommand.substring(lowerBound, upperBound);","lastModifiedDate":"2022-02-21"},{"lineNumber":34,"author":{"gitId":"ivanaitzliddat"},"content":"        return description.trim();","lastModifiedDate":"2022-02-21"},{"lineNumber":35,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":36,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":37,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":38,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the getDescription method that is used to get the description for deadline and event commands.","lastModifiedDate":"2022-02-21"},{"lineNumber":39,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":40,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param typeOfTask This is the type of task.","lastModifiedDate":"2022-02-21"},{"lineNumber":41,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param preposition This is the preposition that is used in the commands.","lastModifiedDate":"2022-02-21"},{"lineNumber":42,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param fullCommand This is the full command that the user input.","lastModifiedDate":"2022-02-21"},{"lineNumber":43,"author":{"gitId":"ivanaitzliddat"},"content":"     * @return The description of the tasks.","lastModifiedDate":"2022-02-21"},{"lineNumber":44,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":45,"author":{"gitId":"ivanaitzliddat"},"content":"    public String getDescription(String typeOfTask, String preposition, String fullCommand) throws AdditionalException {","lastModifiedDate":"2022-02-21"},{"lineNumber":46,"author":{"gitId":"ivanaitzliddat"},"content":"        int lowerBound \u003d typeOfTask.length();","lastModifiedDate":"2022-02-21"},{"lineNumber":47,"author":{"gitId":"ivanaitzliddat"},"content":"        int upperBound \u003d fullCommand.indexOf(preposition);","lastModifiedDate":"2022-02-21"},{"lineNumber":48,"author":{"gitId":"ivanaitzliddat"},"content":"        if (upperBound \u003d\u003d -1) {","lastModifiedDate":"2022-02-21"},{"lineNumber":49,"author":{"gitId":"ivanaitzliddat"},"content":"            throw new AdditionalException(\"You don\u0027t know basic grammar or what?\");","lastModifiedDate":"2022-02-21"},{"lineNumber":50,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-02-21"},{"lineNumber":51,"author":{"gitId":"ivanaitzliddat"},"content":"        String description \u003d fullCommand.substring(lowerBound, upperBound);","lastModifiedDate":"2022-02-21"},{"lineNumber":52,"author":{"gitId":"ivanaitzliddat"},"content":"        return description.trim();","lastModifiedDate":"2022-02-21"},{"lineNumber":53,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":54,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":55,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":56,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the getLocation method that is used to get the location for event commands.","lastModifiedDate":"2022-02-21"},{"lineNumber":57,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":58,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param firstPreposition This is the first preposition used in the commands.","lastModifiedDate":"2022-02-21"},{"lineNumber":59,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param secondPreposition This is the second preposition used in the commands.","lastModifiedDate":"2022-02-21"},{"lineNumber":60,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param fullCommand This is the full command that the user input.","lastModifiedDate":"2022-02-21"},{"lineNumber":61,"author":{"gitId":"ivanaitzliddat"},"content":"     * @return The location of the events.","lastModifiedDate":"2022-02-21"},{"lineNumber":62,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":63,"author":{"gitId":"ivanaitzliddat"},"content":"    public String getLocation(String firstPreposition, String secondPreposition, String fullCommand)","lastModifiedDate":"2022-02-21"},{"lineNumber":64,"author":{"gitId":"ivanaitzliddat"},"content":"            throws AdditionalException {","lastModifiedDate":"2022-02-21"},{"lineNumber":65,"author":{"gitId":"ivanaitzliddat"},"content":"        int lowerBound \u003d fullCommand.indexOf(firstPreposition) + firstPreposition.length();","lastModifiedDate":"2022-02-21"},{"lineNumber":66,"author":{"gitId":"ivanaitzliddat"},"content":"        int upperBound \u003d fullCommand.indexOf(secondPreposition);","lastModifiedDate":"2022-02-21"},{"lineNumber":67,"author":{"gitId":"ivanaitzliddat"},"content":"        if (upperBound \u003d\u003d -1) {","lastModifiedDate":"2022-02-21"},{"lineNumber":68,"author":{"gitId":"ivanaitzliddat"},"content":"            throw new AdditionalException(\"The event has to be ON a certain date right?\");","lastModifiedDate":"2022-02-21"},{"lineNumber":69,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-02-21"},{"lineNumber":70,"author":{"gitId":"ivanaitzliddat"},"content":"        String location \u003d fullCommand.substring(lowerBound, upperBound);","lastModifiedDate":"2022-02-21"},{"lineNumber":71,"author":{"gitId":"ivanaitzliddat"},"content":"        return location.trim();","lastModifiedDate":"2022-02-21"},{"lineNumber":72,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":73,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":74,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":75,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the getDate method that is used to get the date for deadline and event commands.","lastModifiedDate":"2022-02-21"},{"lineNumber":76,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":77,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param preposition This is the preposition used in the commands.","lastModifiedDate":"2022-02-21"},{"lineNumber":78,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param fullCommand This is the full command that the user input.","lastModifiedDate":"2022-02-21"},{"lineNumber":79,"author":{"gitId":"ivanaitzliddat"},"content":"     * @return The date of the tasks.","lastModifiedDate":"2022-02-21"},{"lineNumber":80,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":81,"author":{"gitId":"ivanaitzliddat"},"content":"    public String getDate (String preposition, String fullCommand) {","lastModifiedDate":"2022-02-21"},{"lineNumber":82,"author":{"gitId":"ivanaitzliddat"},"content":"        int lowerBound \u003d fullCommand.indexOf(preposition) + preposition.length();","lastModifiedDate":"2022-02-21"},{"lineNumber":83,"author":{"gitId":"ivanaitzliddat"},"content":"        int upperBound \u003d fullCommand.length();","lastModifiedDate":"2022-02-21"},{"lineNumber":84,"author":{"gitId":"ivanaitzliddat"},"content":"        String date \u003d fullCommand.substring(lowerBound, upperBound);","lastModifiedDate":"2022-02-21"},{"lineNumber":85,"author":{"gitId":"ivanaitzliddat"},"content":"        return date.trim();","lastModifiedDate":"2022-02-21"},{"lineNumber":86,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":87,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":88,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":89,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the getIndex method that is used to get the index for mark and unmark commands.","lastModifiedDate":"2022-02-21"},{"lineNumber":90,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":91,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param fullCommand This is the full command that the user input.","lastModifiedDate":"2022-02-21"},{"lineNumber":92,"author":{"gitId":"ivanaitzliddat"},"content":"     * @return The index to mark or unmark.","lastModifiedDate":"2022-02-21"},{"lineNumber":93,"author":{"gitId":"ivanaitzliddat"},"content":"     * @throws AdditionalException If the user did not input exactly 1 index.","lastModifiedDate":"2022-02-21"},{"lineNumber":94,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":95,"author":{"gitId":"ivanaitzliddat"},"content":"    public int getIndex(String fullCommand) throws AdditionalException {","lastModifiedDate":"2022-02-21"},{"lineNumber":96,"author":{"gitId":"ivanaitzliddat"},"content":"        String[] words \u003d fullCommand.split(\" \");","lastModifiedDate":"2022-02-21"},{"lineNumber":97,"author":{"gitId":"ivanaitzliddat"},"content":"        if (words.length !\u003d 2) {","lastModifiedDate":"2022-02-21"},{"lineNumber":98,"author":{"gitId":"ivanaitzliddat"},"content":"            throw new AdditionalException(\"Please input the index and only the index\");","lastModifiedDate":"2022-02-21"},{"lineNumber":99,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-02-21"},{"lineNumber":100,"author":{"gitId":"ivanaitzliddat"},"content":"        int index \u003d Integer.parseInt(words[1]) - 1;","lastModifiedDate":"2022-02-21"},{"lineNumber":101,"author":{"gitId":"ivanaitzliddat"},"content":"        return index;","lastModifiedDate":"2022-02-21"},{"lineNumber":102,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":103,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":104,"author":{"gitId":"ivanaitzliddat"},"content":"}","lastModifiedDate":"2022-02-20"}],"authorContributionMap":{"ivanaitzliddat":104}},{"path":"src/main/java/duke/command/DateCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivanaitzliddat"},"content":"package duke.command;","lastModifiedDate":"2022-02-20"},{"lineNumber":2,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":3,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.TaskList;","lastModifiedDate":"2022-02-20"},{"lineNumber":4,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.Ui;","lastModifiedDate":"2022-02-20"},{"lineNumber":5,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.exception.AdditionalException;","lastModifiedDate":"2022-02-20"},{"lineNumber":6,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-02-20"},{"lineNumber":7,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.task.Deadline;","lastModifiedDate":"2022-02-21"},{"lineNumber":8,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.task.Event;","lastModifiedDate":"2022-02-21"},{"lineNumber":9,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.task.Task;","lastModifiedDate":"2022-02-20"},{"lineNumber":10,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":11,"author":{"gitId":"ivanaitzliddat"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-02-20"},{"lineNumber":12,"author":{"gitId":"ivanaitzliddat"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-20"},{"lineNumber":13,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":14,"author":{"gitId":"ivanaitzliddat"},"content":"/**","lastModifiedDate":"2022-02-21"},{"lineNumber":15,"author":{"gitId":"ivanaitzliddat"},"content":" * Represents the date command which is to be executed.","lastModifiedDate":"2022-02-21"},{"lineNumber":16,"author":{"gitId":"ivanaitzliddat"},"content":" */","lastModifiedDate":"2022-02-21"},{"lineNumber":17,"author":{"gitId":"ivanaitzliddat"},"content":"public class DateCommand extends Command {","lastModifiedDate":"2022-02-20"},{"lineNumber":18,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":19,"author":{"gitId":"ivanaitzliddat"},"content":"    private String fullCommand;","lastModifiedDate":"2022-02-20"},{"lineNumber":20,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":21,"author":{"gitId":"ivanaitzliddat"},"content":"    public DateCommand(String fullCommand) {","lastModifiedDate":"2022-02-20"},{"lineNumber":22,"author":{"gitId":"ivanaitzliddat"},"content":"        this.fullCommand \u003d fullCommand;","lastModifiedDate":"2022-02-20"},{"lineNumber":23,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":24,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":25,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":26,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the execute method that runs when there is a date command.","lastModifiedDate":"2022-02-21"},{"lineNumber":27,"author":{"gitId":"ivanaitzliddat"},"content":"     * The method will search through the list of tasks that is stored in the TaskList tasks and print the tasks","lastModifiedDate":"2022-02-21"},{"lineNumber":28,"author":{"gitId":"ivanaitzliddat"},"content":"     * that match the date which the user input.","lastModifiedDate":"2022-02-21"},{"lineNumber":29,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":30,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param tasks The TaskList object that contains the list of tasks.","lastModifiedDate":"2022-02-21"},{"lineNumber":31,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param ui The user interface object that allows for printing of the confirmation message.","lastModifiedDate":"2022-02-21"},{"lineNumber":32,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param storage The storage object which allows for the saving of the tasks to the file.","lastModifiedDate":"2022-02-21"},{"lineNumber":33,"author":{"gitId":"ivanaitzliddat"},"content":"     * @throws AdditionalException If the date is in an incorrect format.","lastModifiedDate":"2022-02-21"},{"lineNumber":34,"author":{"gitId":"ivanaitzliddat"},"content":"     * @see AdditionalException","lastModifiedDate":"2022-02-21"},{"lineNumber":35,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":36,"author":{"gitId":"ivanaitzliddat"},"content":"    @Override","lastModifiedDate":"2022-02-20"},{"lineNumber":37,"author":{"gitId":"ivanaitzliddat"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws AdditionalException {","lastModifiedDate":"2022-02-20"},{"lineNumber":38,"author":{"gitId":"ivanaitzliddat"},"content":"        LocalDate date \u003d getDate();","lastModifiedDate":"2022-02-21"},{"lineNumber":39,"author":{"gitId":"ivanaitzliddat"},"content":"        ArrayList\u003cTask\u003e listOfTasks \u003d getListOfSameDates(tasks, date);","lastModifiedDate":"2022-02-21"},{"lineNumber":40,"author":{"gitId":"ivanaitzliddat"},"content":"        ui.showList(listOfTasks);","lastModifiedDate":"2022-02-21"},{"lineNumber":41,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":42,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":43,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":44,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the isBye method that returns whether the command is \"bye\".","lastModifiedDate":"2022-02-21"},{"lineNumber":45,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":46,"author":{"gitId":"ivanaitzliddat"},"content":"     * @return False because the command is \"date\".","lastModifiedDate":"2022-02-21"},{"lineNumber":47,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":48,"author":{"gitId":"ivanaitzliddat"},"content":"    @Override","lastModifiedDate":"2022-02-21"},{"lineNumber":49,"author":{"gitId":"ivanaitzliddat"},"content":"    public boolean isBye() {","lastModifiedDate":"2022-02-21"},{"lineNumber":50,"author":{"gitId":"ivanaitzliddat"},"content":"        return false;","lastModifiedDate":"2022-02-21"},{"lineNumber":51,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":52,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":53,"author":{"gitId":"ivanaitzliddat"},"content":"    @Override","lastModifiedDate":"2022-02-21"},{"lineNumber":54,"author":{"gitId":"ivanaitzliddat"},"content":"    public void executeFromFile(ArrayList\u003cTask\u003e listOfTasks) throws AdditionalException {","lastModifiedDate":"2022-02-21"},{"lineNumber":55,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":56,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":57,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":58,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the getDate method that gets the date the user is requesting to search for.","lastModifiedDate":"2022-02-21"},{"lineNumber":59,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":60,"author":{"gitId":"ivanaitzliddat"},"content":"     * @return The date that to be searched for.","lastModifiedDate":"2022-02-21"},{"lineNumber":61,"author":{"gitId":"ivanaitzliddat"},"content":"     * @throws AdditionalException If the date is in an incorrect format.","lastModifiedDate":"2022-02-21"},{"lineNumber":62,"author":{"gitId":"ivanaitzliddat"},"content":"     * @see AdditionalException","lastModifiedDate":"2022-02-21"},{"lineNumber":63,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":64,"author":{"gitId":"ivanaitzliddat"},"content":"    private LocalDate getDate() throws AdditionalException {","lastModifiedDate":"2022-02-21"},{"lineNumber":65,"author":{"gitId":"ivanaitzliddat"},"content":"        String[] words \u003d fullCommand.split(\" \");","lastModifiedDate":"2022-02-20"},{"lineNumber":66,"author":{"gitId":"ivanaitzliddat"},"content":"        if (words.length !\u003d 2) {","lastModifiedDate":"2022-02-20"},{"lineNumber":67,"author":{"gitId":"ivanaitzliddat"},"content":"            throw new AdditionalException(\"Please input the date in the correct format and only the date\");","lastModifiedDate":"2022-02-20"},{"lineNumber":68,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-02-20"},{"lineNumber":69,"author":{"gitId":"ivanaitzliddat"},"content":"        LocalDate date \u003d LocalDate.parse(words[1]);","lastModifiedDate":"2022-02-20"},{"lineNumber":70,"author":{"gitId":"ivanaitzliddat"},"content":"        return date;","lastModifiedDate":"2022-02-21"},{"lineNumber":71,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":72,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":73,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":74,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the getListOfSameDates method that returns a list of tasks with the same date amongst the tasks","lastModifiedDate":"2022-02-21"},{"lineNumber":75,"author":{"gitId":"ivanaitzliddat"},"content":"     * in the list of tasks.","lastModifiedDate":"2022-02-21"},{"lineNumber":76,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":77,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param date The date that is to be compared with the date of tasks.","lastModifiedDate":"2022-02-21"},{"lineNumber":78,"author":{"gitId":"ivanaitzliddat"},"content":"     * @return The list of tasks with the same date.","lastModifiedDate":"2022-02-21"},{"lineNumber":79,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":80,"author":{"gitId":"ivanaitzliddat"},"content":"    private ArrayList\u003cTask\u003e getListOfSameDates(TaskList tasks, LocalDate date) {","lastModifiedDate":"2022-02-21"},{"lineNumber":81,"author":{"gitId":"ivanaitzliddat"},"content":"        ArrayList\u003cTask\u003e listOfTasksWithSameDate \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-02-21"},{"lineNumber":82,"author":{"gitId":"ivanaitzliddat"},"content":"        for (int i \u003d 0; i \u003c tasks.getSize(); i++) {","lastModifiedDate":"2022-02-21"},{"lineNumber":83,"author":{"gitId":"ivanaitzliddat"},"content":"            addToList(listOfTasksWithSameDate, date, tasks.getTask(i));","lastModifiedDate":"2022-02-21"},{"lineNumber":84,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-02-21"},{"lineNumber":85,"author":{"gitId":"ivanaitzliddat"},"content":"        return listOfTasksWithSameDate;","lastModifiedDate":"2022-02-21"},{"lineNumber":86,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":87,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":88,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":89,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the addToList method that takes in the list of tasks with same date and passes it to the addIfSameDate","lastModifiedDate":"2022-02-21"},{"lineNumber":90,"author":{"gitId":"ivanaitzliddat"},"content":"     * method when there is a task, with the same date of the user input, in the list of tasks.","lastModifiedDate":"2022-02-21"},{"lineNumber":91,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":92,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param tasksWithSameDate The list of tasks with the same date.","lastModifiedDate":"2022-02-21"},{"lineNumber":93,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param date The date that is to be compared with the date of tasks.","lastModifiedDate":"2022-02-21"},{"lineNumber":94,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param task The task to be compared with.","lastModifiedDate":"2022-02-21"},{"lineNumber":95,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":96,"author":{"gitId":"ivanaitzliddat"},"content":"    private void addToList(ArrayList\u003cTask\u003e tasksWithSameDate, LocalDate date, Task task) {","lastModifiedDate":"2022-02-21"},{"lineNumber":97,"author":{"gitId":"ivanaitzliddat"},"content":"        LocalDate dateOfTask;","lastModifiedDate":"2022-02-21"},{"lineNumber":98,"author":{"gitId":"ivanaitzliddat"},"content":"        if (task instanceof Deadline) {","lastModifiedDate":"2022-02-21"},{"lineNumber":99,"author":{"gitId":"ivanaitzliddat"},"content":"            Deadline deadline \u003d (Deadline) task;","lastModifiedDate":"2022-02-21"},{"lineNumber":100,"author":{"gitId":"ivanaitzliddat"},"content":"            dateOfTask \u003d deadline.getDate();","lastModifiedDate":"2022-02-21"},{"lineNumber":101,"author":{"gitId":"ivanaitzliddat"},"content":"            addIfSameDate(tasksWithSameDate, date, dateOfTask, deadline);","lastModifiedDate":"2022-02-21"},{"lineNumber":102,"author":{"gitId":"ivanaitzliddat"},"content":"        } else if (task instanceof Event) {","lastModifiedDate":"2022-02-21"},{"lineNumber":103,"author":{"gitId":"ivanaitzliddat"},"content":"            Event event \u003d (Event) task;","lastModifiedDate":"2022-02-21"},{"lineNumber":104,"author":{"gitId":"ivanaitzliddat"},"content":"            dateOfTask \u003d event.getDate();","lastModifiedDate":"2022-02-21"},{"lineNumber":105,"author":{"gitId":"ivanaitzliddat"},"content":"            addIfSameDate(tasksWithSameDate, date, dateOfTask, event);","lastModifiedDate":"2022-02-21"},{"lineNumber":106,"author":{"gitId":"ivanaitzliddat"},"content":"        } else {","lastModifiedDate":"2022-02-21"},{"lineNumber":107,"author":{"gitId":"ivanaitzliddat"},"content":"            return;","lastModifiedDate":"2022-02-21"},{"lineNumber":108,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-02-21"},{"lineNumber":109,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":110,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":111,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":112,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":113,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the addIfSameDate method that takes in the list of tasks with same date and adds the task to the","lastModifiedDate":"2022-02-21"},{"lineNumber":114,"author":{"gitId":"ivanaitzliddat"},"content":"     * list of tasks with same date when the date matches.","lastModifiedDate":"2022-02-21"},{"lineNumber":115,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":116,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param tasksWithSameDate The list of tasks with the same date.","lastModifiedDate":"2022-02-21"},{"lineNumber":117,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param date The date that is to be compared with the date of the tasks.","lastModifiedDate":"2022-02-21"},{"lineNumber":118,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param dateOfTask The date of the task that is being compared with.","lastModifiedDate":"2022-02-21"},{"lineNumber":119,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param task The task that is being compared with, and added if it has the same date.","lastModifiedDate":"2022-02-21"},{"lineNumber":120,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":121,"author":{"gitId":"ivanaitzliddat"},"content":"    private void addIfSameDate(ArrayList\u003cTask\u003e tasksWithSameDate, LocalDate date, LocalDate dateOfTask, Task task) {","lastModifiedDate":"2022-02-21"},{"lineNumber":122,"author":{"gitId":"ivanaitzliddat"},"content":"        if (date.equals(dateOfTask)) {","lastModifiedDate":"2022-02-21"},{"lineNumber":123,"author":{"gitId":"ivanaitzliddat"},"content":"            tasksWithSameDate.add(task);","lastModifiedDate":"2022-02-21"},{"lineNumber":124,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-02-21"},{"lineNumber":125,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":126,"author":{"gitId":"ivanaitzliddat"},"content":"}","lastModifiedDate":"2022-02-20"}],"authorContributionMap":{"ivanaitzliddat":126}},{"path":"src/main/java/duke/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivanaitzliddat"},"content":"package duke.command;","lastModifiedDate":"2022-02-20"},{"lineNumber":2,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":3,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.TaskList;","lastModifiedDate":"2022-02-20"},{"lineNumber":4,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.Ui;","lastModifiedDate":"2022-02-20"},{"lineNumber":5,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.exception.AdditionalException;","lastModifiedDate":"2022-02-20"},{"lineNumber":6,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-02-20"},{"lineNumber":7,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.task.Deadline;","lastModifiedDate":"2022-02-20"},{"lineNumber":8,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.task.Task;","lastModifiedDate":"2022-02-20"},{"lineNumber":9,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":10,"author":{"gitId":"ivanaitzliddat"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-20"},{"lineNumber":11,"author":{"gitId":"ivanaitzliddat"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-02-20"},{"lineNumber":12,"author":{"gitId":"ivanaitzliddat"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-02-20"},{"lineNumber":13,"author":{"gitId":"ivanaitzliddat"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-20"},{"lineNumber":14,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":15,"author":{"gitId":"ivanaitzliddat"},"content":"/**","lastModifiedDate":"2022-02-20"},{"lineNumber":16,"author":{"gitId":"ivanaitzliddat"},"content":" * Represents the deadline command which is to be executed.","lastModifiedDate":"2022-02-20"},{"lineNumber":17,"author":{"gitId":"ivanaitzliddat"},"content":" */","lastModifiedDate":"2022-02-20"},{"lineNumber":18,"author":{"gitId":"ivanaitzliddat"},"content":"public class DeadlineCommand extends Command {","lastModifiedDate":"2022-02-20"},{"lineNumber":19,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":20,"author":{"gitId":"ivanaitzliddat"},"content":"    private static final String TYPE_OF_TASK \u003d \"deadline\";","lastModifiedDate":"2022-02-20"},{"lineNumber":21,"author":{"gitId":"ivanaitzliddat"},"content":"    private static final String PREPOSITION \u003d \"/by\";","lastModifiedDate":"2022-02-20"},{"lineNumber":22,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":23,"author":{"gitId":"ivanaitzliddat"},"content":"    private String fullCommand;","lastModifiedDate":"2022-02-20"},{"lineNumber":24,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":25,"author":{"gitId":"ivanaitzliddat"},"content":"    public DeadlineCommand(String fullCommand) {","lastModifiedDate":"2022-02-20"},{"lineNumber":26,"author":{"gitId":"ivanaitzliddat"},"content":"        this.fullCommand \u003d fullCommand;","lastModifiedDate":"2022-02-20"},{"lineNumber":27,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":28,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":29,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":30,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the execute method that runs when there is an deadline command.","lastModifiedDate":"2022-02-20"},{"lineNumber":31,"author":{"gitId":"ivanaitzliddat"},"content":"     * The method will add the task to the list of tasks in the TaskList object.","lastModifiedDate":"2022-02-20"},{"lineNumber":32,"author":{"gitId":"ivanaitzliddat"},"content":"     * It will then print the confirmation for adding the task and updates the file.","lastModifiedDate":"2022-02-20"},{"lineNumber":33,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":34,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param tasks The TaskList object that contains the list of tasks.","lastModifiedDate":"2022-02-20"},{"lineNumber":35,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param ui The user interface object that allows for printing of the confirmation message.","lastModifiedDate":"2022-02-20"},{"lineNumber":36,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param storage The storage object which allows for the saving of the tasks to the file.","lastModifiedDate":"2022-02-20"},{"lineNumber":37,"author":{"gitId":"ivanaitzliddat"},"content":"     * @throws IOException If there is an error saving tasks to the file.","lastModifiedDate":"2022-02-20"},{"lineNumber":38,"author":{"gitId":"ivanaitzliddat"},"content":"     * @see IOException","lastModifiedDate":"2022-02-20"},{"lineNumber":39,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":40,"author":{"gitId":"ivanaitzliddat"},"content":"    @Override","lastModifiedDate":"2022-02-20"},{"lineNumber":41,"author":{"gitId":"ivanaitzliddat"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws AdditionalException, IOException,","lastModifiedDate":"2022-02-20"},{"lineNumber":42,"author":{"gitId":"ivanaitzliddat"},"content":"            DateTimeParseException {","lastModifiedDate":"2022-02-20"},{"lineNumber":43,"author":{"gitId":"ivanaitzliddat"},"content":"        String description \u003d getDescription(TYPE_OF_TASK, PREPOSITION, fullCommand);","lastModifiedDate":"2022-02-21"},{"lineNumber":44,"author":{"gitId":"ivanaitzliddat"},"content":"        if (description.length() \u003c 1) {","lastModifiedDate":"2022-02-21"},{"lineNumber":45,"author":{"gitId":"ivanaitzliddat"},"content":"            throw new AdditionalException(\"What is your deadline for..?\");","lastModifiedDate":"2022-02-21"},{"lineNumber":46,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-02-21"},{"lineNumber":47,"author":{"gitId":"ivanaitzliddat"},"content":"        String date \u003d getDate(PREPOSITION, fullCommand);","lastModifiedDate":"2022-02-21"},{"lineNumber":48,"author":{"gitId":"ivanaitzliddat"},"content":"        if (date.length() \u003c 1) {","lastModifiedDate":"2022-02-21"},{"lineNumber":49,"author":{"gitId":"ivanaitzliddat"},"content":"            throw new AdditionalException(\"You have a deadline but you don\u0027t have a deadline?\");","lastModifiedDate":"2022-02-21"},{"lineNumber":50,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-02-21"},{"lineNumber":51,"author":{"gitId":"ivanaitzliddat"},"content":"        LocalDate dateOfDeadline \u003d LocalDate.parse(date);","lastModifiedDate":"2022-02-20"},{"lineNumber":52,"author":{"gitId":"ivanaitzliddat"},"content":"        Deadline deadline \u003d new Deadline(description, dateOfDeadline, TYPE_OF_TASK);","lastModifiedDate":"2022-02-20"},{"lineNumber":53,"author":{"gitId":"ivanaitzliddat"},"content":"        tasks.addTask(deadline);","lastModifiedDate":"2022-02-20"},{"lineNumber":54,"author":{"gitId":"ivanaitzliddat"},"content":"        ui.showAddDone(deadline, tasks.getSize());","lastModifiedDate":"2022-02-20"},{"lineNumber":55,"author":{"gitId":"ivanaitzliddat"},"content":"        storage.save(deadline);","lastModifiedDate":"2022-02-20"},{"lineNumber":56,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":57,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":58,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":59,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the isBye method that returns whether the command is \"bye\".","lastModifiedDate":"2022-02-20"},{"lineNumber":60,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":61,"author":{"gitId":"ivanaitzliddat"},"content":"     * @return False because the command is \"deadline\".","lastModifiedDate":"2022-02-20"},{"lineNumber":62,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":63,"author":{"gitId":"ivanaitzliddat"},"content":"    @Override","lastModifiedDate":"2022-02-20"},{"lineNumber":64,"author":{"gitId":"ivanaitzliddat"},"content":"    public boolean isBye() {","lastModifiedDate":"2022-02-20"},{"lineNumber":65,"author":{"gitId":"ivanaitzliddat"},"content":"        return false;","lastModifiedDate":"2022-02-20"},{"lineNumber":66,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":67,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":68,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":69,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the executeFromFile method that takes in a list of tasks and adds a new deadline task to the","lastModifiedDate":"2022-02-20"},{"lineNumber":70,"author":{"gitId":"ivanaitzliddat"},"content":"     * list of tasks.","lastModifiedDate":"2022-02-20"},{"lineNumber":71,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":72,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param listOfTasks This is the list of tasks that the new task is to be added to.","lastModifiedDate":"2022-02-20"},{"lineNumber":73,"author":{"gitId":"ivanaitzliddat"},"content":"     * @throws AdditionalException If there is no description provided in the fullCommand.","lastModifiedDate":"2022-02-20"},{"lineNumber":74,"author":{"gitId":"ivanaitzliddat"},"content":"     * @see AdditionalException","lastModifiedDate":"2022-02-20"},{"lineNumber":75,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":76,"author":{"gitId":"ivanaitzliddat"},"content":"    @Override","lastModifiedDate":"2022-02-20"},{"lineNumber":77,"author":{"gitId":"ivanaitzliddat"},"content":"    public void executeFromFile(ArrayList\u003cTask\u003e listOfTasks) throws AdditionalException {","lastModifiedDate":"2022-02-20"},{"lineNumber":78,"author":{"gitId":"ivanaitzliddat"},"content":"        String description \u003d getDescription(TYPE_OF_TASK, PREPOSITION, fullCommand);","lastModifiedDate":"2022-02-21"},{"lineNumber":79,"author":{"gitId":"ivanaitzliddat"},"content":"        String date \u003d getDate(PREPOSITION, fullCommand);","lastModifiedDate":"2022-02-21"},{"lineNumber":80,"author":{"gitId":"ivanaitzliddat"},"content":"        if (description.length() \u003c 1 | date.length() \u003c 1) {","lastModifiedDate":"2022-02-21"},{"lineNumber":81,"author":{"gitId":"ivanaitzliddat"},"content":"            throw new AdditionalException(\"Did you accidentally edit the file?\");","lastModifiedDate":"2022-02-21"},{"lineNumber":82,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-02-21"},{"lineNumber":83,"author":{"gitId":"ivanaitzliddat"},"content":"        LocalDate dateOfDeadline \u003d LocalDate.parse(date);","lastModifiedDate":"2022-02-20"},{"lineNumber":84,"author":{"gitId":"ivanaitzliddat"},"content":"        listOfTasks.add(new Deadline(description, dateOfDeadline, TYPE_OF_TASK));","lastModifiedDate":"2022-02-20"},{"lineNumber":85,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":86,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":87,"author":{"gitId":"ivanaitzliddat"},"content":"}","lastModifiedDate":"2022-02-20"}],"authorContributionMap":{"ivanaitzliddat":87}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivanaitzliddat"},"content":"package duke.command;","lastModifiedDate":"2022-02-20"},{"lineNumber":2,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":3,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.TaskList;","lastModifiedDate":"2022-02-20"},{"lineNumber":4,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.Ui;","lastModifiedDate":"2022-02-20"},{"lineNumber":5,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.exception.AdditionalException;","lastModifiedDate":"2022-02-20"},{"lineNumber":6,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-02-20"},{"lineNumber":7,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.task.Task;","lastModifiedDate":"2022-02-20"},{"lineNumber":8,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":9,"author":{"gitId":"ivanaitzliddat"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-20"},{"lineNumber":10,"author":{"gitId":"ivanaitzliddat"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-20"},{"lineNumber":11,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":12,"author":{"gitId":"ivanaitzliddat"},"content":"/**","lastModifiedDate":"2022-02-20"},{"lineNumber":13,"author":{"gitId":"ivanaitzliddat"},"content":" * Represents the delete command which is to be executed.","lastModifiedDate":"2022-02-20"},{"lineNumber":14,"author":{"gitId":"ivanaitzliddat"},"content":" */","lastModifiedDate":"2022-02-20"},{"lineNumber":15,"author":{"gitId":"ivanaitzliddat"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2022-02-20"},{"lineNumber":16,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":17,"author":{"gitId":"ivanaitzliddat"},"content":"    private String fullCommand;","lastModifiedDate":"2022-02-20"},{"lineNumber":18,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":19,"author":{"gitId":"ivanaitzliddat"},"content":"    public DeleteCommand(String fullCommand) {","lastModifiedDate":"2022-02-20"},{"lineNumber":20,"author":{"gitId":"ivanaitzliddat"},"content":"        this.fullCommand \u003d fullCommand;","lastModifiedDate":"2022-02-20"},{"lineNumber":21,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":22,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":23,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":24,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the execute method that runs when there is a delete command.","lastModifiedDate":"2022-02-20"},{"lineNumber":25,"author":{"gitId":"ivanaitzliddat"},"content":"     * The method will identify the task to be deleted and proceeds to delete it.","lastModifiedDate":"2022-02-20"},{"lineNumber":26,"author":{"gitId":"ivanaitzliddat"},"content":"     * It will then print the confirmation for deleting the task and updates the file.","lastModifiedDate":"2022-02-20"},{"lineNumber":27,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":28,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param tasks The TaskList object that contains the list of tasks.","lastModifiedDate":"2022-02-20"},{"lineNumber":29,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param ui The user interface object that allows for printing of the confirmation message.","lastModifiedDate":"2022-02-20"},{"lineNumber":30,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param storage The storage object which allows for the saving of the tasks to the file.","lastModifiedDate":"2022-02-20"},{"lineNumber":31,"author":{"gitId":"ivanaitzliddat"},"content":"     * @throws IOException If there is an error saving tasks to the file.","lastModifiedDate":"2022-02-20"},{"lineNumber":32,"author":{"gitId":"ivanaitzliddat"},"content":"     * @see IOException","lastModifiedDate":"2022-02-20"},{"lineNumber":33,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":34,"author":{"gitId":"ivanaitzliddat"},"content":"    @Override","lastModifiedDate":"2022-02-20"},{"lineNumber":35,"author":{"gitId":"ivanaitzliddat"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws IOException, AdditionalException {","lastModifiedDate":"2022-02-20"},{"lineNumber":36,"author":{"gitId":"ivanaitzliddat"},"content":"        String[] words \u003d fullCommand.split(\" \");","lastModifiedDate":"2022-02-20"},{"lineNumber":37,"author":{"gitId":"ivanaitzliddat"},"content":"        if (words.length !\u003d 2) {","lastModifiedDate":"2022-02-20"},{"lineNumber":38,"author":{"gitId":"ivanaitzliddat"},"content":"            throw new AdditionalException(\"Please input the index and only the index\");","lastModifiedDate":"2022-02-20"},{"lineNumber":39,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-02-20"},{"lineNumber":40,"author":{"gitId":"ivanaitzliddat"},"content":"        int indexToDelete \u003d Integer.parseInt(words[1]) - 1;","lastModifiedDate":"2022-02-20"},{"lineNumber":41,"author":{"gitId":"ivanaitzliddat"},"content":"        Task taskToDelete \u003d tasks.getTask(indexToDelete);","lastModifiedDate":"2022-02-20"},{"lineNumber":42,"author":{"gitId":"ivanaitzliddat"},"content":"        tasks.deleteTask(indexToDelete);","lastModifiedDate":"2022-02-20"},{"lineNumber":43,"author":{"gitId":"ivanaitzliddat"},"content":"        int numberOfTasks \u003d tasks.getSize();","lastModifiedDate":"2022-02-20"},{"lineNumber":44,"author":{"gitId":"ivanaitzliddat"},"content":"        ui.showDeleteDone(taskToDelete, numberOfTasks);","lastModifiedDate":"2022-02-20"},{"lineNumber":45,"author":{"gitId":"ivanaitzliddat"},"content":"        storage.saveAll(tasks);","lastModifiedDate":"2022-02-20"},{"lineNumber":46,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":47,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":48,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":49,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the isBye method that returns whether the command is \"bye\".","lastModifiedDate":"2022-02-20"},{"lineNumber":50,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":51,"author":{"gitId":"ivanaitzliddat"},"content":"     * @return False because the command is \"delete\".","lastModifiedDate":"2022-02-20"},{"lineNumber":52,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":53,"author":{"gitId":"ivanaitzliddat"},"content":"    @Override","lastModifiedDate":"2022-02-20"},{"lineNumber":54,"author":{"gitId":"ivanaitzliddat"},"content":"    public boolean isBye() {","lastModifiedDate":"2022-02-20"},{"lineNumber":55,"author":{"gitId":"ivanaitzliddat"},"content":"        return false;","lastModifiedDate":"2022-02-20"},{"lineNumber":56,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":57,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":58,"author":{"gitId":"ivanaitzliddat"},"content":"    @Override","lastModifiedDate":"2022-02-20"},{"lineNumber":59,"author":{"gitId":"ivanaitzliddat"},"content":"    public void executeFromFile(ArrayList\u003cTask\u003e listOfTasks) {","lastModifiedDate":"2022-02-20"},{"lineNumber":60,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":61,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":62,"author":{"gitId":"ivanaitzliddat"},"content":"}","lastModifiedDate":"2022-02-20"}],"authorContributionMap":{"ivanaitzliddat":62}},{"path":"src/main/java/duke/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivanaitzliddat"},"content":"package duke.command;","lastModifiedDate":"2022-02-20"},{"lineNumber":2,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":3,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.TaskList;","lastModifiedDate":"2022-02-20"},{"lineNumber":4,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.Ui;","lastModifiedDate":"2022-02-20"},{"lineNumber":5,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.exception.AdditionalException;","lastModifiedDate":"2022-02-20"},{"lineNumber":6,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-02-20"},{"lineNumber":7,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.task.Event;","lastModifiedDate":"2022-02-20"},{"lineNumber":8,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.task.Task;","lastModifiedDate":"2022-02-20"},{"lineNumber":9,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":10,"author":{"gitId":"ivanaitzliddat"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-20"},{"lineNumber":11,"author":{"gitId":"ivanaitzliddat"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-02-20"},{"lineNumber":12,"author":{"gitId":"ivanaitzliddat"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-02-20"},{"lineNumber":13,"author":{"gitId":"ivanaitzliddat"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-20"},{"lineNumber":14,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":15,"author":{"gitId":"ivanaitzliddat"},"content":"/**","lastModifiedDate":"2022-02-20"},{"lineNumber":16,"author":{"gitId":"ivanaitzliddat"},"content":" * Represents the event command which is to be executed.","lastModifiedDate":"2022-02-20"},{"lineNumber":17,"author":{"gitId":"ivanaitzliddat"},"content":" */","lastModifiedDate":"2022-02-20"},{"lineNumber":18,"author":{"gitId":"ivanaitzliddat"},"content":"public class EventCommand extends Command {","lastModifiedDate":"2022-02-20"},{"lineNumber":19,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":20,"author":{"gitId":"ivanaitzliddat"},"content":"    private static final String TYPE_OF_TASK \u003d \"event\";","lastModifiedDate":"2022-02-20"},{"lineNumber":21,"author":{"gitId":"ivanaitzliddat"},"content":"    private static final String PREPOSITION_AT \u003d \"/at\";","lastModifiedDate":"2022-02-20"},{"lineNumber":22,"author":{"gitId":"ivanaitzliddat"},"content":"    private static final String PREPOSITION_ON \u003d \"/on\";","lastModifiedDate":"2022-02-20"},{"lineNumber":23,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":24,"author":{"gitId":"ivanaitzliddat"},"content":"    private String fullCommand;","lastModifiedDate":"2022-02-20"},{"lineNumber":25,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":26,"author":{"gitId":"ivanaitzliddat"},"content":"    public EventCommand(String fullCommand) {","lastModifiedDate":"2022-02-20"},{"lineNumber":27,"author":{"gitId":"ivanaitzliddat"},"content":"        this.fullCommand \u003d fullCommand;","lastModifiedDate":"2022-02-20"},{"lineNumber":28,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":29,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":30,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":31,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the execute method that runs when there is an event command.","lastModifiedDate":"2022-02-20"},{"lineNumber":32,"author":{"gitId":"ivanaitzliddat"},"content":"     * The method will add the task to the list of tasks in the TaskList object.","lastModifiedDate":"2022-02-20"},{"lineNumber":33,"author":{"gitId":"ivanaitzliddat"},"content":"     * It will then print the confirmation for adding the task and updates the file.","lastModifiedDate":"2022-02-20"},{"lineNumber":34,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":35,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param tasks The TaskList object that contains the list of tasks.","lastModifiedDate":"2022-02-20"},{"lineNumber":36,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param ui The user interface object that allows for printing of the confirmation message.","lastModifiedDate":"2022-02-20"},{"lineNumber":37,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param storage The storage object which allows for the saving of the tasks to the file.","lastModifiedDate":"2022-02-20"},{"lineNumber":38,"author":{"gitId":"ivanaitzliddat"},"content":"     * @throws IOException If there is an error saving tasks to the file.","lastModifiedDate":"2022-02-20"},{"lineNumber":39,"author":{"gitId":"ivanaitzliddat"},"content":"     * @see IOException","lastModifiedDate":"2022-02-20"},{"lineNumber":40,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":41,"author":{"gitId":"ivanaitzliddat"},"content":"    @Override","lastModifiedDate":"2022-02-20"},{"lineNumber":42,"author":{"gitId":"ivanaitzliddat"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws AdditionalException, IOException,","lastModifiedDate":"2022-02-20"},{"lineNumber":43,"author":{"gitId":"ivanaitzliddat"},"content":"            DateTimeParseException {","lastModifiedDate":"2022-02-20"},{"lineNumber":44,"author":{"gitId":"ivanaitzliddat"},"content":"        String description \u003d getDescription(TYPE_OF_TASK, PREPOSITION_AT, fullCommand);","lastModifiedDate":"2022-02-21"},{"lineNumber":45,"author":{"gitId":"ivanaitzliddat"},"content":"        if (description.length() \u003c 1) {","lastModifiedDate":"2022-02-21"},{"lineNumber":46,"author":{"gitId":"ivanaitzliddat"},"content":"            throw new AdditionalException(\"Yea... I know you don\u0027t have an event because you\u0027re a loner.\");","lastModifiedDate":"2022-02-21"},{"lineNumber":47,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-02-21"},{"lineNumber":48,"author":{"gitId":"ivanaitzliddat"},"content":"        String location \u003d getLocation(PREPOSITION_AT, PREPOSITION_ON, fullCommand);","lastModifiedDate":"2022-02-21"},{"lineNumber":49,"author":{"gitId":"ivanaitzliddat"},"content":"        if (location.length() \u003c 1) {","lastModifiedDate":"2022-02-21"},{"lineNumber":50,"author":{"gitId":"ivanaitzliddat"},"content":"            throw new AdditionalException(\"So your event is at nowhere-land?\");","lastModifiedDate":"2022-02-21"},{"lineNumber":51,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-02-21"},{"lineNumber":52,"author":{"gitId":"ivanaitzliddat"},"content":"        String date \u003d getDate(PREPOSITION_ON, fullCommand);","lastModifiedDate":"2022-02-21"},{"lineNumber":53,"author":{"gitId":"ivanaitzliddat"},"content":"        if (date.length() \u003c 1) {","lastModifiedDate":"2022-02-21"},{"lineNumber":54,"author":{"gitId":"ivanaitzliddat"},"content":"            throw new AdditionalException(\"YAY! Your event is never going to happen :DDDD\");","lastModifiedDate":"2022-02-21"},{"lineNumber":55,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-02-21"},{"lineNumber":56,"author":{"gitId":"ivanaitzliddat"},"content":"        LocalDate dateOfEvent \u003d LocalDate.parse(date);","lastModifiedDate":"2022-02-20"},{"lineNumber":57,"author":{"gitId":"ivanaitzliddat"},"content":"        Event event \u003d new Event(description, location, dateOfEvent, TYPE_OF_TASK);","lastModifiedDate":"2022-02-20"},{"lineNumber":58,"author":{"gitId":"ivanaitzliddat"},"content":"        tasks.addTask(event);","lastModifiedDate":"2022-02-20"},{"lineNumber":59,"author":{"gitId":"ivanaitzliddat"},"content":"        ui.showAddDone(event, tasks.getSize());","lastModifiedDate":"2022-02-20"},{"lineNumber":60,"author":{"gitId":"ivanaitzliddat"},"content":"        storage.save(event);","lastModifiedDate":"2022-02-20"},{"lineNumber":61,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":62,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":63,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":64,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the isBye method that returns whether the command is \"bye\".","lastModifiedDate":"2022-02-20"},{"lineNumber":65,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":66,"author":{"gitId":"ivanaitzliddat"},"content":"     * @return False because the command is \"event\".","lastModifiedDate":"2022-02-20"},{"lineNumber":67,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":68,"author":{"gitId":"ivanaitzliddat"},"content":"    @Override","lastModifiedDate":"2022-02-20"},{"lineNumber":69,"author":{"gitId":"ivanaitzliddat"},"content":"    public boolean isBye() {","lastModifiedDate":"2022-02-20"},{"lineNumber":70,"author":{"gitId":"ivanaitzliddat"},"content":"        return false;","lastModifiedDate":"2022-02-20"},{"lineNumber":71,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":72,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":73,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":74,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the executeFromFile method that takes in a list of tasks and adds a new event task to the list of tasks.","lastModifiedDate":"2022-02-20"},{"lineNumber":75,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":76,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param listOfTasks This is the list of tasks that the new task is to be added to.","lastModifiedDate":"2022-02-20"},{"lineNumber":77,"author":{"gitId":"ivanaitzliddat"},"content":"     * @throws AdditionalException If there is no description provided in the fullCommand.","lastModifiedDate":"2022-02-20"},{"lineNumber":78,"author":{"gitId":"ivanaitzliddat"},"content":"     * @see AdditionalException","lastModifiedDate":"2022-02-20"},{"lineNumber":79,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":80,"author":{"gitId":"ivanaitzliddat"},"content":"    @Override","lastModifiedDate":"2022-02-20"},{"lineNumber":81,"author":{"gitId":"ivanaitzliddat"},"content":"    public void executeFromFile(ArrayList\u003cTask\u003e listOfTasks) throws AdditionalException {","lastModifiedDate":"2022-02-20"},{"lineNumber":82,"author":{"gitId":"ivanaitzliddat"},"content":"        String description \u003d getDescription(TYPE_OF_TASK, PREPOSITION_AT, fullCommand);","lastModifiedDate":"2022-02-21"},{"lineNumber":83,"author":{"gitId":"ivanaitzliddat"},"content":"        String location \u003d getLocation(PREPOSITION_AT, PREPOSITION_ON, fullCommand);","lastModifiedDate":"2022-02-21"},{"lineNumber":84,"author":{"gitId":"ivanaitzliddat"},"content":"        String date \u003d getDate(PREPOSITION_ON, fullCommand);","lastModifiedDate":"2022-02-21"},{"lineNumber":85,"author":{"gitId":"ivanaitzliddat"},"content":"        if (description.length() \u003c 1 | location.length() \u003c 1 | date.length() \u003c 1) {","lastModifiedDate":"2022-02-21"},{"lineNumber":86,"author":{"gitId":"ivanaitzliddat"},"content":"            throw new AdditionalException(\"YAY! Your event is never going to happen :DDDD\");","lastModifiedDate":"2022-02-21"},{"lineNumber":87,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-02-20"},{"lineNumber":88,"author":{"gitId":"ivanaitzliddat"},"content":"        LocalDate dateOfEvent \u003d LocalDate.parse(date);","lastModifiedDate":"2022-02-21"},{"lineNumber":89,"author":{"gitId":"ivanaitzliddat"},"content":"        listOfTasks.add(new Event(description, location, dateOfEvent, TYPE_OF_TASK));","lastModifiedDate":"2022-02-21"},{"lineNumber":90,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":91,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":92,"author":{"gitId":"ivanaitzliddat"},"content":"}","lastModifiedDate":"2022-02-20"}],"authorContributionMap":{"ivanaitzliddat":92}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivanaitzliddat"},"content":"package duke.command;","lastModifiedDate":"2022-02-20"},{"lineNumber":2,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":3,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.TaskList;","lastModifiedDate":"2022-02-20"},{"lineNumber":4,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.Ui;","lastModifiedDate":"2022-02-20"},{"lineNumber":5,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.exception.AdditionalException;","lastModifiedDate":"2022-02-20"},{"lineNumber":6,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-02-20"},{"lineNumber":7,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.task.Task;","lastModifiedDate":"2022-02-20"},{"lineNumber":8,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":9,"author":{"gitId":"ivanaitzliddat"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-20"},{"lineNumber":10,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":11,"author":{"gitId":"ivanaitzliddat"},"content":"/**","lastModifiedDate":"2022-02-21"},{"lineNumber":12,"author":{"gitId":"ivanaitzliddat"},"content":" * Represents the find command which is to be executed.","lastModifiedDate":"2022-02-21"},{"lineNumber":13,"author":{"gitId":"ivanaitzliddat"},"content":" */","lastModifiedDate":"2022-02-21"},{"lineNumber":14,"author":{"gitId":"ivanaitzliddat"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2022-02-20"},{"lineNumber":15,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":16,"author":{"gitId":"ivanaitzliddat"},"content":"    private String fullCommand;","lastModifiedDate":"2022-02-20"},{"lineNumber":17,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":18,"author":{"gitId":"ivanaitzliddat"},"content":"    public FindCommand(String fullCommand) {","lastModifiedDate":"2022-02-20"},{"lineNumber":19,"author":{"gitId":"ivanaitzliddat"},"content":"        this.fullCommand \u003d fullCommand;","lastModifiedDate":"2022-02-20"},{"lineNumber":20,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":21,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":22,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":23,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the execute method that runs when there is a find command.","lastModifiedDate":"2022-02-21"},{"lineNumber":24,"author":{"gitId":"ivanaitzliddat"},"content":"     * The method will search through the list of tasks that is stored in the TaskList tasks and print the tasks","lastModifiedDate":"2022-02-21"},{"lineNumber":25,"author":{"gitId":"ivanaitzliddat"},"content":"     * that match the keyword which the user input.","lastModifiedDate":"2022-02-21"},{"lineNumber":26,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":27,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param tasks The TaskList object that contains the list of tasks.","lastModifiedDate":"2022-02-21"},{"lineNumber":28,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param ui The user interface object that allows for printing of the list of tasks.","lastModifiedDate":"2022-02-21"},{"lineNumber":29,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param storage The storage object which allows for the saving of the tasks to the file.","lastModifiedDate":"2022-02-21"},{"lineNumber":30,"author":{"gitId":"ivanaitzliddat"},"content":"     * @throws AdditionalException If there are no tasks.","lastModifiedDate":"2022-02-21"},{"lineNumber":31,"author":{"gitId":"ivanaitzliddat"},"content":"     * @see AdditionalException","lastModifiedDate":"2022-02-21"},{"lineNumber":32,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":33,"author":{"gitId":"ivanaitzliddat"},"content":"    @Override","lastModifiedDate":"2022-02-20"},{"lineNumber":34,"author":{"gitId":"ivanaitzliddat"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws AdditionalException {","lastModifiedDate":"2022-02-20"},{"lineNumber":35,"author":{"gitId":"ivanaitzliddat"},"content":"        String keyword \u003d getDescription(\"find\", fullCommand);","lastModifiedDate":"2022-02-21"},{"lineNumber":36,"author":{"gitId":"ivanaitzliddat"},"content":"        if (keyword.length() \u003c 1) {","lastModifiedDate":"2022-02-21"},{"lineNumber":37,"author":{"gitId":"ivanaitzliddat"},"content":"            throw new AdditionalException(\"You want me to find nothing or everything...?\");","lastModifiedDate":"2022-02-21"},{"lineNumber":38,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-02-21"},{"lineNumber":39,"author":{"gitId":"ivanaitzliddat"},"content":"        ArrayList\u003cTask\u003e listOfTasks \u003d getTasks(tasks, ui, keyword);","lastModifiedDate":"2022-02-21"},{"lineNumber":40,"author":{"gitId":"ivanaitzliddat"},"content":"        ui.showList(listOfTasks);","lastModifiedDate":"2022-02-21"},{"lineNumber":41,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":42,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":43,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":44,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the isBye method that returns whether the command is \"bye\".","lastModifiedDate":"2022-02-21"},{"lineNumber":45,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":46,"author":{"gitId":"ivanaitzliddat"},"content":"     * @return False because the command is \"find\".","lastModifiedDate":"2022-02-21"},{"lineNumber":47,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":48,"author":{"gitId":"ivanaitzliddat"},"content":"    @Override","lastModifiedDate":"2022-02-21"},{"lineNumber":49,"author":{"gitId":"ivanaitzliddat"},"content":"    public boolean isBye() {","lastModifiedDate":"2022-02-21"},{"lineNumber":50,"author":{"gitId":"ivanaitzliddat"},"content":"        return false;","lastModifiedDate":"2022-02-21"},{"lineNumber":51,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":52,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":53,"author":{"gitId":"ivanaitzliddat"},"content":"    @Override","lastModifiedDate":"2022-02-21"},{"lineNumber":54,"author":{"gitId":"ivanaitzliddat"},"content":"    public void executeFromFile(ArrayList\u003cTask\u003e listOfTasks) throws AdditionalException {","lastModifiedDate":"2022-02-21"},{"lineNumber":55,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":56,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":57,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":58,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the getTasks method that searches through the tasks in the TaskList.","lastModifiedDate":"2022-02-21"},{"lineNumber":59,"author":{"gitId":"ivanaitzliddat"},"content":"     * It creates a new list of tasks and adds the tasks that contain the keyword.","lastModifiedDate":"2022-02-21"},{"lineNumber":60,"author":{"gitId":"ivanaitzliddat"},"content":"     * After searching and adding the tasks, it then returns the list of tasks.","lastModifiedDate":"2022-02-21"},{"lineNumber":61,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":62,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param tasks The TaskList object that contains the list of tasks.","lastModifiedDate":"2022-02-21"},{"lineNumber":63,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param ui The user interface object that allows for printing when no results are found.","lastModifiedDate":"2022-02-21"},{"lineNumber":64,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param keyword The keyword to be searched for.","lastModifiedDate":"2022-02-21"},{"lineNumber":65,"author":{"gitId":"ivanaitzliddat"},"content":"     * @return The list of tasks that contain the keyword.","lastModifiedDate":"2022-02-21"},{"lineNumber":66,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":67,"author":{"gitId":"ivanaitzliddat"},"content":"    private ArrayList\u003cTask\u003e getTasks(TaskList tasks, Ui ui, String keyword) {","lastModifiedDate":"2022-02-21"},{"lineNumber":68,"author":{"gitId":"ivanaitzliddat"},"content":"        ArrayList\u003cTask\u003e listOfTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-02-20"},{"lineNumber":69,"author":{"gitId":"ivanaitzliddat"},"content":"        for (int i \u003d 0; i \u003c tasks.getSize(); i++) {","lastModifiedDate":"2022-02-20"},{"lineNumber":70,"author":{"gitId":"ivanaitzliddat"},"content":"            Task task \u003d tasks.getTask(i);","lastModifiedDate":"2022-02-20"},{"lineNumber":71,"author":{"gitId":"ivanaitzliddat"},"content":"            addTaskIfContains(keyword, listOfTasks, task);","lastModifiedDate":"2022-02-21"},{"lineNumber":72,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-02-20"},{"lineNumber":73,"author":{"gitId":"ivanaitzliddat"},"content":"        if (listOfTasks.isEmpty()) {","lastModifiedDate":"2022-02-20"},{"lineNumber":74,"author":{"gitId":"ivanaitzliddat"},"content":"            ui.showNoResults();","lastModifiedDate":"2022-02-21"},{"lineNumber":75,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-02-20"},{"lineNumber":76,"author":{"gitId":"ivanaitzliddat"},"content":"        return listOfTasks;","lastModifiedDate":"2022-02-21"},{"lineNumber":77,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-21"},{"lineNumber":78,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-21"},{"lineNumber":79,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":80,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the addTaskIfContains method that checks if the description of the task contains the keyword.","lastModifiedDate":"2022-02-21"},{"lineNumber":81,"author":{"gitId":"ivanaitzliddat"},"content":"     * If it contains, the method will add the task to the list of tasks.","lastModifiedDate":"2022-02-21"},{"lineNumber":82,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":83,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param keyword The keyword that the user input.","lastModifiedDate":"2022-02-21"},{"lineNumber":84,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param listOfTasks The list of tasks with tasks which description matches the keyword.","lastModifiedDate":"2022-02-21"},{"lineNumber":85,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param task The task which description may contain the keyword.","lastModifiedDate":"2022-02-21"},{"lineNumber":86,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":87,"author":{"gitId":"ivanaitzliddat"},"content":"    private void addTaskIfContains(String keyword, ArrayList\u003cTask\u003e listOfTasks, Task task) {","lastModifiedDate":"2022-02-21"},{"lineNumber":88,"author":{"gitId":"ivanaitzliddat"},"content":"        if (task.getDescription().contains(keyword)) {","lastModifiedDate":"2022-02-21"},{"lineNumber":89,"author":{"gitId":"ivanaitzliddat"},"content":"            listOfTasks.add(task);","lastModifiedDate":"2022-02-20"},{"lineNumber":90,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-02-20"},{"lineNumber":91,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":92,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":93,"author":{"gitId":"ivanaitzliddat"},"content":"}","lastModifiedDate":"2022-02-20"}],"authorContributionMap":{"ivanaitzliddat":93}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivanaitzliddat"},"content":"package duke.command;","lastModifiedDate":"2022-02-20"},{"lineNumber":2,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":3,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.TaskList;","lastModifiedDate":"2022-02-20"},{"lineNumber":4,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.Ui;","lastModifiedDate":"2022-02-20"},{"lineNumber":5,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.exception.AdditionalException;","lastModifiedDate":"2022-02-20"},{"lineNumber":6,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-02-20"},{"lineNumber":7,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.task.Task;","lastModifiedDate":"2022-02-20"},{"lineNumber":8,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":9,"author":{"gitId":"ivanaitzliddat"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-20"},{"lineNumber":10,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":11,"author":{"gitId":"ivanaitzliddat"},"content":"/**","lastModifiedDate":"2022-02-20"},{"lineNumber":12,"author":{"gitId":"ivanaitzliddat"},"content":" * Represents the list command which is to be executed.","lastModifiedDate":"2022-02-20"},{"lineNumber":13,"author":{"gitId":"ivanaitzliddat"},"content":" */","lastModifiedDate":"2022-02-20"},{"lineNumber":14,"author":{"gitId":"ivanaitzliddat"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2022-02-20"},{"lineNumber":15,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":16,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":17,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the execute method that runs when there is a list command.","lastModifiedDate":"2022-02-20"},{"lineNumber":18,"author":{"gitId":"ivanaitzliddat"},"content":"     * The method will print the list of tasks that is stored in the TaskList tasks.","lastModifiedDate":"2022-02-20"},{"lineNumber":19,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":20,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param tasks The TaskList object that contains the list of tasks.","lastModifiedDate":"2022-02-20"},{"lineNumber":21,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param ui The user interface object that allows for printing of the confirmation message.","lastModifiedDate":"2022-02-20"},{"lineNumber":22,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param storage The storage object which allows for the saving of the tasks to the file.","lastModifiedDate":"2022-02-20"},{"lineNumber":23,"author":{"gitId":"ivanaitzliddat"},"content":"     * @throws AdditionalException If there are no tasks.","lastModifiedDate":"2022-02-21"},{"lineNumber":24,"author":{"gitId":"ivanaitzliddat"},"content":"     * @see AdditionalException","lastModifiedDate":"2022-02-21"},{"lineNumber":25,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":26,"author":{"gitId":"ivanaitzliddat"},"content":"    @Override","lastModifiedDate":"2022-02-20"},{"lineNumber":27,"author":{"gitId":"ivanaitzliddat"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws AdditionalException {","lastModifiedDate":"2022-02-20"},{"lineNumber":28,"author":{"gitId":"ivanaitzliddat"},"content":"        ArrayList\u003cTask\u003e listOfTasks \u003d tasks.getList();","lastModifiedDate":"2022-02-20"},{"lineNumber":29,"author":{"gitId":"ivanaitzliddat"},"content":"        ui.showList(listOfTasks);","lastModifiedDate":"2022-02-20"},{"lineNumber":30,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":31,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":32,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":33,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the isBye method that returns whether the command is \"bye\".","lastModifiedDate":"2022-02-20"},{"lineNumber":34,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":35,"author":{"gitId":"ivanaitzliddat"},"content":"     * @return False because the command is \"mark\".","lastModifiedDate":"2022-02-20"},{"lineNumber":36,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":37,"author":{"gitId":"ivanaitzliddat"},"content":"    @Override","lastModifiedDate":"2022-02-20"},{"lineNumber":38,"author":{"gitId":"ivanaitzliddat"},"content":"    public boolean isBye() {","lastModifiedDate":"2022-02-20"},{"lineNumber":39,"author":{"gitId":"ivanaitzliddat"},"content":"        return false;","lastModifiedDate":"2022-02-20"},{"lineNumber":40,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":41,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":42,"author":{"gitId":"ivanaitzliddat"},"content":"    @Override","lastModifiedDate":"2022-02-20"},{"lineNumber":43,"author":{"gitId":"ivanaitzliddat"},"content":"    public void executeFromFile(ArrayList\u003cTask\u003e listOfTasks) {","lastModifiedDate":"2022-02-20"},{"lineNumber":44,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":45,"author":{"gitId":"ivanaitzliddat"},"content":"}","lastModifiedDate":"2022-02-20"}],"authorContributionMap":{"ivanaitzliddat":45}},{"path":"src/main/java/duke/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivanaitzliddat"},"content":"package duke.command;","lastModifiedDate":"2022-02-20"},{"lineNumber":2,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":3,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.TaskList;","lastModifiedDate":"2022-02-20"},{"lineNumber":4,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.Ui;","lastModifiedDate":"2022-02-20"},{"lineNumber":5,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.exception.AdditionalException;","lastModifiedDate":"2022-02-20"},{"lineNumber":6,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-02-20"},{"lineNumber":7,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.task.Task;","lastModifiedDate":"2022-02-20"},{"lineNumber":8,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":9,"author":{"gitId":"ivanaitzliddat"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-20"},{"lineNumber":10,"author":{"gitId":"ivanaitzliddat"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-20"},{"lineNumber":11,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":12,"author":{"gitId":"ivanaitzliddat"},"content":"/**","lastModifiedDate":"2022-02-20"},{"lineNumber":13,"author":{"gitId":"ivanaitzliddat"},"content":" * Represents the mark command which is to be executed.","lastModifiedDate":"2022-02-20"},{"lineNumber":14,"author":{"gitId":"ivanaitzliddat"},"content":" */","lastModifiedDate":"2022-02-20"},{"lineNumber":15,"author":{"gitId":"ivanaitzliddat"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2022-02-20"},{"lineNumber":16,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":17,"author":{"gitId":"ivanaitzliddat"},"content":"    private String fullCommand;","lastModifiedDate":"2022-02-20"},{"lineNumber":18,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":19,"author":{"gitId":"ivanaitzliddat"},"content":"    public MarkCommand(String fullCommand) {","lastModifiedDate":"2022-02-20"},{"lineNumber":20,"author":{"gitId":"ivanaitzliddat"},"content":"        this.fullCommand \u003d fullCommand;","lastModifiedDate":"2022-02-20"},{"lineNumber":21,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":22,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":23,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":24,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the execute method that runs when there is a mark command.","lastModifiedDate":"2022-02-20"},{"lineNumber":25,"author":{"gitId":"ivanaitzliddat"},"content":"     * The method will identify the task to be marked and proceeds to mark it as done.","lastModifiedDate":"2022-02-20"},{"lineNumber":26,"author":{"gitId":"ivanaitzliddat"},"content":"     * It will then print the confirmation for marking the task and updates the file.","lastModifiedDate":"2022-02-20"},{"lineNumber":27,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":28,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param tasks The TaskList object that contains the list of tasks.","lastModifiedDate":"2022-02-20"},{"lineNumber":29,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param ui The user interface object that allows for printing of the confirmation message.","lastModifiedDate":"2022-02-20"},{"lineNumber":30,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param storage The storage object which allows for the saving of the tasks to the file.","lastModifiedDate":"2022-02-20"},{"lineNumber":31,"author":{"gitId":"ivanaitzliddat"},"content":"     * @throws IOException If there is an error saving tasks to the file.","lastModifiedDate":"2022-02-20"},{"lineNumber":32,"author":{"gitId":"ivanaitzliddat"},"content":"     * @see IOException","lastModifiedDate":"2022-02-20"},{"lineNumber":33,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":34,"author":{"gitId":"ivanaitzliddat"},"content":"    @Override","lastModifiedDate":"2022-02-20"},{"lineNumber":35,"author":{"gitId":"ivanaitzliddat"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws IOException, AdditionalException {","lastModifiedDate":"2022-02-20"},{"lineNumber":36,"author":{"gitId":"ivanaitzliddat"},"content":"        int indexToMark \u003d getIndex(fullCommand);","lastModifiedDate":"2022-02-21"},{"lineNumber":37,"author":{"gitId":"ivanaitzliddat"},"content":"        Task taskToMark \u003d tasks.getTask(indexToMark);","lastModifiedDate":"2022-02-20"},{"lineNumber":38,"author":{"gitId":"ivanaitzliddat"},"content":"        taskToMark.markAsDone();","lastModifiedDate":"2022-02-20"},{"lineNumber":39,"author":{"gitId":"ivanaitzliddat"},"content":"        ui.showMarkCompleted(taskToMark);","lastModifiedDate":"2022-02-20"},{"lineNumber":40,"author":{"gitId":"ivanaitzliddat"},"content":"        storage.saveAll(tasks);","lastModifiedDate":"2022-02-20"},{"lineNumber":41,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":42,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":43,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":44,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the isBye method that returns whether the command is \"bye\".","lastModifiedDate":"2022-02-20"},{"lineNumber":45,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":46,"author":{"gitId":"ivanaitzliddat"},"content":"     * @return False because the command is \"mark\".","lastModifiedDate":"2022-02-20"},{"lineNumber":47,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":48,"author":{"gitId":"ivanaitzliddat"},"content":"    @Override","lastModifiedDate":"2022-02-20"},{"lineNumber":49,"author":{"gitId":"ivanaitzliddat"},"content":"    public boolean isBye() {","lastModifiedDate":"2022-02-20"},{"lineNumber":50,"author":{"gitId":"ivanaitzliddat"},"content":"        return false;","lastModifiedDate":"2022-02-20"},{"lineNumber":51,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":52,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":53,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":54,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the executeFromFile method that takes in the list of tasks.","lastModifiedDate":"2022-02-20"},{"lineNumber":55,"author":{"gitId":"ivanaitzliddat"},"content":"     * It then marks the last task of the list of tasks to be done.","lastModifiedDate":"2022-02-20"},{"lineNumber":56,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":57,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param listOfTasks The list of tasks where the last task is to be marked as done.","lastModifiedDate":"2022-02-20"},{"lineNumber":58,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":59,"author":{"gitId":"ivanaitzliddat"},"content":"    @Override","lastModifiedDate":"2022-02-20"},{"lineNumber":60,"author":{"gitId":"ivanaitzliddat"},"content":"    public void executeFromFile(ArrayList\u003cTask\u003e listOfTasks) {","lastModifiedDate":"2022-02-20"},{"lineNumber":61,"author":{"gitId":"ivanaitzliddat"},"content":"        Task task \u003d listOfTasks.get(listOfTasks.size() - 1);","lastModifiedDate":"2022-02-20"},{"lineNumber":62,"author":{"gitId":"ivanaitzliddat"},"content":"        task.markAsDone();","lastModifiedDate":"2022-02-20"},{"lineNumber":63,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":64,"author":{"gitId":"ivanaitzliddat"},"content":"}","lastModifiedDate":"2022-02-20"}],"authorContributionMap":{"ivanaitzliddat":64}},{"path":"src/main/java/duke/command/ToDoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivanaitzliddat"},"content":"package duke.command;","lastModifiedDate":"2022-02-20"},{"lineNumber":2,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":3,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.TaskList;","lastModifiedDate":"2022-02-20"},{"lineNumber":4,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.Ui;","lastModifiedDate":"2022-02-20"},{"lineNumber":5,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.exception.AdditionalException;","lastModifiedDate":"2022-02-20"},{"lineNumber":6,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-02-20"},{"lineNumber":7,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.task.Task;","lastModifiedDate":"2022-02-20"},{"lineNumber":8,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.task.ToDo;","lastModifiedDate":"2022-02-20"},{"lineNumber":9,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":10,"author":{"gitId":"ivanaitzliddat"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-20"},{"lineNumber":11,"author":{"gitId":"ivanaitzliddat"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-20"},{"lineNumber":12,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":13,"author":{"gitId":"ivanaitzliddat"},"content":"/**","lastModifiedDate":"2022-02-20"},{"lineNumber":14,"author":{"gitId":"ivanaitzliddat"},"content":" * Represents the todo command which is to be executed.","lastModifiedDate":"2022-02-20"},{"lineNumber":15,"author":{"gitId":"ivanaitzliddat"},"content":" */","lastModifiedDate":"2022-02-20"},{"lineNumber":16,"author":{"gitId":"ivanaitzliddat"},"content":"public class ToDoCommand extends Command {","lastModifiedDate":"2022-02-20"},{"lineNumber":17,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":18,"author":{"gitId":"ivanaitzliddat"},"content":"    private static final String TYPE_OF_TASK \u003d \"todo\";","lastModifiedDate":"2022-02-20"},{"lineNumber":19,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":20,"author":{"gitId":"ivanaitzliddat"},"content":"    private String fullCommand;","lastModifiedDate":"2022-02-20"},{"lineNumber":21,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":22,"author":{"gitId":"ivanaitzliddat"},"content":"    public ToDoCommand(String fullCommand) {","lastModifiedDate":"2022-02-20"},{"lineNumber":23,"author":{"gitId":"ivanaitzliddat"},"content":"        this.fullCommand \u003d fullCommand;","lastModifiedDate":"2022-02-20"},{"lineNumber":24,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":25,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":26,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":27,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the execute method that runs when there is a todo command.","lastModifiedDate":"2022-02-20"},{"lineNumber":28,"author":{"gitId":"ivanaitzliddat"},"content":"     * The method will add the task to the list of tasks in the TaskList object.","lastModifiedDate":"2022-02-20"},{"lineNumber":29,"author":{"gitId":"ivanaitzliddat"},"content":"     * It will then print the confirmation for adding the task and updates the file.","lastModifiedDate":"2022-02-20"},{"lineNumber":30,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":31,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param tasks The TaskList object that contains the list of tasks.","lastModifiedDate":"2022-02-20"},{"lineNumber":32,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param ui The user interface object that allows for printing of the confirmation message.","lastModifiedDate":"2022-02-20"},{"lineNumber":33,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param storage The storage object which allows for the saving of the tasks to the file.","lastModifiedDate":"2022-02-20"},{"lineNumber":34,"author":{"gitId":"ivanaitzliddat"},"content":"     * @throws IOException If there is an error saving tasks to the file.","lastModifiedDate":"2022-02-20"},{"lineNumber":35,"author":{"gitId":"ivanaitzliddat"},"content":"     * @see IOException","lastModifiedDate":"2022-02-20"},{"lineNumber":36,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":37,"author":{"gitId":"ivanaitzliddat"},"content":"    @Override","lastModifiedDate":"2022-02-20"},{"lineNumber":38,"author":{"gitId":"ivanaitzliddat"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws AdditionalException, IOException {","lastModifiedDate":"2022-02-20"},{"lineNumber":39,"author":{"gitId":"ivanaitzliddat"},"content":"        String description \u003d getDescription(TYPE_OF_TASK, fullCommand);","lastModifiedDate":"2022-02-21"},{"lineNumber":40,"author":{"gitId":"ivanaitzliddat"},"content":"        if (description.length() \u003c 1) {","lastModifiedDate":"2022-02-21"},{"lineNumber":41,"author":{"gitId":"ivanaitzliddat"},"content":"            throw new AdditionalException(\"What are you going to do? LOL\");","lastModifiedDate":"2022-02-21"},{"lineNumber":42,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-02-21"},{"lineNumber":43,"author":{"gitId":"ivanaitzliddat"},"content":"        ToDo toDo \u003d new ToDo(description, TYPE_OF_TASK);","lastModifiedDate":"2022-02-20"},{"lineNumber":44,"author":{"gitId":"ivanaitzliddat"},"content":"        tasks.addTask(toDo);","lastModifiedDate":"2022-02-20"},{"lineNumber":45,"author":{"gitId":"ivanaitzliddat"},"content":"        ui.showAddDone(toDo, tasks.getSize());","lastModifiedDate":"2022-02-20"},{"lineNumber":46,"author":{"gitId":"ivanaitzliddat"},"content":"        storage.save(toDo);","lastModifiedDate":"2022-02-20"},{"lineNumber":47,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":48,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":49,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":50,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the isBye method that returns whether the command is \"bye\".","lastModifiedDate":"2022-02-20"},{"lineNumber":51,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":52,"author":{"gitId":"ivanaitzliddat"},"content":"     * @return False because the command is \"todo\".","lastModifiedDate":"2022-02-20"},{"lineNumber":53,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":54,"author":{"gitId":"ivanaitzliddat"},"content":"    @Override","lastModifiedDate":"2022-02-20"},{"lineNumber":55,"author":{"gitId":"ivanaitzliddat"},"content":"    public boolean isBye() {","lastModifiedDate":"2022-02-20"},{"lineNumber":56,"author":{"gitId":"ivanaitzliddat"},"content":"        return false;","lastModifiedDate":"2022-02-20"},{"lineNumber":57,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":58,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":59,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":60,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the executeFromFile method that takes in a list of tasks and adds a new task to the list of tasks.","lastModifiedDate":"2022-02-21"},{"lineNumber":61,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":62,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param listOfTasks This is the list of tasks that the new task is to be added to.","lastModifiedDate":"2022-02-20"},{"lineNumber":63,"author":{"gitId":"ivanaitzliddat"},"content":"     * @throws AdditionalException If the file has been edited and hence the fullCommand is incorrect.","lastModifiedDate":"2022-02-21"},{"lineNumber":64,"author":{"gitId":"ivanaitzliddat"},"content":"     * @see AdditionalException","lastModifiedDate":"2022-02-20"},{"lineNumber":65,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":66,"author":{"gitId":"ivanaitzliddat"},"content":"    @Override","lastModifiedDate":"2022-02-20"},{"lineNumber":67,"author":{"gitId":"ivanaitzliddat"},"content":"    public void executeFromFile(ArrayList\u003cTask\u003e listOfTasks) throws AdditionalException {","lastModifiedDate":"2022-02-20"},{"lineNumber":68,"author":{"gitId":"ivanaitzliddat"},"content":"        String description \u003d getDescription(TYPE_OF_TASK, fullCommand);","lastModifiedDate":"2022-02-21"},{"lineNumber":69,"author":{"gitId":"ivanaitzliddat"},"content":"        if (description.length() \u003c 1) {","lastModifiedDate":"2022-02-21"},{"lineNumber":70,"author":{"gitId":"ivanaitzliddat"},"content":"            throw new AdditionalException(\"Did you accidentally edit the file?\");","lastModifiedDate":"2022-02-21"},{"lineNumber":71,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-02-20"},{"lineNumber":72,"author":{"gitId":"ivanaitzliddat"},"content":"        listOfTasks.add(new ToDo(description, TYPE_OF_TASK));","lastModifiedDate":"2022-02-21"},{"lineNumber":73,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":74,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":75,"author":{"gitId":"ivanaitzliddat"},"content":"}","lastModifiedDate":"2022-02-20"}],"authorContributionMap":{"ivanaitzliddat":75}},{"path":"src/main/java/duke/command/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivanaitzliddat"},"content":"package duke.command;","lastModifiedDate":"2022-02-20"},{"lineNumber":2,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":3,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.TaskList;","lastModifiedDate":"2022-02-20"},{"lineNumber":4,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.Ui;","lastModifiedDate":"2022-02-20"},{"lineNumber":5,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.exception.AdditionalException;","lastModifiedDate":"2022-02-20"},{"lineNumber":6,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.storage.Storage;","lastModifiedDate":"2022-02-20"},{"lineNumber":7,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.task.Task;","lastModifiedDate":"2022-02-20"},{"lineNumber":8,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":9,"author":{"gitId":"ivanaitzliddat"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-20"},{"lineNumber":10,"author":{"gitId":"ivanaitzliddat"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-20"},{"lineNumber":11,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":12,"author":{"gitId":"ivanaitzliddat"},"content":"/**","lastModifiedDate":"2022-02-20"},{"lineNumber":13,"author":{"gitId":"ivanaitzliddat"},"content":" * Represents the unmark command which is to be executed.","lastModifiedDate":"2022-02-20"},{"lineNumber":14,"author":{"gitId":"ivanaitzliddat"},"content":" */","lastModifiedDate":"2022-02-20"},{"lineNumber":15,"author":{"gitId":"ivanaitzliddat"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2022-02-20"},{"lineNumber":16,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":17,"author":{"gitId":"ivanaitzliddat"},"content":"    private String fullCommand;","lastModifiedDate":"2022-02-20"},{"lineNumber":18,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":19,"author":{"gitId":"ivanaitzliddat"},"content":"    public UnmarkCommand(String fullCommand) {","lastModifiedDate":"2022-02-20"},{"lineNumber":20,"author":{"gitId":"ivanaitzliddat"},"content":"        this.fullCommand \u003d fullCommand;","lastModifiedDate":"2022-02-20"},{"lineNumber":21,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":22,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":23,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":24,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the execute method that runs when there is an unmark command.","lastModifiedDate":"2022-02-20"},{"lineNumber":25,"author":{"gitId":"ivanaitzliddat"},"content":"     * The method will identify the task to be unmarked and proceeds to mark it as NOT done.","lastModifiedDate":"2022-02-20"},{"lineNumber":26,"author":{"gitId":"ivanaitzliddat"},"content":"     * It will then print the confirmation for unmarking the task and updates the file.","lastModifiedDate":"2022-02-20"},{"lineNumber":27,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":28,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param tasks The TaskList object that contains the list of tasks.","lastModifiedDate":"2022-02-20"},{"lineNumber":29,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param ui The user interface object that allows for printing of the confirmation message.","lastModifiedDate":"2022-02-20"},{"lineNumber":30,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param storage The storage object which allows for the saving of the tasks to the file.","lastModifiedDate":"2022-02-20"},{"lineNumber":31,"author":{"gitId":"ivanaitzliddat"},"content":"     * @throws IOException If there is an error saving tasks to the file.","lastModifiedDate":"2022-02-20"},{"lineNumber":32,"author":{"gitId":"ivanaitzliddat"},"content":"     * @see IOException","lastModifiedDate":"2022-02-20"},{"lineNumber":33,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":34,"author":{"gitId":"ivanaitzliddat"},"content":"    @Override","lastModifiedDate":"2022-02-20"},{"lineNumber":35,"author":{"gitId":"ivanaitzliddat"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws IOException, AdditionalException {","lastModifiedDate":"2022-02-20"},{"lineNumber":36,"author":{"gitId":"ivanaitzliddat"},"content":"        int indexToUnmark \u003d getIndex(fullCommand);","lastModifiedDate":"2022-02-21"},{"lineNumber":37,"author":{"gitId":"ivanaitzliddat"},"content":"        Task taskToUnmark \u003d tasks.getTask(indexToUnmark);","lastModifiedDate":"2022-02-20"},{"lineNumber":38,"author":{"gitId":"ivanaitzliddat"},"content":"        taskToUnmark.markAsUndone();","lastModifiedDate":"2022-02-20"},{"lineNumber":39,"author":{"gitId":"ivanaitzliddat"},"content":"        ui.showUnmarkCompleted(taskToUnmark);","lastModifiedDate":"2022-02-20"},{"lineNumber":40,"author":{"gitId":"ivanaitzliddat"},"content":"        storage.saveAll(tasks);","lastModifiedDate":"2022-02-20"},{"lineNumber":41,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":42,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":43,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":44,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the isBye method that returns whether the command is \"bye\".","lastModifiedDate":"2022-02-20"},{"lineNumber":45,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":46,"author":{"gitId":"ivanaitzliddat"},"content":"     * @return False because the command is \"unmark\".","lastModifiedDate":"2022-02-20"},{"lineNumber":47,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":48,"author":{"gitId":"ivanaitzliddat"},"content":"    @Override","lastModifiedDate":"2022-02-20"},{"lineNumber":49,"author":{"gitId":"ivanaitzliddat"},"content":"    public boolean isBye() {","lastModifiedDate":"2022-02-20"},{"lineNumber":50,"author":{"gitId":"ivanaitzliddat"},"content":"        return false;","lastModifiedDate":"2022-02-20"},{"lineNumber":51,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":52,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":53,"author":{"gitId":"ivanaitzliddat"},"content":"    @Override","lastModifiedDate":"2022-02-20"},{"lineNumber":54,"author":{"gitId":"ivanaitzliddat"},"content":"    public void executeFromFile(ArrayList\u003cTask\u003e listOfTasks) throws AdditionalException {","lastModifiedDate":"2022-02-20"},{"lineNumber":55,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":56,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":57,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":58,"author":{"gitId":"ivanaitzliddat"},"content":"}","lastModifiedDate":"2022-02-20"}],"authorContributionMap":{"ivanaitzliddat":58}},{"path":"src/main/java/duke/exception/AdditionalException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivanaitzliddat"},"content":"package duke.exception;","lastModifiedDate":"2022-02-10"},{"lineNumber":2,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-10"},{"lineNumber":3,"author":{"gitId":"ivanaitzliddat"},"content":"/**","lastModifiedDate":"2022-02-20"},{"lineNumber":4,"author":{"gitId":"ivanaitzliddat"},"content":" * Represents the additional exceptions that may cause an error in the program.","lastModifiedDate":"2022-02-20"},{"lineNumber":5,"author":{"gitId":"ivanaitzliddat"},"content":" */","lastModifiedDate":"2022-02-20"},{"lineNumber":6,"author":{"gitId":"ivanaitzliddat"},"content":"public class AdditionalException extends Exception {","lastModifiedDate":"2022-02-10"},{"lineNumber":7,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-10"},{"lineNumber":8,"author":{"gitId":"ivanaitzliddat"},"content":"    public AdditionalException(String errorMessage) {","lastModifiedDate":"2022-02-10"},{"lineNumber":9,"author":{"gitId":"ivanaitzliddat"},"content":"        super(errorMessage);","lastModifiedDate":"2022-02-10"},{"lineNumber":10,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-10"},{"lineNumber":11,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-10"},{"lineNumber":12,"author":{"gitId":"ivanaitzliddat"},"content":"}","lastModifiedDate":"2022-02-10"}],"authorContributionMap":{"ivanaitzliddat":12}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivanaitzliddat"},"content":"package duke.parser;","lastModifiedDate":"2022-02-18"},{"lineNumber":2,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":3,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.command.*;","lastModifiedDate":"2022-02-20"},{"lineNumber":4,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.exception.AdditionalException;","lastModifiedDate":"2022-02-18"},{"lineNumber":5,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":6,"author":{"gitId":"ivanaitzliddat"},"content":"/**","lastModifiedDate":"2022-02-20"},{"lineNumber":7,"author":{"gitId":"ivanaitzliddat"},"content":" * Represents a command parser that deals with making sense of the user command.","lastModifiedDate":"2022-02-20"},{"lineNumber":8,"author":{"gitId":"ivanaitzliddat"},"content":" */","lastModifiedDate":"2022-02-20"},{"lineNumber":9,"author":{"gitId":"ivanaitzliddat"},"content":"public class Parser {","lastModifiedDate":"2022-02-18"},{"lineNumber":10,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":11,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":12,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the parse method that takes in the fullCommand and makes sense of what type of command it is.","lastModifiedDate":"2022-02-20"},{"lineNumber":13,"author":{"gitId":"ivanaitzliddat"},"content":"     * It then creates a Command object, depending on the type of command, and returns in to the caller.","lastModifiedDate":"2022-02-20"},{"lineNumber":14,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":15,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param fullCommand The user input.","lastModifiedDate":"2022-02-21"},{"lineNumber":16,"author":{"gitId":"ivanaitzliddat"},"content":"     * @return The Command object, depending on the type of the command.","lastModifiedDate":"2022-02-21"},{"lineNumber":17,"author":{"gitId":"ivanaitzliddat"},"content":"     * @throws AdditionalException If the command is invalid.","lastModifiedDate":"2022-02-21"},{"lineNumber":18,"author":{"gitId":"ivanaitzliddat"},"content":"     * @see AdditionalException","lastModifiedDate":"2022-02-20"},{"lineNumber":19,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":20,"author":{"gitId":"ivanaitzliddat"},"content":"    public static Command parse(String fullCommand) throws AdditionalException {","lastModifiedDate":"2022-02-20"},{"lineNumber":21,"author":{"gitId":"ivanaitzliddat"},"content":"        String[] words \u003d fullCommand.split(\" \");","lastModifiedDate":"2022-02-20"},{"lineNumber":22,"author":{"gitId":"ivanaitzliddat"},"content":"        String command \u003d words[0].toLowerCase();","lastModifiedDate":"2022-02-20"},{"lineNumber":23,"author":{"gitId":"ivanaitzliddat"},"content":"        Command c;","lastModifiedDate":"2022-02-20"},{"lineNumber":24,"author":{"gitId":"ivanaitzliddat"},"content":"        switch (command) {","lastModifiedDate":"2022-02-18"},{"lineNumber":25,"author":{"gitId":"ivanaitzliddat"},"content":"        case \"bye\":","lastModifiedDate":"2022-02-20"},{"lineNumber":26,"author":{"gitId":"ivanaitzliddat"},"content":"            c \u003d new ByeCommand();","lastModifiedDate":"2022-02-20"},{"lineNumber":27,"author":{"gitId":"ivanaitzliddat"},"content":"            break;","lastModifiedDate":"2022-02-20"},{"lineNumber":28,"author":{"gitId":"ivanaitzliddat"},"content":"        case \"list\":","lastModifiedDate":"2022-02-18"},{"lineNumber":29,"author":{"gitId":"ivanaitzliddat"},"content":"            c \u003d new ListCommand();","lastModifiedDate":"2022-02-20"},{"lineNumber":30,"author":{"gitId":"ivanaitzliddat"},"content":"            break;","lastModifiedDate":"2022-02-18"},{"lineNumber":31,"author":{"gitId":"ivanaitzliddat"},"content":"        case \"find\":","lastModifiedDate":"2022-02-20"},{"lineNumber":32,"author":{"gitId":"ivanaitzliddat"},"content":"            c \u003d new FindCommand(fullCommand);","lastModifiedDate":"2022-02-20"},{"lineNumber":33,"author":{"gitId":"ivanaitzliddat"},"content":"            break;","lastModifiedDate":"2022-02-20"},{"lineNumber":34,"author":{"gitId":"ivanaitzliddat"},"content":"        case \"date\":","lastModifiedDate":"2022-02-20"},{"lineNumber":35,"author":{"gitId":"ivanaitzliddat"},"content":"            c \u003d new DateCommand(fullCommand);","lastModifiedDate":"2022-02-20"},{"lineNumber":36,"author":{"gitId":"ivanaitzliddat"},"content":"            break;","lastModifiedDate":"2022-02-20"},{"lineNumber":37,"author":{"gitId":"ivanaitzliddat"},"content":"        case \"mark\":","lastModifiedDate":"2022-02-18"},{"lineNumber":38,"author":{"gitId":"ivanaitzliddat"},"content":"            c \u003d new MarkCommand(fullCommand);","lastModifiedDate":"2022-02-20"},{"lineNumber":39,"author":{"gitId":"ivanaitzliddat"},"content":"            break;","lastModifiedDate":"2022-02-18"},{"lineNumber":40,"author":{"gitId":"ivanaitzliddat"},"content":"        case \"unmark\":","lastModifiedDate":"2022-02-18"},{"lineNumber":41,"author":{"gitId":"ivanaitzliddat"},"content":"            c \u003d new UnmarkCommand(fullCommand);","lastModifiedDate":"2022-02-20"},{"lineNumber":42,"author":{"gitId":"ivanaitzliddat"},"content":"            break;","lastModifiedDate":"2022-02-18"},{"lineNumber":43,"author":{"gitId":"ivanaitzliddat"},"content":"        case \"delete\":","lastModifiedDate":"2022-02-18"},{"lineNumber":44,"author":{"gitId":"ivanaitzliddat"},"content":"            c \u003d new DeleteCommand(fullCommand);","lastModifiedDate":"2022-02-20"},{"lineNumber":45,"author":{"gitId":"ivanaitzliddat"},"content":"            break;","lastModifiedDate":"2022-02-20"},{"lineNumber":46,"author":{"gitId":"ivanaitzliddat"},"content":"        case \"todo\":","lastModifiedDate":"2022-02-20"},{"lineNumber":47,"author":{"gitId":"ivanaitzliddat"},"content":"            c \u003d new ToDoCommand(fullCommand);","lastModifiedDate":"2022-02-20"},{"lineNumber":48,"author":{"gitId":"ivanaitzliddat"},"content":"            break;","lastModifiedDate":"2022-02-20"},{"lineNumber":49,"author":{"gitId":"ivanaitzliddat"},"content":"        case \"deadline\":","lastModifiedDate":"2022-02-20"},{"lineNumber":50,"author":{"gitId":"ivanaitzliddat"},"content":"            c \u003d new DeadlineCommand(fullCommand);","lastModifiedDate":"2022-02-20"},{"lineNumber":51,"author":{"gitId":"ivanaitzliddat"},"content":"            break;","lastModifiedDate":"2022-02-20"},{"lineNumber":52,"author":{"gitId":"ivanaitzliddat"},"content":"        case \"event\":","lastModifiedDate":"2022-02-20"},{"lineNumber":53,"author":{"gitId":"ivanaitzliddat"},"content":"            c \u003d new EventCommand(fullCommand);","lastModifiedDate":"2022-02-20"},{"lineNumber":54,"author":{"gitId":"ivanaitzliddat"},"content":"            break;","lastModifiedDate":"2022-02-18"},{"lineNumber":55,"author":{"gitId":"ivanaitzliddat"},"content":"        default:","lastModifiedDate":"2022-02-20"},{"lineNumber":56,"author":{"gitId":"ivanaitzliddat"},"content":"            throw new AdditionalException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2022-02-20"},{"lineNumber":57,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-02-20"},{"lineNumber":58,"author":{"gitId":"ivanaitzliddat"},"content":"        return c;","lastModifiedDate":"2022-02-20"},{"lineNumber":59,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":60,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":61,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":62,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the parseFromFile method that takes in the nextLine from the file and makes sense of what the command","lastModifiedDate":"2022-02-20"},{"lineNumber":63,"author":{"gitId":"ivanaitzliddat"},"content":"     * that is saved in the file means.","lastModifiedDate":"2022-02-20"},{"lineNumber":64,"author":{"gitId":"ivanaitzliddat"},"content":"     * It then creates a Command object, depending on the type of command and returns it to the caller.","lastModifiedDate":"2022-02-20"},{"lineNumber":65,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":66,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param nextLine The next line from the file.","lastModifiedDate":"2022-02-20"},{"lineNumber":67,"author":{"gitId":"ivanaitzliddat"},"content":"     * @return The Command object, depending on the type of the command.","lastModifiedDate":"2022-02-20"},{"lineNumber":68,"author":{"gitId":"ivanaitzliddat"},"content":"     * @throws AdditionalException If the command saved in the file is invalid.","lastModifiedDate":"2022-02-20"},{"lineNumber":69,"author":{"gitId":"ivanaitzliddat"},"content":"     * @see AdditionalException","lastModifiedDate":"2022-02-20"},{"lineNumber":70,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":71,"author":{"gitId":"ivanaitzliddat"},"content":"    public static Command parseFromFile(String nextLine) throws AdditionalException {","lastModifiedDate":"2022-02-20"},{"lineNumber":72,"author":{"gitId":"ivanaitzliddat"},"content":"        String[] words \u003d nextLine.split(\"\\\\|\");","lastModifiedDate":"2022-02-20"},{"lineNumber":73,"author":{"gitId":"ivanaitzliddat"},"content":"        String command \u003d words[0].toLowerCase();","lastModifiedDate":"2022-02-20"},{"lineNumber":74,"author":{"gitId":"ivanaitzliddat"},"content":"        String fullCommand \u003d getFullCommand(words);","lastModifiedDate":"2022-02-20"},{"lineNumber":75,"author":{"gitId":"ivanaitzliddat"},"content":"        Command c;","lastModifiedDate":"2022-02-20"},{"lineNumber":76,"author":{"gitId":"ivanaitzliddat"},"content":"        switch (command) {","lastModifiedDate":"2022-02-20"},{"lineNumber":77,"author":{"gitId":"ivanaitzliddat"},"content":"        case \"todo\":","lastModifiedDate":"2022-02-18"},{"lineNumber":78,"author":{"gitId":"ivanaitzliddat"},"content":"            c \u003d new ToDoCommand(fullCommand);","lastModifiedDate":"2022-02-20"},{"lineNumber":79,"author":{"gitId":"ivanaitzliddat"},"content":"            break;","lastModifiedDate":"2022-02-18"},{"lineNumber":80,"author":{"gitId":"ivanaitzliddat"},"content":"        case \"deadline\":","lastModifiedDate":"2022-02-18"},{"lineNumber":81,"author":{"gitId":"ivanaitzliddat"},"content":"            c \u003d new DeadlineCommand(fullCommand);","lastModifiedDate":"2022-02-20"},{"lineNumber":82,"author":{"gitId":"ivanaitzliddat"},"content":"            break;","lastModifiedDate":"2022-02-18"},{"lineNumber":83,"author":{"gitId":"ivanaitzliddat"},"content":"        case \"event\":","lastModifiedDate":"2022-02-18"},{"lineNumber":84,"author":{"gitId":"ivanaitzliddat"},"content":"            c \u003d new EventCommand(fullCommand);","lastModifiedDate":"2022-02-20"},{"lineNumber":85,"author":{"gitId":"ivanaitzliddat"},"content":"            break;","lastModifiedDate":"2022-02-18"},{"lineNumber":86,"author":{"gitId":"ivanaitzliddat"},"content":"        default:","lastModifiedDate":"2022-02-18"},{"lineNumber":87,"author":{"gitId":"ivanaitzliddat"},"content":"            throw new AdditionalException(\"OOPS!!! I\u0027m afraid the command in the file is invalid\");","lastModifiedDate":"2022-02-20"},{"lineNumber":88,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-02-18"},{"lineNumber":89,"author":{"gitId":"ivanaitzliddat"},"content":"        return c;","lastModifiedDate":"2022-02-20"},{"lineNumber":90,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":91,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":92,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":93,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the getFullCommand method that takes in an array of words and combine them to make out the actual","lastModifiedDate":"2022-02-20"},{"lineNumber":94,"author":{"gitId":"ivanaitzliddat"},"content":"     * command and then proceeds to return it.","lastModifiedDate":"2022-02-20"},{"lineNumber":95,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":96,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param words The array of words from the file.","lastModifiedDate":"2022-02-20"},{"lineNumber":97,"author":{"gitId":"ivanaitzliddat"},"content":"     * @return The actual command for parsing.","lastModifiedDate":"2022-02-20"},{"lineNumber":98,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":99,"author":{"gitId":"ivanaitzliddat"},"content":"    private static String getFullCommand(String[] words) {","lastModifiedDate":"2022-02-20"},{"lineNumber":100,"author":{"gitId":"ivanaitzliddat"},"content":"        String fullCommand \u003d words[0];","lastModifiedDate":"2022-02-20"},{"lineNumber":101,"author":{"gitId":"ivanaitzliddat"},"content":"        for (int i \u003d 2; i \u003c words.length; i++) {","lastModifiedDate":"2022-02-20"},{"lineNumber":102,"author":{"gitId":"ivanaitzliddat"},"content":"            fullCommand +\u003d \" \";","lastModifiedDate":"2022-02-20"},{"lineNumber":103,"author":{"gitId":"ivanaitzliddat"},"content":"            fullCommand +\u003d words[i];","lastModifiedDate":"2022-02-20"},{"lineNumber":104,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-02-18"},{"lineNumber":105,"author":{"gitId":"ivanaitzliddat"},"content":"        return fullCommand;","lastModifiedDate":"2022-02-20"},{"lineNumber":106,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":107,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":108,"author":{"gitId":"ivanaitzliddat"},"content":"}","lastModifiedDate":"2022-02-18"}],"authorContributionMap":{"ivanaitzliddat":108}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivanaitzliddat"},"content":"package duke.storage;","lastModifiedDate":"2022-02-18"},{"lineNumber":2,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":3,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.TaskList;","lastModifiedDate":"2022-02-20"},{"lineNumber":4,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.command.Command;","lastModifiedDate":"2022-02-20"},{"lineNumber":5,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.exception.AdditionalException;","lastModifiedDate":"2022-02-20"},{"lineNumber":6,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.parser.Parser;","lastModifiedDate":"2022-02-20"},{"lineNumber":7,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.task.Deadline;","lastModifiedDate":"2022-02-20"},{"lineNumber":8,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.task.Event;","lastModifiedDate":"2022-02-20"},{"lineNumber":9,"author":{"gitId":"ivanaitzliddat"},"content":"import duke.task.Task;","lastModifiedDate":"2022-02-18"},{"lineNumber":10,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":11,"author":{"gitId":"ivanaitzliddat"},"content":"import java.io.File;","lastModifiedDate":"2022-02-18"},{"lineNumber":12,"author":{"gitId":"ivanaitzliddat"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2022-02-20"},{"lineNumber":13,"author":{"gitId":"ivanaitzliddat"},"content":"import java.io.FileWriter;","lastModifiedDate":"2022-02-20"},{"lineNumber":14,"author":{"gitId":"ivanaitzliddat"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-18"},{"lineNumber":15,"author":{"gitId":"ivanaitzliddat"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-18"},{"lineNumber":16,"author":{"gitId":"ivanaitzliddat"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-02-20"},{"lineNumber":17,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":18,"author":{"gitId":"ivanaitzliddat"},"content":"/**","lastModifiedDate":"2022-02-20"},{"lineNumber":19,"author":{"gitId":"ivanaitzliddat"},"content":" * Represents a storage manager that deals with loading tasks from the file and saving tasks in the file.","lastModifiedDate":"2022-02-20"},{"lineNumber":20,"author":{"gitId":"ivanaitzliddat"},"content":" */","lastModifiedDate":"2022-02-20"},{"lineNumber":21,"author":{"gitId":"ivanaitzliddat"},"content":"public class Storage {","lastModifiedDate":"2022-02-18"},{"lineNumber":22,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":23,"author":{"gitId":"ivanaitzliddat"},"content":"    private String filePath;","lastModifiedDate":"2022-02-20"},{"lineNumber":24,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":25,"author":{"gitId":"ivanaitzliddat"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2022-02-20"},{"lineNumber":26,"author":{"gitId":"ivanaitzliddat"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2022-02-20"},{"lineNumber":27,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":28,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":29,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":30,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the load method that loads the tasks from a file to a new list of tasks.","lastModifiedDate":"2022-02-20"},{"lineNumber":31,"author":{"gitId":"ivanaitzliddat"},"content":"     * It creates a new list of tasks and passes it to the readFromFile method.","lastModifiedDate":"2022-02-20"},{"lineNumber":32,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":33,"author":{"gitId":"ivanaitzliddat"},"content":"     * @return The list of tasks that was stored in the file initially.","lastModifiedDate":"2022-02-21"},{"lineNumber":34,"author":{"gitId":"ivanaitzliddat"},"content":"     * @throws FileNotFoundException If no file with the filepath is found.","lastModifiedDate":"2022-02-21"},{"lineNumber":35,"author":{"gitId":"ivanaitzliddat"},"content":"     * @throws AdditionalException","lastModifiedDate":"2022-02-20"},{"lineNumber":36,"author":{"gitId":"ivanaitzliddat"},"content":"     * @see FileNotFoundException","lastModifiedDate":"2022-02-20"},{"lineNumber":37,"author":{"gitId":"ivanaitzliddat"},"content":"     * @see AdditionalException","lastModifiedDate":"2022-02-20"},{"lineNumber":38,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":39,"author":{"gitId":"ivanaitzliddat"},"content":"    public ArrayList\u003cTask\u003e load() throws FileNotFoundException, AdditionalException {","lastModifiedDate":"2022-02-20"},{"lineNumber":40,"author":{"gitId":"ivanaitzliddat"},"content":"        ArrayList\u003cTask\u003e listOfTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-02-20"},{"lineNumber":41,"author":{"gitId":"ivanaitzliddat"},"content":"        readFromFile(listOfTasks);","lastModifiedDate":"2022-02-20"},{"lineNumber":42,"author":{"gitId":"ivanaitzliddat"},"content":"        return listOfTasks;","lastModifiedDate":"2022-02-20"},{"lineNumber":43,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":44,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":45,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":46,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the readFromFile method that reads the commands line by line from the file.","lastModifiedDate":"2022-02-20"},{"lineNumber":47,"author":{"gitId":"ivanaitzliddat"},"content":"     * Using the command object returned from the parser, it will the run the executeFromFile method.","lastModifiedDate":"2022-02-20"},{"lineNumber":48,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":49,"author":{"gitId":"ivanaitzliddat"},"content":"     * @throws FileNotFoundException If no file with the filepath is found.","lastModifiedDate":"2022-02-21"},{"lineNumber":50,"author":{"gitId":"ivanaitzliddat"},"content":"     * @throws AdditionalException","lastModifiedDate":"2022-02-20"},{"lineNumber":51,"author":{"gitId":"ivanaitzliddat"},"content":"     * @see FileNotFoundException","lastModifiedDate":"2022-02-20"},{"lineNumber":52,"author":{"gitId":"ivanaitzliddat"},"content":"     * @see AdditionalException","lastModifiedDate":"2022-02-20"},{"lineNumber":53,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":54,"author":{"gitId":"ivanaitzliddat"},"content":"    private void readFromFile(ArrayList\u003cTask\u003e listOfTasks) throws FileNotFoundException, AdditionalException {","lastModifiedDate":"2022-02-20"},{"lineNumber":55,"author":{"gitId":"ivanaitzliddat"},"content":"        File file \u003d new File(filePath);","lastModifiedDate":"2022-02-20"},{"lineNumber":56,"author":{"gitId":"ivanaitzliddat"},"content":"        Scanner scanner \u003d new Scanner(file);","lastModifiedDate":"2022-02-20"},{"lineNumber":57,"author":{"gitId":"ivanaitzliddat"},"content":"        while (scanner.hasNextLine()) {","lastModifiedDate":"2022-02-20"},{"lineNumber":58,"author":{"gitId":"ivanaitzliddat"},"content":"            String nextLine \u003d scanner.nextLine();","lastModifiedDate":"2022-02-20"},{"lineNumber":59,"author":{"gitId":"ivanaitzliddat"},"content":"            Command c \u003d Parser.parseFromFile(nextLine);","lastModifiedDate":"2022-02-20"},{"lineNumber":60,"author":{"gitId":"ivanaitzliddat"},"content":"            c.executeFromFile(listOfTasks);","lastModifiedDate":"2022-02-20"},{"lineNumber":61,"author":{"gitId":"ivanaitzliddat"},"content":"            executeIfMarked(nextLine, listOfTasks);","lastModifiedDate":"2022-02-20"},{"lineNumber":62,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-02-20"},{"lineNumber":63,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":64,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":65,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-21"},{"lineNumber":66,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the executeIfMarked method that will check if the task that is loaded form file is marked.","lastModifiedDate":"2022-02-21"},{"lineNumber":67,"author":{"gitId":"ivanaitzliddat"},"content":"     * If the task is marked, a command object is created and the method executeFromFile of the object will run.","lastModifiedDate":"2022-02-21"},{"lineNumber":68,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-21"},{"lineNumber":69,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param nextLine The next line from the file.","lastModifiedDate":"2022-02-21"},{"lineNumber":70,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param listOfTasks The list of tasks that was stored in the file initially.","lastModifiedDate":"2022-02-21"},{"lineNumber":71,"author":{"gitId":"ivanaitzliddat"},"content":"     * @throws AdditionalException If there is an error when marking the file.","lastModifiedDate":"2022-02-21"},{"lineNumber":72,"author":{"gitId":"ivanaitzliddat"},"content":"     * @see AdditionalException","lastModifiedDate":"2022-02-21"},{"lineNumber":73,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-21"},{"lineNumber":74,"author":{"gitId":"ivanaitzliddat"},"content":"    private void executeIfMarked(String nextLine, ArrayList\u003cTask\u003e listOfTasks) throws AdditionalException {","lastModifiedDate":"2022-02-20"},{"lineNumber":75,"author":{"gitId":"ivanaitzliddat"},"content":"        String[] words \u003d nextLine.split(\"\\\\|\");","lastModifiedDate":"2022-02-20"},{"lineNumber":76,"author":{"gitId":"ivanaitzliddat"},"content":"        String toMark \u003d words[1].toLowerCase();","lastModifiedDate":"2022-02-20"},{"lineNumber":77,"author":{"gitId":"ivanaitzliddat"},"content":"        if (toMark.equalsIgnoreCase(\"true\")) {","lastModifiedDate":"2022-02-20"},{"lineNumber":78,"author":{"gitId":"ivanaitzliddat"},"content":"            String fullCommand \u003d \"mark \" + Integer.toString(listOfTasks.size());","lastModifiedDate":"2022-02-20"},{"lineNumber":79,"author":{"gitId":"ivanaitzliddat"},"content":"            Command c \u003d Parser.parse(fullCommand);","lastModifiedDate":"2022-02-20"},{"lineNumber":80,"author":{"gitId":"ivanaitzliddat"},"content":"            c.executeFromFile(listOfTasks);","lastModifiedDate":"2022-02-20"},{"lineNumber":81,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-02-20"},{"lineNumber":82,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":83,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":84,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":85,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the save method that takes in a task and saves this task to the file.","lastModifiedDate":"2022-02-20"},{"lineNumber":86,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":87,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param task This is the task to be saved to the file.","lastModifiedDate":"2022-02-21"},{"lineNumber":88,"author":{"gitId":"ivanaitzliddat"},"content":"     * @throws IOException If there is an error writing to the file.","lastModifiedDate":"2022-02-21"},{"lineNumber":89,"author":{"gitId":"ivanaitzliddat"},"content":"     * @see IOException","lastModifiedDate":"2022-02-20"},{"lineNumber":90,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":91,"author":{"gitId":"ivanaitzliddat"},"content":"    public void save(Task task) throws IOException {","lastModifiedDate":"2022-02-20"},{"lineNumber":92,"author":{"gitId":"ivanaitzliddat"},"content":"        FileWriter fileWriter \u003d new FileWriter(filePath, true);","lastModifiedDate":"2022-02-21"},{"lineNumber":93,"author":{"gitId":"ivanaitzliddat"},"content":"        writeDataToFile(task, task.getTypeOfTask(), fileWriter);","lastModifiedDate":"2022-02-20"},{"lineNumber":94,"author":{"gitId":"ivanaitzliddat"},"content":"        fileWriter.close();","lastModifiedDate":"2022-02-20"},{"lineNumber":95,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":96,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":97,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":98,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the saveAll function that saves all the tasks after the tasks have been marked, unmarked or deleted.","lastModifiedDate":"2022-02-20"},{"lineNumber":99,"author":{"gitId":"ivanaitzliddat"},"content":"     * The method takes in the TaskList tasks, creates and new FileWriter and passes both to another method","lastModifiedDate":"2022-02-21"},{"lineNumber":100,"author":{"gitId":"ivanaitzliddat"},"content":"     * saveAllTasksToFile.","lastModifiedDate":"2022-02-20"},{"lineNumber":101,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":102,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param tasks This is the TaskList tasks that contains all the tasks.","lastModifiedDate":"2022-02-21"},{"lineNumber":103,"author":{"gitId":"ivanaitzliddat"},"content":"     * @throws IOException If there is an error writing to the file.","lastModifiedDate":"2022-02-21"},{"lineNumber":104,"author":{"gitId":"ivanaitzliddat"},"content":"     * @see IOException","lastModifiedDate":"2022-02-20"},{"lineNumber":105,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":106,"author":{"gitId":"ivanaitzliddat"},"content":"    public void saveAll(TaskList tasks) throws IOException {","lastModifiedDate":"2022-02-20"},{"lineNumber":107,"author":{"gitId":"ivanaitzliddat"},"content":"        FileWriter fileWriter \u003d new FileWriter(filePath);","lastModifiedDate":"2022-02-20"},{"lineNumber":108,"author":{"gitId":"ivanaitzliddat"},"content":"        saveAllTasksToFile(fileWriter, tasks);","lastModifiedDate":"2022-02-20"},{"lineNumber":109,"author":{"gitId":"ivanaitzliddat"},"content":"        fileWriter.close();","lastModifiedDate":"2022-02-20"},{"lineNumber":110,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":111,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":112,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":113,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":114,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the saveAllTasksToFile that iterates through all the tasks in the TaskList and write it to file by","lastModifiedDate":"2022-02-20"},{"lineNumber":115,"author":{"gitId":"ivanaitzliddat"},"content":"     * passing the task, the type of task of the description and the fileWriter to writeDataToFile method.","lastModifiedDate":"2022-02-20"},{"lineNumber":116,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":117,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param fileWriter The fileWriter is used to write the data to file.","lastModifiedDate":"2022-02-21"},{"lineNumber":118,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param tasks The Task List that contains the list of tasks.","lastModifiedDate":"2022-02-21"},{"lineNumber":119,"author":{"gitId":"ivanaitzliddat"},"content":"     * @throws IOException If there is an error writing to the file.","lastModifiedDate":"2022-02-21"},{"lineNumber":120,"author":{"gitId":"ivanaitzliddat"},"content":"     * @see IOException","lastModifiedDate":"2022-02-20"},{"lineNumber":121,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":122,"author":{"gitId":"ivanaitzliddat"},"content":"    private void saveAllTasksToFile(FileWriter fileWriter, TaskList tasks) throws IOException {","lastModifiedDate":"2022-02-20"},{"lineNumber":123,"author":{"gitId":"ivanaitzliddat"},"content":"        for (int i \u003d 0; i \u003c tasks.getSize(); i++) {","lastModifiedDate":"2022-02-20"},{"lineNumber":124,"author":{"gitId":"ivanaitzliddat"},"content":"            Task task \u003d tasks.getTask(i);","lastModifiedDate":"2022-02-20"},{"lineNumber":125,"author":{"gitId":"ivanaitzliddat"},"content":"            writeDataToFile(task, task.getTypeOfTask(), fileWriter);","lastModifiedDate":"2022-02-20"},{"lineNumber":126,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-02-20"},{"lineNumber":127,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":128,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":129,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":130,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the writeDataToFile method that takes in the task, the typeOfTask and fileWriter.","lastModifiedDate":"2022-02-20"},{"lineNumber":131,"author":{"gitId":"ivanaitzliddat"},"content":"     * It parses the task and saves it in a format such that it can be easily read in the future.","lastModifiedDate":"2022-02-20"},{"lineNumber":132,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":133,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param task The task to be saved to the file.","lastModifiedDate":"2022-02-21"},{"lineNumber":134,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param typeOfTask The type of task to be saved to the file.","lastModifiedDate":"2022-02-21"},{"lineNumber":135,"author":{"gitId":"ivanaitzliddat"},"content":"     * @param fileWriter The fileWriter is used to write the data to the file.","lastModifiedDate":"2022-02-21"},{"lineNumber":136,"author":{"gitId":"ivanaitzliddat"},"content":"     * @throws IOException If there is an error writing to the file.","lastModifiedDate":"2022-02-21"},{"lineNumber":137,"author":{"gitId":"ivanaitzliddat"},"content":"     * @see IOException","lastModifiedDate":"2022-02-20"},{"lineNumber":138,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":139,"author":{"gitId":"ivanaitzliddat"},"content":"    private void writeDataToFile(Task task, String typeOfTask, FileWriter fileWriter) throws IOException {","lastModifiedDate":"2022-02-20"},{"lineNumber":140,"author":{"gitId":"ivanaitzliddat"},"content":"        switch(typeOfTask) {","lastModifiedDate":"2022-02-18"},{"lineNumber":141,"author":{"gitId":"ivanaitzliddat"},"content":"        case \"todo\":","lastModifiedDate":"2022-02-18"},{"lineNumber":142,"author":{"gitId":"ivanaitzliddat"},"content":"            fileWriter.write(typeOfTask + \"|\" + task.isDone() + \"|\" + task.getDescription() + \"\\n\");","lastModifiedDate":"2022-02-20"},{"lineNumber":143,"author":{"gitId":"ivanaitzliddat"},"content":"            break;","lastModifiedDate":"2022-02-20"},{"lineNumber":144,"author":{"gitId":"ivanaitzliddat"},"content":"        case \"deadline\":","lastModifiedDate":"2022-02-18"},{"lineNumber":145,"author":{"gitId":"ivanaitzliddat"},"content":"            Deadline deadline \u003d (Deadline) task;","lastModifiedDate":"2022-02-20"},{"lineNumber":146,"author":{"gitId":"ivanaitzliddat"},"content":"            fileWriter.write(typeOfTask + \"|\" + task.isDone() + \"|\" + task.getDescription() +","lastModifiedDate":"2022-02-20"},{"lineNumber":147,"author":{"gitId":"ivanaitzliddat"},"content":"                    \"|/by \" + deadline.getDate() + \"\\n\");","lastModifiedDate":"2022-02-20"},{"lineNumber":148,"author":{"gitId":"ivanaitzliddat"},"content":"            break;","lastModifiedDate":"2022-02-18"},{"lineNumber":149,"author":{"gitId":"ivanaitzliddat"},"content":"        case \"event\":","lastModifiedDate":"2022-02-20"},{"lineNumber":150,"author":{"gitId":"ivanaitzliddat"},"content":"            Event event \u003d (Event) task;","lastModifiedDate":"2022-02-20"},{"lineNumber":151,"author":{"gitId":"ivanaitzliddat"},"content":"            fileWriter.write(typeOfTask + \"|\" + task.isDone() + \"|\" + task.getDescription() +","lastModifiedDate":"2022-02-20"},{"lineNumber":152,"author":{"gitId":"ivanaitzliddat"},"content":"                    \"|/at \" + event.getLocation() + \"|/on \" + event.getDate() + \"\\n\");","lastModifiedDate":"2022-02-20"},{"lineNumber":153,"author":{"gitId":"ivanaitzliddat"},"content":"            break;","lastModifiedDate":"2022-02-18"},{"lineNumber":154,"author":{"gitId":"ivanaitzliddat"},"content":"        default:","lastModifiedDate":"2022-02-18"},{"lineNumber":155,"author":{"gitId":"ivanaitzliddat"},"content":"            System.out.println(\"Error writing data to file\");","lastModifiedDate":"2022-02-20"},{"lineNumber":156,"author":{"gitId":"ivanaitzliddat"},"content":"        }","lastModifiedDate":"2022-02-18"},{"lineNumber":157,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-18"},{"lineNumber":158,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-18"},{"lineNumber":159,"author":{"gitId":"ivanaitzliddat"},"content":"}","lastModifiedDate":"2022-02-18"}],"authorContributionMap":{"ivanaitzliddat":159}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivanaitzliddat"},"content":"package duke.task;","lastModifiedDate":"2022-02-10"},{"lineNumber":2,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-10"},{"lineNumber":3,"author":{"gitId":"ivanaitzliddat"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-02-20"},{"lineNumber":4,"author":{"gitId":"ivanaitzliddat"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-02-20"},{"lineNumber":5,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":6,"author":{"gitId":"ivanaitzliddat"},"content":"/**","lastModifiedDate":"2022-02-20"},{"lineNumber":7,"author":{"gitId":"ivanaitzliddat"},"content":" * Represents a Deadline task.","lastModifiedDate":"2022-02-20"},{"lineNumber":8,"author":{"gitId":"ivanaitzliddat"},"content":" */","lastModifiedDate":"2022-02-20"},{"lineNumber":9,"author":{"gitId":"ivanaitzliddat"},"content":"public class Deadline extends Task{","lastModifiedDate":"2022-01-29"},{"lineNumber":10,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":11,"author":{"gitId":"ivanaitzliddat"},"content":"    private LocalDate dateOfDeadline;","lastModifiedDate":"2022-02-20"},{"lineNumber":12,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":13,"author":{"gitId":"ivanaitzliddat"},"content":"    public Deadline(String description, LocalDate dateOfDeadline, String typeOfTask) {","lastModifiedDate":"2022-02-20"},{"lineNumber":14,"author":{"gitId":"ivanaitzliddat"},"content":"        super(description, typeOfTask);","lastModifiedDate":"2022-02-12"},{"lineNumber":15,"author":{"gitId":"ivanaitzliddat"},"content":"        this.dateOfDeadline \u003d dateOfDeadline;","lastModifiedDate":"2022-02-20"},{"lineNumber":16,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":17,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":18,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":19,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the getDate method that returns the date of this task.","lastModifiedDate":"2022-02-20"},{"lineNumber":20,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":21,"author":{"gitId":"ivanaitzliddat"},"content":"     * @return The date of deadline of this task.","lastModifiedDate":"2022-02-20"},{"lineNumber":22,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":23,"author":{"gitId":"ivanaitzliddat"},"content":"    public LocalDate getDate() {","lastModifiedDate":"2022-02-20"},{"lineNumber":24,"author":{"gitId":"ivanaitzliddat"},"content":"        return dateOfDeadline;","lastModifiedDate":"2022-02-20"},{"lineNumber":25,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-13"},{"lineNumber":26,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-13"},{"lineNumber":27,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":28,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the toString method that returns a particular format to represent this task.","lastModifiedDate":"2022-02-21"},{"lineNumber":29,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":30,"author":{"gitId":"ivanaitzliddat"},"content":"     * @return The printing format of this task.","lastModifiedDate":"2022-02-21"},{"lineNumber":31,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":32,"author":{"gitId":"ivanaitzliddat"},"content":"    @Override","lastModifiedDate":"2022-01-29"},{"lineNumber":33,"author":{"gitId":"ivanaitzliddat"},"content":"    public String toString() {","lastModifiedDate":"2022-01-29"},{"lineNumber":34,"author":{"gitId":"ivanaitzliddat"},"content":"        String deadline \u003d dateOfDeadline.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2022-02-20"},{"lineNumber":35,"author":{"gitId":"ivanaitzliddat"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + deadline + \")\";","lastModifiedDate":"2022-02-20"},{"lineNumber":36,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":37,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":38,"author":{"gitId":"ivanaitzliddat"},"content":"}","lastModifiedDate":"2022-01-29"}],"authorContributionMap":{"ivanaitzliddat":38}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivanaitzliddat"},"content":"package duke.task;","lastModifiedDate":"2022-02-10"},{"lineNumber":2,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-10"},{"lineNumber":3,"author":{"gitId":"ivanaitzliddat"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-02-20"},{"lineNumber":4,"author":{"gitId":"ivanaitzliddat"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-02-20"},{"lineNumber":5,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":6,"author":{"gitId":"ivanaitzliddat"},"content":"/**","lastModifiedDate":"2022-02-20"},{"lineNumber":7,"author":{"gitId":"ivanaitzliddat"},"content":" * Represents an Event task.","lastModifiedDate":"2022-02-20"},{"lineNumber":8,"author":{"gitId":"ivanaitzliddat"},"content":" */","lastModifiedDate":"2022-02-20"},{"lineNumber":9,"author":{"gitId":"ivanaitzliddat"},"content":"public class Event extends Task{","lastModifiedDate":"2022-01-29"},{"lineNumber":10,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":11,"author":{"gitId":"ivanaitzliddat"},"content":"    private String location;","lastModifiedDate":"2022-02-20"},{"lineNumber":12,"author":{"gitId":"ivanaitzliddat"},"content":"    private LocalDate dateOfEvent;","lastModifiedDate":"2022-02-20"},{"lineNumber":13,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":14,"author":{"gitId":"ivanaitzliddat"},"content":"    public Event(String description, String location, LocalDate dateOfEvent, String typeOfTask) {","lastModifiedDate":"2022-02-20"},{"lineNumber":15,"author":{"gitId":"ivanaitzliddat"},"content":"        super(description, typeOfTask);","lastModifiedDate":"2022-02-12"},{"lineNumber":16,"author":{"gitId":"ivanaitzliddat"},"content":"        this.location \u003d location;","lastModifiedDate":"2022-02-20"},{"lineNumber":17,"author":{"gitId":"ivanaitzliddat"},"content":"        this.dateOfEvent \u003d dateOfEvent;","lastModifiedDate":"2022-02-20"},{"lineNumber":18,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":19,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":20,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":21,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the getLocation method that returns the location of this task.","lastModifiedDate":"2022-02-21"},{"lineNumber":22,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":23,"author":{"gitId":"ivanaitzliddat"},"content":"     * @return The location of this task.","lastModifiedDate":"2022-02-21"},{"lineNumber":24,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":25,"author":{"gitId":"ivanaitzliddat"},"content":"    public String getLocation() {","lastModifiedDate":"2022-02-20"},{"lineNumber":26,"author":{"gitId":"ivanaitzliddat"},"content":"        return location;","lastModifiedDate":"2022-02-20"},{"lineNumber":27,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":28,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-13"},{"lineNumber":29,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":30,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the getDate method that returns the location of this task.","lastModifiedDate":"2022-02-21"},{"lineNumber":31,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":32,"author":{"gitId":"ivanaitzliddat"},"content":"     * @return The date of event of this task.","lastModifiedDate":"2022-02-21"},{"lineNumber":33,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":34,"author":{"gitId":"ivanaitzliddat"},"content":"    public LocalDate getDate() {","lastModifiedDate":"2022-02-20"},{"lineNumber":35,"author":{"gitId":"ivanaitzliddat"},"content":"        return dateOfEvent;","lastModifiedDate":"2022-02-20"},{"lineNumber":36,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":37,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":38,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":39,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the toString method that returns a particular format to represent this task.","lastModifiedDate":"2022-02-21"},{"lineNumber":40,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":41,"author":{"gitId":"ivanaitzliddat"},"content":"     * @return The printing format of this task.","lastModifiedDate":"2022-02-21"},{"lineNumber":42,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":43,"author":{"gitId":"ivanaitzliddat"},"content":"    @Override","lastModifiedDate":"2022-01-29"},{"lineNumber":44,"author":{"gitId":"ivanaitzliddat"},"content":"    public String toString() {","lastModifiedDate":"2022-01-29"},{"lineNumber":45,"author":{"gitId":"ivanaitzliddat"},"content":"        String date \u003d dateOfEvent.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2022-02-20"},{"lineNumber":46,"author":{"gitId":"ivanaitzliddat"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + location + \" on: \" + date + \")\";","lastModifiedDate":"2022-02-20"},{"lineNumber":47,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-13"},{"lineNumber":48,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-13"},{"lineNumber":49,"author":{"gitId":"ivanaitzliddat"},"content":"}","lastModifiedDate":"2022-01-29"}],"authorContributionMap":{"ivanaitzliddat":49}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivanaitzliddat"},"content":"package duke.task;","lastModifiedDate":"2022-02-10"},{"lineNumber":2,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-10"},{"lineNumber":3,"author":{"gitId":"ivanaitzliddat"},"content":"/**","lastModifiedDate":"2022-02-20"},{"lineNumber":4,"author":{"gitId":"ivanaitzliddat"},"content":" * Represents a task that contain its description, whether the task is done and the type of task.","lastModifiedDate":"2022-02-20"},{"lineNumber":5,"author":{"gitId":"ivanaitzliddat"},"content":" */","lastModifiedDate":"2022-02-20"},{"lineNumber":6,"author":{"gitId":"ivanaitzliddat"},"content":"public class Task {","lastModifiedDate":"2022-01-25"},{"lineNumber":7,"author":{"gitId":"ivanaitzliddat"},"content":"    private String description;","lastModifiedDate":"2022-02-20"},{"lineNumber":8,"author":{"gitId":"ivanaitzliddat"},"content":"    private boolean isDone;","lastModifiedDate":"2022-02-20"},{"lineNumber":9,"author":{"gitId":"ivanaitzliddat"},"content":"    private String typeOfTask;","lastModifiedDate":"2022-02-20"},{"lineNumber":10,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":11,"author":{"gitId":"ivanaitzliddat"},"content":"    public Task(String description, String typeOfTask) {","lastModifiedDate":"2022-02-12"},{"lineNumber":12,"author":{"gitId":"ivanaitzliddat"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-01-25"},{"lineNumber":13,"author":{"gitId":"ivanaitzliddat"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-01-25"},{"lineNumber":14,"author":{"gitId":"ivanaitzliddat"},"content":"        this.typeOfTask \u003d typeOfTask;","lastModifiedDate":"2022-02-12"},{"lineNumber":15,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":16,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":17,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":18,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the getStatusIcon method that returns the icon that represents whether a task is done.","lastModifiedDate":"2022-02-20"},{"lineNumber":19,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":20,"author":{"gitId":"ivanaitzliddat"},"content":"     * @return The string \"X\" when a task is done and an empty string when a task is not done.","lastModifiedDate":"2022-02-20"},{"lineNumber":21,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":22,"author":{"gitId":"ivanaitzliddat"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2022-01-25"},{"lineNumber":23,"author":{"gitId":"ivanaitzliddat"},"content":"        return (isDone ? \"X\" : \"\"); // mark done task with X","lastModifiedDate":"2022-01-25"},{"lineNumber":24,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":25,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":26,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":27,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the markAsDone method that marks the task as done and saves it in this task.","lastModifiedDate":"2022-02-20"},{"lineNumber":28,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":29,"author":{"gitId":"ivanaitzliddat"},"content":"    public void markAsDone() {","lastModifiedDate":"2022-01-25"},{"lineNumber":30,"author":{"gitId":"ivanaitzliddat"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2022-01-25"},{"lineNumber":31,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":32,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-01-25"},{"lineNumber":33,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":34,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the markAsUndone method that marks the task as not done and saves it in this task.","lastModifiedDate":"2022-02-20"},{"lineNumber":35,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":36,"author":{"gitId":"ivanaitzliddat"},"content":"    public void markAsUndone() {","lastModifiedDate":"2022-01-25"},{"lineNumber":37,"author":{"gitId":"ivanaitzliddat"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-01-25"},{"lineNumber":38,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-01-25"},{"lineNumber":39,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":40,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":41,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the getDescription method that returns the description of this task.","lastModifiedDate":"2022-02-20"},{"lineNumber":42,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":43,"author":{"gitId":"ivanaitzliddat"},"content":"     * @return The description of this task.","lastModifiedDate":"2022-02-20"},{"lineNumber":44,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":45,"author":{"gitId":"ivanaitzliddat"},"content":"    public String getDescription() {","lastModifiedDate":"2022-02-12"},{"lineNumber":46,"author":{"gitId":"ivanaitzliddat"},"content":"        return description;","lastModifiedDate":"2022-02-12"},{"lineNumber":47,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-12"},{"lineNumber":48,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":49,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":50,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the isDone method that returns whether this task is done.","lastModifiedDate":"2022-02-20"},{"lineNumber":51,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":52,"author":{"gitId":"ivanaitzliddat"},"content":"     * @return True if this task is done and false if this task is not done.","lastModifiedDate":"2022-02-21"},{"lineNumber":53,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":54,"author":{"gitId":"ivanaitzliddat"},"content":"    public boolean isDone() {","lastModifiedDate":"2022-02-12"},{"lineNumber":55,"author":{"gitId":"ivanaitzliddat"},"content":"        return isDone;","lastModifiedDate":"2022-02-12"},{"lineNumber":56,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-12"},{"lineNumber":57,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":58,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":59,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the getTypeOfTask method that returns the type of task for this task.","lastModifiedDate":"2022-02-20"},{"lineNumber":60,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":61,"author":{"gitId":"ivanaitzliddat"},"content":"     * @return The type of task for this task.","lastModifiedDate":"2022-02-21"},{"lineNumber":62,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":63,"author":{"gitId":"ivanaitzliddat"},"content":"    public String getTypeOfTask() {","lastModifiedDate":"2022-02-12"},{"lineNumber":64,"author":{"gitId":"ivanaitzliddat"},"content":"        return typeOfTask;","lastModifiedDate":"2022-02-12"},{"lineNumber":65,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-02-12"},{"lineNumber":66,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":67,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":68,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the toString method that returns a particular format to represent this task.","lastModifiedDate":"2022-02-20"},{"lineNumber":69,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":70,"author":{"gitId":"ivanaitzliddat"},"content":"     * @return The printing format of this task.","lastModifiedDate":"2022-02-20"},{"lineNumber":71,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":72,"author":{"gitId":"ivanaitzliddat"},"content":"    @Override","lastModifiedDate":"2022-01-29"},{"lineNumber":73,"author":{"gitId":"ivanaitzliddat"},"content":"    public String toString() {","lastModifiedDate":"2022-01-29"},{"lineNumber":74,"author":{"gitId":"ivanaitzliddat"},"content":"        return \u0027[\u0027 + getStatusIcon() + \"] \" + description;","lastModifiedDate":"2022-02-12"},{"lineNumber":75,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":76,"author":{"gitId":"ivanaitzliddat"},"content":"}","lastModifiedDate":"2022-01-25"}],"authorContributionMap":{"ivanaitzliddat":76}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivanaitzliddat"},"content":"package duke.task;","lastModifiedDate":"2022-02-10"},{"lineNumber":2,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-10"},{"lineNumber":3,"author":{"gitId":"ivanaitzliddat"},"content":"/**","lastModifiedDate":"2022-02-20"},{"lineNumber":4,"author":{"gitId":"ivanaitzliddat"},"content":" * Represents a ToDo task.","lastModifiedDate":"2022-02-20"},{"lineNumber":5,"author":{"gitId":"ivanaitzliddat"},"content":" */","lastModifiedDate":"2022-02-20"},{"lineNumber":6,"author":{"gitId":"ivanaitzliddat"},"content":"public class ToDo extends Task{","lastModifiedDate":"2022-01-29"},{"lineNumber":7,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":8,"author":{"gitId":"ivanaitzliddat"},"content":"    public ToDo(String description, String typeOfTask) {","lastModifiedDate":"2022-02-12"},{"lineNumber":9,"author":{"gitId":"ivanaitzliddat"},"content":"        super(description, typeOfTask);","lastModifiedDate":"2022-02-12"},{"lineNumber":10,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":11,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-01-29"},{"lineNumber":12,"author":{"gitId":"ivanaitzliddat"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":13,"author":{"gitId":"ivanaitzliddat"},"content":"     * This is the toString method that returns a particular format to represent this task.","lastModifiedDate":"2022-02-21"},{"lineNumber":14,"author":{"gitId":"ivanaitzliddat"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":15,"author":{"gitId":"ivanaitzliddat"},"content":"     * @return The printing format of this task.","lastModifiedDate":"2022-02-21"},{"lineNumber":16,"author":{"gitId":"ivanaitzliddat"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":17,"author":{"gitId":"ivanaitzliddat"},"content":"    @Override","lastModifiedDate":"2022-01-29"},{"lineNumber":18,"author":{"gitId":"ivanaitzliddat"},"content":"    public String toString() {","lastModifiedDate":"2022-01-29"},{"lineNumber":19,"author":{"gitId":"ivanaitzliddat"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2022-02-20"},{"lineNumber":20,"author":{"gitId":"ivanaitzliddat"},"content":"    }","lastModifiedDate":"2022-01-29"},{"lineNumber":21,"author":{"gitId":"ivanaitzliddat"},"content":"}","lastModifiedDate":"2022-01-29"}],"authorContributionMap":{"ivanaitzliddat":21}},{"path":"text-ui-test/expectedduke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"ivanaitzliddat"},"content":"event|false|read book|/at library|/on 2022-02-20","lastModifiedDate":"2022-02-20"},{"lineNumber":2,"author":{"gitId":"ivanaitzliddat"},"content":"deadline|false|return book|/by 2022-02-20","lastModifiedDate":"2022-02-20"}],"authorContributionMap":{"ivanaitzliddat":2}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"ivanaitzliddat"},"content":"list","lastModifiedDate":"2022-02-11"},{"lineNumber":2,"author":{"gitId":"ivanaitzliddat"},"content":"todo borrow book","lastModifiedDate":"2022-01-29"},{"lineNumber":3,"author":{"gitId":"ivanaitzliddat"},"content":"list","lastModifiedDate":"2022-01-29"},{"lineNumber":4,"author":{"gitId":"ivanaitzliddat"},"content":"event read book /at library /on 2022-02-20","lastModifiedDate":"2022-02-20"},{"lineNumber":5,"author":{"gitId":"ivanaitzliddat"},"content":"list","lastModifiedDate":"2022-02-11"},{"lineNumber":6,"author":{"gitId":"ivanaitzliddat"},"content":"deadline return book /by 2022-02-20","lastModifiedDate":"2022-02-20"},{"lineNumber":7,"author":{"gitId":"ivanaitzliddat"},"content":"list","lastModifiedDate":"2022-02-11"},{"lineNumber":8,"author":{"gitId":"ivanaitzliddat"},"content":"mark 1","lastModifiedDate":"2022-02-11"},{"lineNumber":9,"author":{"gitId":"ivanaitzliddat"},"content":"list","lastModifiedDate":"2022-02-11"},{"lineNumber":10,"author":{"gitId":"ivanaitzliddat"},"content":"mark 2","lastModifiedDate":"2022-02-11"},{"lineNumber":11,"author":{"gitId":"ivanaitzliddat"},"content":"list","lastModifiedDate":"2022-02-11"},{"lineNumber":12,"author":{"gitId":"ivanaitzliddat"},"content":"mark 3","lastModifiedDate":"2022-02-11"},{"lineNumber":13,"author":{"gitId":"ivanaitzliddat"},"content":"list","lastModifiedDate":"2022-02-11"},{"lineNumber":14,"author":{"gitId":"ivanaitzliddat"},"content":"unmark 3","lastModifiedDate":"2022-02-11"},{"lineNumber":15,"author":{"gitId":"ivanaitzliddat"},"content":"list","lastModifiedDate":"2022-02-11"},{"lineNumber":16,"author":{"gitId":"ivanaitzliddat"},"content":"unmark 2","lastModifiedDate":"2022-02-11"},{"lineNumber":17,"author":{"gitId":"ivanaitzliddat"},"content":"list","lastModifiedDate":"2022-02-11"},{"lineNumber":18,"author":{"gitId":"ivanaitzliddat"},"content":"unmark 1","lastModifiedDate":"2022-02-11"},{"lineNumber":19,"author":{"gitId":"ivanaitzliddat"},"content":"list","lastModifiedDate":"2022-02-11"},{"lineNumber":20,"author":{"gitId":"ivanaitzliddat"},"content":"delete 1","lastModifiedDate":"2022-02-11"},{"lineNumber":21,"author":{"gitId":"ivanaitzliddat"},"content":"list","lastModifiedDate":"2022-02-11"},{"lineNumber":22,"author":{"gitId":"ivanaitzliddat"},"content":"date 2022-02-20","lastModifiedDate":"2022-02-20"},{"lineNumber":23,"author":{"gitId":"ivanaitzliddat"},"content":"todo","lastModifiedDate":"2022-02-11"},{"lineNumber":24,"author":{"gitId":"ivanaitzliddat"},"content":"todonothing","lastModifiedDate":"2022-02-21"},{"lineNumber":25,"author":{"gitId":"ivanaitzliddat"},"content":"deadline","lastModifiedDate":"2022-02-11"},{"lineNumber":26,"author":{"gitId":"ivanaitzliddat"},"content":"deadline /by","lastModifiedDate":"2022-02-11"},{"lineNumber":27,"author":{"gitId":"ivanaitzliddat"},"content":"deadline /by tonight 2359","lastModifiedDate":"2022-02-11"},{"lineNumber":28,"author":{"gitId":"ivanaitzliddat"},"content":"deadline submit homework /by","lastModifiedDate":"2022-02-20"},{"lineNumber":29,"author":{"gitId":"ivanaitzliddat"},"content":"deadline submit homework /by tonight","lastModifiedDate":"2022-02-20"},{"lineNumber":30,"author":{"gitId":"ivanaitzliddat"},"content":"deadline submit homework /by 20/02/2022","lastModifiedDate":"2022-02-20"},{"lineNumber":31,"author":{"gitId":"ivanaitzliddat"},"content":"deadlinesubmit homework /by 2022-02-20","lastModifiedDate":"2022-02-20"},{"lineNumber":32,"author":{"gitId":"ivanaitzliddat"},"content":"event","lastModifiedDate":"2022-02-20"},{"lineNumber":33,"author":{"gitId":"ivanaitzliddat"},"content":"event /at","lastModifiedDate":"2022-02-20"},{"lineNumber":34,"author":{"gitId":"ivanaitzliddat"},"content":"event /at home later","lastModifiedDate":"2022-02-20"},{"lineNumber":35,"author":{"gitId":"ivanaitzliddat"},"content":"event /at /on","lastModifiedDate":"2022-02-21"},{"lineNumber":36,"author":{"gitId":"ivanaitzliddat"},"content":"event eat dinner /at","lastModifiedDate":"2022-02-20"},{"lineNumber":37,"author":{"gitId":"ivanaitzliddat"},"content":"event eat dinner /at /on","lastModifiedDate":"2022-02-20"},{"lineNumber":38,"author":{"gitId":"ivanaitzliddat"},"content":"event eat dinner /at /on later","lastModifiedDate":"2022-02-20"},{"lineNumber":39,"author":{"gitId":"ivanaitzliddat"},"content":"event eat dinner /at home /on","lastModifiedDate":"2022-02-20"},{"lineNumber":40,"author":{"gitId":"ivanaitzliddat"},"content":"event eat dinner /at home /on later","lastModifiedDate":"2022-02-20"},{"lineNumber":41,"author":{"gitId":"ivanaitzliddat"},"content":"event eat dinner /at home /on 20/02/2022","lastModifiedDate":"2022-02-20"},{"lineNumber":42,"author":{"gitId":"ivanaitzliddat"},"content":"event /on","lastModifiedDate":"2022-02-21"},{"lineNumber":43,"author":{"gitId":"ivanaitzliddat"},"content":"event /on 2022-02-20","lastModifiedDate":"2022-02-21"},{"lineNumber":44,"author":{"gitId":"ivanaitzliddat"},"content":"event eat dinner /on 2022-02-20","lastModifiedDate":"2022-02-21"},{"lineNumber":45,"author":{"gitId":"ivanaitzliddat"},"content":"event eat dinner home /on 2022-02-20","lastModifiedDate":"2022-02-21"},{"lineNumber":46,"author":{"gitId":"ivanaitzliddat"},"content":"eventeat dinner /at home /on 2022-02-20","lastModifiedDate":"2022-02-20"},{"lineNumber":47,"author":{"gitId":"ivanaitzliddat"},"content":"mark","lastModifiedDate":"2022-02-11"},{"lineNumber":48,"author":{"gitId":"ivanaitzliddat"},"content":"mark 4","lastModifiedDate":"2022-02-11"},{"lineNumber":49,"author":{"gitId":"ivanaitzliddat"},"content":"mark hello","lastModifiedDate":"2022-02-11"},{"lineNumber":50,"author":{"gitId":"ivanaitzliddat"},"content":"mark 4 2","lastModifiedDate":"2022-02-20"},{"lineNumber":51,"author":{"gitId":"ivanaitzliddat"},"content":"mark4","lastModifiedDate":"2022-02-21"},{"lineNumber":52,"author":{"gitId":"ivanaitzliddat"},"content":"unmark","lastModifiedDate":"2022-02-11"},{"lineNumber":53,"author":{"gitId":"ivanaitzliddat"},"content":"unmark 4","lastModifiedDate":"2022-02-11"},{"lineNumber":54,"author":{"gitId":"ivanaitzliddat"},"content":"unmark hello","lastModifiedDate":"2022-02-11"},{"lineNumber":55,"author":{"gitId":"ivanaitzliddat"},"content":"unmark 4 2","lastModifiedDate":"2022-02-20"},{"lineNumber":56,"author":{"gitId":"ivanaitzliddat"},"content":"unmark4","lastModifiedDate":"2022-02-21"},{"lineNumber":57,"author":{"gitId":"ivanaitzliddat"},"content":"delete","lastModifiedDate":"2022-02-11"},{"lineNumber":58,"author":{"gitId":"ivanaitzliddat"},"content":"delete 4","lastModifiedDate":"2022-02-11"},{"lineNumber":59,"author":{"gitId":"ivanaitzliddat"},"content":"delete hello","lastModifiedDate":"2022-02-11"},{"lineNumber":60,"author":{"gitId":"ivanaitzliddat"},"content":"delete 4 2","lastModifiedDate":"2022-02-20"},{"lineNumber":61,"author":{"gitId":"ivanaitzliddat"},"content":"delete4","lastModifiedDate":"2022-02-21"},{"lineNumber":62,"author":{"gitId":"ivanaitzliddat"},"content":"date","lastModifiedDate":"2022-02-20"},{"lineNumber":63,"author":{"gitId":"ivanaitzliddat"},"content":"date tonight 2359","lastModifiedDate":"2022-02-20"},{"lineNumber":64,"author":{"gitId":"ivanaitzliddat"},"content":"date 20/02/2022","lastModifiedDate":"2022-02-20"},{"lineNumber":65,"author":{"gitId":"ivanaitzliddat"},"content":"date20/02/2022","lastModifiedDate":"2022-02-21"},{"lineNumber":66,"author":{"gitId":"ivanaitzliddat"},"content":"find","lastModifiedDate":"2022-02-21"},{"lineNumber":67,"author":{"gitId":"ivanaitzliddat"},"content":"find asdf","lastModifiedDate":"2022-02-21"},{"lineNumber":68,"author":{"gitId":"ivanaitzliddat"},"content":"find book","lastModifiedDate":"2022-02-21"},{"lineNumber":69,"author":{"gitId":"ivanaitzliddat"},"content":"find read book","lastModifiedDate":"2022-02-21"},{"lineNumber":70,"author":{"gitId":"ivanaitzliddat"},"content":"findread book","lastModifiedDate":"2022-02-21"},{"lineNumber":71,"author":{"gitId":"ivanaitzliddat"},"content":"asdf","lastModifiedDate":"2022-02-11"},{"lineNumber":72,"author":{"gitId":"ivanaitzliddat"},"content":"bye","lastModifiedDate":"2022-01-29"}],"authorContributionMap":{"ivanaitzliddat":72}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"ivanaitzliddat"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java ..\\src\\main\\java\\duke\\task\\*.java ..\\src\\main\\java\\duke\\exception\\*.java","lastModifiedDate":"2022-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"ivanaitzliddat"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2022-02-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"ivanaitzliddat"},"content":"FC duke.txt expectedduke.txt","lastModifiedDate":"2022-02-20"},{"lineNumber":23,"author":{"gitId":"ivanaitzliddat"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":24,"author":{"gitId":"ivanaitzliddat"},"content":"REM delete duke file afterwards","lastModifiedDate":"2022-02-20"},{"lineNumber":25,"author":{"gitId":"ivanaitzliddat"},"content":"DEL duke.txt","lastModifiedDate":"2022-02-20"}],"authorContributionMap":{"ivanaitzliddat":6,"-":19}}]
