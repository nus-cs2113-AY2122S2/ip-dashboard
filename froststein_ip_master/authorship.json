[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"froststein"},"content":"# duke.Duke project template","lastModifiedDate":"2022-02-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"froststein"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2022-02-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"froststein":2,"-":22}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"froststein"},"content":"Duke is a desktop app, that allows you to track all your tasks.","lastModifiedDate":"2022-02-20"},{"lineNumber":3,"author":{"gitId":"froststein"},"content":"As Duke is designed to be use in the Command Line (CLI), ","lastModifiedDate":"2022-02-20"},{"lineNumber":4,"author":{"gitId":"froststein"},"content":"this application would benefit users who are able to type fast.","lastModifiedDate":"2022-02-20"},{"lineNumber":5,"author":{"gitId":"froststein"},"content":"---","lastModifiedDate":"2022-02-20"},{"lineNumber":6,"author":{"gitId":"froststein"},"content":"## Quick Start","lastModifiedDate":"2022-02-20"},{"lineNumber":7,"author":{"gitId":"froststein"},"content":"1. Ensure you have Java 11 or above installed on your Computer","lastModifiedDate":"2022-02-20"},{"lineNumber":8,"author":{"gitId":"froststein"},"content":"2. Download the latest JAR file from GitHub.","lastModifiedDate":"2022-02-20"},{"lineNumber":9,"author":{"gitId":"froststein"},"content":"3. Copy the file to the folder you want to use as the home folder for your Duke application. ","lastModifiedDate":"2022-02-20"},{"lineNumber":10,"author":{"gitId":"froststein"},"content":"Note that the data file would also be created in the same folder.","lastModifiedDate":"2022-02-20"},{"lineNumber":11,"author":{"gitId":"froststein"},"content":"4. Open the CLI at where you have placed the jar file and run it using the command","lastModifiedDate":"2022-02-20"},{"lineNumber":12,"author":{"gitId":"froststein"},"content":"   `java -jar ip.jar`","lastModifiedDate":"2022-02-20"},{"lineNumber":13,"author":{"gitId":"froststein"},"content":"   \u003cbr\u003e![Run Sample](https://raw.githubusercontent.com/froststein/ip/master/images/runSample.PNG)","lastModifiedDate":"2022-02-20"},{"lineNumber":14,"author":{"gitId":"froststein"},"content":"5. Type the commands in the box and press enter to execute it. ","lastModifiedDate":"2022-02-20"},{"lineNumber":15,"author":{"gitId":"froststein"},"content":"Here are some commands you can try:","lastModifiedDate":"2022-02-20"},{"lineNumber":16,"author":{"gitId":"froststein"},"content":"   - `list` : List all current tasks.","lastModifiedDate":"2022-02-20"},{"lineNumber":17,"author":{"gitId":"froststein"},"content":"   - `todo Read Book` : Adds a todo task of reading book.","lastModifiedDate":"2022-02-20"},{"lineNumber":18,"author":{"gitId":"froststein"},"content":"   - `delete 1` : Deletes the first task from list.","lastModifiedDate":"2022-02-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":20,"author":{"gitId":"froststein"},"content":"---","lastModifiedDate":"2022-02-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":22,"author":{"gitId":"froststein"},"content":"### Features","lastModifiedDate":"2022-02-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":24,"author":{"gitId":"froststein"},"content":"\u003e :warning: **Notes about command format**:","lastModifiedDate":"2022-02-20"},{"lineNumber":25,"author":{"gitId":"froststein"},"content":"\u003e- Words in `UPPER_CASE` are parameters to be supplied by the user.","lastModifiedDate":"2022-02-20"},{"lineNumber":26,"author":{"gitId":"froststein"},"content":"    e.g. in `todo TASKNAME`, `TASKNAME` is a parameter which can be used as ","lastModifiedDate":"2022-02-20"},{"lineNumber":27,"author":{"gitId":"froststein"},"content":"   `todo Read Book`.","lastModifiedDate":"2022-02-20"},{"lineNumber":28,"author":{"gitId":"froststein"},"content":"\u003e- Parameters order must follow the command format.","lastModifiedDate":"2022-02-20"},{"lineNumber":29,"author":{"gitId":"froststein"},"content":"   e.g. given the command `deadline TASKNAME /by TASKDATE`, the command must be","lastModifiedDate":"2022-02-20"},{"lineNumber":30,"author":{"gitId":"froststein"},"content":"   `deadline Assignment /by 2022-02-20`","lastModifiedDate":"2022-02-20"},{"lineNumber":31,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":32,"author":{"gitId":"froststein"},"content":"* Listing all tasks: `list`","lastModifiedDate":"2022-02-20"},{"lineNumber":33,"author":{"gitId":"froststein"},"content":"* Adding a new task:","lastModifiedDate":"2022-02-20"},{"lineNumber":34,"author":{"gitId":"froststein"},"content":"   * Todo task: `todo`","lastModifiedDate":"2022-02-20"},{"lineNumber":35,"author":{"gitId":"froststein"},"content":"   * Deadline task: `deadline`","lastModifiedDate":"2022-02-20"},{"lineNumber":36,"author":{"gitId":"froststein"},"content":"   * Event task: `event`","lastModifiedDate":"2022-02-20"},{"lineNumber":37,"author":{"gitId":"froststein"},"content":"* Marking a task as done: `mark`","lastModifiedDate":"2022-02-20"},{"lineNumber":38,"author":{"gitId":"froststein"},"content":"* Marking a task as not done: `unmark`","lastModifiedDate":"2022-02-20"},{"lineNumber":39,"author":{"gitId":"froststein"},"content":"* Deleting a task: `delete`","lastModifiedDate":"2022-02-20"},{"lineNumber":40,"author":{"gitId":"froststein"},"content":"* Finding a task: `find`","lastModifiedDate":"2022-02-20"},{"lineNumber":41,"author":{"gitId":"froststein"},"content":"* Exiting the program: `bye`","lastModifiedDate":"2022-02-20"},{"lineNumber":42,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":43,"author":{"gitId":"froststein"},"content":"---","lastModifiedDate":"2022-02-20"},{"lineNumber":44,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":45,"author":{"gitId":"froststein"},"content":"### Feature - Listing all tasks","lastModifiedDate":"2022-02-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":48,"author":{"gitId":"-"},"content":"Description of the feature.","lastModifiedDate":"2021-07-17"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"## Usage","lastModifiedDate":"2019-07-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"### `Keyword` - Describe action","lastModifiedDate":"2019-07-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"Describe the action and its outcome.","lastModifiedDate":"2021-07-17"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"Example of usage: ","lastModifiedDate":"2019-07-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"`keyword (optional arguments)`","lastModifiedDate":"2019-07-29"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"Expected outcome:","lastModifiedDate":"2019-07-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"Description of the outcome.","lastModifiedDate":"2021-07-17"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":64,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":65,"author":{"gitId":"-"},"content":"expected output","lastModifiedDate":"2021-07-17"},{"lineNumber":66,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"}],"authorContributionMap":{"-":25,"froststein":41}},{"path":"src/main/java/duke/CommandParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"froststein"},"content":"package duke;","lastModifiedDate":"2022-02-06"},{"lineNumber":2,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":3,"author":{"gitId":"froststein"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2022-02-06"},{"lineNumber":4,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":5,"author":{"gitId":"froststein"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-02-19"},{"lineNumber":6,"author":{"gitId":"froststein"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-02-19"},{"lineNumber":7,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":8,"author":{"gitId":"froststein"},"content":"public class CommandParser {","lastModifiedDate":"2022-01-30"},{"lineNumber":9,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":10,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":11,"author":{"gitId":"froststein"},"content":"     * Process and executes the user\u0027s command.","lastModifiedDate":"2022-02-20"},{"lineNumber":12,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":13,"author":{"gitId":"froststein"},"content":"     * @param userInput The whole user\u0027s input as String","lastModifiedDate":"2022-02-20"},{"lineNumber":14,"author":{"gitId":"froststein"},"content":"     * @param command The command as String","lastModifiedDate":"2022-02-20"},{"lineNumber":15,"author":{"gitId":"froststein"},"content":"     * @param taskList The TaskList object that handles task related jobs","lastModifiedDate":"2022-02-20"},{"lineNumber":16,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":17,"author":{"gitId":"froststein"},"content":"    public static void executeCommand(String userInput, String command, TaskList taskList) {","lastModifiedDate":"2022-02-19"},{"lineNumber":18,"author":{"gitId":"froststein"},"content":"        switch (command) {","lastModifiedDate":"2022-02-17"},{"lineNumber":19,"author":{"gitId":"froststein"},"content":"        case \"mark\":","lastModifiedDate":"2022-02-17"},{"lineNumber":20,"author":{"gitId":"froststein"},"content":"        case \"unmark\":","lastModifiedDate":"2022-02-17"},{"lineNumber":21,"author":{"gitId":"froststein"},"content":"            taskList.markTaskInTaskList(userInput, command);","lastModifiedDate":"2022-02-19"},{"lineNumber":22,"author":{"gitId":"froststein"},"content":"            break;","lastModifiedDate":"2022-02-17"},{"lineNumber":23,"author":{"gitId":"froststein"},"content":"        case \"list\":","lastModifiedDate":"2022-02-17"},{"lineNumber":24,"author":{"gitId":"froststein"},"content":"            taskList.printTasksFromTaskList();","lastModifiedDate":"2022-02-19"},{"lineNumber":25,"author":{"gitId":"froststein"},"content":"            break;","lastModifiedDate":"2022-02-17"},{"lineNumber":26,"author":{"gitId":"froststein"},"content":"        case \"delete\":","lastModifiedDate":"2022-02-17"},{"lineNumber":27,"author":{"gitId":"froststein"},"content":"            taskList.deleteTaskInTaskList(userInput);","lastModifiedDate":"2022-02-19"},{"lineNumber":28,"author":{"gitId":"froststein"},"content":"            break;","lastModifiedDate":"2022-02-19"},{"lineNumber":29,"author":{"gitId":"froststein"},"content":"        case \"find\":","lastModifiedDate":"2022-02-19"},{"lineNumber":30,"author":{"gitId":"froststein"},"content":"            taskList.findTaskInTaskList(userInput);","lastModifiedDate":"2022-02-19"},{"lineNumber":31,"author":{"gitId":"froststein"},"content":"            break;","lastModifiedDate":"2022-02-17"},{"lineNumber":32,"author":{"gitId":"froststein"},"content":"        default:","lastModifiedDate":"2022-02-17"},{"lineNumber":33,"author":{"gitId":"froststein"},"content":"            taskList.addTaskToTaskList(userInput, command);","lastModifiedDate":"2022-02-19"},{"lineNumber":34,"author":{"gitId":"froststein"},"content":"            break;","lastModifiedDate":"2022-02-17"},{"lineNumber":35,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-02-17"},{"lineNumber":36,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":37,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":38,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":39,"author":{"gitId":"froststein"},"content":"     * Returns the command from the user\u0027s input.","lastModifiedDate":"2022-02-20"},{"lineNumber":40,"author":{"gitId":"froststein"},"content":"     * The command is the first word of in the given user\u0027s input","lastModifiedDate":"2022-02-20"},{"lineNumber":41,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":42,"author":{"gitId":"froststein"},"content":"     * @param userInput The whole user command as String","lastModifiedDate":"2022-02-20"},{"lineNumber":43,"author":{"gitId":"froststein"},"content":"     * @return The command as String","lastModifiedDate":"2022-02-20"},{"lineNumber":44,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":45,"author":{"gitId":"froststein"},"content":"    public static String getCommandFromUserInput(String userInput) {","lastModifiedDate":"2022-02-19"},{"lineNumber":46,"author":{"gitId":"froststein"},"content":"        return userInput.split(\" \")[0].toLowerCase();","lastModifiedDate":"2022-02-19"},{"lineNumber":47,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":48,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":49,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":50,"author":{"gitId":"froststein"},"content":"     * Returns a valid search string from the user\u0027s input.","lastModifiedDate":"2022-02-20"},{"lineNumber":51,"author":{"gitId":"froststein"},"content":"     * Checks if the user has entered a valid search string,","lastModifiedDate":"2022-02-20"},{"lineNumber":52,"author":{"gitId":"froststein"},"content":"     * else it returns null","lastModifiedDate":"2022-02-20"},{"lineNumber":53,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":54,"author":{"gitId":"froststein"},"content":"     * @param userInput The whole user command as String","lastModifiedDate":"2022-02-20"},{"lineNumber":55,"author":{"gitId":"froststein"},"content":"     * @return The search string","lastModifiedDate":"2022-02-20"},{"lineNumber":56,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":57,"author":{"gitId":"froststein"},"content":"    public static String getSearchStringFromUserInput(String userInput) {","lastModifiedDate":"2022-02-19"},{"lineNumber":58,"author":{"gitId":"froststein"},"content":"        String userSearchString;","lastModifiedDate":"2022-02-19"},{"lineNumber":59,"author":{"gitId":"froststein"},"content":"        // remove extra spaces in the user\u0027s input","lastModifiedDate":"2022-02-20"},{"lineNumber":60,"author":{"gitId":"froststein"},"content":"        String input \u003d userInput.strip();","lastModifiedDate":"2022-02-19"},{"lineNumber":61,"author":{"gitId":"froststein"},"content":"        int indexOfSpace \u003d input.indexOf(\" \");","lastModifiedDate":"2022-02-19"},{"lineNumber":62,"author":{"gitId":"froststein"},"content":"        try {","lastModifiedDate":"2022-02-19"},{"lineNumber":63,"author":{"gitId":"froststein"},"content":"            if (indexOfSpace \u003d\u003d -1) {","lastModifiedDate":"2022-02-19"},{"lineNumber":64,"author":{"gitId":"froststein"},"content":"                throw new DukeException(\"Oops! It seems that you did \" +","lastModifiedDate":"2022-02-19"},{"lineNumber":65,"author":{"gitId":"froststein"},"content":"                        \"not type anything! Please try again!\");","lastModifiedDate":"2022-02-19"},{"lineNumber":66,"author":{"gitId":"froststein"},"content":"            }","lastModifiedDate":"2022-02-19"},{"lineNumber":67,"author":{"gitId":"froststein"},"content":"            userSearchString \u003d input.substring(indexOfSpace + 1);","lastModifiedDate":"2022-02-19"},{"lineNumber":68,"author":{"gitId":"froststein"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2022-02-19"},{"lineNumber":69,"author":{"gitId":"froststein"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2022-02-19"},{"lineNumber":70,"author":{"gitId":"froststein"},"content":"            return null;","lastModifiedDate":"2022-02-19"},{"lineNumber":71,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-02-19"},{"lineNumber":72,"author":{"gitId":"froststein"},"content":"        return userSearchString;","lastModifiedDate":"2022-02-19"},{"lineNumber":73,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-02-19"},{"lineNumber":74,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":75,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":76,"author":{"gitId":"froststein"},"content":"     * Returns the description of a deadline task from the user\u0027s input.","lastModifiedDate":"2022-02-20"},{"lineNumber":77,"author":{"gitId":"froststein"},"content":"     * The function processes the whole user input as a string.","lastModifiedDate":"2022-02-20"},{"lineNumber":78,"author":{"gitId":"froststein"},"content":"     * The function would assume the description is located","lastModifiedDate":"2022-02-20"},{"lineNumber":79,"author":{"gitId":"froststein"},"content":"     * between the first \" \" and the \"/by\" in the user\u0027s input.","lastModifiedDate":"2022-02-20"},{"lineNumber":80,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":81,"author":{"gitId":"froststein"},"content":"     * @param userInput The whole user command as String.","lastModifiedDate":"2022-02-20"},{"lineNumber":82,"author":{"gitId":"froststein"},"content":"     * @return The description of the deadline task in String.","lastModifiedDate":"2022-02-20"},{"lineNumber":83,"author":{"gitId":"froststein"},"content":"     * @throws DukeException If \"/by\" is not found in the user\u0027s command.","lastModifiedDate":"2022-02-20"},{"lineNumber":84,"author":{"gitId":"froststein"},"content":"     *                       If \u0027,\u0027 was found in the user\u0027s command,","lastModifiedDate":"2022-02-20"},{"lineNumber":85,"author":{"gitId":"froststein"},"content":"     *                       this is a check to prevent errors when storing into a CSV file.","lastModifiedDate":"2022-02-20"},{"lineNumber":86,"author":{"gitId":"froststein"},"content":"     * @throws StringIndexOutOfBoundsException  If user command does not contain a description.","lastModifiedDate":"2022-02-20"},{"lineNumber":87,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":88,"author":{"gitId":"froststein"},"content":"    public static String getDeadlineDescription(String userInput) throws DukeException, StringIndexOutOfBoundsException {","lastModifiedDate":"2022-02-19"},{"lineNumber":89,"author":{"gitId":"froststein"},"content":"        if (userInput.contains(\"/by\")) {","lastModifiedDate":"2022-02-19"},{"lineNumber":90,"author":{"gitId":"froststein"},"content":"            int indexOfFirstSpace \u003d userInput.indexOf(\" \");","lastModifiedDate":"2022-02-19"},{"lineNumber":91,"author":{"gitId":"froststein"},"content":"            int indexOfSlash \u003d userInput.indexOf(\"/by\");","lastModifiedDate":"2022-02-19"},{"lineNumber":92,"author":{"gitId":"froststein"},"content":"            // +1 to exclude \" \" and -1 to exclude \"/\"","lastModifiedDate":"2022-01-30"},{"lineNumber":93,"author":{"gitId":"froststein"},"content":"            String description \u003d userInput.substring(indexOfFirstSpace + 1, indexOfSlash - 1).trim();","lastModifiedDate":"2022-02-19"},{"lineNumber":94,"author":{"gitId":"froststein"},"content":"            if (description.isEmpty()) {","lastModifiedDate":"2022-02-06"},{"lineNumber":95,"author":{"gitId":"froststein"},"content":"                throw new StringIndexOutOfBoundsException();","lastModifiedDate":"2022-02-06"},{"lineNumber":96,"author":{"gitId":"froststein"},"content":"            }","lastModifiedDate":"2022-02-06"},{"lineNumber":97,"author":{"gitId":"froststein"},"content":"            if (description.contains(\",\")) {","lastModifiedDate":"2022-02-17"},{"lineNumber":98,"author":{"gitId":"froststein"},"content":"                throw new DukeException(\"Please do not use \u0027,\u0027 in the description\");","lastModifiedDate":"2022-02-17"},{"lineNumber":99,"author":{"gitId":"froststein"},"content":"            }","lastModifiedDate":"2022-02-17"},{"lineNumber":100,"author":{"gitId":"froststein"},"content":"            return description;","lastModifiedDate":"2022-02-06"},{"lineNumber":101,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-02-06"},{"lineNumber":102,"author":{"gitId":"froststein"},"content":"        throw new DukeException(\"Oops! It seems that you left out the /by in your command!\");","lastModifiedDate":"2022-02-06"},{"lineNumber":103,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":104,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":105,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":106,"author":{"gitId":"froststein"},"content":"     * Returns the Date specified when creating a deadline task.","lastModifiedDate":"2022-02-20"},{"lineNumber":107,"author":{"gitId":"froststein"},"content":"     * The function processes the whole user input as a string.","lastModifiedDate":"2022-02-20"},{"lineNumber":108,"author":{"gitId":"froststein"},"content":"     * The function would assume the date is located","lastModifiedDate":"2022-02-20"},{"lineNumber":109,"author":{"gitId":"froststein"},"content":"     * after the \"/by\" in the user\u0027s input.","lastModifiedDate":"2022-02-20"},{"lineNumber":110,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":111,"author":{"gitId":"froststein"},"content":"     * @param userInput The whole user command as String.","lastModifiedDate":"2022-02-20"},{"lineNumber":112,"author":{"gitId":"froststein"},"content":"     * @return The date of the deadline task in String","lastModifiedDate":"2022-02-20"},{"lineNumber":113,"author":{"gitId":"froststein"},"content":"     * @throws DukeException If \"/by\" is not found in the user\u0027s command.","lastModifiedDate":"2022-02-20"},{"lineNumber":114,"author":{"gitId":"froststein"},"content":"     *                       If \u0027,\u0027 was found in the user\u0027s command,","lastModifiedDate":"2022-02-20"},{"lineNumber":115,"author":{"gitId":"froststein"},"content":"     *                       this is a check to prevent errors when storing into a CSV file.","lastModifiedDate":"2022-02-20"},{"lineNumber":116,"author":{"gitId":"froststein"},"content":"     * @throws StringIndexOutOfBoundsException If user command does not contain a date.","lastModifiedDate":"2022-02-20"},{"lineNumber":117,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":118,"author":{"gitId":"froststein"},"content":"    public static String getDeadlineDate(String userInput) throws DukeException, StringIndexOutOfBoundsException {","lastModifiedDate":"2022-02-19"},{"lineNumber":119,"author":{"gitId":"froststein"},"content":"        if (userInput.contains(\"/by\")) {","lastModifiedDate":"2022-02-19"},{"lineNumber":120,"author":{"gitId":"froststein"},"content":"            int slashIndex \u003d userInput.indexOf(\"/by\");","lastModifiedDate":"2022-02-19"},{"lineNumber":121,"author":{"gitId":"froststein"},"content":"            // +3 to exclude \"/by\"","lastModifiedDate":"2022-01-30"},{"lineNumber":122,"author":{"gitId":"froststein"},"content":"            String deadlineDate \u003d userInput.substring(slashIndex + 3).trim();","lastModifiedDate":"2022-02-19"},{"lineNumber":123,"author":{"gitId":"froststein"},"content":"            if (deadlineDate.isEmpty()) {","lastModifiedDate":"2022-02-19"},{"lineNumber":124,"author":{"gitId":"froststein"},"content":"                throw new StringIndexOutOfBoundsException();","lastModifiedDate":"2022-02-06"},{"lineNumber":125,"author":{"gitId":"froststein"},"content":"            }","lastModifiedDate":"2022-02-06"},{"lineNumber":126,"author":{"gitId":"froststein"},"content":"            if (deadlineDate.contains(\",\")) {","lastModifiedDate":"2022-02-19"},{"lineNumber":127,"author":{"gitId":"froststein"},"content":"                throw new DukeException(\"Please do not use \u0027,\u0027 in the date\");","lastModifiedDate":"2022-02-17"},{"lineNumber":128,"author":{"gitId":"froststein"},"content":"            }","lastModifiedDate":"2022-02-17"},{"lineNumber":129,"author":{"gitId":"froststein"},"content":"            return deadlineDate;","lastModifiedDate":"2022-02-19"},{"lineNumber":130,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-02-06"},{"lineNumber":131,"author":{"gitId":"froststein"},"content":"        throw new DukeException(\"Oops! It seems that you left out the date for the /by command!\");","lastModifiedDate":"2022-02-06"},{"lineNumber":132,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":133,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":134,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":135,"author":{"gitId":"froststein"},"content":"     * Returns the description of an event task from the user\u0027s input.","lastModifiedDate":"2022-02-20"},{"lineNumber":136,"author":{"gitId":"froststein"},"content":"     * The function processes the whole user input as a string.","lastModifiedDate":"2022-02-20"},{"lineNumber":137,"author":{"gitId":"froststein"},"content":"     * The function would assume the description is located","lastModifiedDate":"2022-02-20"},{"lineNumber":138,"author":{"gitId":"froststein"},"content":"     * between the first \" \" and the \"/at\" in the user\u0027s input.","lastModifiedDate":"2022-02-20"},{"lineNumber":139,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":140,"author":{"gitId":"froststein"},"content":"     * @param userInput The whole user command as String.","lastModifiedDate":"2022-02-20"},{"lineNumber":141,"author":{"gitId":"froststein"},"content":"     * @return The description of the event task in String.","lastModifiedDate":"2022-02-20"},{"lineNumber":142,"author":{"gitId":"froststein"},"content":"     * @throws DukeException If \"/at\" is not found in the user\u0027s command.","lastModifiedDate":"2022-02-20"},{"lineNumber":143,"author":{"gitId":"froststein"},"content":"     *                       If \u0027,\u0027 was found in the user\u0027s command,","lastModifiedDate":"2022-02-20"},{"lineNumber":144,"author":{"gitId":"froststein"},"content":"     *                       this is a check to prevent errors when storing into a CSV file.","lastModifiedDate":"2022-02-20"},{"lineNumber":145,"author":{"gitId":"froststein"},"content":"     * @throws StringIndexOutOfBoundsException If user command does not contain a description.","lastModifiedDate":"2022-02-20"},{"lineNumber":146,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":147,"author":{"gitId":"froststein"},"content":"    public static String getEventDescription(String userInput) throws DukeException, StringIndexOutOfBoundsException {","lastModifiedDate":"2022-02-19"},{"lineNumber":148,"author":{"gitId":"froststein"},"content":"        if (userInput.contains(\" \") \u0026\u0026 userInput.contains(\"/at\")) {","lastModifiedDate":"2022-02-19"},{"lineNumber":149,"author":{"gitId":"froststein"},"content":"            int indexOfFirstSpace \u003d userInput.indexOf(\" \");","lastModifiedDate":"2022-02-19"},{"lineNumber":150,"author":{"gitId":"froststein"},"content":"            int indexOfSlash \u003d userInput.indexOf(\"/at\");","lastModifiedDate":"2022-02-19"},{"lineNumber":151,"author":{"gitId":"froststein"},"content":"            // +1 to exclude \" \" and -1 to exclude \"/\"","lastModifiedDate":"2022-01-30"},{"lineNumber":152,"author":{"gitId":"froststein"},"content":"            String description \u003d userInput.substring(indexOfFirstSpace + 1, indexOfSlash - 1).trim();","lastModifiedDate":"2022-02-19"},{"lineNumber":153,"author":{"gitId":"froststein"},"content":"            if (description.isEmpty()) {","lastModifiedDate":"2022-02-06"},{"lineNumber":154,"author":{"gitId":"froststein"},"content":"                throw new StringIndexOutOfBoundsException();","lastModifiedDate":"2022-02-06"},{"lineNumber":155,"author":{"gitId":"froststein"},"content":"            }","lastModifiedDate":"2022-02-06"},{"lineNumber":156,"author":{"gitId":"froststein"},"content":"            if (description.contains(\",\")) {","lastModifiedDate":"2022-02-17"},{"lineNumber":157,"author":{"gitId":"froststein"},"content":"                throw new DukeException(\"Please do not use \u0027,\u0027 in the description\");","lastModifiedDate":"2022-02-17"},{"lineNumber":158,"author":{"gitId":"froststein"},"content":"            }","lastModifiedDate":"2022-02-17"},{"lineNumber":159,"author":{"gitId":"froststein"},"content":"            return description;","lastModifiedDate":"2022-02-06"},{"lineNumber":160,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-02-06"},{"lineNumber":161,"author":{"gitId":"froststein"},"content":"        throw new DukeException(\"Oops! It seems that you left out the /at in your command!\");","lastModifiedDate":"2022-02-06"},{"lineNumber":162,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":163,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":164,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":165,"author":{"gitId":"froststein"},"content":"     * Returns the Date specified when creating an event task.","lastModifiedDate":"2022-02-20"},{"lineNumber":166,"author":{"gitId":"froststein"},"content":"     * The function processes the whole user input as a string.","lastModifiedDate":"2022-02-20"},{"lineNumber":167,"author":{"gitId":"froststein"},"content":"     * The function would assume the date is located","lastModifiedDate":"2022-02-20"},{"lineNumber":168,"author":{"gitId":"froststein"},"content":"     * after the \"/at\" in the user\u0027s input.","lastModifiedDate":"2022-02-20"},{"lineNumber":169,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":170,"author":{"gitId":"froststein"},"content":"     * @param userInput The whole user command as String.","lastModifiedDate":"2022-02-20"},{"lineNumber":171,"author":{"gitId":"froststein"},"content":"     * @return The date of the event task in String","lastModifiedDate":"2022-02-20"},{"lineNumber":172,"author":{"gitId":"froststein"},"content":"     * @throws DukeException If \"/at\" is not found in the user\u0027s command.","lastModifiedDate":"2022-02-20"},{"lineNumber":173,"author":{"gitId":"froststein"},"content":"     *                       If \u0027,\u0027 was found in the user\u0027s command,","lastModifiedDate":"2022-02-20"},{"lineNumber":174,"author":{"gitId":"froststein"},"content":"     *                       this is a check to prevent errors when storing into a CSV file.","lastModifiedDate":"2022-02-20"},{"lineNumber":175,"author":{"gitId":"froststein"},"content":"     * @throws StringIndexOutOfBoundsException If user command does not contain a description.","lastModifiedDate":"2022-02-20"},{"lineNumber":176,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":177,"author":{"gitId":"froststein"},"content":"    public static String getEventDate(String userInput) throws DukeException, StringIndexOutOfBoundsException {","lastModifiedDate":"2022-02-19"},{"lineNumber":178,"author":{"gitId":"froststein"},"content":"        if (userInput.contains(\"/at\")) {","lastModifiedDate":"2022-02-19"},{"lineNumber":179,"author":{"gitId":"froststein"},"content":"            int indexOfSlash \u003d userInput.indexOf(\"/at\");","lastModifiedDate":"2022-02-19"},{"lineNumber":180,"author":{"gitId":"froststein"},"content":"            // +3 to exclude \"/at\"","lastModifiedDate":"2022-01-30"},{"lineNumber":181,"author":{"gitId":"froststein"},"content":"            String eventDate \u003d userInput.substring(indexOfSlash + 3).trim();","lastModifiedDate":"2022-02-19"},{"lineNumber":182,"author":{"gitId":"froststein"},"content":"            if (eventDate.isEmpty()) {","lastModifiedDate":"2022-02-19"},{"lineNumber":183,"author":{"gitId":"froststein"},"content":"                throw new StringIndexOutOfBoundsException();","lastModifiedDate":"2022-02-06"},{"lineNumber":184,"author":{"gitId":"froststein"},"content":"            }","lastModifiedDate":"2022-02-06"},{"lineNumber":185,"author":{"gitId":"froststein"},"content":"            if (eventDate.contains(\",\")) {","lastModifiedDate":"2022-02-19"},{"lineNumber":186,"author":{"gitId":"froststein"},"content":"                throw new DukeException(\"Please do not use \u0027,\u0027 in the date\");","lastModifiedDate":"2022-02-17"},{"lineNumber":187,"author":{"gitId":"froststein"},"content":"            }","lastModifiedDate":"2022-02-17"},{"lineNumber":188,"author":{"gitId":"froststein"},"content":"            return eventDate;","lastModifiedDate":"2022-02-19"},{"lineNumber":189,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-02-06"},{"lineNumber":190,"author":{"gitId":"froststein"},"content":"        throw new DukeException(\"Oops! It seems that you left out the date time for the /at command!\");","lastModifiedDate":"2022-02-06"},{"lineNumber":191,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":192,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":193,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":194,"author":{"gitId":"froststein"},"content":"     * Returns the description of a todo task from the user\u0027s input.","lastModifiedDate":"2022-02-20"},{"lineNumber":195,"author":{"gitId":"froststein"},"content":"     * The function processes the whole user input as a string.","lastModifiedDate":"2022-02-20"},{"lineNumber":196,"author":{"gitId":"froststein"},"content":"     * The function would assume the description is located","lastModifiedDate":"2022-02-20"},{"lineNumber":197,"author":{"gitId":"froststein"},"content":"     * after the first \" \" in the user\u0027s input.","lastModifiedDate":"2022-02-20"},{"lineNumber":198,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":199,"author":{"gitId":"froststein"},"content":"     * @param userInput The whole user command as String.","lastModifiedDate":"2022-02-20"},{"lineNumber":200,"author":{"gitId":"froststein"},"content":"     * @return The description of the event task in String.","lastModifiedDate":"2022-02-20"},{"lineNumber":201,"author":{"gitId":"froststein"},"content":"     * @throws DukeException If \" \" is not found in the user\u0027s command.","lastModifiedDate":"2022-02-20"},{"lineNumber":202,"author":{"gitId":"froststein"},"content":"     *                       If \u0027,\u0027 was found in the user\u0027s command,","lastModifiedDate":"2022-02-20"},{"lineNumber":203,"author":{"gitId":"froststein"},"content":"     *                       this is a check to prevent errors when storing into a CSV file.","lastModifiedDate":"2022-02-20"},{"lineNumber":204,"author":{"gitId":"froststein"},"content":"     * @throws StringIndexOutOfBoundsException If user command does not contain a description.","lastModifiedDate":"2022-02-20"},{"lineNumber":205,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":206,"author":{"gitId":"froststein"},"content":"    public static String getToDoDescription(String userInput) throws DukeException, StringIndexOutOfBoundsException {","lastModifiedDate":"2022-02-19"},{"lineNumber":207,"author":{"gitId":"froststein"},"content":"        if (userInput.contains(\" \")) {","lastModifiedDate":"2022-02-19"},{"lineNumber":208,"author":{"gitId":"froststein"},"content":"            int indexOfFirstSpace \u003d userInput.indexOf(\" \");","lastModifiedDate":"2022-02-19"},{"lineNumber":209,"author":{"gitId":"froststein"},"content":"            // +1 to exclude \" \"","lastModifiedDate":"2022-01-30"},{"lineNumber":210,"author":{"gitId":"froststein"},"content":"            String description \u003d userInput.substring(indexOfFirstSpace + 1).trim();","lastModifiedDate":"2022-02-19"},{"lineNumber":211,"author":{"gitId":"froststein"},"content":"            if (description.isEmpty()) {","lastModifiedDate":"2022-02-06"},{"lineNumber":212,"author":{"gitId":"froststein"},"content":"                throw new StringIndexOutOfBoundsException();","lastModifiedDate":"2022-02-06"},{"lineNumber":213,"author":{"gitId":"froststein"},"content":"            }","lastModifiedDate":"2022-02-06"},{"lineNumber":214,"author":{"gitId":"froststein"},"content":"            if (description.contains(\",\")) {","lastModifiedDate":"2022-02-17"},{"lineNumber":215,"author":{"gitId":"froststein"},"content":"                throw new DukeException(\"Please do not use \u0027,\u0027 in the description\");","lastModifiedDate":"2022-02-17"},{"lineNumber":216,"author":{"gitId":"froststein"},"content":"            }","lastModifiedDate":"2022-02-17"},{"lineNumber":217,"author":{"gitId":"froststein"},"content":"            return description;","lastModifiedDate":"2022-02-06"},{"lineNumber":218,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-02-06"},{"lineNumber":219,"author":{"gitId":"froststein"},"content":"        throw new DukeException(\"Oops! The description of a todo task cannot be empty!\");","lastModifiedDate":"2022-02-06"},{"lineNumber":220,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":221,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":222,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":223,"author":{"gitId":"froststein"},"content":"     * Converts the date as string to LocalDate object","lastModifiedDate":"2022-02-20"},{"lineNumber":224,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":225,"author":{"gitId":"froststein"},"content":"     * @param dateTime The date to be formatted in String.","lastModifiedDate":"2022-02-20"},{"lineNumber":226,"author":{"gitId":"froststein"},"content":"     * @return The date as LocalDate object","lastModifiedDate":"2022-02-20"},{"lineNumber":227,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":228,"author":{"gitId":"froststein"},"content":"    public static LocalDate getDateFormat(String dateTime) {","lastModifiedDate":"2022-02-19"},{"lineNumber":229,"author":{"gitId":"froststein"},"content":"        LocalDate date \u003d null;","lastModifiedDate":"2022-02-19"},{"lineNumber":230,"author":{"gitId":"froststein"},"content":"        try {","lastModifiedDate":"2022-02-19"},{"lineNumber":231,"author":{"gitId":"froststein"},"content":"            date \u003d LocalDate.parse(dateTime);","lastModifiedDate":"2022-02-19"},{"lineNumber":232,"author":{"gitId":"froststein"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2022-02-19"},{"lineNumber":233,"author":{"gitId":"froststein"},"content":"            throw new DateTimeParseException(\"Oops! Date Format should be in yyyy-mm-dd. \" +","lastModifiedDate":"2022-02-19"},{"lineNumber":234,"author":{"gitId":"froststein"},"content":"                    \"E.g (2022-02-19)\", e.getParsedString(), e.getErrorIndex());","lastModifiedDate":"2022-02-19"},{"lineNumber":235,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-02-19"},{"lineNumber":236,"author":{"gitId":"froststein"},"content":"        return date;","lastModifiedDate":"2022-02-19"},{"lineNumber":237,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-02-19"},{"lineNumber":238,"author":{"gitId":"froststein"},"content":"}","lastModifiedDate":"2022-01-30"}],"authorContributionMap":{"froststein":238}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"froststein"},"content":"package duke;","lastModifiedDate":"2022-02-06"},{"lineNumber":2,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":3,"author":{"gitId":"froststein"},"content":"/**","lastModifiedDate":"2022-02-20"},{"lineNumber":4,"author":{"gitId":"froststein"},"content":" * Entry point of the Duke application.","lastModifiedDate":"2022-02-20"},{"lineNumber":5,"author":{"gitId":"froststein"},"content":" * Initializes the application and starts the interaction with the user.","lastModifiedDate":"2022-02-20"},{"lineNumber":6,"author":{"gitId":"froststein"},"content":" */","lastModifiedDate":"2022-02-20"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":8,"author":{"gitId":"froststein"},"content":"    private UI ui;","lastModifiedDate":"2022-02-17"},{"lineNumber":9,"author":{"gitId":"froststein"},"content":"    protected LocalStorage localStorage;","lastModifiedDate":"2022-02-17"},{"lineNumber":10,"author":{"gitId":"froststein"},"content":"    protected TaskList taskList;","lastModifiedDate":"2022-02-20"},{"lineNumber":11,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":12,"author":{"gitId":"froststein"},"content":"    public Duke(String fileStoragePath) {","lastModifiedDate":"2022-02-19"},{"lineNumber":13,"author":{"gitId":"froststein"},"content":"        this.localStorage \u003d new LocalStorage(fileStoragePath);","lastModifiedDate":"2022-02-19"},{"lineNumber":14,"author":{"gitId":"froststein"},"content":"        this.taskList \u003d new TaskList(localStorage);","lastModifiedDate":"2022-02-17"},{"lineNumber":15,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":16,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":17,"author":{"gitId":"froststein"},"content":"    /** Runs the program until termination.  */","lastModifiedDate":"2022-02-20"},{"lineNumber":18,"author":{"gitId":"froststein"},"content":"    public void run() {","lastModifiedDate":"2022-02-17"},{"lineNumber":19,"author":{"gitId":"froststein"},"content":"        start();","lastModifiedDate":"2022-02-17"},{"lineNumber":20,"author":{"gitId":"froststein"},"content":"        runCommandUntilExitCommand();","lastModifiedDate":"2022-02-17"},{"lineNumber":21,"author":{"gitId":"froststein"},"content":"        exit();","lastModifiedDate":"2022-02-17"},{"lineNumber":22,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":23,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":24,"author":{"gitId":"froststein"},"content":"    /** Sets up the required objects, and prints the intro message.   */","lastModifiedDate":"2022-02-20"},{"lineNumber":25,"author":{"gitId":"froststein"},"content":"    public void start() {","lastModifiedDate":"2022-02-17"},{"lineNumber":26,"author":{"gitId":"froststein"},"content":"        this.ui \u003d new UI();","lastModifiedDate":"2022-02-17"},{"lineNumber":27,"author":{"gitId":"froststein"},"content":"        ui.printIntro();","lastModifiedDate":"2022-02-17"},{"lineNumber":28,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":29,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":30,"author":{"gitId":"froststein"},"content":"    /** Reads the user command and executes it, until the user issues the bye command.  */","lastModifiedDate":"2022-02-20"},{"lineNumber":31,"author":{"gitId":"froststein"},"content":"    public void runCommandUntilExitCommand() {","lastModifiedDate":"2022-02-17"},{"lineNumber":32,"author":{"gitId":"froststein"},"content":"        String command;","lastModifiedDate":"2022-02-17"},{"lineNumber":33,"author":{"gitId":"froststein"},"content":"        do {","lastModifiedDate":"2022-02-17"},{"lineNumber":34,"author":{"gitId":"froststein"},"content":"            String userInput \u003d ui.getUserCommand();","lastModifiedDate":"2022-02-19"},{"lineNumber":35,"author":{"gitId":"froststein"},"content":"            command \u003d CommandParser.getCommandFromUserInput(userInput);","lastModifiedDate":"2022-02-19"},{"lineNumber":36,"author":{"gitId":"froststein"},"content":"            CommandParser.executeCommand(userInput, command, taskList);","lastModifiedDate":"2022-02-19"},{"lineNumber":37,"author":{"gitId":"froststein"},"content":"        } while (!command.equalsIgnoreCase(\"bye\"));","lastModifiedDate":"2022-02-17"},{"lineNumber":38,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":39,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":40,"author":{"gitId":"froststein"},"content":"    /** Prints the Goodbye message and exits. */","lastModifiedDate":"2022-02-20"},{"lineNumber":41,"author":{"gitId":"froststein"},"content":"    public void exit() {","lastModifiedDate":"2022-02-17"},{"lineNumber":42,"author":{"gitId":"froststein"},"content":"        ui.printOutro();","lastModifiedDate":"2022-02-17"},{"lineNumber":43,"author":{"gitId":"froststein"},"content":"        System.exit(0);","lastModifiedDate":"2022-02-17"},{"lineNumber":44,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":45,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":46,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":47,"author":{"gitId":"froststein"},"content":"     * The main function to start running Duke application","lastModifiedDate":"2022-02-20"},{"lineNumber":48,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":49,"author":{"gitId":"froststein"},"content":"     * @param args Arguments.","lastModifiedDate":"2022-02-20"},{"lineNumber":50,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":51,"author":{"gitId":"froststein"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2022-02-17"},{"lineNumber":52,"author":{"gitId":"froststein"},"content":"        new Duke(\"localStorage.csv\").run();","lastModifiedDate":"2022-02-17"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"froststein":51,"-":3}},{"path":"src/main/java/duke/LocalStorage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"froststein"},"content":"package duke;","lastModifiedDate":"2022-02-12"},{"lineNumber":2,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":3,"author":{"gitId":"froststein"},"content":"import duke.task.Deadline;","lastModifiedDate":"2022-02-12"},{"lineNumber":4,"author":{"gitId":"froststein"},"content":"import duke.task.Event;","lastModifiedDate":"2022-02-12"},{"lineNumber":5,"author":{"gitId":"froststein"},"content":"import duke.task.Task;","lastModifiedDate":"2022-02-12"},{"lineNumber":6,"author":{"gitId":"froststein"},"content":"import duke.task.Todo;","lastModifiedDate":"2022-02-12"},{"lineNumber":7,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":8,"author":{"gitId":"froststein"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2022-02-12"},{"lineNumber":9,"author":{"gitId":"froststein"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2022-02-12"},{"lineNumber":10,"author":{"gitId":"froststein"},"content":"import java.io.File;","lastModifiedDate":"2022-02-12"},{"lineNumber":11,"author":{"gitId":"froststein"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-12"},{"lineNumber":12,"author":{"gitId":"froststein"},"content":"import java.nio.file.Files;","lastModifiedDate":"2022-02-12"},{"lineNumber":13,"author":{"gitId":"froststein"},"content":"import java.nio.file.InvalidPathException;","lastModifiedDate":"2022-02-12"},{"lineNumber":14,"author":{"gitId":"froststein"},"content":"import java.nio.file.Path;","lastModifiedDate":"2022-02-12"},{"lineNumber":15,"author":{"gitId":"froststein"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2022-02-12"},{"lineNumber":16,"author":{"gitId":"froststein"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-02-19"},{"lineNumber":17,"author":{"gitId":"froststein"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-02-12"},{"lineNumber":18,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":19,"author":{"gitId":"froststein"},"content":"import static java.nio.file.StandardOpenOption.CREATE;","lastModifiedDate":"2022-02-12"},{"lineNumber":20,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":21,"author":{"gitId":"froststein"},"content":"/**","lastModifiedDate":"2022-02-20"},{"lineNumber":22,"author":{"gitId":"froststein"},"content":" * Represents a LocalStorage entity for Duke","lastModifiedDate":"2022-02-20"},{"lineNumber":23,"author":{"gitId":"froststein"},"content":" */","lastModifiedDate":"2022-02-20"},{"lineNumber":24,"author":{"gitId":"froststein"},"content":"public class LocalStorage {","lastModifiedDate":"2022-02-12"},{"lineNumber":25,"author":{"gitId":"froststein"},"content":"    private static final String HOME_PATH \u003d System.getProperty(\"user.dir\");","lastModifiedDate":"2022-02-12"},{"lineNumber":26,"author":{"gitId":"froststein"},"content":"    private static Path PATH_NAME;","lastModifiedDate":"2022-02-12"},{"lineNumber":27,"author":{"gitId":"froststein"},"content":"    private static BufferedReader csvFileReader;","lastModifiedDate":"2022-02-12"},{"lineNumber":28,"author":{"gitId":"froststein"},"content":"    private static BufferedWriter csvFileWriter;","lastModifiedDate":"2022-02-12"},{"lineNumber":29,"author":{"gitId":"froststein"},"content":"    private static final String[] CSV_HEADER \u003d {\"TaskType\", \"MarkStatus\", \"TaskDescription\", \"TaskDate\"};","lastModifiedDate":"2022-02-12"},{"lineNumber":30,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":31,"author":{"gitId":"froststein"},"content":"    protected String fileStoragePath;","lastModifiedDate":"2022-02-20"},{"lineNumber":32,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":33,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":34,"author":{"gitId":"froststein"},"content":"     * Initialise LocalStorage for file storage","lastModifiedDate":"2022-02-20"},{"lineNumber":35,"author":{"gitId":"froststein"},"content":"     * and sets the fileStoragePath attribute.","lastModifiedDate":"2022-02-20"},{"lineNumber":36,"author":{"gitId":"froststein"},"content":"     * This function takes in a file path and","lastModifiedDate":"2022-02-20"},{"lineNumber":37,"author":{"gitId":"froststein"},"content":"     * initialises the reader and writer buffers.","lastModifiedDate":"2022-02-20"},{"lineNumber":38,"author":{"gitId":"froststein"},"content":"     * If files does not exist, write CSV header into file.","lastModifiedDate":"2022-02-20"},{"lineNumber":39,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":40,"author":{"gitId":"froststein"},"content":"     * @param fileStoragePath The path and file name as String","lastModifiedDate":"2022-02-20"},{"lineNumber":41,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":42,"author":{"gitId":"froststein"},"content":"    public LocalStorage(String fileStoragePath) {","lastModifiedDate":"2022-02-19"},{"lineNumber":43,"author":{"gitId":"froststein"},"content":"        this.fileStoragePath \u003d fileStoragePath;","lastModifiedDate":"2022-02-19"},{"lineNumber":44,"author":{"gitId":"froststein"},"content":"        try {","lastModifiedDate":"2022-02-12"},{"lineNumber":45,"author":{"gitId":"froststein"},"content":"            boolean isFileExist \u003d initializeReaderAndWriter();","lastModifiedDate":"2022-02-20"},{"lineNumber":46,"author":{"gitId":"froststein"},"content":"            if (!isFileExist) {","lastModifiedDate":"2022-02-20"},{"lineNumber":47,"author":{"gitId":"froststein"},"content":"                writeCSVHeaderIntoFile();","lastModifiedDate":"2022-02-12"},{"lineNumber":48,"author":{"gitId":"froststein"},"content":"                csvFileWriter.close();","lastModifiedDate":"2022-02-12"},{"lineNumber":49,"author":{"gitId":"froststein"},"content":"            }","lastModifiedDate":"2022-02-20"},{"lineNumber":50,"author":{"gitId":"froststein"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-12"},{"lineNumber":51,"author":{"gitId":"froststein"},"content":"            System.out.println(\"Oops! An IO exception has occurred at: \" + e.getMessage());","lastModifiedDate":"2022-02-12"},{"lineNumber":52,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-02-12"},{"lineNumber":53,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-02-12"},{"lineNumber":54,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":55,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":56,"author":{"gitId":"froststein"},"content":"     * Initialize bufferedWriter and bufferedReader","lastModifiedDate":"2022-02-20"},{"lineNumber":57,"author":{"gitId":"froststein"},"content":"     * for writing and reading of file.","lastModifiedDate":"2022-02-20"},{"lineNumber":58,"author":{"gitId":"froststein"},"content":"     * This function would check if the file exist with","lastModifiedDate":"2022-02-20"},{"lineNumber":59,"author":{"gitId":"froststein"},"content":"     * the specified file path.","lastModifiedDate":"2022-02-20"},{"lineNumber":60,"author":{"gitId":"froststein"},"content":"     * If the file does not exist, create a new file","lastModifiedDate":"2022-02-20"},{"lineNumber":61,"author":{"gitId":"froststein"},"content":"     * at the specified file path.","lastModifiedDate":"2022-02-20"},{"lineNumber":62,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":63,"author":{"gitId":"froststein"},"content":"     * @return true if file exist, else false.","lastModifiedDate":"2022-02-20"},{"lineNumber":64,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":65,"author":{"gitId":"froststein"},"content":"    private boolean initializeReaderAndWriter() {","lastModifiedDate":"2022-02-20"},{"lineNumber":66,"author":{"gitId":"froststein"},"content":"        boolean isFileExist \u003d false;","lastModifiedDate":"2022-02-20"},{"lineNumber":67,"author":{"gitId":"froststein"},"content":"        try {","lastModifiedDate":"2022-02-20"},{"lineNumber":68,"author":{"gitId":"froststein"},"content":"            PATH_NAME \u003d Paths.get(HOME_PATH, fileStoragePath);","lastModifiedDate":"2022-02-20"},{"lineNumber":69,"author":{"gitId":"froststein"},"content":"            isFileExist \u003d Files.exists(PATH_NAME);","lastModifiedDate":"2022-02-20"},{"lineNumber":70,"author":{"gitId":"froststein"},"content":"            // Writer will create new file if file does not exist","lastModifiedDate":"2022-02-20"},{"lineNumber":71,"author":{"gitId":"froststein"},"content":"            csvFileWriter \u003d Files.newBufferedWriter(PATH_NAME, CREATE);","lastModifiedDate":"2022-02-20"},{"lineNumber":72,"author":{"gitId":"froststein"},"content":"            csvFileReader \u003d Files.newBufferedReader(PATH_NAME);","lastModifiedDate":"2022-02-20"},{"lineNumber":73,"author":{"gitId":"froststein"},"content":"        } catch (InvalidPathException e) {","lastModifiedDate":"2022-02-20"},{"lineNumber":74,"author":{"gitId":"froststein"},"content":"            System.out.println(\"Oops! It appears that the path to \" +","lastModifiedDate":"2022-02-20"},{"lineNumber":75,"author":{"gitId":"froststein"},"content":"                    \"file is not found! Please try again!\");","lastModifiedDate":"2022-02-20"},{"lineNumber":76,"author":{"gitId":"froststein"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-20"},{"lineNumber":77,"author":{"gitId":"froststein"},"content":"            System.out.println(\"Oops! IO exception occurred at: \" +e.getMessage());","lastModifiedDate":"2022-02-20"},{"lineNumber":78,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-02-20"},{"lineNumber":79,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":80,"author":{"gitId":"froststein"},"content":"        if (isFileExist) {","lastModifiedDate":"2022-02-20"},{"lineNumber":81,"author":{"gitId":"froststein"},"content":"            System.out.println(\"Data file was found!\");","lastModifiedDate":"2022-02-20"},{"lineNumber":82,"author":{"gitId":"froststein"},"content":"            return true;","lastModifiedDate":"2022-02-20"},{"lineNumber":83,"author":{"gitId":"froststein"},"content":"        } else {","lastModifiedDate":"2022-02-20"},{"lineNumber":84,"author":{"gitId":"froststein"},"content":"            System.out.println(\"No present data file was present, \" +","lastModifiedDate":"2022-02-20"},{"lineNumber":85,"author":{"gitId":"froststein"},"content":"                    \"a new data file was created at: \" + PATH_NAME.toString());","lastModifiedDate":"2022-02-20"},{"lineNumber":86,"author":{"gitId":"froststein"},"content":"            return false;","lastModifiedDate":"2022-02-20"},{"lineNumber":87,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-02-20"},{"lineNumber":88,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":89,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":90,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":91,"author":{"gitId":"froststein"},"content":"     * Writes the CSV header into specified file.","lastModifiedDate":"2022-02-20"},{"lineNumber":92,"author":{"gitId":"froststein"},"content":"     * The function would retrieve the predefined CSV_HEADER variable","lastModifiedDate":"2022-02-20"},{"lineNumber":93,"author":{"gitId":"froststein"},"content":"     * to write into the file.","lastModifiedDate":"2022-02-20"},{"lineNumber":94,"author":{"gitId":"froststein"},"content":"     * The header would appear at the first row of the file.","lastModifiedDate":"2022-02-20"},{"lineNumber":95,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":96,"author":{"gitId":"froststein"},"content":"     * Assumption: The file is empty.","lastModifiedDate":"2022-02-20"},{"lineNumber":97,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":98,"author":{"gitId":"froststein"},"content":"     * @throws IOException If there were errors with","lastModifiedDate":"2022-02-20"},{"lineNumber":99,"author":{"gitId":"froststein"},"content":"     *                     writing to the specified file.","lastModifiedDate":"2022-02-20"},{"lineNumber":100,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":101,"author":{"gitId":"froststein"},"content":"    private void writeCSVHeaderIntoFile() throws IOException {","lastModifiedDate":"2022-02-20"},{"lineNumber":102,"author":{"gitId":"froststein"},"content":"        String csvHeader \u003d String.join(\",\", CSV_HEADER);","lastModifiedDate":"2022-02-20"},{"lineNumber":103,"author":{"gitId":"froststein"},"content":"        csvFileWriter.append(csvHeader);","lastModifiedDate":"2022-02-20"},{"lineNumber":104,"author":{"gitId":"froststein"},"content":"        csvFileWriter.append(System.lineSeparator());","lastModifiedDate":"2022-02-20"},{"lineNumber":105,"author":{"gitId":"froststein"},"content":"        csvFileWriter.flush();","lastModifiedDate":"2022-02-20"},{"lineNumber":106,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-02-20"},{"lineNumber":107,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-20"},{"lineNumber":108,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":109,"author":{"gitId":"froststein"},"content":"     * Returns a list of task that was previously","lastModifiedDate":"2022-02-20"},{"lineNumber":110,"author":{"gitId":"froststein"},"content":"     * stored in the storage file.","lastModifiedDate":"2022-02-20"},{"lineNumber":111,"author":{"gitId":"froststein"},"content":"     * The function would retrieve the list of task from the file.","lastModifiedDate":"2022-02-20"},{"lineNumber":112,"author":{"gitId":"froststein"},"content":"     * The function returns an empty list","lastModifiedDate":"2022-02-20"},{"lineNumber":113,"author":{"gitId":"froststein"},"content":"     * if no task was retrieved from the file.","lastModifiedDate":"2022-02-20"},{"lineNumber":114,"author":{"gitId":"froststein"},"content":"     * Else, it would convert the Task retrieve from the file","lastModifiedDate":"2022-02-20"},{"lineNumber":115,"author":{"gitId":"froststein"},"content":"     * into a Task object and add it to the return list.","lastModifiedDate":"2022-02-20"},{"lineNumber":116,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":117,"author":{"gitId":"froststein"},"content":"     * @return A list of task.","lastModifiedDate":"2022-02-20"},{"lineNumber":118,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":119,"author":{"gitId":"froststein"},"content":"    public ArrayList\u003cTask\u003e getTasksFromFile() {","lastModifiedDate":"2022-02-17"},{"lineNumber":120,"author":{"gitId":"froststein"},"content":"        ArrayList\u003cTask\u003e listOfStoredTask \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-02-12"},{"lineNumber":121,"author":{"gitId":"froststein"},"content":"        ArrayList\u003cString[]\u003e listOfTaskString \u003d getListOfTaskStringFromFile();","lastModifiedDate":"2022-02-19"},{"lineNumber":122,"author":{"gitId":"froststein"},"content":"        // start from 1 to skip header of CSV file","lastModifiedDate":"2022-02-20"},{"lineNumber":123,"author":{"gitId":"froststein"},"content":"        int taskIndex \u003d 1;","lastModifiedDate":"2022-02-12"},{"lineNumber":124,"author":{"gitId":"froststein"},"content":"        while (taskIndex \u003c (listOfTaskString.size())) {","lastModifiedDate":"2022-02-19"},{"lineNumber":125,"author":{"gitId":"froststein"},"content":"            Task newTaskFromFile \u003d getTaskFromListOfTaskString(listOfTaskString.get(taskIndex));","lastModifiedDate":"2022-02-19"},{"lineNumber":126,"author":{"gitId":"froststein"},"content":"            // If newTaskFromFile was not null, it indicates a valid task.","lastModifiedDate":"2022-02-20"},{"lineNumber":127,"author":{"gitId":"froststein"},"content":"            if (newTaskFromFile !\u003d null) {","lastModifiedDate":"2022-02-12"},{"lineNumber":128,"author":{"gitId":"froststein"},"content":"                listOfStoredTask.add(newTaskFromFile);","lastModifiedDate":"2022-02-12"},{"lineNumber":129,"author":{"gitId":"froststein"},"content":"            }","lastModifiedDate":"2022-02-12"},{"lineNumber":130,"author":{"gitId":"froststein"},"content":"            taskIndex++;","lastModifiedDate":"2022-02-12"},{"lineNumber":131,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-02-12"},{"lineNumber":132,"author":{"gitId":"froststein"},"content":"        return listOfStoredTask;","lastModifiedDate":"2022-02-12"},{"lineNumber":133,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-02-12"},{"lineNumber":134,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":135,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":136,"author":{"gitId":"froststein"},"content":"     * Reads from the file and returns a list task as String[]","lastModifiedDate":"2022-02-20"},{"lineNumber":137,"author":{"gitId":"froststein"},"content":"     * The function would attempt to read from the file","lastModifiedDate":"2022-02-20"},{"lineNumber":138,"author":{"gitId":"froststein"},"content":"     * and retrieve each line of String from the file.","lastModifiedDate":"2022-02-20"},{"lineNumber":139,"author":{"gitId":"froststein"},"content":"     * It would then split the line of String","lastModifiedDate":"2022-02-20"},{"lineNumber":140,"author":{"gitId":"froststein"},"content":"     * by the \u0027,\u0027 delimiter to create a String[]","lastModifiedDate":"2022-02-20"},{"lineNumber":141,"author":{"gitId":"froststein"},"content":"     * If the file is empty, an empty list is returned.","lastModifiedDate":"2022-02-20"},{"lineNumber":142,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":143,"author":{"gitId":"froststein"},"content":"     * @return A list of task as String[]","lastModifiedDate":"2022-02-20"},{"lineNumber":144,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":145,"author":{"gitId":"froststein"},"content":"    private ArrayList\u003cString[]\u003e getListOfTaskStringFromFile() {","lastModifiedDate":"2022-02-19"},{"lineNumber":146,"author":{"gitId":"froststein"},"content":"        ArrayList\u003cString[]\u003e listOfStringTask \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-02-19"},{"lineNumber":147,"author":{"gitId":"froststein"},"content":"        try {","lastModifiedDate":"2022-02-19"},{"lineNumber":148,"author":{"gitId":"froststein"},"content":"            String currentLine \u003d csvFileReader.readLine();","lastModifiedDate":"2022-02-19"},{"lineNumber":149,"author":{"gitId":"froststein"},"content":"            while (currentLine !\u003d null) {","lastModifiedDate":"2022-02-19"},{"lineNumber":150,"author":{"gitId":"froststein"},"content":"                String[] stringOutput \u003d currentLine.split(\",\");","lastModifiedDate":"2022-02-19"},{"lineNumber":151,"author":{"gitId":"froststein"},"content":"                listOfStringTask.add(stringOutput);","lastModifiedDate":"2022-02-19"},{"lineNumber":152,"author":{"gitId":"froststein"},"content":"                currentLine \u003d csvFileReader.readLine();","lastModifiedDate":"2022-02-19"},{"lineNumber":153,"author":{"gitId":"froststein"},"content":"            }","lastModifiedDate":"2022-02-19"},{"lineNumber":154,"author":{"gitId":"froststein"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-19"},{"lineNumber":155,"author":{"gitId":"froststein"},"content":"            System.out.println(\"Oops! IO exception occurred at: \" +e.getMessage());","lastModifiedDate":"2022-02-19"},{"lineNumber":156,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-02-19"},{"lineNumber":157,"author":{"gitId":"froststein"},"content":"        return listOfStringTask;","lastModifiedDate":"2022-02-19"},{"lineNumber":158,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-02-19"},{"lineNumber":159,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":160,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":161,"author":{"gitId":"froststein"},"content":"     * Converts a String[] that contains a task","lastModifiedDate":"2022-02-20"},{"lineNumber":162,"author":{"gitId":"froststein"},"content":"     * information into a Task object.","lastModifiedDate":"2022-02-20"},{"lineNumber":163,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":164,"author":{"gitId":"froststein"},"content":"     * @param taskString A task in as String[]","lastModifiedDate":"2022-02-20"},{"lineNumber":165,"author":{"gitId":"froststein"},"content":"     * @return A Task converted from String[]","lastModifiedDate":"2022-02-20"},{"lineNumber":166,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":167,"author":{"gitId":"froststein"},"content":"    private Task getTaskFromListOfTaskString(String[] taskString) {","lastModifiedDate":"2022-02-19"},{"lineNumber":168,"author":{"gitId":"froststein"},"content":"        String taskType \u003d taskString[0];","lastModifiedDate":"2022-02-19"},{"lineNumber":169,"author":{"gitId":"froststein"},"content":"        boolean isMarked \u003d Boolean.parseBoolean(taskString[1]);","lastModifiedDate":"2022-02-19"},{"lineNumber":170,"author":{"gitId":"froststein"},"content":"        String taskDescription \u003d taskString[2];","lastModifiedDate":"2022-02-19"},{"lineNumber":171,"author":{"gitId":"froststein"},"content":"        String taskDate \u003d taskString[3];","lastModifiedDate":"2022-02-19"},{"lineNumber":172,"author":{"gitId":"froststein"},"content":"        LocalDate dateTime \u003d CommandParser.getDateFormat(taskDate);","lastModifiedDate":"2022-02-19"},{"lineNumber":173,"author":{"gitId":"froststein"},"content":"        Task newTask \u003d createTaskObject(taskType, isMarked, taskDescription, dateTime);","lastModifiedDate":"2022-02-19"},{"lineNumber":174,"author":{"gitId":"froststein"},"content":"        return newTask;","lastModifiedDate":"2022-02-12"},{"lineNumber":175,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-02-12"},{"lineNumber":176,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":177,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":178,"author":{"gitId":"froststein"},"content":"     * Creates a Task with the specified taskType,","lastModifiedDate":"2022-02-20"},{"lineNumber":179,"author":{"gitId":"froststein"},"content":"     * markStatus, taskDescription and taskDate.","lastModifiedDate":"2022-02-20"},{"lineNumber":180,"author":{"gitId":"froststein"},"content":"     * If taskType is invalid, returns null.","lastModifiedDate":"2022-02-20"},{"lineNumber":181,"author":{"gitId":"froststein"},"content":"     * Else, create a new Task object and return it.","lastModifiedDate":"2022-02-20"},{"lineNumber":182,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":183,"author":{"gitId":"froststein"},"content":"     * @param taskType The type of Task","lastModifiedDate":"2022-02-20"},{"lineNumber":184,"author":{"gitId":"froststein"},"content":"     * @param markStatus The status of the Task","lastModifiedDate":"2022-02-20"},{"lineNumber":185,"author":{"gitId":"froststein"},"content":"     * @param taskDescription The description of the Task","lastModifiedDate":"2022-02-20"},{"lineNumber":186,"author":{"gitId":"froststein"},"content":"     * @param taskDate The date of the Task","lastModifiedDate":"2022-02-20"},{"lineNumber":187,"author":{"gitId":"froststein"},"content":"     * @return A Task object created with the specified fields.","lastModifiedDate":"2022-02-20"},{"lineNumber":188,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":189,"author":{"gitId":"froststein"},"content":"    private Task createTaskObject(String taskType, boolean markStatus, String taskDescription, LocalDate taskDate){","lastModifiedDate":"2022-02-19"},{"lineNumber":190,"author":{"gitId":"froststein"},"content":"        Task newTask \u003d null;","lastModifiedDate":"2022-02-12"},{"lineNumber":191,"author":{"gitId":"froststein"},"content":"        switch (taskType) {","lastModifiedDate":"2022-02-12"},{"lineNumber":192,"author":{"gitId":"froststein"},"content":"        case \"todo\":","lastModifiedDate":"2022-02-12"},{"lineNumber":193,"author":{"gitId":"froststein"},"content":"            newTask \u003d new Todo(taskDescription, markStatus);","lastModifiedDate":"2022-02-12"},{"lineNumber":194,"author":{"gitId":"froststein"},"content":"            break;","lastModifiedDate":"2022-02-12"},{"lineNumber":195,"author":{"gitId":"froststein"},"content":"        case \"event\":","lastModifiedDate":"2022-02-12"},{"lineNumber":196,"author":{"gitId":"froststein"},"content":"            newTask \u003d new Event(taskDescription, markStatus, taskDate);","lastModifiedDate":"2022-02-12"},{"lineNumber":197,"author":{"gitId":"froststein"},"content":"            break;","lastModifiedDate":"2022-02-12"},{"lineNumber":198,"author":{"gitId":"froststein"},"content":"        case \"deadline\":","lastModifiedDate":"2022-02-12"},{"lineNumber":199,"author":{"gitId":"froststein"},"content":"            newTask \u003d new Deadline(taskDescription, markStatus, taskDate);","lastModifiedDate":"2022-02-12"},{"lineNumber":200,"author":{"gitId":"froststein"},"content":"            break;","lastModifiedDate":"2022-02-12"},{"lineNumber":201,"author":{"gitId":"froststein"},"content":"        default:","lastModifiedDate":"2022-02-12"},{"lineNumber":202,"author":{"gitId":"froststein"},"content":"            System.out.println(\"Oops! It seems that this is a invalid task type!\");","lastModifiedDate":"2022-02-12"},{"lineNumber":203,"author":{"gitId":"froststein"},"content":"            break;","lastModifiedDate":"2022-02-12"},{"lineNumber":204,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-02-12"},{"lineNumber":205,"author":{"gitId":"froststein"},"content":"        return newTask;","lastModifiedDate":"2022-02-12"},{"lineNumber":206,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-02-12"},{"lineNumber":207,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":208,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":209,"author":{"gitId":"froststein"},"content":"     * Converts a Task into a String to be stored into the file.","lastModifiedDate":"2022-02-20"},{"lineNumber":210,"author":{"gitId":"froststein"},"content":"     * The function would create a String[] as a temporary storage,","lastModifiedDate":"2022-02-20"},{"lineNumber":211,"author":{"gitId":"froststein"},"content":"     * it would then append the taskType, taskStatus, taskDescription and taskDate","lastModifiedDate":"2022-02-20"},{"lineNumber":212,"author":{"gitId":"froststein"},"content":"     * into the String[].","lastModifiedDate":"2022-02-20"},{"lineNumber":213,"author":{"gitId":"froststein"},"content":"     * The function would then join the String[] with \u0027,\u0027","lastModifiedDate":"2022-02-20"},{"lineNumber":214,"author":{"gitId":"froststein"},"content":"     * to return it as a String for file storage.","lastModifiedDate":"2022-02-20"},{"lineNumber":215,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":216,"author":{"gitId":"froststein"},"content":"     * @param taskToBeConverted The Task to be converted into String[]","lastModifiedDate":"2022-02-20"},{"lineNumber":217,"author":{"gitId":"froststein"},"content":"     * @return A converted Task as String","lastModifiedDate":"2022-02-20"},{"lineNumber":218,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":219,"author":{"gitId":"froststein"},"content":"    private String convertTaskToStringForCSVFile(Task taskToBeConverted) {","lastModifiedDate":"2022-02-17"},{"lineNumber":220,"author":{"gitId":"froststein"},"content":"        String[] taskDetails \u003d new String[4];","lastModifiedDate":"2022-02-12"},{"lineNumber":221,"author":{"gitId":"froststein"},"content":"        taskDetails[0] \u003d taskToBeConverted.getTaskType();","lastModifiedDate":"2022-02-12"},{"lineNumber":222,"author":{"gitId":"froststein"},"content":"        taskDetails[1] \u003d String.valueOf(taskToBeConverted.getStatus());","lastModifiedDate":"2022-02-12"},{"lineNumber":223,"author":{"gitId":"froststein"},"content":"        taskDetails[2] \u003d taskToBeConverted.getDescription();","lastModifiedDate":"2022-02-12"},{"lineNumber":224,"author":{"gitId":"froststein"},"content":"        taskDetails[3] \u003d taskToBeConverted.getDateForStorageFile();","lastModifiedDate":"2022-02-19"},{"lineNumber":225,"author":{"gitId":"froststein"},"content":"        String taskAsString \u003d String.join(\",\", taskDetails);","lastModifiedDate":"2022-02-12"},{"lineNumber":226,"author":{"gitId":"froststein"},"content":"        return taskAsString;","lastModifiedDate":"2022-02-12"},{"lineNumber":227,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-02-12"},{"lineNumber":228,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":229,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":230,"author":{"gitId":"froststein"},"content":"     * Saves the current list of task that the application is tracking.","lastModifiedDate":"2022-02-20"},{"lineNumber":231,"author":{"gitId":"froststein"},"content":"     * This function is invoked when a user adds, mark, unmark or deletes a task.","lastModifiedDate":"2022-02-20"},{"lineNumber":232,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":233,"author":{"gitId":"froststein"},"content":"     * @param taskList The current list of task in the Application.","lastModifiedDate":"2022-02-20"},{"lineNumber":234,"author":{"gitId":"froststein"},"content":"     * @throws IOException If there was an error writing to the file.","lastModifiedDate":"2022-02-20"},{"lineNumber":235,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":236,"author":{"gitId":"froststein"},"content":"    public void saveCurrentTaskListToFile(ArrayList\u003cTask\u003e taskList) throws IOException{","lastModifiedDate":"2022-02-17"},{"lineNumber":237,"author":{"gitId":"froststein"},"content":"        File toBeDeleted \u003d new File(PATH_NAME.toString());","lastModifiedDate":"2022-02-12"},{"lineNumber":238,"author":{"gitId":"froststein"},"content":"        toBeDeleted.delete();","lastModifiedDate":"2022-02-17"},{"lineNumber":239,"author":{"gitId":"froststein"},"content":"        csvFileWriter \u003d Files.newBufferedWriter(PATH_NAME, CREATE);","lastModifiedDate":"2022-02-12"},{"lineNumber":240,"author":{"gitId":"froststein"},"content":"        writeCSVHeaderIntoFile();","lastModifiedDate":"2022-02-12"},{"lineNumber":241,"author":{"gitId":"froststein"},"content":"        for (Task task : taskList) {","lastModifiedDate":"2022-02-12"},{"lineNumber":242,"author":{"gitId":"froststein"},"content":"            String convertedTask \u003d convertTaskToStringForCSVFile(task);","lastModifiedDate":"2022-02-12"},{"lineNumber":243,"author":{"gitId":"froststein"},"content":"            csvFileWriter.write(convertedTask);","lastModifiedDate":"2022-02-12"},{"lineNumber":244,"author":{"gitId":"froststein"},"content":"            csvFileWriter.append(System.lineSeparator());","lastModifiedDate":"2022-02-12"},{"lineNumber":245,"author":{"gitId":"froststein"},"content":"            csvFileWriter.flush();","lastModifiedDate":"2022-02-12"},{"lineNumber":246,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-02-12"},{"lineNumber":247,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-02-12"},{"lineNumber":248,"author":{"gitId":"froststein"},"content":"}","lastModifiedDate":"2022-02-12"}],"authorContributionMap":{"froststein":248}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"froststein"},"content":"package duke;","lastModifiedDate":"2022-02-06"},{"lineNumber":2,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":3,"author":{"gitId":"froststein"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2022-02-06"},{"lineNumber":4,"author":{"gitId":"froststein"},"content":"import duke.task.Deadline;","lastModifiedDate":"2022-02-06"},{"lineNumber":5,"author":{"gitId":"froststein"},"content":"import duke.task.Event;","lastModifiedDate":"2022-02-06"},{"lineNumber":6,"author":{"gitId":"froststein"},"content":"import duke.task.Task;","lastModifiedDate":"2022-02-06"},{"lineNumber":7,"author":{"gitId":"froststein"},"content":"import duke.task.Todo;","lastModifiedDate":"2022-02-06"},{"lineNumber":8,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":9,"author":{"gitId":"froststein"},"content":"import java.io.IOException;","lastModifiedDate":"2022-02-12"},{"lineNumber":10,"author":{"gitId":"froststein"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-02-19"},{"lineNumber":11,"author":{"gitId":"froststein"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-01-30"},{"lineNumber":12,"author":{"gitId":"froststein"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-02-19"},{"lineNumber":13,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":14,"author":{"gitId":"froststein"},"content":"import static java.util.stream.Collectors.toList;","lastModifiedDate":"2022-02-19"},{"lineNumber":15,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":16,"author":{"gitId":"froststein"},"content":"public class TaskList {","lastModifiedDate":"2022-01-30"},{"lineNumber":17,"author":{"gitId":"froststein"},"content":"    protected LocalStorage localInstance;","lastModifiedDate":"2022-02-20"},{"lineNumber":18,"author":{"gitId":"froststein"},"content":"    protected ArrayList\u003cTask\u003e listOfTask;","lastModifiedDate":"2022-02-20"},{"lineNumber":19,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":20,"author":{"gitId":"froststein"},"content":"    public TaskList(LocalStorage localStorage) {","lastModifiedDate":"2022-02-17"},{"lineNumber":21,"author":{"gitId":"froststein"},"content":"        this.localInstance \u003d localStorage;","lastModifiedDate":"2022-02-17"},{"lineNumber":22,"author":{"gitId":"froststein"},"content":"        this.listOfTask \u003d localInstance.getTasksFromFile();","lastModifiedDate":"2022-02-17"},{"lineNumber":23,"author":{"gitId":"froststein"},"content":"        System.out.println(\"Total number of task loaded: \" +listOfTask.size());","lastModifiedDate":"2022-02-17"},{"lineNumber":24,"author":{"gitId":"froststein"},"content":"        UI.printBorder();","lastModifiedDate":"2022-02-17"},{"lineNumber":25,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":26,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":27,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":28,"author":{"gitId":"froststein"},"content":"     * Returns a Task from task list with the specified index.","lastModifiedDate":"2022-02-20"},{"lineNumber":29,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":30,"author":{"gitId":"froststein"},"content":"     * @param taskNumber A specified index of the task.","lastModifiedDate":"2022-02-20"},{"lineNumber":31,"author":{"gitId":"froststein"},"content":"     * @return Task at specified index.","lastModifiedDate":"2022-02-20"},{"lineNumber":32,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":33,"author":{"gitId":"froststein"},"content":"    private Task getTaskFromListOfTask(int taskNumber) {","lastModifiedDate":"2022-02-17"},{"lineNumber":34,"author":{"gitId":"froststein"},"content":"        // -1 to offset the counting of array list from 0","lastModifiedDate":"2022-01-30"},{"lineNumber":35,"author":{"gitId":"froststein"},"content":"        return listOfTask.get(taskNumber - 1);","lastModifiedDate":"2022-01-30"},{"lineNumber":36,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":37,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":38,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":39,"author":{"gitId":"froststein"},"content":"     * Returns the task number specified in the user\u0027s input","lastModifiedDate":"2022-02-20"},{"lineNumber":40,"author":{"gitId":"froststein"},"content":"     * The function processes the whole user input as a string.","lastModifiedDate":"2022-02-20"},{"lineNumber":41,"author":{"gitId":"froststein"},"content":"     * The function assumes the task number is located as the second word of the command","lastModifiedDate":"2022-02-20"},{"lineNumber":42,"author":{"gitId":"froststein"},"content":"     * E.g. mark 2, 2 would be the second word","lastModifiedDate":"2022-02-20"},{"lineNumber":43,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":44,"author":{"gitId":"froststein"},"content":"     * @param userInput The whole user command as String.","lastModifiedDate":"2022-02-20"},{"lineNumber":45,"author":{"gitId":"froststein"},"content":"     * @return Task number as an int","lastModifiedDate":"2022-02-20"},{"lineNumber":46,"author":{"gitId":"froststein"},"content":"     * @throws IndexOutOfBoundsException If the specified task number is out of range","lastModifiedDate":"2022-02-20"},{"lineNumber":47,"author":{"gitId":"froststein"},"content":"     * @throws NumberFormatException If the specified task number is not a number","lastModifiedDate":"2022-02-20"},{"lineNumber":48,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":49,"author":{"gitId":"froststein"},"content":"    private int getTaskNumberFromInput(String userInput) throws IndexOutOfBoundsException, NumberFormatException {","lastModifiedDate":"2022-02-20"},{"lineNumber":50,"author":{"gitId":"froststein"},"content":"        int indexOfTask \u003d Integer.parseInt(userInput.split(\" \")[1]);","lastModifiedDate":"2022-02-20"},{"lineNumber":51,"author":{"gitId":"froststein"},"content":"        // check to see if an index of \u003c 0 was given","lastModifiedDate":"2022-01-30"},{"lineNumber":52,"author":{"gitId":"froststein"},"content":"        if (indexOfTask \u003c\u003d 0 || indexOfTask \u003e listOfTask.size()) {","lastModifiedDate":"2022-02-19"},{"lineNumber":53,"author":{"gitId":"froststein"},"content":"            throw new IndexOutOfBoundsException(\"Invalid task to be marked!\");","lastModifiedDate":"2022-02-06"},{"lineNumber":54,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-01-30"},{"lineNumber":55,"author":{"gitId":"froststein"},"content":"        return indexOfTask;","lastModifiedDate":"2022-02-19"},{"lineNumber":56,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":57,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":58,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":59,"author":{"gitId":"froststein"},"content":"     * Process the user\u0027s input and task type to create respective Task.","lastModifiedDate":"2022-02-20"},{"lineNumber":60,"author":{"gitId":"froststein"},"content":"     * If the task type does not match Duke\u0027s supporting tasks","lastModifiedDate":"2022-02-20"},{"lineNumber":61,"author":{"gitId":"froststein"},"content":"     * it would not create a Task.","lastModifiedDate":"2022-02-20"},{"lineNumber":62,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":63,"author":{"gitId":"froststein"},"content":"     * @param userInput The whole user command as String.","lastModifiedDate":"2022-02-20"},{"lineNumber":64,"author":{"gitId":"froststein"},"content":"     * @param taskType The task type as String","lastModifiedDate":"2022-02-20"},{"lineNumber":65,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":66,"author":{"gitId":"froststein"},"content":"    public void addTaskToTaskList(String userInput, String taskType) {","lastModifiedDate":"2022-02-19"},{"lineNumber":67,"author":{"gitId":"froststein"},"content":"        Task newTask;","lastModifiedDate":"2022-02-20"},{"lineNumber":68,"author":{"gitId":"froststein"},"content":"        switch (taskType.toLowerCase()){","lastModifiedDate":"2022-02-19"},{"lineNumber":69,"author":{"gitId":"froststein"},"content":"        case \"deadline\":","lastModifiedDate":"2022-02-17"},{"lineNumber":70,"author":{"gitId":"froststein"},"content":"            newTask \u003d createDeadlineTask(userInput);","lastModifiedDate":"2022-02-19"},{"lineNumber":71,"author":{"gitId":"froststein"},"content":"            break;","lastModifiedDate":"2022-02-17"},{"lineNumber":72,"author":{"gitId":"froststein"},"content":"        case \"event\":","lastModifiedDate":"2022-02-17"},{"lineNumber":73,"author":{"gitId":"froststein"},"content":"            newTask \u003d createEventTask(userInput);","lastModifiedDate":"2022-02-19"},{"lineNumber":74,"author":{"gitId":"froststein"},"content":"            break;","lastModifiedDate":"2022-02-17"},{"lineNumber":75,"author":{"gitId":"froststein"},"content":"        case \"todo\":","lastModifiedDate":"2022-02-17"},{"lineNumber":76,"author":{"gitId":"froststein"},"content":"            newTask \u003d createTodoTask(userInput);","lastModifiedDate":"2022-02-19"},{"lineNumber":77,"author":{"gitId":"froststein"},"content":"            break;","lastModifiedDate":"2022-02-17"},{"lineNumber":78,"author":{"gitId":"froststein"},"content":"        default:","lastModifiedDate":"2022-02-17"},{"lineNumber":79,"author":{"gitId":"froststein"},"content":"            System.out.println(\"Invalid type of task given!\");","lastModifiedDate":"2022-02-17"},{"lineNumber":80,"author":{"gitId":"froststein"},"content":"            return;","lastModifiedDate":"2022-02-17"},{"lineNumber":81,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-02-17"},{"lineNumber":82,"author":{"gitId":"froststein"},"content":"        if (newTask !\u003d null) {","lastModifiedDate":"2022-02-17"},{"lineNumber":83,"author":{"gitId":"froststein"},"content":"            listOfTask.add(newTask);","lastModifiedDate":"2022-02-17"},{"lineNumber":84,"author":{"gitId":"froststein"},"content":"            printTaskUpdate(newTask, \"added\");","lastModifiedDate":"2022-02-19"},{"lineNumber":85,"author":{"gitId":"froststein"},"content":"            saveTaskListToFile();","lastModifiedDate":"2022-02-17"},{"lineNumber":86,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-02-17"},{"lineNumber":87,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":88,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":89,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":90,"author":{"gitId":"froststein"},"content":"     * Updates the status of the task with specified task number,","lastModifiedDate":"2022-02-20"},{"lineNumber":91,"author":{"gitId":"froststein"},"content":"     * to either done or not done.","lastModifiedDate":"2022-02-20"},{"lineNumber":92,"author":{"gitId":"froststein"},"content":"     * The function processes the whole user input as a string.","lastModifiedDate":"2022-02-20"},{"lineNumber":93,"author":{"gitId":"froststein"},"content":"     * The function would get the task number","lastModifiedDate":"2022-02-20"},{"lineNumber":94,"author":{"gitId":"froststein"},"content":"     * to be marked/unmarked from the user input.","lastModifiedDate":"2022-02-20"},{"lineNumber":95,"author":{"gitId":"froststein"},"content":"     * If an invalid task number is provided, no task is marked.","lastModifiedDate":"2022-02-20"},{"lineNumber":96,"author":{"gitId":"froststein"},"content":"     * Else, it would update the task status with the respective status provided.","lastModifiedDate":"2022-02-20"},{"lineNumber":97,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":98,"author":{"gitId":"froststein"},"content":"     * @param userInput The whole user command as String.","lastModifiedDate":"2022-02-20"},{"lineNumber":99,"author":{"gitId":"froststein"},"content":"     * @param taskStatus The new status of the task as String.","lastModifiedDate":"2022-02-20"},{"lineNumber":100,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":101,"author":{"gitId":"froststein"},"content":"    public void markTaskInTaskList(String userInput, String taskStatus) {","lastModifiedDate":"2022-02-19"},{"lineNumber":102,"author":{"gitId":"froststein"},"content":"        try {","lastModifiedDate":"2022-02-06"},{"lineNumber":103,"author":{"gitId":"froststein"},"content":"            int indexOfTaskInList \u003d getTaskNumberFromInput(userInput);","lastModifiedDate":"2022-02-19"},{"lineNumber":104,"author":{"gitId":"froststein"},"content":"            // true if it is \"mark\", set to false if it is \"unmark\"","lastModifiedDate":"2022-02-19"},{"lineNumber":105,"author":{"gitId":"froststein"},"content":"            boolean isTaskDone \u003d taskStatus.equalsIgnoreCase(\"mark\");","lastModifiedDate":"2022-01-30"},{"lineNumber":106,"author":{"gitId":"froststein"},"content":"            Task taskToBeMark \u003d getTaskFromListOfTask(indexOfTaskInList);","lastModifiedDate":"2022-02-19"},{"lineNumber":107,"author":{"gitId":"froststein"},"content":"            taskToBeMark.setDone(isTaskDone);","lastModifiedDate":"2022-02-19"},{"lineNumber":108,"author":{"gitId":"froststein"},"content":"            if (isTaskDone) {","lastModifiedDate":"2022-01-30"},{"lineNumber":109,"author":{"gitId":"froststein"},"content":"                System.out.println(\"Nice! I\u0027v marked this task as done:\");","lastModifiedDate":"2022-01-30"},{"lineNumber":110,"author":{"gitId":"froststein"},"content":"            } else {","lastModifiedDate":"2022-01-30"},{"lineNumber":111,"author":{"gitId":"froststein"},"content":"                System.out.println(\"Okay! I\u0027v marked this task as not done:\");","lastModifiedDate":"2022-01-30"},{"lineNumber":112,"author":{"gitId":"froststein"},"content":"            }","lastModifiedDate":"2022-01-30"},{"lineNumber":113,"author":{"gitId":"froststein"},"content":"            System.out.println(taskToBeMark);","lastModifiedDate":"2022-02-19"},{"lineNumber":114,"author":{"gitId":"froststein"},"content":"            saveTaskListToFile();","lastModifiedDate":"2022-02-17"},{"lineNumber":115,"author":{"gitId":"froststein"},"content":"        } catch (IndexOutOfBoundsException idxError) {","lastModifiedDate":"2022-02-06"},{"lineNumber":116,"author":{"gitId":"froststein"},"content":"            System.out.println(\"Invalid task number to be marked!\");","lastModifiedDate":"2022-02-06"},{"lineNumber":117,"author":{"gitId":"froststein"},"content":"        } catch (NumberFormatException numFormError) {","lastModifiedDate":"2022-02-06"},{"lineNumber":118,"author":{"gitId":"froststein"},"content":"            System.out.println(\"Please enter a number to mark task.\");","lastModifiedDate":"2022-02-06"},{"lineNumber":119,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-02-06"},{"lineNumber":120,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":121,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":122,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":123,"author":{"gitId":"froststein"},"content":"     * Deletes a task with specified task number.","lastModifiedDate":"2022-02-20"},{"lineNumber":124,"author":{"gitId":"froststein"},"content":"     * The function processes the whole user input as a string.","lastModifiedDate":"2022-02-20"},{"lineNumber":125,"author":{"gitId":"froststein"},"content":"     * The function would get the task number to be deleted from the user input.","lastModifiedDate":"2022-02-20"},{"lineNumber":126,"author":{"gitId":"froststein"},"content":"     * If an invalid task number is provided, no task is deleted.","lastModifiedDate":"2022-02-20"},{"lineNumber":127,"author":{"gitId":"froststein"},"content":"     * Else, the task would be deleted from the TaskList.","lastModifiedDate":"2022-02-20"},{"lineNumber":128,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":129,"author":{"gitId":"froststein"},"content":"     * @param userInput The whole user command as String.","lastModifiedDate":"2022-02-20"},{"lineNumber":130,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":131,"author":{"gitId":"froststein"},"content":"    public void deleteTaskInTaskList(String userInput) {","lastModifiedDate":"2022-02-19"},{"lineNumber":132,"author":{"gitId":"froststein"},"content":"        try {","lastModifiedDate":"2022-02-11"},{"lineNumber":133,"author":{"gitId":"froststein"},"content":"            int indexOfTaskInList \u003d getTaskNumberFromInput(userInput);","lastModifiedDate":"2022-02-19"},{"lineNumber":134,"author":{"gitId":"froststein"},"content":"            Task taskToBeDeleted \u003d getTaskFromListOfTask(indexOfTaskInList);","lastModifiedDate":"2022-02-19"},{"lineNumber":135,"author":{"gitId":"froststein"},"content":"            listOfTask.remove(taskToBeDeleted);","lastModifiedDate":"2022-02-19"},{"lineNumber":136,"author":{"gitId":"froststein"},"content":"            printTaskUpdate(taskToBeDeleted, \"deleted\");","lastModifiedDate":"2022-02-19"},{"lineNumber":137,"author":{"gitId":"froststein"},"content":"            saveTaskListToFile();","lastModifiedDate":"2022-02-17"},{"lineNumber":138,"author":{"gitId":"froststein"},"content":"        } catch (IndexOutOfBoundsException idxError) {","lastModifiedDate":"2022-02-11"},{"lineNumber":139,"author":{"gitId":"froststein"},"content":"            System.out.println(\"Invalid task number to be marked!\");","lastModifiedDate":"2022-02-11"},{"lineNumber":140,"author":{"gitId":"froststein"},"content":"        } catch (NumberFormatException numFormError) {","lastModifiedDate":"2022-02-11"},{"lineNumber":141,"author":{"gitId":"froststein"},"content":"            System.out.println(\"Please enter a number to mark task.\");","lastModifiedDate":"2022-02-11"},{"lineNumber":142,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-02-11"},{"lineNumber":143,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-02-11"},{"lineNumber":144,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-11"},{"lineNumber":145,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":146,"author":{"gitId":"froststein"},"content":"     * Finds and print a list of task that contains","lastModifiedDate":"2022-02-20"},{"lineNumber":147,"author":{"gitId":"froststein"},"content":"     * a substring of the specified search string by the user input.","lastModifiedDate":"2022-02-20"},{"lineNumber":148,"author":{"gitId":"froststein"},"content":"     * If no task matches the search string it would let the user know,","lastModifiedDate":"2022-02-20"},{"lineNumber":149,"author":{"gitId":"froststein"},"content":"     * else, a list of task containing the search string will be printed","lastModifiedDate":"2022-02-20"},{"lineNumber":150,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":151,"author":{"gitId":"froststein"},"content":"     * @param userInput The whole user command as String.","lastModifiedDate":"2022-02-20"},{"lineNumber":152,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":153,"author":{"gitId":"froststein"},"content":"    public void findTaskInTaskList(String userInput) {","lastModifiedDate":"2022-02-19"},{"lineNumber":154,"author":{"gitId":"froststein"},"content":"        String searchString \u003d CommandParser.getSearchStringFromUserInput(userInput);","lastModifiedDate":"2022-02-19"},{"lineNumber":155,"author":{"gitId":"froststein"},"content":"        if (searchString \u003d\u003d null) {","lastModifiedDate":"2022-02-19"},{"lineNumber":156,"author":{"gitId":"froststein"},"content":"            return;","lastModifiedDate":"2022-02-19"},{"lineNumber":157,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-02-19"},{"lineNumber":158,"author":{"gitId":"froststein"},"content":"        ArrayList\u003cTask\u003e listOfMatchedTask \u003d getSearchedList(searchString);","lastModifiedDate":"2022-02-19"},{"lineNumber":159,"author":{"gitId":"froststein"},"content":"        if (listOfMatchedTask \u003d\u003d null) {","lastModifiedDate":"2022-02-19"},{"lineNumber":160,"author":{"gitId":"froststein"},"content":"            System.out.println(\"Oops! It seems that we could not find \" +","lastModifiedDate":"2022-02-19"},{"lineNumber":161,"author":{"gitId":"froststein"},"content":"                    \"what you were looking for! Please try again.\");","lastModifiedDate":"2022-02-19"},{"lineNumber":162,"author":{"gitId":"froststein"},"content":"        } else {","lastModifiedDate":"2022-02-19"},{"lineNumber":163,"author":{"gitId":"froststein"},"content":"            System.out.println(\"The tasks that matched your inputs are:\");","lastModifiedDate":"2022-02-19"},{"lineNumber":164,"author":{"gitId":"froststein"},"content":"            printTaskList(listOfMatchedTask);","lastModifiedDate":"2022-02-19"},{"lineNumber":165,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-02-19"},{"lineNumber":166,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-02-19"},{"lineNumber":167,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":168,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":169,"author":{"gitId":"froststein"},"content":"     * Driver function to call printTaskList().","lastModifiedDate":"2022-02-20"},{"lineNumber":170,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":171,"author":{"gitId":"froststein"},"content":"    public void printTasksFromTaskList() {","lastModifiedDate":"2022-02-19"},{"lineNumber":172,"author":{"gitId":"froststein"},"content":"        printTaskList(listOfTask);","lastModifiedDate":"2022-02-19"},{"lineNumber":173,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-02-19"},{"lineNumber":174,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":175,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":176,"author":{"gitId":"froststein"},"content":"     * Adds deadline Task to the list and returns the same task.","lastModifiedDate":"2022-02-20"},{"lineNumber":177,"author":{"gitId":"froststein"},"content":"     * Else, a null is returned.","lastModifiedDate":"2022-02-20"},{"lineNumber":178,"author":{"gitId":"froststein"},"content":"     * The function processes the whole user input as a string.","lastModifiedDate":"2022-02-20"},{"lineNumber":179,"author":{"gitId":"froststein"},"content":"     * This function would process the user input to get the","lastModifiedDate":"2022-02-20"},{"lineNumber":180,"author":{"gitId":"froststein"},"content":"     * description and deadline date.","lastModifiedDate":"2022-02-20"},{"lineNumber":181,"author":{"gitId":"froststein"},"content":"     * It would then create a new deadline task and add to the current list of task.","lastModifiedDate":"2022-02-20"},{"lineNumber":182,"author":{"gitId":"froststein"},"content":"     * The newly created deadline task would be returned.","lastModifiedDate":"2022-02-20"},{"lineNumber":183,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":184,"author":{"gitId":"froststein"},"content":"     * @param userInput The whole user command as String.","lastModifiedDate":"2022-02-20"},{"lineNumber":185,"author":{"gitId":"froststein"},"content":"     * @return The deadline task created, else null","lastModifiedDate":"2022-02-20"},{"lineNumber":186,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":187,"author":{"gitId":"froststein"},"content":"    private Deadline createDeadlineTask(String userInput) {","lastModifiedDate":"2022-02-19"},{"lineNumber":188,"author":{"gitId":"froststein"},"content":"        Deadline newDeadlineTask \u003d null;","lastModifiedDate":"2022-02-06"},{"lineNumber":189,"author":{"gitId":"froststein"},"content":"        try {","lastModifiedDate":"2022-02-06"},{"lineNumber":190,"author":{"gitId":"froststein"},"content":"            String deadlineDescription \u003d CommandParser.getDeadlineDescription(userInput);","lastModifiedDate":"2022-02-19"},{"lineNumber":191,"author":{"gitId":"froststein"},"content":"            String deadlineDateString \u003d CommandParser.getDeadlineDate(userInput);","lastModifiedDate":"2022-02-19"},{"lineNumber":192,"author":{"gitId":"froststein"},"content":"            LocalDate deadlineDate \u003d CommandParser.getDateFormat(deadlineDateString);","lastModifiedDate":"2022-02-19"},{"lineNumber":193,"author":{"gitId":"froststein"},"content":"            newDeadlineTask \u003d new Deadline(deadlineDescription, deadlineDate);","lastModifiedDate":"2022-02-19"},{"lineNumber":194,"author":{"gitId":"froststein"},"content":"        } catch (DukeException | DateTimeParseException error) {","lastModifiedDate":"2022-02-20"},{"lineNumber":195,"author":{"gitId":"froststein"},"content":"            System.out.println(error.getMessage());","lastModifiedDate":"2022-02-20"},{"lineNumber":196,"author":{"gitId":"froststein"},"content":"        } catch (StringIndexOutOfBoundsException idxError) {","lastModifiedDate":"2022-02-06"},{"lineNumber":197,"author":{"gitId":"froststein"},"content":"            System.out.println(\"Please check your command and formatting again!\");","lastModifiedDate":"2022-02-06"},{"lineNumber":198,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-02-06"},{"lineNumber":199,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":200,"author":{"gitId":"froststein"},"content":"        return newDeadlineTask;","lastModifiedDate":"2022-02-06"},{"lineNumber":201,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":202,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":203,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":204,"author":{"gitId":"froststein"},"content":"     * Adds event Task to the list and returns the same task.","lastModifiedDate":"2022-02-20"},{"lineNumber":205,"author":{"gitId":"froststein"},"content":"     * Else, a null is returned.","lastModifiedDate":"2022-02-20"},{"lineNumber":206,"author":{"gitId":"froststein"},"content":"     * The function processes the whole user input as a string.","lastModifiedDate":"2022-02-20"},{"lineNumber":207,"author":{"gitId":"froststein"},"content":"     * This function would process the user input to get the","lastModifiedDate":"2022-02-20"},{"lineNumber":208,"author":{"gitId":"froststein"},"content":"     * description and event date.","lastModifiedDate":"2022-02-20"},{"lineNumber":209,"author":{"gitId":"froststein"},"content":"     * It would then create a new event task and add to the current list of task.","lastModifiedDate":"2022-02-20"},{"lineNumber":210,"author":{"gitId":"froststein"},"content":"     * The newly created event task would be returned.\u0027","lastModifiedDate":"2022-02-20"},{"lineNumber":211,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":212,"author":{"gitId":"froststein"},"content":"     * @param userInput The whole user command as String.","lastModifiedDate":"2022-02-20"},{"lineNumber":213,"author":{"gitId":"froststein"},"content":"     * @return The event task created, else null","lastModifiedDate":"2022-02-20"},{"lineNumber":214,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":215,"author":{"gitId":"froststein"},"content":"    private Event createEventTask(String userInput) {","lastModifiedDate":"2022-02-19"},{"lineNumber":216,"author":{"gitId":"froststein"},"content":"        Event newEventTask \u003d null;","lastModifiedDate":"2022-02-06"},{"lineNumber":217,"author":{"gitId":"froststein"},"content":"        try {","lastModifiedDate":"2022-02-06"},{"lineNumber":218,"author":{"gitId":"froststein"},"content":"            String eventDescription \u003d CommandParser.getEventDescription(userInput);","lastModifiedDate":"2022-02-19"},{"lineNumber":219,"author":{"gitId":"froststein"},"content":"            String eventDateString \u003d CommandParser.getEventDate(userInput);","lastModifiedDate":"2022-02-19"},{"lineNumber":220,"author":{"gitId":"froststein"},"content":"            LocalDate eventDate \u003d CommandParser.getDateFormat(eventDateString);","lastModifiedDate":"2022-02-19"},{"lineNumber":221,"author":{"gitId":"froststein"},"content":"            newEventTask \u003d new Event(eventDescription, eventDate);","lastModifiedDate":"2022-02-19"},{"lineNumber":222,"author":{"gitId":"froststein"},"content":"        } catch (DukeException | DateTimeParseException error) {","lastModifiedDate":"2022-02-20"},{"lineNumber":223,"author":{"gitId":"froststein"},"content":"            System.out.println(error.getMessage());","lastModifiedDate":"2022-02-20"},{"lineNumber":224,"author":{"gitId":"froststein"},"content":"        } catch (StringIndexOutOfBoundsException idxError) {","lastModifiedDate":"2022-02-06"},{"lineNumber":225,"author":{"gitId":"froststein"},"content":"            System.out.println(\"Please check your command and formatting again!\");","lastModifiedDate":"2022-02-06"},{"lineNumber":226,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-02-06"},{"lineNumber":227,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":228,"author":{"gitId":"froststein"},"content":"        return newEventTask;","lastModifiedDate":"2022-02-06"},{"lineNumber":229,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":230,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":231,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":232,"author":{"gitId":"froststein"},"content":"     * Adds todo Task to the list and returns the same task.","lastModifiedDate":"2022-02-20"},{"lineNumber":233,"author":{"gitId":"froststein"},"content":"     * Else, a null is returned.","lastModifiedDate":"2022-02-20"},{"lineNumber":234,"author":{"gitId":"froststein"},"content":"     * The function processes the whole user input as a string.","lastModifiedDate":"2022-02-20"},{"lineNumber":235,"author":{"gitId":"froststein"},"content":"     * This function would process the user input to get the","lastModifiedDate":"2022-02-20"},{"lineNumber":236,"author":{"gitId":"froststein"},"content":"     * description.","lastModifiedDate":"2022-02-20"},{"lineNumber":237,"author":{"gitId":"froststein"},"content":"     * It would then create a new todo task and add to the current list of task.","lastModifiedDate":"2022-02-20"},{"lineNumber":238,"author":{"gitId":"froststein"},"content":"     * The newly created todo task would be returned.\u0027","lastModifiedDate":"2022-02-20"},{"lineNumber":239,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":240,"author":{"gitId":"froststein"},"content":"     * @param userInput The whole user command as String.","lastModifiedDate":"2022-02-20"},{"lineNumber":241,"author":{"gitId":"froststein"},"content":"     * @return The todo task created, else null","lastModifiedDate":"2022-02-20"},{"lineNumber":242,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":243,"author":{"gitId":"froststein"},"content":"    private Todo createTodoTask(String userInput) {","lastModifiedDate":"2022-02-19"},{"lineNumber":244,"author":{"gitId":"froststein"},"content":"        Todo newTodoTask \u003d null;","lastModifiedDate":"2022-02-19"},{"lineNumber":245,"author":{"gitId":"froststein"},"content":"        try {","lastModifiedDate":"2022-02-06"},{"lineNumber":246,"author":{"gitId":"froststein"},"content":"            String todoDescription \u003d CommandParser.getToDoDescription(userInput);","lastModifiedDate":"2022-02-19"},{"lineNumber":247,"author":{"gitId":"froststein"},"content":"            newTodoTask \u003d new Todo(todoDescription);","lastModifiedDate":"2022-02-06"},{"lineNumber":248,"author":{"gitId":"froststein"},"content":"        } catch (DukeException dukeError) {","lastModifiedDate":"2022-02-06"},{"lineNumber":249,"author":{"gitId":"froststein"},"content":"            System.out.println(dukeError.getMessage());","lastModifiedDate":"2022-02-12"},{"lineNumber":250,"author":{"gitId":"froststein"},"content":"        } catch (StringIndexOutOfBoundsException idxError) {","lastModifiedDate":"2022-02-06"},{"lineNumber":251,"author":{"gitId":"froststein"},"content":"            System.out.println(\"Please check your command and formatting again!\");","lastModifiedDate":"2022-02-06"},{"lineNumber":252,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-02-06"},{"lineNumber":253,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":254,"author":{"gitId":"froststein"},"content":"        return newTodoTask;","lastModifiedDate":"2022-02-06"},{"lineNumber":255,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":256,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":257,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":258,"author":{"gitId":"froststein"},"content":"     *  Returns a list of task where task description","lastModifiedDate":"2022-02-20"},{"lineNumber":259,"author":{"gitId":"froststein"},"content":"     *  contains the search string provided.","lastModifiedDate":"2022-02-20"},{"lineNumber":260,"author":{"gitId":"froststein"},"content":"     *  If none of the descriptions match, return null.","lastModifiedDate":"2022-02-20"},{"lineNumber":261,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":262,"author":{"gitId":"froststein"},"content":"     * @param stringToMatch The String to match provided by the user.","lastModifiedDate":"2022-02-20"},{"lineNumber":263,"author":{"gitId":"froststein"},"content":"     * @return List of task containing the matched string. Null if list is empty.","lastModifiedDate":"2022-02-20"},{"lineNumber":264,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":265,"author":{"gitId":"froststein"},"content":"    private ArrayList\u003cTask\u003e getSearchedList(String stringToMatch) {","lastModifiedDate":"2022-02-19"},{"lineNumber":266,"author":{"gitId":"froststein"},"content":"        ArrayList\u003cTask\u003e listOfSearchedTask \u003d (ArrayList\u003cTask\u003e) listOfTask.stream()","lastModifiedDate":"2022-02-19"},{"lineNumber":267,"author":{"gitId":"froststein"},"content":"                .filter((t) -\u003e t.getDescription().contains(stringToMatch))","lastModifiedDate":"2022-02-19"},{"lineNumber":268,"author":{"gitId":"froststein"},"content":"                .collect(toList());","lastModifiedDate":"2022-02-19"},{"lineNumber":269,"author":{"gitId":"froststein"},"content":"        if (listOfSearchedTask.size() \u003d\u003d 0) {","lastModifiedDate":"2022-02-19"},{"lineNumber":270,"author":{"gitId":"froststein"},"content":"            return null;","lastModifiedDate":"2022-02-19"},{"lineNumber":271,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-02-19"},{"lineNumber":272,"author":{"gitId":"froststein"},"content":"        return listOfSearchedTask;","lastModifiedDate":"2022-02-19"},{"lineNumber":273,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-02-19"},{"lineNumber":274,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":275,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":276,"author":{"gitId":"froststein"},"content":"     * Saves the current task list to file","lastModifiedDate":"2022-02-20"},{"lineNumber":277,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":278,"author":{"gitId":"froststein"},"content":"    public void saveTaskListToFile() {","lastModifiedDate":"2022-02-17"},{"lineNumber":279,"author":{"gitId":"froststein"},"content":"        try {","lastModifiedDate":"2022-02-12"},{"lineNumber":280,"author":{"gitId":"froststein"},"content":"            localInstance.saveCurrentTaskListToFile(listOfTask);","lastModifiedDate":"2022-02-17"},{"lineNumber":281,"author":{"gitId":"froststein"},"content":"            System.out.println(\"Current task list has been saved!\");","lastModifiedDate":"2022-02-12"},{"lineNumber":282,"author":{"gitId":"froststein"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-02-12"},{"lineNumber":283,"author":{"gitId":"froststein"},"content":"            System.out.println(\"Oops! IO exception occurred at: \" +e.getMessage());","lastModifiedDate":"2022-02-12"},{"lineNumber":284,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-01-30"},{"lineNumber":285,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-02-06"},{"lineNumber":286,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":287,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":288,"author":{"gitId":"froststein"},"content":"     * Prints an update message when a task is added or deleted","lastModifiedDate":"2022-02-20"},{"lineNumber":289,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":290,"author":{"gitId":"froststein"},"content":"     * @param taskObject The task to be printed.","lastModifiedDate":"2022-02-20"},{"lineNumber":291,"author":{"gitId":"froststein"},"content":"     * @param commandType The type of operation, added or deleted, as String.","lastModifiedDate":"2022-02-20"},{"lineNumber":292,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":293,"author":{"gitId":"froststein"},"content":"    public void printTaskUpdate(Task taskObject, String commandType) {","lastModifiedDate":"2022-02-19"},{"lineNumber":294,"author":{"gitId":"froststein"},"content":"        UI.printBorder();","lastModifiedDate":"2022-02-11"},{"lineNumber":295,"author":{"gitId":"froststein"},"content":"        if (commandType.equalsIgnoreCase(\"added\")) {","lastModifiedDate":"2022-02-19"},{"lineNumber":296,"author":{"gitId":"froststein"},"content":"            System.out.println(\"Got it!. I\u0027ve added this task:\");","lastModifiedDate":"2022-01-30"},{"lineNumber":297,"author":{"gitId":"froststein"},"content":"        } else if (commandType.equalsIgnoreCase(\"deleted\")) {","lastModifiedDate":"2022-02-19"},{"lineNumber":298,"author":{"gitId":"froststein"},"content":"            System.out.println(\"Got it!. I\u0027ve removed this task:\");","lastModifiedDate":"2022-02-11"},{"lineNumber":299,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-02-11"},{"lineNumber":300,"author":{"gitId":"froststein"},"content":"        System.out.println(taskObject);","lastModifiedDate":"2022-02-11"},{"lineNumber":301,"author":{"gitId":"froststein"},"content":"        System.out.println(\"Now you have \" +listOfTask.size() +\" tasks in the list.\");","lastModifiedDate":"2022-02-17"},{"lineNumber":302,"author":{"gitId":"froststein"},"content":"        UI.printBorder();","lastModifiedDate":"2022-02-11"},{"lineNumber":303,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":304,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":305,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":306,"author":{"gitId":"froststein"},"content":"     * Prints the list of task from listOfTaskToBePrinted","lastModifiedDate":"2022-02-20"},{"lineNumber":307,"author":{"gitId":"froststein"},"content":"     * The function checks if the list is empty.","lastModifiedDate":"2022-02-20"},{"lineNumber":308,"author":{"gitId":"froststein"},"content":"     * If the list is empty it would let the user know.","lastModifiedDate":"2022-02-20"},{"lineNumber":309,"author":{"gitId":"froststein"},"content":"     * Else the list of task is printed.","lastModifiedDate":"2022-02-20"},{"lineNumber":310,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":311,"author":{"gitId":"froststein"},"content":"     * @param listOfTaskToBePrinted The list of task to be printed","lastModifiedDate":"2022-02-20"},{"lineNumber":312,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":313,"author":{"gitId":"froststein"},"content":"    private void printTaskList(ArrayList\u003cTask\u003e listOfTaskToBePrinted) {","lastModifiedDate":"2022-02-19"},{"lineNumber":314,"author":{"gitId":"froststein"},"content":"        if (listOfTaskToBePrinted.size() \u003d\u003d 0) {","lastModifiedDate":"2022-02-19"},{"lineNumber":315,"author":{"gitId":"froststein"},"content":"            System.out.println(\"No task available!\");","lastModifiedDate":"2022-02-06"},{"lineNumber":316,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-02-06"},{"lineNumber":317,"author":{"gitId":"froststein"},"content":"        for (int i \u003d 0 ; i \u003c listOfTaskToBePrinted.size(); i++) {","lastModifiedDate":"2022-02-19"},{"lineNumber":318,"author":{"gitId":"froststein"},"content":"            System.out.println(\" \" +(i + 1) +\".\" + listOfTaskToBePrinted.get(i));","lastModifiedDate":"2022-02-19"},{"lineNumber":319,"author":{"gitId":"froststein"},"content":"        }","lastModifiedDate":"2022-02-19"},{"lineNumber":320,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-02-19"},{"lineNumber":321,"author":{"gitId":"froststein"},"content":"}","lastModifiedDate":"2022-01-30"}],"authorContributionMap":{"froststein":321}},{"path":"src/main/java/duke/UI.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"froststein"},"content":"package duke;","lastModifiedDate":"2022-02-06"},{"lineNumber":2,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":3,"author":{"gitId":"froststein"},"content":"import duke.common.Messages;","lastModifiedDate":"2022-02-17"},{"lineNumber":4,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":5,"author":{"gitId":"froststein"},"content":"import java.io.InputStream;","lastModifiedDate":"2022-02-17"},{"lineNumber":6,"author":{"gitId":"froststein"},"content":"import java.io.PrintStream;","lastModifiedDate":"2022-02-17"},{"lineNumber":7,"author":{"gitId":"froststein"},"content":"import java.util.Scanner;","lastModifiedDate":"2022-02-17"},{"lineNumber":8,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":9,"author":{"gitId":"froststein"},"content":"/**","lastModifiedDate":"2022-02-20"},{"lineNumber":10,"author":{"gitId":"froststein"},"content":" * Text UI of the application.","lastModifiedDate":"2022-02-20"},{"lineNumber":11,"author":{"gitId":"froststein"},"content":" */","lastModifiedDate":"2022-02-20"},{"lineNumber":12,"author":{"gitId":"froststein"},"content":"public class UI {","lastModifiedDate":"2022-01-30"},{"lineNumber":13,"author":{"gitId":"froststein"},"content":"    private final Scanner in;","lastModifiedDate":"2022-02-17"},{"lineNumber":14,"author":{"gitId":"froststein"},"content":"    private final PrintStream out;","lastModifiedDate":"2022-02-17"},{"lineNumber":15,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":16,"author":{"gitId":"froststein"},"content":"    public UI() {","lastModifiedDate":"2022-02-17"},{"lineNumber":17,"author":{"gitId":"froststein"},"content":"        this(System.in, System.out);","lastModifiedDate":"2022-02-17"},{"lineNumber":18,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":19,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":20,"author":{"gitId":"froststein"},"content":"    public UI(InputStream in, PrintStream out) {","lastModifiedDate":"2022-02-17"},{"lineNumber":21,"author":{"gitId":"froststein"},"content":"        this.in \u003d new Scanner(in);","lastModifiedDate":"2022-02-17"},{"lineNumber":22,"author":{"gitId":"froststein"},"content":"        this.out \u003d out;","lastModifiedDate":"2022-02-17"},{"lineNumber":23,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":24,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":25,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":26,"author":{"gitId":"froststein"},"content":"     * Reads the text entered by the user.","lastModifiedDate":"2022-02-20"},{"lineNumber":27,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":28,"author":{"gitId":"froststein"},"content":"     * @return command (full line) entered by the user","lastModifiedDate":"2022-02-20"},{"lineNumber":29,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":30,"author":{"gitId":"froststein"},"content":"    public String getUserCommand() {","lastModifiedDate":"2022-02-17"},{"lineNumber":31,"author":{"gitId":"froststein"},"content":"        String input \u003d in.nextLine();","lastModifiedDate":"2022-02-17"},{"lineNumber":32,"author":{"gitId":"froststein"},"content":"        return input.strip();","lastModifiedDate":"2022-02-20"},{"lineNumber":33,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":34,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":35,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":36,"author":{"gitId":"froststein"},"content":"     *  Prints the intro message upon the start of the application.","lastModifiedDate":"2022-02-20"},{"lineNumber":37,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":38,"author":{"gitId":"froststein"},"content":"    public void printIntro() {","lastModifiedDate":"2022-02-17"},{"lineNumber":39,"author":{"gitId":"froststein"},"content":"        out.println(Messages.INTRO_LOGO);","lastModifiedDate":"2022-02-17"},{"lineNumber":40,"author":{"gitId":"froststein"},"content":"        printMessageWithBorder(Messages.WELCOME_MESSAGE);","lastModifiedDate":"2022-02-17"},{"lineNumber":41,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":42,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":43,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":44,"author":{"gitId":"froststein"},"content":"     *  Prints the outro message before the application ends.","lastModifiedDate":"2022-02-20"},{"lineNumber":45,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":46,"author":{"gitId":"froststein"},"content":"    public void printOutro() {","lastModifiedDate":"2022-02-17"},{"lineNumber":47,"author":{"gitId":"froststein"},"content":"        out.println(Messages.OUTRO_LOGO);","lastModifiedDate":"2022-02-17"},{"lineNumber":48,"author":{"gitId":"froststein"},"content":"        printMessageWithBorder(Messages.GOODBYE_MESSAGE);","lastModifiedDate":"2022-02-17"},{"lineNumber":49,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-02-17"},{"lineNumber":50,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":51,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":52,"author":{"gitId":"froststein"},"content":"     *  Prints the message enclosed with border","lastModifiedDate":"2022-02-20"},{"lineNumber":53,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":54,"author":{"gitId":"froststein"},"content":"    public void printMessageWithBorder(String message){","lastModifiedDate":"2022-02-17"},{"lineNumber":55,"author":{"gitId":"froststein"},"content":"        out.println(Messages.BORDER);","lastModifiedDate":"2022-02-17"},{"lineNumber":56,"author":{"gitId":"froststein"},"content":"        out.println(message);","lastModifiedDate":"2022-02-17"},{"lineNumber":57,"author":{"gitId":"froststein"},"content":"        out.println(Messages.BORDER);","lastModifiedDate":"2022-02-17"},{"lineNumber":58,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":59,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":60,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":61,"author":{"gitId":"froststein"},"content":"     *  Prints a border","lastModifiedDate":"2022-02-20"},{"lineNumber":62,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":63,"author":{"gitId":"froststein"},"content":"    public static void printBorder() {","lastModifiedDate":"2022-01-30"},{"lineNumber":64,"author":{"gitId":"froststein"},"content":"        System.out.println(Messages.BORDER);","lastModifiedDate":"2022-02-17"},{"lineNumber":65,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":66,"author":{"gitId":"froststein"},"content":"}","lastModifiedDate":"2022-01-30"}],"authorContributionMap":{"froststein":66}},{"path":"src/main/java/duke/common/Messages.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"froststein"},"content":"package duke.common;","lastModifiedDate":"2022-02-17"},{"lineNumber":2,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":3,"author":{"gitId":"froststein"},"content":"public class Messages {","lastModifiedDate":"2022-02-17"},{"lineNumber":4,"author":{"gitId":"froststein"},"content":"    public final static String BORDER \u003d \"__________________________________________________\";","lastModifiedDate":"2022-02-17"},{"lineNumber":5,"author":{"gitId":"froststein"},"content":"    public final static String INTRO_LOGO \u003d \"\" +","lastModifiedDate":"2022-02-17"},{"lineNumber":6,"author":{"gitId":"froststein"},"content":"            \"   ___             _               ___             _\\n\" +","lastModifiedDate":"2022-02-17"},{"lineNumber":7,"author":{"gitId":"froststein"},"content":"            \"  |   \\\\   _  _    | |__    ___    | _ )    ___    | |_\\n\" +","lastModifiedDate":"2022-02-17"},{"lineNumber":8,"author":{"gitId":"froststein"},"content":"            \"  | |) | | +| |   | / /   / -_)   | _ \\\\   / _ \\\\   |  _|\\n\" +","lastModifiedDate":"2022-02-17"},{"lineNumber":9,"author":{"gitId":"froststein"},"content":"            \"  |___/   \\\\_,_|   |_\\\\_\\\\   \\\\___|   |___/   \\\\___/   _\\\\__|\\n\" +","lastModifiedDate":"2022-02-17"},{"lineNumber":10,"author":{"gitId":"froststein"},"content":"            \"_|\\\"\\\"\\\"\\\"\\\"|_|\\\"\\\"\\\"\\\"\\\"|_|\\\"\\\"\\\"\\\"\\\"|_|\\\"\\\"\\\"\\\"\\\"|_|\\\"\\\"\\\"\\\"\\\"|_|\\\"\\\"\\\"\\\"\\\"|_|\\\"\\\"\\\"\\\"\\\"|\\n\" +","lastModifiedDate":"2022-02-17"},{"lineNumber":11,"author":{"gitId":"froststein"},"content":"            \"\\\"`-0-0-\u0027\\\"`-0-0-\u0027\\\"`-0-0-\u0027\\\"`-0-0-\u0027\\\"`-0-0-\u0027\\\"`-0-0-\u0027\\\"`-0-0-\u0027\";","lastModifiedDate":"2022-02-17"},{"lineNumber":12,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":13,"author":{"gitId":"froststein"},"content":"    public final static String OUTRO_LOGO \u003d \"\" +","lastModifiedDate":"2022-02-17"},{"lineNumber":14,"author":{"gitId":"froststein"},"content":"            \"                               __\\n\" +","lastModifiedDate":"2022-02-17"},{"lineNumber":15,"author":{"gitId":"froststein"},"content":"            \"                            _ / /\\n\" +","lastModifiedDate":"2022-02-17"},{"lineNumber":16,"author":{"gitId":"froststein"},"content":"            \"  __ ___      ____      __ (_) |\\n\" +","lastModifiedDate":"2022-02-17"},{"lineNumber":17,"author":{"gitId":"froststein"},"content":"            \" / _` \\\\ \\\\ /\\\\ / /\\\\ \\\\ /\\\\ / /   | |\\n\" +","lastModifiedDate":"2022-02-17"},{"lineNumber":18,"author":{"gitId":"froststein"},"content":"            \"| (_| |\\\\ V  V /  \\\\ V  V /   _| |\\n\" +","lastModifiedDate":"2022-02-17"},{"lineNumber":19,"author":{"gitId":"froststein"},"content":"            \" \\\\__,_| \\\\_/\\\\_/    \\\\_/\\\\_/   (_) |\\n\" +","lastModifiedDate":"2022-02-17"},{"lineNumber":20,"author":{"gitId":"froststein"},"content":"            \"                              \\\\_\\\\\";","lastModifiedDate":"2022-02-17"},{"lineNumber":21,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":22,"author":{"gitId":"froststein"},"content":"    public final static String WELCOME_MESSAGE \u003d \" Good Morning sir, I am DukeBot, your personal assistant!\" +","lastModifiedDate":"2022-02-17"},{"lineNumber":23,"author":{"gitId":"froststein"},"content":"                                                    \"\\n What can I do for you today?\";","lastModifiedDate":"2022-02-17"},{"lineNumber":24,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":25,"author":{"gitId":"froststein"},"content":"    public final static String GOODBYE_MESSAGE \u003d \" I guess it\u0027s time to say good bye...\" +","lastModifiedDate":"2022-02-17"},{"lineNumber":26,"author":{"gitId":"froststein"},"content":"                                                    \"\\n Please come again soon!\";","lastModifiedDate":"2022-02-17"},{"lineNumber":27,"author":{"gitId":"froststein"},"content":"}","lastModifiedDate":"2022-02-17"}],"authorContributionMap":{"froststein":27}},{"path":"src/main/java/duke/exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"froststein"},"content":"package duke.exceptions;","lastModifiedDate":"2022-02-06"},{"lineNumber":2,"author":{"gitId":"froststein"},"content":"/**","lastModifiedDate":"2022-02-20"},{"lineNumber":3,"author":{"gitId":"froststein"},"content":" * Signals an error caused by command processing.","lastModifiedDate":"2022-02-20"},{"lineNumber":4,"author":{"gitId":"froststein"},"content":" */","lastModifiedDate":"2022-02-20"},{"lineNumber":5,"author":{"gitId":"froststein"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2022-02-06"},{"lineNumber":6,"author":{"gitId":"froststein"},"content":"    public DukeException(String message) {","lastModifiedDate":"2022-02-06"},{"lineNumber":7,"author":{"gitId":"froststein"},"content":"        super(message);","lastModifiedDate":"2022-02-06"},{"lineNumber":8,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-02-06"},{"lineNumber":9,"author":{"gitId":"froststein"},"content":"}","lastModifiedDate":"2022-02-06"}],"authorContributionMap":{"froststein":9}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"froststein"},"content":"package duke.task;","lastModifiedDate":"2022-02-06"},{"lineNumber":2,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":3,"author":{"gitId":"froststein"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-02-19"},{"lineNumber":4,"author":{"gitId":"froststein"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-02-19"},{"lineNumber":5,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":6,"author":{"gitId":"froststein"},"content":"/**","lastModifiedDate":"2022-02-20"},{"lineNumber":7,"author":{"gitId":"froststein"},"content":" * Represents a Deadline task in Duke.","lastModifiedDate":"2022-02-20"},{"lineNumber":8,"author":{"gitId":"froststein"},"content":" */","lastModifiedDate":"2022-02-20"},{"lineNumber":9,"author":{"gitId":"froststein"},"content":"public class Deadline extends Task {","lastModifiedDate":"2022-01-30"},{"lineNumber":10,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":11,"author":{"gitId":"froststein"},"content":"    protected LocalDate datetime;","lastModifiedDate":"2022-02-19"},{"lineNumber":12,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":13,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":14,"author":{"gitId":"froststein"},"content":"     * Assumption: Every field must be present and not null.","lastModifiedDate":"2022-02-20"},{"lineNumber":15,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":16,"author":{"gitId":"froststein"},"content":"    public Deadline(String description, LocalDate datetime) {","lastModifiedDate":"2022-02-19"},{"lineNumber":17,"author":{"gitId":"froststein"},"content":"        super(description);","lastModifiedDate":"2022-01-30"},{"lineNumber":18,"author":{"gitId":"froststein"},"content":"        this.datetime \u003d datetime;","lastModifiedDate":"2022-02-19"},{"lineNumber":19,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":20,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":21,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":22,"author":{"gitId":"froststein"},"content":"     * Assumption: Every field must be present and not null.","lastModifiedDate":"2022-02-20"},{"lineNumber":23,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":24,"author":{"gitId":"froststein"},"content":"    public Deadline(String description, Boolean isDone, LocalDate datetime) {","lastModifiedDate":"2022-02-19"},{"lineNumber":25,"author":{"gitId":"froststein"},"content":"        super(description, isDone);","lastModifiedDate":"2022-02-12"},{"lineNumber":26,"author":{"gitId":"froststein"},"content":"        this.datetime \u003d datetime;","lastModifiedDate":"2022-02-19"},{"lineNumber":27,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-02-12"},{"lineNumber":28,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":29,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":30,"author":{"gitId":"froststein"},"content":"     * Returns the Task\u0027s type in String.","lastModifiedDate":"2022-02-20"},{"lineNumber":31,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":32,"author":{"gitId":"froststein"},"content":"     * @return The string \"deadline\".","lastModifiedDate":"2022-02-20"},{"lineNumber":33,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":34,"author":{"gitId":"froststein"},"content":"    @Override","lastModifiedDate":"2022-02-19"},{"lineNumber":35,"author":{"gitId":"froststein"},"content":"    public String getTaskType() {","lastModifiedDate":"2022-02-19"},{"lineNumber":36,"author":{"gitId":"froststein"},"content":"        return \"deadline\";","lastModifiedDate":"2022-02-19"},{"lineNumber":37,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-02-19"},{"lineNumber":38,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":39,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":40,"author":{"gitId":"froststein"},"content":"     * Returns the deadline for the task in formatted String.","lastModifiedDate":"2022-02-20"},{"lineNumber":41,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":42,"author":{"gitId":"froststein"},"content":"     * @return The deadline in String format.","lastModifiedDate":"2022-02-20"},{"lineNumber":43,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":44,"author":{"gitId":"froststein"},"content":"    @Override","lastModifiedDate":"2022-02-19"},{"lineNumber":45,"author":{"gitId":"froststein"},"content":"    public String getDateFormattedString() {","lastModifiedDate":"2022-02-19"},{"lineNumber":46,"author":{"gitId":"froststein"},"content":"        DateTimeFormatter dateFormat \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy\");","lastModifiedDate":"2022-02-19"},{"lineNumber":47,"author":{"gitId":"froststein"},"content":"        String dateFormatString \u003d  datetime.format(dateFormat);","lastModifiedDate":"2022-02-19"},{"lineNumber":48,"author":{"gitId":"froststein"},"content":"        return dateFormatString;","lastModifiedDate":"2022-02-19"},{"lineNumber":49,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-02-19"},{"lineNumber":50,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":51,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":52,"author":{"gitId":"froststein"},"content":"     * Returns the Date in its original format as String.","lastModifiedDate":"2022-02-20"},{"lineNumber":53,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":54,"author":{"gitId":"froststein"},"content":"     * @return deadline of task in unformatted String.","lastModifiedDate":"2022-02-20"},{"lineNumber":55,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":56,"author":{"gitId":"froststein"},"content":"    @Override","lastModifiedDate":"2022-02-12"},{"lineNumber":57,"author":{"gitId":"froststein"},"content":"    public String getDateForStorageFile() {","lastModifiedDate":"2022-02-19"},{"lineNumber":58,"author":{"gitId":"froststein"},"content":"        return datetime.toString();","lastModifiedDate":"2022-02-19"},{"lineNumber":59,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-02-12"},{"lineNumber":60,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":61,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":62,"author":{"gitId":"froststein"},"content":"     * Returns the whole string","lastModifiedDate":"2022-02-20"},{"lineNumber":63,"author":{"gitId":"froststein"},"content":"     * including the task icon, task status,","lastModifiedDate":"2022-02-20"},{"lineNumber":64,"author":{"gitId":"froststein"},"content":"     * task description and deadline to be printed.","lastModifiedDate":"2022-02-20"},{"lineNumber":65,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":66,"author":{"gitId":"froststein"},"content":"     * @return The task icon, task status, task description and deadline in String.","lastModifiedDate":"2022-02-20"},{"lineNumber":67,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":68,"author":{"gitId":"froststein"},"content":"    @Override","lastModifiedDate":"2022-01-30"},{"lineNumber":69,"author":{"gitId":"froststein"},"content":"    public String toString() {","lastModifiedDate":"2022-01-30"},{"lineNumber":70,"author":{"gitId":"froststein"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + getDateFormattedString() + \")\";","lastModifiedDate":"2022-02-19"},{"lineNumber":71,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":72,"author":{"gitId":"froststein"},"content":"}","lastModifiedDate":"2022-01-30"}],"authorContributionMap":{"froststein":72}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"froststein"},"content":"package duke.task;","lastModifiedDate":"2022-02-06"},{"lineNumber":2,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":3,"author":{"gitId":"froststein"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-02-19"},{"lineNumber":4,"author":{"gitId":"froststein"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-02-19"},{"lineNumber":5,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":6,"author":{"gitId":"froststein"},"content":"/**","lastModifiedDate":"2022-02-20"},{"lineNumber":7,"author":{"gitId":"froststein"},"content":" * Represents a Event task in Duke.","lastModifiedDate":"2022-02-20"},{"lineNumber":8,"author":{"gitId":"froststein"},"content":" */","lastModifiedDate":"2022-02-20"},{"lineNumber":9,"author":{"gitId":"froststein"},"content":"public class Event extends Task {","lastModifiedDate":"2022-01-30"},{"lineNumber":10,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":11,"author":{"gitId":"froststein"},"content":"    protected LocalDate datetime;","lastModifiedDate":"2022-02-19"},{"lineNumber":12,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":13,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":14,"author":{"gitId":"froststein"},"content":"     * Assumption: Every field must be present and not null.","lastModifiedDate":"2022-02-20"},{"lineNumber":15,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":16,"author":{"gitId":"froststein"},"content":"    public Event(String description, LocalDate datetime) {","lastModifiedDate":"2022-02-19"},{"lineNumber":17,"author":{"gitId":"froststein"},"content":"        super(description);","lastModifiedDate":"2022-01-30"},{"lineNumber":18,"author":{"gitId":"froststein"},"content":"        this.datetime \u003d datetime;","lastModifiedDate":"2022-02-19"},{"lineNumber":19,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":20,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":21,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":22,"author":{"gitId":"froststein"},"content":"     * Assumption: Every field must be present and not null.","lastModifiedDate":"2022-02-20"},{"lineNumber":23,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":24,"author":{"gitId":"froststein"},"content":"    public Event(String description, Boolean isDone, LocalDate datetime) {","lastModifiedDate":"2022-02-19"},{"lineNumber":25,"author":{"gitId":"froststein"},"content":"        super(description, isDone);","lastModifiedDate":"2022-02-12"},{"lineNumber":26,"author":{"gitId":"froststein"},"content":"        this.datetime \u003d datetime;","lastModifiedDate":"2022-02-19"},{"lineNumber":27,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-02-12"},{"lineNumber":28,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":29,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":30,"author":{"gitId":"froststein"},"content":"     * Returns the Task\u0027s type in String.","lastModifiedDate":"2022-02-20"},{"lineNumber":31,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":32,"author":{"gitId":"froststein"},"content":"     * @return Returns the string \"event\".","lastModifiedDate":"2022-02-20"},{"lineNumber":33,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":34,"author":{"gitId":"froststein"},"content":"    @Override","lastModifiedDate":"2022-02-12"},{"lineNumber":35,"author":{"gitId":"froststein"},"content":"    public String getTaskType() {","lastModifiedDate":"2022-02-12"},{"lineNumber":36,"author":{"gitId":"froststein"},"content":"        return \"event\";","lastModifiedDate":"2022-02-12"},{"lineNumber":37,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-02-12"},{"lineNumber":38,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":39,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":40,"author":{"gitId":"froststein"},"content":"     * Returns the event date for the task in formatted String.","lastModifiedDate":"2022-02-20"},{"lineNumber":41,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":42,"author":{"gitId":"froststein"},"content":"     * @return Returns event date in String format.","lastModifiedDate":"2022-02-20"},{"lineNumber":43,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":44,"author":{"gitId":"froststein"},"content":"    @Override","lastModifiedDate":"2022-02-12"},{"lineNumber":45,"author":{"gitId":"froststein"},"content":"    public String getDateFormattedString() {","lastModifiedDate":"2022-02-19"},{"lineNumber":46,"author":{"gitId":"froststein"},"content":"        DateTimeFormatter dateFormat \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy\");","lastModifiedDate":"2022-02-19"},{"lineNumber":47,"author":{"gitId":"froststein"},"content":"        String dateFormatString \u003d  datetime.format(dateFormat);","lastModifiedDate":"2022-02-19"},{"lineNumber":48,"author":{"gitId":"froststein"},"content":"        return dateFormatString;","lastModifiedDate":"2022-02-19"},{"lineNumber":49,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-02-19"},{"lineNumber":50,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":51,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":52,"author":{"gitId":"froststein"},"content":"     * Returns the Date in its original format as String.","lastModifiedDate":"2022-02-20"},{"lineNumber":53,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":54,"author":{"gitId":"froststein"},"content":"     * @return event date of task in unformatted String.","lastModifiedDate":"2022-02-20"},{"lineNumber":55,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":56,"author":{"gitId":"froststein"},"content":"    @Override","lastModifiedDate":"2022-02-19"},{"lineNumber":57,"author":{"gitId":"froststein"},"content":"    public String getDateForStorageFile() {","lastModifiedDate":"2022-02-19"},{"lineNumber":58,"author":{"gitId":"froststein"},"content":"        return datetime.toString();","lastModifiedDate":"2022-02-19"},{"lineNumber":59,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-02-12"},{"lineNumber":60,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":61,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":62,"author":{"gitId":"froststein"},"content":"     * Returns the whole string","lastModifiedDate":"2022-02-20"},{"lineNumber":63,"author":{"gitId":"froststein"},"content":"     * including the task icon, task status,","lastModifiedDate":"2022-02-20"},{"lineNumber":64,"author":{"gitId":"froststein"},"content":"     * task description and event date to be printed.","lastModifiedDate":"2022-02-20"},{"lineNumber":65,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":66,"author":{"gitId":"froststein"},"content":"     * @return The task icon, task status, task description and event date in String.","lastModifiedDate":"2022-02-20"},{"lineNumber":67,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":68,"author":{"gitId":"froststein"},"content":"    @Override","lastModifiedDate":"2022-01-30"},{"lineNumber":69,"author":{"gitId":"froststein"},"content":"    public String toString() {","lastModifiedDate":"2022-01-30"},{"lineNumber":70,"author":{"gitId":"froststein"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + getDateFormattedString() + \")\";","lastModifiedDate":"2022-02-19"},{"lineNumber":71,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":72,"author":{"gitId":"froststein"},"content":"}","lastModifiedDate":"2022-01-30"}],"authorContributionMap":{"froststein":72}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"froststein"},"content":"package duke.task;","lastModifiedDate":"2022-02-06"},{"lineNumber":2,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":3,"author":{"gitId":"froststein"},"content":"public abstract class Task {","lastModifiedDate":"2022-02-19"},{"lineNumber":4,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":5,"author":{"gitId":"froststein"},"content":"    private String description;","lastModifiedDate":"2022-01-30"},{"lineNumber":6,"author":{"gitId":"froststein"},"content":"    private boolean isDone;","lastModifiedDate":"2022-01-26"},{"lineNumber":7,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":8,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":9,"author":{"gitId":"froststein"},"content":"     * Assumption: Every field must be present and not null.","lastModifiedDate":"2022-02-20"},{"lineNumber":10,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":11,"author":{"gitId":"froststein"},"content":"    public Task(String description) {","lastModifiedDate":"2022-01-30"},{"lineNumber":12,"author":{"gitId":"froststein"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-01-30"},{"lineNumber":13,"author":{"gitId":"froststein"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2022-01-26"},{"lineNumber":14,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":15,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":16,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":17,"author":{"gitId":"froststein"},"content":"     * Assumption: Every field must be present and not null.","lastModifiedDate":"2022-02-20"},{"lineNumber":18,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":19,"author":{"gitId":"froststein"},"content":"    public Task(String description, Boolean isDone) {","lastModifiedDate":"2022-02-12"},{"lineNumber":20,"author":{"gitId":"froststein"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-02-12"},{"lineNumber":21,"author":{"gitId":"froststein"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2022-02-12"},{"lineNumber":22,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-02-12"},{"lineNumber":23,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":24,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":25,"author":{"gitId":"froststein"},"content":"     * Returns the description of the task.","lastModifiedDate":"2022-02-20"},{"lineNumber":26,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":27,"author":{"gitId":"froststein"},"content":"     * @return The task description in String","lastModifiedDate":"2022-02-20"},{"lineNumber":28,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":29,"author":{"gitId":"froststein"},"content":"    public String getDescription() {","lastModifiedDate":"2022-01-30"},{"lineNumber":30,"author":{"gitId":"froststein"},"content":"        return description;","lastModifiedDate":"2022-01-30"},{"lineNumber":31,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":32,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":33,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":34,"author":{"gitId":"froststein"},"content":"     * Marks the current task as either done or not done","lastModifiedDate":"2022-02-20"},{"lineNumber":35,"author":{"gitId":"froststein"},"content":"     * @param done The status of the task in boolean","lastModifiedDate":"2022-02-20"},{"lineNumber":36,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":37,"author":{"gitId":"froststein"},"content":"    public void setDone(boolean done) {","lastModifiedDate":"2022-01-26"},{"lineNumber":38,"author":{"gitId":"froststein"},"content":"        isDone \u003d done;","lastModifiedDate":"2022-01-26"},{"lineNumber":39,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":40,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-01-26"},{"lineNumber":41,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":42,"author":{"gitId":"froststein"},"content":"     * Returns the status icon of the task.","lastModifiedDate":"2022-02-20"},{"lineNumber":43,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":44,"author":{"gitId":"froststein"},"content":"     * @return The task status icon in String","lastModifiedDate":"2022-02-20"},{"lineNumber":45,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":46,"author":{"gitId":"froststein"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2022-01-26"},{"lineNumber":47,"author":{"gitId":"froststein"},"content":"        return (isDone ? \"X\" : \" \");","lastModifiedDate":"2022-01-26"},{"lineNumber":48,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-01-26"},{"lineNumber":49,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":50,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":51,"author":{"gitId":"froststein"},"content":"     * Returns the current status of task.","lastModifiedDate":"2022-02-20"},{"lineNumber":52,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":53,"author":{"gitId":"froststein"},"content":"     * @return The status of Task in Boolean.","lastModifiedDate":"2022-02-20"},{"lineNumber":54,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":55,"author":{"gitId":"froststein"},"content":"    public boolean getStatus() {","lastModifiedDate":"2022-02-12"},{"lineNumber":56,"author":{"gitId":"froststein"},"content":"        return isDone;","lastModifiedDate":"2022-02-12"},{"lineNumber":57,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-02-12"},{"lineNumber":58,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":59,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":60,"author":{"gitId":"froststein"},"content":"     * Returns the type of task in String.","lastModifiedDate":"2022-02-20"},{"lineNumber":61,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":62,"author":{"gitId":"froststein"},"content":"     * @return The type of task as String.","lastModifiedDate":"2022-02-20"},{"lineNumber":63,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":64,"author":{"gitId":"froststein"},"content":"    public abstract String getTaskType();","lastModifiedDate":"2022-02-19"},{"lineNumber":65,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":66,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":67,"author":{"gitId":"froststein"},"content":"     * Returns the date of task in formatted String.","lastModifiedDate":"2022-02-20"},{"lineNumber":68,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":69,"author":{"gitId":"froststein"},"content":"     * @return The date of task in String format.","lastModifiedDate":"2022-02-20"},{"lineNumber":70,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":71,"author":{"gitId":"froststein"},"content":"    public abstract String getDateFormattedString();","lastModifiedDate":"2022-02-19"},{"lineNumber":72,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":73,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":74,"author":{"gitId":"froststein"},"content":"     * Returns the Date in its original format as String.","lastModifiedDate":"2022-02-20"},{"lineNumber":75,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":76,"author":{"gitId":"froststein"},"content":"     * @return Date of task in unformatted String.","lastModifiedDate":"2022-02-20"},{"lineNumber":77,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":78,"author":{"gitId":"froststein"},"content":"    public abstract String getDateForStorageFile();","lastModifiedDate":"2022-02-19"},{"lineNumber":79,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":80,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":81,"author":{"gitId":"froststein"},"content":"     * Returns the whole string","lastModifiedDate":"2022-02-20"},{"lineNumber":82,"author":{"gitId":"froststein"},"content":"     * including the task icon and","lastModifiedDate":"2022-02-20"},{"lineNumber":83,"author":{"gitId":"froststein"},"content":"     * task description to be printed.","lastModifiedDate":"2022-02-20"},{"lineNumber":84,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":85,"author":{"gitId":"froststein"},"content":"     * @return The task icon and task description in String.","lastModifiedDate":"2022-02-20"},{"lineNumber":86,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":87,"author":{"gitId":"froststein"},"content":"    @Override","lastModifiedDate":"2022-01-30"},{"lineNumber":88,"author":{"gitId":"froststein"},"content":"    public String toString(){","lastModifiedDate":"2022-01-30"},{"lineNumber":89,"author":{"gitId":"froststein"},"content":"        return \"[\"+getStatusIcon()+\"] \" +getDescription();","lastModifiedDate":"2022-02-20"},{"lineNumber":90,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":91,"author":{"gitId":"froststein"},"content":"}","lastModifiedDate":"2022-01-26"}],"authorContributionMap":{"froststein":91}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"froststein"},"content":"package duke.task;","lastModifiedDate":"2022-02-06"},{"lineNumber":2,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-06"},{"lineNumber":3,"author":{"gitId":"froststein"},"content":"/**","lastModifiedDate":"2022-02-20"},{"lineNumber":4,"author":{"gitId":"froststein"},"content":" * Represents a todo task in Duke.","lastModifiedDate":"2022-02-20"},{"lineNumber":5,"author":{"gitId":"froststein"},"content":" */","lastModifiedDate":"2022-02-20"},{"lineNumber":6,"author":{"gitId":"froststein"},"content":"public class Todo extends Task {","lastModifiedDate":"2022-01-30"},{"lineNumber":7,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":8,"author":{"gitId":"froststein"},"content":"    public Todo(String description) {","lastModifiedDate":"2022-01-30"},{"lineNumber":9,"author":{"gitId":"froststein"},"content":"        super(description);","lastModifiedDate":"2022-01-30"},{"lineNumber":10,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":11,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-01-30"},{"lineNumber":12,"author":{"gitId":"froststein"},"content":"    public Todo(String description, Boolean isDone) {","lastModifiedDate":"2022-02-12"},{"lineNumber":13,"author":{"gitId":"froststein"},"content":"        super(description, isDone);","lastModifiedDate":"2022-02-12"},{"lineNumber":14,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-02-12"},{"lineNumber":15,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":16,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":17,"author":{"gitId":"froststein"},"content":"     * Returns the Task\u0027s type in String.","lastModifiedDate":"2022-02-20"},{"lineNumber":18,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":19,"author":{"gitId":"froststein"},"content":"     * @return Returns the string \"todo\".","lastModifiedDate":"2022-02-20"},{"lineNumber":20,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":21,"author":{"gitId":"froststein"},"content":"    @Override","lastModifiedDate":"2022-02-19"},{"lineNumber":22,"author":{"gitId":"froststein"},"content":"    public String getTaskType() {","lastModifiedDate":"2022-02-19"},{"lineNumber":23,"author":{"gitId":"froststein"},"content":"        return \"todo\";","lastModifiedDate":"2022-02-19"},{"lineNumber":24,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-02-19"},{"lineNumber":25,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-19"},{"lineNumber":26,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":27,"author":{"gitId":"froststein"},"content":"     * Returns \"-\" as todo task","lastModifiedDate":"2022-02-20"},{"lineNumber":28,"author":{"gitId":"froststein"},"content":"     * does not have a date","lastModifiedDate":"2022-02-20"},{"lineNumber":29,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":30,"author":{"gitId":"froststein"},"content":"     * @return Returns the string \"-\".","lastModifiedDate":"2022-02-20"},{"lineNumber":31,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":32,"author":{"gitId":"froststein"},"content":"    @Override","lastModifiedDate":"2022-02-19"},{"lineNumber":33,"author":{"gitId":"froststein"},"content":"    public String getDateFormattedString() {","lastModifiedDate":"2022-02-19"},{"lineNumber":34,"author":{"gitId":"froststein"},"content":"        return \"-\";","lastModifiedDate":"2022-02-12"},{"lineNumber":35,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-02-12"},{"lineNumber":36,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":37,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":38,"author":{"gitId":"froststein"},"content":"     * Returns \"-\" as todo task","lastModifiedDate":"2022-02-20"},{"lineNumber":39,"author":{"gitId":"froststein"},"content":"     * does not have a date","lastModifiedDate":"2022-02-20"},{"lineNumber":40,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":41,"author":{"gitId":"froststein"},"content":"     * @return Returns the string \"-\".","lastModifiedDate":"2022-02-20"},{"lineNumber":42,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":43,"author":{"gitId":"froststein"},"content":"    @Override","lastModifiedDate":"2022-02-12"},{"lineNumber":44,"author":{"gitId":"froststein"},"content":"    public String getDateForStorageFile() {","lastModifiedDate":"2022-02-19"},{"lineNumber":45,"author":{"gitId":"froststein"},"content":"        return \"-\";","lastModifiedDate":"2022-02-19"},{"lineNumber":46,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-02-12"},{"lineNumber":47,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-12"},{"lineNumber":48,"author":{"gitId":"froststein"},"content":"    /**","lastModifiedDate":"2022-02-20"},{"lineNumber":49,"author":{"gitId":"froststein"},"content":"     * Returns the whole string","lastModifiedDate":"2022-02-20"},{"lineNumber":50,"author":{"gitId":"froststein"},"content":"     * including the task icon, task status","lastModifiedDate":"2022-02-20"},{"lineNumber":51,"author":{"gitId":"froststein"},"content":"     * and task name to be printed.","lastModifiedDate":"2022-02-20"},{"lineNumber":52,"author":{"gitId":"froststein"},"content":"     *","lastModifiedDate":"2022-02-20"},{"lineNumber":53,"author":{"gitId":"froststein"},"content":"     * @return The task icon, task status and task name in String.","lastModifiedDate":"2022-02-20"},{"lineNumber":54,"author":{"gitId":"froststein"},"content":"     */","lastModifiedDate":"2022-02-20"},{"lineNumber":55,"author":{"gitId":"froststein"},"content":"    @Override","lastModifiedDate":"2022-01-30"},{"lineNumber":56,"author":{"gitId":"froststein"},"content":"    public String toString() {","lastModifiedDate":"2022-01-30"},{"lineNumber":57,"author":{"gitId":"froststein"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2022-01-30"},{"lineNumber":58,"author":{"gitId":"froststein"},"content":"    }","lastModifiedDate":"2022-01-30"},{"lineNumber":59,"author":{"gitId":"froststein"},"content":"}","lastModifiedDate":"2022-01-30"}],"authorContributionMap":{"froststein":59}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"froststein"},"content":"todo","lastModifiedDate":"2022-02-06"},{"lineNumber":2,"author":{"gitId":"froststein"},"content":"todo Read Book","lastModifiedDate":"2022-02-20"},{"lineNumber":3,"author":{"gitId":"froststein"},"content":"list","lastModifiedDate":"2022-01-30"},{"lineNumber":4,"author":{"gitId":"froststein"},"content":"event","lastModifiedDate":"2022-02-06"},{"lineNumber":5,"author":{"gitId":"froststein"},"content":"event /at","lastModifiedDate":"2022-02-06"},{"lineNumber":6,"author":{"gitId":"froststein"},"content":"event Test1 /at","lastModifiedDate":"2022-02-20"},{"lineNumber":7,"author":{"gitId":"froststein"},"content":"event /at some time","lastModifiedDate":"2022-02-06"},{"lineNumber":8,"author":{"gitId":"froststein"},"content":"event Test1 /at Test1","lastModifiedDate":"2022-02-20"},{"lineNumber":9,"author":{"gitId":"froststein"},"content":"event CS2113 Lecture /at 2022-02-19","lastModifiedDate":"2022-02-20"},{"lineNumber":10,"author":{"gitId":"froststein"},"content":"list","lastModifiedDate":"2022-01-30"},{"lineNumber":11,"author":{"gitId":"froststein"},"content":"deadline","lastModifiedDate":"2022-02-06"},{"lineNumber":12,"author":{"gitId":"froststein"},"content":"deadline","lastModifiedDate":"2022-02-06"},{"lineNumber":13,"author":{"gitId":"froststein"},"content":"deadline /by","lastModifiedDate":"2022-02-06"},{"lineNumber":14,"author":{"gitId":"froststein"},"content":"deadline Test2 /by","lastModifiedDate":"2022-02-20"},{"lineNumber":15,"author":{"gitId":"froststein"},"content":"deadline /by some time","lastModifiedDate":"2022-02-06"},{"lineNumber":16,"author":{"gitId":"froststein"},"content":"deadline Test2 /at test2","lastModifiedDate":"2022-02-20"},{"lineNumber":17,"author":{"gitId":"froststein"},"content":"deadline CS2113 UG /by 2022-02-19","lastModifiedDate":"2022-02-20"},{"lineNumber":18,"author":{"gitId":"froststein"},"content":"list","lastModifiedDate":"2022-01-30"},{"lineNumber":19,"author":{"gitId":"froststein"},"content":"mark -1","lastModifiedDate":"2022-02-06"},{"lineNumber":20,"author":{"gitId":"froststein"},"content":"mark apple","lastModifiedDate":"2022-02-20"},{"lineNumber":21,"author":{"gitId":"froststein"},"content":"mark 100","lastModifiedDate":"2022-02-20"},{"lineNumber":22,"author":{"gitId":"froststein"},"content":"mark 3","lastModifiedDate":"2022-02-06"},{"lineNumber":23,"author":{"gitId":"froststein"},"content":"unmark -1","lastModifiedDate":"2022-02-20"},{"lineNumber":24,"author":{"gitId":"froststein"},"content":"unmark apple","lastModifiedDate":"2022-02-20"},{"lineNumber":25,"author":{"gitId":"froststein"},"content":"unmark 100","lastModifiedDate":"2022-02-20"},{"lineNumber":26,"author":{"gitId":"froststein"},"content":"unmark 3","lastModifiedDate":"2022-02-20"},{"lineNumber":27,"author":{"gitId":"froststein"},"content":"delete -1","lastModifiedDate":"2022-02-11"},{"lineNumber":28,"author":{"gitId":"froststein"},"content":"delete apple","lastModifiedDate":"2022-02-11"},{"lineNumber":29,"author":{"gitId":"froststein"},"content":"delete 100","lastModifiedDate":"2022-02-11"},{"lineNumber":30,"author":{"gitId":"froststein"},"content":"delete 1","lastModifiedDate":"2022-02-11"},{"lineNumber":31,"author":{"gitId":"froststein"},"content":"find","lastModifiedDate":"2022-02-20"},{"lineNumber":32,"author":{"gitId":"froststein"},"content":"find something","lastModifiedDate":"2022-02-20"},{"lineNumber":33,"author":{"gitId":"froststein"},"content":"find CS","lastModifiedDate":"2022-02-20"},{"lineNumber":34,"author":{"gitId":"froststein"},"content":"find ^\u0026*","lastModifiedDate":"2022-02-20"},{"lineNumber":35,"author":{"gitId":"froststein"},"content":"list","lastModifiedDate":"2022-02-11"},{"lineNumber":36,"author":{"gitId":"froststein"},"content":"bye","lastModifiedDate":"2022-01-30"}],"authorContributionMap":{"froststein":36}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"froststein"},"content":"javac  -cp ..\\src\\main\\java\\duke -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java ..\\src\\main\\java\\duke\\exceptions\\*.java ..\\src\\main\\java\\duke\\task\\*.java ..\\src\\main\\java\\duke\\common\\*.java","lastModifiedDate":"2022-02-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"froststein"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2022-02-06"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"froststein"},"content":"del localStorage.csv","lastModifiedDate":"2022-02-17"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":22,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-17"},{"lineNumber":25,"author":{"gitId":"froststein"},"content":"","lastModifiedDate":"2022-02-17"}],"authorContributionMap":{"-":20,"froststein":5}}]
